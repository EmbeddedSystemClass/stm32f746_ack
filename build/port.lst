ARM GAS  /tmp/ccog5mGX.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"port.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskExitError,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	prvTaskExitError:
  25              	.LFB6:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  *----------------------------------------------------------*/
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Scheduler includes. */
ARM GAS  /tmp/ccog5mGX.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #include "FreeRTOS.h"
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #include "task.h"
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #ifndef __VFP_FP__
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #else
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	as the core. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to manipulate the core.  Registers first... */
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* ...then bits in the registers. */
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to check the validity of an interrupt priority. */
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to manipulate the VFP. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portFPCCR							( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control re
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portASPEN_AND_LSPEN_BITS			( 0x3UL << 30UL )
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to set up the initial stack. */
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portINITIAL_XPSR					( 0x01000000 )
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portINITIAL_EXC_RETURN				( 0xfffffffd )
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* The systick is a 24-bit counter. */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
ARM GAS  /tmp/ccog5mGX.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portSTART_ADDRESS_MASK		( ( StackType_t ) 0xfffffffeUL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** occurred while the SysTick counter is stopped during tickless idle
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** calculations. */
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** debugger. */
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #ifdef configTASK_RETURN_ADDRESS
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #else
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * file is weak to allow application writers to change the timer used to
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * generate the tick interrupt.
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortSetupTimerInterrupt( void );
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Exception handlers.
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortSysTickHandler( void );
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Function to enable the VFP.
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static void vPortEnableVFP( void ) __attribute__ (( naked ));
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvTaskExitError( void );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** variable. */
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * The number of SysTick increments that make up one tick period.
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
ARM GAS  /tmp/ccog5mGX.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * 24 bit resolution of the SysTick timer.
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * power functionality only.
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if( configASSERT_DEFINED == 1 )
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configASSERT_DEFINED */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * See header file for description.
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	interrupt. */
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	of interrupts, and to ensure alignment. */
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack--;
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack--;
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack--;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Save code space by skipping register initialisation. */
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* A save method is being used that requires each task to maintain its
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	own exec return value. */
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack--;
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*pxTopOfStack = portINITIAL_EXC_RETURN;
ARM GAS  /tmp/ccog5mGX.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	return pxTopOfStack;
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvTaskExitError( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
  27              		.loc 1 212 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** volatile uint32_t ulDummy = 0;
  35              		.loc 1 213 0
  36 0002 0023     		movs	r3, #0
  37 0004 0193     		str	r3, [sp, #4]
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	should instead call vTaskDelete( NULL ).
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	defined, then stop here so application writers can catch the error. */
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
  38              		.loc 1 221 0
  39 0006 0F4B     		ldr	r3, .L6
  40 0008 1B68     		ldr	r3, [r3]
  41 000a B3F1FF3F 		cmp	r3, #-1
  42 000e 0AD0     		beq	.L2
  43              	.LBB27:
  44              	.LBB28:
  45              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
ARM GAS  /tmp/ccog5mGX.s 			page 6


  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/ccog5mGX.s 			page 7


  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
ARM GAS  /tmp/ccog5mGX.s 			page 8


 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
ARM GAS  /tmp/ccog5mGX.s 			page 9


 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
  46              		.loc 2 195 0
  47              		.syntax unified
  48              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  49 0010 4FF05003 			mov r3, #80												
  50 0014 72B6     		cpsid i													
  51 0016 83F31188 		msr basepri, r3											
  52 001a BFF36F8F 		isb														
  53 001e BFF34F8F 		dsb														
  54 0022 62B6     		cpsie i													
  55              	
  56              	@ 0 "" 2
  57              	.LVL0:
  58              		.thumb
  59              		.syntax unified
  60              	.L3:
  61 0024 FEE7     		b	.L3
  62              	.L2:
  63              	.LBE28:
  64              	.LBE27:
  65              	.LBB29:
  66              	.LBB30:
  67              		.syntax unified
  68              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  69 0026 4FF05003 			mov r3, #80												
  70 002a 72B6     		cpsid i													
  71 002c 83F31188 		msr basepri, r3											
  72 0030 BFF36F8F 		isb														
  73 0034 BFF34F8F 		dsb														
  74 0038 62B6     		cpsie i													
  75              	
  76              	@ 0 "" 2
  77              	.LVL1:
  78              		.thumb
  79              		.syntax unified
  80              	.L4:
  81              	.LBE30:
  82              	.LBE29:
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portDISABLE_INTERRUPTS();
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	while( ulDummy == 0 )
  83              		.loc 1 223 0 discriminator 1
  84 003a 019B     		ldr	r3, [sp, #4]
  85 003c 002B     		cmp	r3, #0
  86 003e FCD0     		beq	.L4
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		started to remove a compiler warning about the function being defined
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		about code appearing after this function is called - making ulDummy
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		volatile makes the compiler think the function could return and
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		after it. */
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
ARM GAS  /tmp/ccog5mGX.s 			page 10


  87              		.loc 1 233 0
  88 0040 02B0     		add	sp, sp, #8
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 0
  91              		@ sp needed
  92 0042 7047     		bx	lr
  93              	.L7:
  94              		.align	2
  95              	.L6:
  96 0044 00000000 		.word	.LANCHOR0
  97              		.cfi_endproc
  98              	.LFE6:
 100              		.section	.text.prvPortStartFirstTask,"ax",%progbits
 101              		.align	1
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu fpv5-sp-d16
 107              	prvPortStartFirstTask:
 108              	.LFB8:
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortSVCHandler( void )
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	__asm volatile (
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	isb								\n"
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	mov r0, #0 						\n"
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	msr	basepri, r0					\n"
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	bx r14							\n"
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"									\n"
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	.align 4						\n"
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				);
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvPortStartFirstTask( void )
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 109              		.loc 1 256 0
 110              		.cfi_startproc
 111              		@ Naked Function: prologue and epilogue provided by programmer.
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Start the first task.  This also clears the bit that indicates the FPU is
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	in use in case the FPU was used before the scheduler was started - which
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	would otherwise result in the unnecessary leaving of space in the SVC stack
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	for lazy saving of FPU registers. */
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	__asm volatile(
 114              		.loc 1 261 0
 115              		.syntax unified
 116              	@ 261 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c" 1
 117 0000 0848     		 ldr r0, =0xE000ED08 	
ARM GAS  /tmp/ccog5mGX.s 			page 11


 118 0002 0068     	 ldr r0, [r0] 			
 119 0004 0068     	 ldr r0, [r0] 			
 120 0006 80F30888 	 msr msp, r0			
 121 000a 4FF00000 	 mov r0, #0			
 122 000e 80F31488 	 msr control, r0		
 123 0012 62B6     	 cpsie i				
 124 0014 61B6     	 cpsie f				
 125 0016 BFF34F8F 	 dsb					
 126 001a BFF36F8F 	 isb					
 127 001e 00DF     	 svc 0					
 128 0020 00BF     	 nop					
 129              	
 130              	@ 0 "" 2
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" ldr r0, [r0] 			\n"
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" ldr r0, [r0] 			\n"
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" mov r0, #0			\n" /* Clear the bit that indicates the FPU is in use, see comment above. */
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" msr control, r0		\n"
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" cpsie f				\n"
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" dsb					\n"
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" isb					\n"
 272:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" svc 0					\n" /* System call to start first task. */
 273:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					" nop					\n"
 274:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				);
 275:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 131              		.loc 1 275 0
 132              		.thumb
 133              		.syntax unified
 134              		.cfi_endproc
 135              	.LFE8:
 137 0022 0000     		.section	.text.vPortEnableVFP,"ax",%progbits
 138              		.align	1
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv5-sp-d16
 144              	vPortEnableVFP:
 145              	.LFB16:
 276:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 277:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 278:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 279:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * See header file for description.
 280:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 281:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** BaseType_t xPortStartScheduler( void )
 282:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 283:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 284:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 285:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 286:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#if( configASSERT_DEFINED == 1 )
 288:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 289:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		volatile uint32_t ulOriginalPriority;
 290:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 291:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 292:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
ARM GAS  /tmp/ccog5mGX.s 			page 12


 293:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 294:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		functions can be called.  ISR safe functions are those that end in
 295:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 296:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 297:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 298:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 299:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 300:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Determine the number of priority bits available.  First write to all
 302:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		possible bits. */
 303:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 304:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Read the value back to see how many bits stuck. */
 306:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 307:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 308:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Use the same mask on the maximum system call priority. */
 309:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 310:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 312:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		of bits read back. */
 313:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 314:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 315:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 316:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			ulMaxPRIGROUPValue--;
 317:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 318:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 319:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		#ifdef __NVIC_PRIO_BITS
 321:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 322:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Check the CMSIS configuration that defines the number of
 323:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			priority bits matches the number of priority bits actually queried
 324:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			from the hardware. */
 325:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 326:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 327:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		#ifdef configPRIO_BITS
 330:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 331:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 332:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			priority bits matches the number of priority bits actually queried
 333:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			from the hardware. */
 334:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 335:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 336:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		#endif
 337:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 338:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 339:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		register. */
 340:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 341:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 342:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 343:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 344:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		value. */
 345:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 346:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 347:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#endif /* conifgASSERT_DEFINED */
 348:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
ARM GAS  /tmp/ccog5mGX.s 			page 13


 350:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 351:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 352:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 354:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	here already. */
 355:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	vPortSetupTimerInterrupt();
 356:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 358:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uxCriticalNesting = 0;
 359:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 361:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	vPortEnableVFP();
 362:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Lazy save always. */
 364:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 365:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Start the first task. */
 367:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	prvPortStartFirstTask();
 368:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 370:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	exit error function to prevent compiler warnings about a static function
 371:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	not being called in the case that the application writer overrides this
 372:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 373:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 374:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	symbol. */
 375:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	vTaskSwitchContext();
 376:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	prvTaskExitError();
 377:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Should not get here! */
 379:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	return 0;
 380:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 381:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 382:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortEndScheduler( void )
 384:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 385:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 386:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	Artificially force an assert. */
 387:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 388:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 389:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 390:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortEnterCritical( void )
 392:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 393:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portDISABLE_INTERRUPTS();
 394:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uxCriticalNesting++;
 395:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 396:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 397:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 398:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 399:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 400:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	assert function also uses a critical section. */
 401:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	if( uxCriticalNesting == 1 )
 402:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 403:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 404:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 405:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 406:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccog5mGX.s 			page 14


 407:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortExitCritical( void )
 409:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 410:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	configASSERT( uxCriticalNesting );
 411:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uxCriticalNesting--;
 412:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	if( uxCriticalNesting == 0 )
 413:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 414:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		portENABLE_INTERRUPTS();
 415:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 416:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 417:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 418:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortPendSVHandler( void )
 420:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 421:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* This is a naked function. */
 422:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	__asm volatile
 424:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	(
 425:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	mrs r0, psp							\n"
 426:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	isb									\n"
 427:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 428:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 429:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldr	r2, [r3]						\n"
 430:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 431:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 432:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	it eq								\n"
 433:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 434:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 435:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 436:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 437:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 438:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	stmdb sp!, {r0, r3}					\n"
 439:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	mov r0, %0 							\n"
 440:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	cpsid i								\n" /* Errata workaround. */
 441:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	msr basepri, r0						\n"
 442:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	dsb									\n"
 443:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	isb									\n"
 444:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	cpsie i								\n" /* Errata workaround. */
 445:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	bl vTaskSwitchContext				\n"
 446:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	mov r0, #0							\n"
 447:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	msr basepri, r0						\n"
 448:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldmia sp!, {r0, r3}					\n"
 449:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 450:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 451:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldr r0, [r1]						\n"
 452:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 453:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 454:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 455:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 456:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	it eq								\n"
 457:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 458:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 459:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	msr psp, r0							\n"
 460:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	isb									\n"
 461:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 462:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 463:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
ARM GAS  /tmp/ccog5mGX.s 			page 15


 464:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"			push { r14 }				\n"
 465:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"			pop { pc }					\n"
 466:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		#endif
 467:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#endif
 468:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 469:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	bx r14								\n"
 470:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"										\n"
 471:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"	.align 4							\n"
 472:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 473:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 474:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	);
 475:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 476:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 477:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortSysTickHandler( void )
 479:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 480:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 481:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 482:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	save and then restore the interrupt mask value as its value is already
 483:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	known. */
 484:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portDISABLE_INTERRUPTS();
 485:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 486:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Increment the RTOS tick. */
 487:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 488:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 489:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* A context switch is required.  Context switching is performed in
 490:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 491:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 492:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 493:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 494:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portENABLE_INTERRUPTS();
 495:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 496:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 497:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 499:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 501:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 502:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 503:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	TickType_t xModifiableIdleTime;
 504:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 506:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 507:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 508:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 509:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 510:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 512:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 513:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 514:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		kernel with respect to calendar time. */
 515:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 516:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 518:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		tick periods.  -1 is used because this code will execute part way
 519:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		through one of the tick periods. */
 520:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
ARM GAS  /tmp/ccog5mGX.s 			page 16


 521:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 522:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 523:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 524:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 525:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 527:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 528:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 529:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		__asm volatile( "dsb" );
 530:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		__asm volatile( "isb" );
 531:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 533:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		to be unsuspended then abandon the low power entry. */
 534:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 535:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 536:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Restart from whatever is left in the count register to complete
 537:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			this tick period. */
 538:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 539:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 540:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Restart SysTick. */
 541:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 542:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Reset the reload register to the value required for normal tick
 544:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			periods. */
 545:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 546:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 548:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			above. */
 549:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 550:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 551:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		else
 552:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 553:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Set the new reload value. */
 554:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 555:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 556:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 557:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			zero. */
 558:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 559:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Restart SysTick. */
 561:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 562:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 564:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 565:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 566:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			should not be executed again.  However, the original expected idle
 567:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 568:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 569:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 570:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			if( xModifiableIdleTime > 0 )
 571:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			{
 572:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				__asm volatile( "dsb" ::: "memory" );
 573:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				__asm volatile( "wfi" );
 574:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				__asm volatile( "isb" );
 575:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			}
 576:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 577:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
ARM GAS  /tmp/ccog5mGX.s 			page 17


 578:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 579:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			out of sleep mode to execute immediately.  see comments above
 580:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			__disable_interrupt() call above. */
 581:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 582:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			__asm volatile( "dsb" );
 583:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			__asm volatile( "isb" );
 584:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 585:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 586:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			and interrupts that execute while the clock is stopped will increase
 587:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 588:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			time. */
 589:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 590:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			__asm volatile( "dsb" );
 591:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			__asm volatile( "isb" );
 592:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 593:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Disable the SysTick clock without reading the
 594:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 595:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 596:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 597:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 598:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			drift of the time maintained by the kernel with respect to calendar
 599:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			time*/
 600:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 601:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 602:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 603:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			been set back to the current reload value (the reload back being
 604:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 605:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 606:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			must have brought the system out of sleep mode). */
 607:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				uint32_t ulCalculatedLoadValue;
 610:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 611:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
 612:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				reloaded with ulReloadValue.  Reset the
 613:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 614:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				period. */
 615:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 616:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 617:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 618:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				underflowed because the post sleep hook did something
 619:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				that took too long. */
 620:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 621:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				{
 622:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 623:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				}
 624:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 625:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 626:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* As the pending tick will be processed as soon as this
 628:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				function exits, the tick value maintained by the tick is stepped
 629:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				forward by one less than the time spent waiting. */
 630:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 631:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			}
 632:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			else
 633:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			{
 634:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* Something other than the tick interrupt ended the sleep.
ARM GAS  /tmp/ccog5mGX.s 			page 18


 635:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 636:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				periods (not the ulReload value which accounted for part
 637:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				ticks). */
 638:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 639:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* How many complete tick periods passed while the processor
 641:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				was waiting? */
 642:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 643:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 644:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 645:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				period remains. */
 646:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 647:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			}
 648:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 650:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 651:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			value. */
 652:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 653:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 654:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 655:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 656:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 657:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Exit with interrpts enabled. */
 658:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 659:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 660:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 661:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 662:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 664:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 666:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 667:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  * frequency.
 668:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 669:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 670:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 671:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 672:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 673:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 674:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 675:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 676:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 677:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 679:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 680:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Stop and clear the SysTick. */
 681:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
 682:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 683:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 685:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 686:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 687:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 688:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 689:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 690:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /* This is a naked function. */
 691:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** static void vPortEnableVFP( void )
ARM GAS  /tmp/ccog5mGX.s 			page 19


 692:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** {
 146              		.loc 1 692 0
 147              		.cfi_startproc
 148              		@ Naked Function: prologue and epilogue provided by programmer.
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 693:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	__asm volatile
 151              		.loc 1 693 0
 152              		.syntax unified
 153              	@ 693 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c" 1
 154 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 155 0004 0168     		ldr r1, [r0]				
 156              									
 157 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 158 000a 0160     		str r1, [r0]				
 159 000c 7047     		bx r14						
 160              	@ 0 "" 2
 694:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	(
 695:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 696:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"	ldr r1, [r0]				\n"
 697:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"								\n"
 698:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 699:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"	str r1, [r0]				\n"
 700:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		"	bx r14						"
 701:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	);
 702:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 161              		.loc 1 702 0
 162              		.thumb
 163              		.syntax unified
 164              		.cfi_endproc
 165              	.LFE16:
 167 000e 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
 168              		.align	1
 169              		.global	pxPortInitialiseStack
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv5-sp-d16
 175              	pxPortInitialiseStack:
 176              	.LFB5:
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 177              		.loc 1 182 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              		@ link register save eliminated.
 182              	.LVL2:
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack--;
 183              		.loc 1 190 0
 184 0000 4FF08073 		mov	r3, #16777216
 185 0004 40F8043C 		str	r3, [r0, #-4]
 186              	.LVL3:
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	pxTopOfStack--;
 187              		.loc 1 192 0
 188 0008 21F00101 		bic	r1, r1, #1
 189              	.LVL4:
 190 000c 40F8081C 		str	r1, [r0, #-8]
ARM GAS  /tmp/ccog5mGX.s 			page 20


 191              	.LVL5:
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 192              		.loc 1 194 0
 193 0010 054B     		ldr	r3, .L11
 194 0012 40F80C3C 		str	r3, [r0, #-12]
 195              	.LVL6:
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 196              		.loc 1 198 0
 197 0016 40F8202C 		str	r2, [r0, #-32]
 198              	.LVL7:
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 199              		.loc 1 203 0
 200 001a 6FF00203 		mvn	r3, #2
 201 001e 40F8243C 		str	r3, [r0, #-36]
 202              	.LVL8:
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 203              		.loc 1 208 0
 204 0022 4438     		subs	r0, r0, #68
 205              	.LVL9:
 206 0024 7047     		bx	lr
 207              	.L12:
 208 0026 00BF     		.align	2
 209              	.L11:
 210 0028 00000000 		.word	prvTaskExitError
 211              		.cfi_endproc
 212              	.LFE5:
 214              		.section	.text.SVC_Handler,"ax",%progbits
 215              		.align	1
 216              		.global	SVC_Handler
 217              		.syntax unified
 218              		.thumb
 219              		.thumb_func
 220              		.fpu fpv5-sp-d16
 222              	SVC_Handler:
 223              	.LFB7:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	__asm volatile (
 224              		.loc 1 237 0
 225              		.cfi_startproc
 226              		@ Naked Function: prologue and epilogue provided by programmer.
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 229              		.loc 1 238 0
 230              		.syntax unified
 231              	@ 238 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c" 1
 232 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 233 0002 1968     		ldr r1, [r3]					
 234 0004 0868     		ldr r0, [r1]					
 235 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 236 000a 80F30988 		msr psp, r0						
 237 000e BFF36F8F 		isb								
 238 0012 4FF00000 		mov r0, #0 						
 239 0016 80F31188 		msr	basepri, r0					
 240 001a 7047     		bx r14							
 241              										
 242 001c AFF30080 		.align 4						
 243 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
ARM GAS  /tmp/ccog5mGX.s 			page 21


 244              	
 245              	@ 0 "" 2
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 246              		.loc 1 252 0
 247              		.thumb
 248              		.syntax unified
 249              		.cfi_endproc
 250              	.LFE7:
 252              		.section	.text.vPortEndScheduler,"ax",%progbits
 253              		.align	1
 254              		.global	vPortEndScheduler
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu fpv5-sp-d16
 260              	vPortEndScheduler:
 261              	.LFB10:
 384:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 262              		.loc 1 384 0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266              		@ link register save eliminated.
 387:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 267              		.loc 1 387 0
 268 0000 084B     		ldr	r3, .L17
 269 0002 1B68     		ldr	r3, [r3]
 270 0004 B3F57A7F 		cmp	r3, #1000
 271 0008 0AD0     		beq	.L14
 272              	.LBB31:
 273              	.LBB32:
 274              		.loc 2 195 0
 275              		.syntax unified
 276              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 277 000a 4FF05003 			mov r3, #80												
 278 000e 72B6     		cpsid i													
 279 0010 83F31188 		msr basepri, r3											
 280 0014 BFF36F8F 		isb														
 281 0018 BFF34F8F 		dsb														
 282 001c 62B6     		cpsie i													
 283              	
 284              	@ 0 "" 2
 285              	.LVL10:
 286              		.thumb
 287              		.syntax unified
 288              	.L16:
 289 001e FEE7     		b	.L16
 290              	.L14:
 291              	.LBE32:
 292              	.LBE31:
 388:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 293              		.loc 1 388 0
 294 0020 7047     		bx	lr
 295              	.L18:
 296 0022 00BF     		.align	2
 297              	.L17:
 298 0024 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccog5mGX.s 			page 22


 299              		.cfi_endproc
 300              	.LFE10:
 302              		.section	.text.vPortEnterCritical,"ax",%progbits
 303              		.align	1
 304              		.global	vPortEnterCritical
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 308              		.fpu fpv5-sp-d16
 310              	vPortEnterCritical:
 311              	.LFB11:
 392:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portDISABLE_INTERRUPTS();
 312              		.loc 1 392 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 317              	.LBB33:
 318              	.LBB34:
 319              		.loc 2 195 0
 320              		.syntax unified
 321              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 322 0000 4FF05003 			mov r3, #80												
 323 0004 72B6     		cpsid i													
 324 0006 83F31188 		msr basepri, r3											
 325 000a BFF36F8F 		isb														
 326 000e BFF34F8F 		dsb														
 327 0012 62B6     		cpsie i													
 328              	
 329              	@ 0 "" 2
 330              		.thumb
 331              		.syntax unified
 332              	.LBE34:
 333              	.LBE33:
 394:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 334              		.loc 1 394 0
 335 0014 0B4A     		ldr	r2, .L23
 336 0016 1368     		ldr	r3, [r2]
 337 0018 0133     		adds	r3, r3, #1
 338 001a 1360     		str	r3, [r2]
 401:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 339              		.loc 1 401 0
 340 001c 012B     		cmp	r3, #1
 341 001e 00D0     		beq	.L22
 342              	.L19:
 405:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 343              		.loc 1 405 0
 344 0020 7047     		bx	lr
 345              	.L22:
 403:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 346              		.loc 1 403 0
 347 0022 094B     		ldr	r3, .L23+4
 348 0024 1B68     		ldr	r3, [r3]
 349 0026 13F0FF0F 		tst	r3, #255
 350 002a F9D0     		beq	.L19
 351              	.LBB35:
 352              	.LBB36:
ARM GAS  /tmp/ccog5mGX.s 			page 23


 353              		.loc 2 195 0
 354              		.syntax unified
 355              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 356 002c 4FF05003 			mov r3, #80												
 357 0030 72B6     		cpsid i													
 358 0032 83F31188 		msr basepri, r3											
 359 0036 BFF36F8F 		isb														
 360 003a BFF34F8F 		dsb														
 361 003e 62B6     		cpsie i													
 362              	
 363              	@ 0 "" 2
 364              	.LVL11:
 365              		.thumb
 366              		.syntax unified
 367              	.L21:
 368 0040 FEE7     		b	.L21
 369              	.L24:
 370 0042 00BF     		.align	2
 371              	.L23:
 372 0044 00000000 		.word	.LANCHOR0
 373 0048 04ED00E0 		.word	-536810236
 374              	.LBE36:
 375              	.LBE35:
 376              		.cfi_endproc
 377              	.LFE11:
 379              		.section	.text.vPortExitCritical,"ax",%progbits
 380              		.align	1
 381              		.global	vPortExitCritical
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 385              		.fpu fpv5-sp-d16
 387              	vPortExitCritical:
 388              	.LFB12:
 409:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	configASSERT( uxCriticalNesting );
 389              		.loc 1 409 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 0
 392              		@ frame_needed = 0, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 410:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uxCriticalNesting--;
 394              		.loc 1 410 0
 395 0000 0A4B     		ldr	r3, .L29
 396 0002 1B68     		ldr	r3, [r3]
 397 0004 53B9     		cbnz	r3, .L26
 398              	.LBB37:
 399              	.LBB38:
 400              		.loc 2 195 0
 401              		.syntax unified
 402              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 403 0006 4FF05003 			mov r3, #80												
 404 000a 72B6     		cpsid i													
 405 000c 83F31188 		msr basepri, r3											
 406 0010 BFF36F8F 		isb														
 407 0014 BFF34F8F 		dsb														
 408 0018 62B6     		cpsie i													
 409              	
ARM GAS  /tmp/ccog5mGX.s 			page 24


 410              	@ 0 "" 2
 411              	.LVL12:
 412              		.thumb
 413              		.syntax unified
 414              	.L27:
 415 001a FEE7     		b	.L27
 416              	.L26:
 417              	.LBE38:
 418              	.LBE37:
 411:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	if( uxCriticalNesting == 0 )
 419              		.loc 1 411 0
 420 001c 013B     		subs	r3, r3, #1
 421 001e 034A     		ldr	r2, .L29
 422 0020 1360     		str	r3, [r2]
 412:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 423              		.loc 1 412 0
 424 0022 0BB9     		cbnz	r3, .L25
 425              	.LVL13:
 426              	.LBB39:
 427              	.LBB40:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0											\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %1, %2												\n"	\
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %1											\n" \
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	warnings. */
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return ulOriginalBASEPRI;
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
ARM GAS  /tmp/ccog5mGX.s 			page 25


 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 428              		.loc 2 233 0
 429              		.syntax unified
 430              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 431 0024 83F31188 			msr basepri, r3	
 432              	@ 0 "" 2
 433              	.LVL14:
 434              		.thumb
 435              		.syntax unified
 436              	.L25:
 437              	.LBE40:
 438              	.LBE39:
 416:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 439              		.loc 1 416 0
 440 0028 7047     		bx	lr
 441              	.L30:
 442 002a 00BF     		.align	2
 443              	.L29:
 444 002c 00000000 		.word	.LANCHOR0
 445              		.cfi_endproc
 446              	.LFE12:
 448              		.section	.text.PendSV_Handler,"ax",%progbits
 449              		.align	1
 450              		.global	PendSV_Handler
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
 454              		.fpu fpv5-sp-d16
 456              	PendSV_Handler:
 457              	.LFB13:
 420:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* This is a naked function. */
 458              		.loc 1 420 0
 459              		.cfi_startproc
 460              		@ Naked Function: prologue and epilogue provided by programmer.
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 423:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	(
 463              		.loc 1 423 0
 464              		.syntax unified
 465              	@ 423 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c" 1
 466 0000 EFF30980 			mrs r0, psp							
 467 0004 BFF36F8F 		isb									
 468              											
 469 0008 154B     		ldr	r3, pxCurrentTCBConst			
 470 000a 1A68     		ldr	r2, [r3]						
 471              											
 472 000c 1EF0100F 		tst r14, #0x10						
 473 0010 08BF     		it eq								
 474 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 475              											
 476 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 477 001a 1060     		str r0, [r2]						
 478              											
 479 001c 2DE90900 		stmdb sp!, {r0, r3}					
 480 0020 4FF05000 		mov r0, #80 							
 481 0024 72B6     		cpsid i								
 482 0026 80F31188 		msr basepri, r0						
ARM GAS  /tmp/ccog5mGX.s 			page 26


 483 002a BFF34F8F 		dsb									
 484 002e BFF36F8F 		isb									
 485 0032 62B6     		cpsie i								
 486 0034 FFF7FEFF 		bl vTaskSwitchContext				
 487 0038 4FF00000 		mov r0, #0							
 488 003c 80F31188 		msr basepri, r0						
 489 0040 09BC     		ldmia sp!, {r0, r3}					
 490              											
 491 0042 1968     		ldr r1, [r3]						
 492 0044 0868     		ldr r0, [r1]						
 493              											
 494 0046 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 495              											
 496 004a 1EF0100F 		tst r14, #0x10						
 497 004e 08BF     		it eq								
 498 0050 B0EC108A 		vldmiaeq r0!, {s16-s31}				
 499              											
 500 0054 80F30988 		msr psp, r0							
 501 0058 BFF36F8F 		isb									
 502              											
 503              											
 504 005c 7047     		bx r14								
 505              											
 506 005e 00BF     		.align 4							
 507 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 508              	
 509              	@ 0 "" 2
 475:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 510              		.loc 1 475 0
 511              		.thumb
 512              		.syntax unified
 513              		.cfi_endproc
 514              	.LFE13:
 516              		.section	.text.SysTick_Handler,"ax",%progbits
 517              		.align	1
 518              		.global	SysTick_Handler
 519              		.syntax unified
 520              		.thumb
 521              		.thumb_func
 522              		.fpu fpv5-sp-d16
 524              	SysTick_Handler:
 525              	.LFB14:
 479:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 526              		.loc 1 479 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 0
 529              		@ frame_needed = 0, uses_anonymous_args = 0
 530 0000 08B5     		push	{r3, lr}
 531              	.LCFI2:
 532              		.cfi_def_cfa_offset 8
 533              		.cfi_offset 3, -8
 534              		.cfi_offset 14, -4
 535              	.LBB41:
 536              	.LBB42:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 537              		.loc 2 195 0
 538              		.syntax unified
ARM GAS  /tmp/ccog5mGX.s 			page 27


 539              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 540 0002 4FF05003 			mov r3, #80												
 541 0006 72B6     		cpsid i													
 542 0008 83F31188 		msr basepri, r3											
 543 000c BFF36F8F 		isb														
 544 0010 BFF34F8F 		dsb														
 545 0014 62B6     		cpsie i													
 546              	
 547              	@ 0 "" 2
 548              		.thumb
 549              		.syntax unified
 550              	.LBE42:
 551              	.LBE41:
 487:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 552              		.loc 1 487 0
 553 0016 FFF7FEFF 		bl	xTaskIncrementTick
 554              	.LVL15:
 555 001a 18B1     		cbz	r0, .L33
 491:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 556              		.loc 1 491 0
 557 001c 034B     		ldr	r3, .L35
 558 001e 4FF08052 		mov	r2, #268435456
 559 0022 1A60     		str	r2, [r3]
 560              	.L33:
 561              	.LVL16:
 562              	.LBB43:
 563              	.LBB44:
 564              		.loc 2 233 0
 565 0024 0023     		movs	r3, #0
 566              		.syntax unified
 567              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 568 0026 83F31188 			msr basepri, r3	
 569              	@ 0 "" 2
 570              	.LVL17:
 571              		.thumb
 572              		.syntax unified
 573              	.LBE44:
 574              	.LBE43:
 495:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 575              		.loc 1 495 0
 576 002a 08BD     		pop	{r3, pc}
 577              	.L36:
 578              		.align	2
 579              	.L35:
 580 002c 04ED00E0 		.word	-536810236
 581              		.cfi_endproc
 582              	.LFE14:
 584              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 585              		.align	1
 586              		.weak	vPortSetupTimerInterrupt
 587              		.syntax unified
 588              		.thumb
 589              		.thumb_func
 590              		.fpu fpv5-sp-d16
 592              	vPortSetupTimerInterrupt:
 593              	.LFB15:
 670:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
ARM GAS  /tmp/ccog5mGX.s 			page 28


 594              		.loc 1 670 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 681:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 599              		.loc 1 681 0
 600 0000 084A     		ldr	r2, .L38
 601 0002 0023     		movs	r3, #0
 602 0004 1360     		str	r3, [r2]
 682:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 603              		.loc 1 682 0
 604 0006 0849     		ldr	r1, .L38+4
 605 0008 0B60     		str	r3, [r1]
 685:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 606              		.loc 1 685 0
 607 000a 084B     		ldr	r3, .L38+8
 608 000c 1B68     		ldr	r3, [r3]
 609 000e 0849     		ldr	r1, .L38+12
 610 0010 A1FB0313 		umull	r1, r3, r1, r3
 611 0014 9B09     		lsrs	r3, r3, #6
 612 0016 013B     		subs	r3, r3, #1
 613 0018 0649     		ldr	r1, .L38+16
 614 001a 0B60     		str	r3, [r1]
 686:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** }
 615              		.loc 1 686 0
 616 001c 0723     		movs	r3, #7
 617 001e 1360     		str	r3, [r2]
 687:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 618              		.loc 1 687 0
 619 0020 7047     		bx	lr
 620              	.L39:
 621 0022 00BF     		.align	2
 622              	.L38:
 623 0024 10E000E0 		.word	-536813552
 624 0028 18E000E0 		.word	-536813544
 625 002c 00000000 		.word	SystemCoreClock
 626 0030 D34D6210 		.word	274877907
 627 0034 14E000E0 		.word	-536813548
 628              		.cfi_endproc
 629              	.LFE15:
 631              		.section	.text.xPortStartScheduler,"ax",%progbits
 632              		.align	1
 633              		.global	xPortStartScheduler
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv5-sp-d16
 639              	xPortStartScheduler:
 640              	.LFB9:
 282:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 641              		.loc 1 282 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 8
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645 0000 10B5     		push	{r4, lr}
 646              	.LCFI3:
ARM GAS  /tmp/ccog5mGX.s 			page 29


 647              		.cfi_def_cfa_offset 8
 648              		.cfi_offset 4, -8
 649              		.cfi_offset 14, -4
 650 0002 82B0     		sub	sp, sp, #8
 651              	.LCFI4:
 652              		.cfi_def_cfa_offset 16
 653              	.LVL18:
 654              	.LBB45:
 299:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 655              		.loc 1 299 0
 656 0004 2C4B     		ldr	r3, .L46
 657 0006 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 658 0008 D2B2     		uxtb	r2, r2
 659 000a 0192     		str	r2, [sp, #4]
 303:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 660              		.loc 1 303 0
 661 000c FF22     		movs	r2, #255
 662 000e 1A70     		strb	r2, [r3]
 306:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 663              		.loc 1 306 0
 664 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 665 0012 DBB2     		uxtb	r3, r3
 666 0014 8DF80330 		strb	r3, [sp, #3]
 309:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 667              		.loc 1 309 0
 668 0018 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 669 001c 03F05003 		and	r3, r3, #80
 670 0020 264A     		ldr	r2, .L46+4
 671 0022 1370     		strb	r3, [r2]
 313:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 672              		.loc 1 313 0
 673 0024 264B     		ldr	r3, .L46+8
 674 0026 0722     		movs	r2, #7
 675 0028 1A60     		str	r2, [r3]
 314:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 676              		.loc 1 314 0
 677 002a 09E0     		b	.L41
 678              	.L42:
 316:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 679              		.loc 1 316 0
 680 002c 244A     		ldr	r2, .L46+8
 681 002e 1368     		ldr	r3, [r2]
 682 0030 013B     		subs	r3, r3, #1
 683 0032 1360     		str	r3, [r2]
 317:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 684              		.loc 1 317 0
 685 0034 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 686 0038 5B00     		lsls	r3, r3, #1
 687 003a DBB2     		uxtb	r3, r3
 688 003c 8DF80330 		strb	r3, [sp, #3]
 689              	.L41:
 314:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 690              		.loc 1 314 0
 691 0040 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 692 0044 13F0800F 		tst	r3, #128
 693 0048 F0D1     		bne	.L42
 334:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
ARM GAS  /tmp/ccog5mGX.s 			page 30


 694              		.loc 1 334 0
 695 004a 1D4B     		ldr	r3, .L46+8
 696 004c 1B68     		ldr	r3, [r3]
 697 004e 032B     		cmp	r3, #3
 698 0050 0AD0     		beq	.L43
 699              	.LBB46:
 700              	.LBB47:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 701              		.loc 2 195 0
 702              		.syntax unified
 703              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 704 0052 4FF05003 			mov r3, #80												
 705 0056 72B6     		cpsid i													
 706 0058 83F31188 		msr basepri, r3											
 707 005c BFF36F8F 		isb														
 708 0060 BFF34F8F 		dsb														
 709 0064 62B6     		cpsie i													
 710              	
 711              	@ 0 "" 2
 712              	.LVL19:
 713              		.thumb
 714              		.syntax unified
 715              	.L44:
 716 0066 FEE7     		b	.L44
 717              	.L43:
 718              	.LBE47:
 719              	.LBE46:
 340:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 720              		.loc 1 340 0
 721 0068 1B02     		lsls	r3, r3, #8
 341:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 722              		.loc 1 341 0
 723 006a 03F4E063 		and	r3, r3, #1792
 724 006e 144A     		ldr	r2, .L46+8
 725 0070 1360     		str	r3, [r2]
 345:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 726              		.loc 1 345 0
 727 0072 019B     		ldr	r3, [sp, #4]
 728 0074 DBB2     		uxtb	r3, r3
 729 0076 104A     		ldr	r2, .L46
 730 0078 1370     		strb	r3, [r2]
 731              	.LBE45:
 350:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 732              		.loc 1 350 0
 733 007a 124B     		ldr	r3, .L46+12
 734 007c 1A68     		ldr	r2, [r3]
 735 007e 42F47002 		orr	r2, r2, #15728640
 736 0082 1A60     		str	r2, [r3]
 351:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 737              		.loc 1 351 0
 738 0084 1A68     		ldr	r2, [r3]
 739 0086 42F07042 		orr	r2, r2, #-268435456
 740 008a 1A60     		str	r2, [r3]
 355:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 741              		.loc 1 355 0
 742 008c FFF7FEFF 		bl	vPortSetupTimerInterrupt
 743              	.LVL20:
ARM GAS  /tmp/ccog5mGX.s 			page 31


 358:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 744              		.loc 1 358 0
 745 0090 0024     		movs	r4, #0
 746 0092 0D4B     		ldr	r3, .L46+16
 747 0094 1C60     		str	r4, [r3]
 361:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 748              		.loc 1 361 0
 749 0096 FFF7FEFF 		bl	vPortEnableVFP
 750              	.LVL21:
 364:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 751              		.loc 1 364 0
 752 009a 0C4A     		ldr	r2, .L46+20
 753 009c 1368     		ldr	r3, [r2]
 754 009e 43F04043 		orr	r3, r3, #-1073741824
 755 00a2 1360     		str	r3, [r2]
 367:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 756              		.loc 1 367 0
 757 00a4 FFF7FEFF 		bl	prvPortStartFirstTask
 758              	.LVL22:
 375:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	prvTaskExitError();
 759              		.loc 1 375 0
 760 00a8 FFF7FEFF 		bl	vTaskSwitchContext
 761              	.LVL23:
 376:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 762              		.loc 1 376 0
 763 00ac FFF7FEFF 		bl	prvTaskExitError
 764              	.LVL24:
 380:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 765              		.loc 1 380 0
 766 00b0 2046     		mov	r0, r4
 767 00b2 02B0     		add	sp, sp, #8
 768              	.LCFI5:
 769              		.cfi_def_cfa_offset 8
 770              		@ sp needed
 771 00b4 10BD     		pop	{r4, pc}
 772              	.L47:
 773 00b6 00BF     		.align	2
 774              	.L46:
 775 00b8 00E400E0 		.word	-536812544
 776 00bc 00000000 		.word	.LANCHOR1
 777 00c0 00000000 		.word	.LANCHOR2
 778 00c4 20ED00E0 		.word	-536810208
 779 00c8 00000000 		.word	.LANCHOR0
 780 00cc 34EF00E0 		.word	-536809676
 781              		.cfi_endproc
 782              	.LFE9:
 784              		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 785              		.align	1
 786              		.global	vPortValidateInterruptPriority
 787              		.syntax unified
 788              		.thumb
 789              		.thumb_func
 790              		.fpu fpv5-sp-d16
 792              	vPortValidateInterruptPriority:
 793              	.LFB17:
 703:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 704:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
ARM GAS  /tmp/ccog5mGX.s 			page 32


 705:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** #if( configASSERT_DEFINED == 1 )
 706:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 707:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	void vPortValidateInterruptPriority( void )
 708:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	{
 794              		.loc 1 708 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 0
 797              		@ frame_needed = 0, uses_anonymous_args = 0
 798              		@ link register save eliminated.
 709:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uint32_t ulCurrentInterrupt;
 710:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	uint8_t ucCurrentPriority;
 711:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 713:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 799              		.loc 1 713 0
 800              		.syntax unified
 801              	@ 713 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c" 1
 802 0000 EFF30583 		mrs r3, ipsr
 803              	@ 0 "" 2
 804              	.LVL25:
 714:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 716:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 805              		.loc 1 716 0
 806              		.thumb
 807              		.syntax unified
 808 0004 0F2B     		cmp	r3, #15
 809 0006 11D9     		bls	.L49
 717:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		{
 718:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* Look up the interrupt's priority. */
 719:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810              		.loc 1 719 0
 811 0008 124A     		ldr	r2, .L53
 812 000a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 813              	.LVL26:
 814 000c DBB2     		uxtb	r3, r3
 815              	.LVL27:
 720:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 722:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			an interrupt that has been assigned a priority above
 723:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 724:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 725:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			from interrupts that have been assigned a priority at or below
 726:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 727:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			Numerically low interrupt priority numbers represent logically high
 729:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 730:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			be set to a value equal to or numerically *higher* than
 731:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 732:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 734:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			default priority of	zero as that is the highest possible priority,
 735:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 736:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			and	therefore also guaranteed to be invalid.
 737:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 738:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
 739:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			interrupt entry is as fast and simple as possible.
ARM GAS  /tmp/ccog5mGX.s 			page 33


 740:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 741:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			The following links provide detailed information:
 742:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 743:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			http://www.freertos.org/FAQHelp.html */
 744:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 816              		.loc 1 744 0
 817 000e 124A     		ldr	r2, .L53+4
 818 0010 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 819 0012 9A42     		cmp	r2, r3
 820 0014 0AD9     		bls	.L49
 821              	.LBB48:
 822              	.LBB49:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 823              		.loc 2 195 0
 824              		.syntax unified
 825              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 826 0016 4FF05003 			mov r3, #80												
 827 001a 72B6     		cpsid i													
 828 001c 83F31188 		msr basepri, r3											
 829 0020 BFF36F8F 		isb														
 830 0024 BFF34F8F 		dsb														
 831 0028 62B6     		cpsie i													
 832              	
 833              	@ 0 "" 2
 834              	.LVL28:
 835              		.thumb
 836              		.syntax unified
 837              	.L50:
 838 002a FEE7     		b	.L50
 839              	.L49:
 840              	.LBE49:
 841              	.LBE48:
 745:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		}
 746:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 747:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 748:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		that define each interrupt's priority to be split between bits that
 749:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 750:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 751:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 752:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		this is not the case (if some bits represent a sub-priority).
 753:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 
 754:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		If the application only uses CMSIS libraries for interrupt
 755:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 756:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 757:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 758:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 759:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		of zero will result in unpredictable behaviour. */
 760:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 842              		.loc 1 760 0
 843 002c 0B4B     		ldr	r3, .L53+8
 844 002e 1B68     		ldr	r3, [r3]
 845 0030 03F4E063 		and	r3, r3, #1792
 846 0034 0A4A     		ldr	r2, .L53+12
 847 0036 1268     		ldr	r2, [r2]
 848 0038 9342     		cmp	r3, r2
 849 003a 0AD9     		bls	.L48
 850              	.LBB50:
ARM GAS  /tmp/ccog5mGX.s 			page 34


 851              	.LBB51:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 852              		.loc 2 195 0
 853              		.syntax unified
 854              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 855 003c 4FF05003 			mov r3, #80												
 856 0040 72B6     		cpsid i													
 857 0042 83F31188 		msr basepri, r3											
 858 0046 BFF36F8F 		isb														
 859 004a BFF34F8F 		dsb														
 860 004e 62B6     		cpsie i													
 861              	
 862              	@ 0 "" 2
 863              	.LVL29:
 864              		.thumb
 865              		.syntax unified
 866              	.L52:
 867 0050 FEE7     		b	.L52
 868              	.L48:
 869              	.LBE51:
 870              	.LBE50:
 761:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/port.c **** 	}
 871              		.loc 1 761 0
 872 0052 7047     		bx	lr
 873              	.L54:
 874              		.align	2
 875              	.L53:
 876 0054 F0E300E0 		.word	-536812560
 877 0058 00000000 		.word	.LANCHOR1
 878 005c 0CED00E0 		.word	-536810228
 879 0060 00000000 		.word	.LANCHOR2
 880              		.cfi_endproc
 881              	.LFE17:
 883              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
 884              		.set	.LANCHOR1,. + 0
 887              	ucMaxSysCallPriority:
 888 0000 00       		.space	1
 889              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
 890              		.align	2
 891              		.set	.LANCHOR2,. + 0
 894              	ulMaxPRIGROUPValue:
 895 0000 00000000 		.space	4
 896              		.section	.data.uxCriticalNesting,"aw",%progbits
 897              		.align	2
 898              		.set	.LANCHOR0,. + 0
 901              	uxCriticalNesting:
 902 0000 AAAAAAAA 		.word	-1431655766
 903              		.text
 904              	.Letext0:
 905              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 906              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 907              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 908              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 909              		.file 7 "Core/Inc/FreeRTOSConfig.h"
ARM GAS  /tmp/ccog5mGX.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/ccog5mGX.s:18     .text.prvTaskExitError:0000000000000000 $t
     /tmp/ccog5mGX.s:24     .text.prvTaskExitError:0000000000000000 prvTaskExitError
     /tmp/ccog5mGX.s:96     .text.prvTaskExitError:0000000000000044 $d
     /tmp/ccog5mGX.s:101    .text.prvPortStartFirstTask:0000000000000000 $t
     /tmp/ccog5mGX.s:107    .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
     /tmp/ccog5mGX.s:138    .text.vPortEnableVFP:0000000000000000 $t
     /tmp/ccog5mGX.s:144    .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
     /tmp/ccog5mGX.s:168    .text.pxPortInitialiseStack:0000000000000000 $t
     /tmp/ccog5mGX.s:175    .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
     /tmp/ccog5mGX.s:210    .text.pxPortInitialiseStack:0000000000000028 $d
     /tmp/ccog5mGX.s:215    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccog5mGX.s:222    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccog5mGX.s:243    .text.SVC_Handler:0000000000000020 pxCurrentTCBConst2
     /tmp/ccog5mGX.s:243    .text.SVC_Handler:0000000000000020 $d
     /tmp/ccog5mGX.s:253    .text.vPortEndScheduler:0000000000000000 $t
     /tmp/ccog5mGX.s:260    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
     /tmp/ccog5mGX.s:298    .text.vPortEndScheduler:0000000000000024 $d
     /tmp/ccog5mGX.s:303    .text.vPortEnterCritical:0000000000000000 $t
     /tmp/ccog5mGX.s:310    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
     /tmp/ccog5mGX.s:372    .text.vPortEnterCritical:0000000000000044 $d
     /tmp/ccog5mGX.s:380    .text.vPortExitCritical:0000000000000000 $t
     /tmp/ccog5mGX.s:387    .text.vPortExitCritical:0000000000000000 vPortExitCritical
     /tmp/ccog5mGX.s:444    .text.vPortExitCritical:000000000000002c $d
     /tmp/ccog5mGX.s:449    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccog5mGX.s:456    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccog5mGX.s:507    .text.PendSV_Handler:0000000000000060 pxCurrentTCBConst
     /tmp/ccog5mGX.s:507    .text.PendSV_Handler:0000000000000060 $d
     /tmp/ccog5mGX.s:517    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccog5mGX.s:524    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccog5mGX.s:580    .text.SysTick_Handler:000000000000002c $d
     /tmp/ccog5mGX.s:585    .text.vPortSetupTimerInterrupt:0000000000000000 $t
     /tmp/ccog5mGX.s:592    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
     /tmp/ccog5mGX.s:623    .text.vPortSetupTimerInterrupt:0000000000000024 $d
     /tmp/ccog5mGX.s:632    .text.xPortStartScheduler:0000000000000000 $t
     /tmp/ccog5mGX.s:639    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
     /tmp/ccog5mGX.s:775    .text.xPortStartScheduler:00000000000000b8 $d
     /tmp/ccog5mGX.s:785    .text.vPortValidateInterruptPriority:0000000000000000 $t
     /tmp/ccog5mGX.s:792    .text.vPortValidateInterruptPriority:0000000000000000 vPortValidateInterruptPriority
     /tmp/ccog5mGX.s:876    .text.vPortValidateInterruptPriority:0000000000000054 $d
     /tmp/ccog5mGX.s:887    .bss.ucMaxSysCallPriority:0000000000000000 ucMaxSysCallPriority
     /tmp/ccog5mGX.s:888    .bss.ucMaxSysCallPriority:0000000000000000 $d
     /tmp/ccog5mGX.s:890    .bss.ulMaxPRIGROUPValue:0000000000000000 $d
     /tmp/ccog5mGX.s:894    .bss.ulMaxPRIGROUPValue:0000000000000000 ulMaxPRIGROUPValue
     /tmp/ccog5mGX.s:897    .data.uxCriticalNesting:0000000000000000 $d
     /tmp/ccog5mGX.s:901    .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
     /tmp/ccog5mGX.s:167    .text.vPortEnableVFP:000000000000000e $d
     /tmp/ccog5mGX.s:2476   .text.vPortEnableVFP:0000000000000010 $d
     /tmp/ccog5mGX.s:137    .text.prvPortStartFirstTask:0000000000000022 $d
     /tmp/ccog5mGX.s:2476   .text.prvPortStartFirstTask:0000000000000024 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
SystemCoreClock
ARM GAS  /tmp/ccog5mGX.s 			page 36


