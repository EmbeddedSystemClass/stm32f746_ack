ARM GAS  /tmp/ccNKnSLP.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"sd_diskio.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SD_CheckStatus,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	SD_CheckStatus:
  25              	.LFB150:
  26              		.file 1 "FATFS/Target/sd_diskio.c"
   1:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN Header */
   2:FATFS/Target/sd_diskio.c **** /**
   3:FATFS/Target/sd_diskio.c ****   ******************************************************************************
   4:FATFS/Target/sd_diskio.c ****   * @file    sd_diskio.c
   5:FATFS/Target/sd_diskio.c ****   * @brief   SD Disk I/O driver
   6:FATFS/Target/sd_diskio.c ****   ******************************************************************************
   7:FATFS/Target/sd_diskio.c ****   * @attention
   8:FATFS/Target/sd_diskio.c ****   *
   9:FATFS/Target/sd_diskio.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:FATFS/Target/sd_diskio.c ****   * All rights reserved.</center></h2>
  11:FATFS/Target/sd_diskio.c ****   *
  12:FATFS/Target/sd_diskio.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:FATFS/Target/sd_diskio.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:FATFS/Target/sd_diskio.c ****   * the License. You may obtain a copy of the License at:
  15:FATFS/Target/sd_diskio.c ****   *                             www.st.com/SLA0044
  16:FATFS/Target/sd_diskio.c ****   *
  17:FATFS/Target/sd_diskio.c ****   ******************************************************************************
  18:FATFS/Target/sd_diskio.c ****   */
  19:FATFS/Target/sd_diskio.c **** /* USER CODE END Header */
  20:FATFS/Target/sd_diskio.c **** 
  21:FATFS/Target/sd_diskio.c **** /* Note: code generation based on sd_diskio_dma_rtos_template_bspv1.c v2.1.4 
  22:FATFS/Target/sd_diskio.c ****    as FreeRTOS is enabled. */
  23:FATFS/Target/sd_diskio.c **** 
  24:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN firstSection */
  25:FATFS/Target/sd_diskio.c **** /* can be used to modify / undefine following code or add new definitions */
  26:FATFS/Target/sd_diskio.c **** /* USER CODE END firstSection*/
  27:FATFS/Target/sd_diskio.c **** 
  28:FATFS/Target/sd_diskio.c **** /* Includes ------------------------------------------------------------------*/
  29:FATFS/Target/sd_diskio.c **** #include "ff_gen_drv.h"
  30:FATFS/Target/sd_diskio.c **** #include "sd_diskio.h"
  31:FATFS/Target/sd_diskio.c **** 
  32:FATFS/Target/sd_diskio.c **** #include <string.h>
ARM GAS  /tmp/ccNKnSLP.s 			page 2


  33:FATFS/Target/sd_diskio.c **** #include <stdio.h>
  34:FATFS/Target/sd_diskio.c **** 
  35:FATFS/Target/sd_diskio.c **** /* Private typedef -----------------------------------------------------------*/
  36:FATFS/Target/sd_diskio.c **** /* Private define ------------------------------------------------------------*/
  37:FATFS/Target/sd_diskio.c **** 
  38:FATFS/Target/sd_diskio.c **** #define QUEUE_SIZE         (uint32_t) 10
  39:FATFS/Target/sd_diskio.c **** #define READ_CPLT_MSG      (uint32_t) 1
  40:FATFS/Target/sd_diskio.c **** #define WRITE_CPLT_MSG     (uint32_t) 2
  41:FATFS/Target/sd_diskio.c **** /*
  42:FATFS/Target/sd_diskio.c **** ==================================================================
  43:FATFS/Target/sd_diskio.c **** enable the defines below to send custom rtos messages
  44:FATFS/Target/sd_diskio.c **** when an error or an abort occurs.
  45:FATFS/Target/sd_diskio.c **** Notice: depending on the HAL/SD driver the HAL_SD_ErrorCallback()
  46:FATFS/Target/sd_diskio.c **** may not be available.
  47:FATFS/Target/sd_diskio.c **** See BSP_SD_ErrorCallback() and BSP_SD_AbortCallback() below
  48:FATFS/Target/sd_diskio.c **** ==================================================================
  49:FATFS/Target/sd_diskio.c **** 
  50:FATFS/Target/sd_diskio.c **** #define RW_ERROR_MSG       (uint32_t) 3
  51:FATFS/Target/sd_diskio.c **** #define RW_ABORT_MSG       (uint32_t) 4
  52:FATFS/Target/sd_diskio.c **** */
  53:FATFS/Target/sd_diskio.c **** /*
  54:FATFS/Target/sd_diskio.c ****  * the following Timeout is useful to give the control back to the applications
  55:FATFS/Target/sd_diskio.c ****  * in case of errors in either BSP_SD_ReadCpltCallback() or BSP_SD_WriteCpltCallback()
  56:FATFS/Target/sd_diskio.c ****  * the value by default is as defined in the BSP platform driver otherwise 30 secs
  57:FATFS/Target/sd_diskio.c ****  */
  58:FATFS/Target/sd_diskio.c **** #define SD_TIMEOUT 30 * 1000
  59:FATFS/Target/sd_diskio.c **** 
  60:FATFS/Target/sd_diskio.c **** #define SD_DEFAULT_BLOCK_SIZE 512
  61:FATFS/Target/sd_diskio.c **** 
  62:FATFS/Target/sd_diskio.c **** /*
  63:FATFS/Target/sd_diskio.c ****  * Depending on the use case, the SD card initialization could be done at the
  64:FATFS/Target/sd_diskio.c ****  * application level: if it is the case define the flag below to disable
  65:FATFS/Target/sd_diskio.c ****  * the BSP_SD_Init() call in the SD_Initialize() and add a call to 
  66:FATFS/Target/sd_diskio.c ****  * BSP_SD_Init() elsewhere in the application.
  67:FATFS/Target/sd_diskio.c ****  */
  68:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN disableSDInit */
  69:FATFS/Target/sd_diskio.c **** /* #define DISABLE_SD_INIT */
  70:FATFS/Target/sd_diskio.c **** /* USER CODE END disableSDInit */
  71:FATFS/Target/sd_diskio.c **** 
  72:FATFS/Target/sd_diskio.c **** /* 
  73:FATFS/Target/sd_diskio.c ****  * when using cachable memory region, it may be needed to maintain the cache
  74:FATFS/Target/sd_diskio.c ****  * validity. Enable the define below to activate a cache maintenance at each
  75:FATFS/Target/sd_diskio.c ****  * read and write operation.
  76:FATFS/Target/sd_diskio.c ****  * Notice: This is applicable only for cortex M7 based platform.
  77:FATFS/Target/sd_diskio.c ****  */
  78:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN enableSDDmaCacheMaintenance */
  79:FATFS/Target/sd_diskio.c **** /* #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 */
  80:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN enableSDDmaCacheMaintenance */
  81:FATFS/Target/sd_diskio.c **** 
  82:FATFS/Target/sd_diskio.c **** /*
  83:FATFS/Target/sd_diskio.c **** * Some DMA requires 4-Byte aligned address buffer to correctly read/wite data,
  84:FATFS/Target/sd_diskio.c **** * in FatFs some accesses aren't thus we need a 4-byte aligned scratch buffer to correctly
  85:FATFS/Target/sd_diskio.c **** * transfer data
  86:FATFS/Target/sd_diskio.c **** */
  87:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN enableScratchBuffer */
  88:FATFS/Target/sd_diskio.c **** /* #define ENABLE_SCRATCH_BUFFER */
  89:FATFS/Target/sd_diskio.c **** /* USER CODE END enableScratchBuffer */
ARM GAS  /tmp/ccNKnSLP.s 			page 3


  90:FATFS/Target/sd_diskio.c **** 
  91:FATFS/Target/sd_diskio.c **** /* Private variables ---------------------------------------------------------*/
  92:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
  93:FATFS/Target/sd_diskio.c **** #if defined (ENABLE_SD_DMA_CACHE_MAINTENANCE)
  94:FATFS/Target/sd_diskio.c **** ALIGN_32BYTES(static uint8_t scratch[BLOCKSIZE]); // 32-Byte aligned for cache maintenance
  95:FATFS/Target/sd_diskio.c **** #else
  96:FATFS/Target/sd_diskio.c **** __ALIGN_BEGIN static uint8_t scratch[BLOCKSIZE] __ALIGN_END;
  97:FATFS/Target/sd_diskio.c **** #endif
  98:FATFS/Target/sd_diskio.c **** #endif
  99:FATFS/Target/sd_diskio.c **** /* Disk status */
 100:FATFS/Target/sd_diskio.c **** static volatile DSTATUS Stat = STA_NOINIT;
 101:FATFS/Target/sd_diskio.c **** 
 102:FATFS/Target/sd_diskio.c **** #if (osCMSIS <= 0x20000U)
 103:FATFS/Target/sd_diskio.c **** static osMessageQId SDQueueID = NULL;
 104:FATFS/Target/sd_diskio.c **** #else
 105:FATFS/Target/sd_diskio.c **** static osMessageQueueId_t SDQueueID = NULL;
 106:FATFS/Target/sd_diskio.c **** #endif
 107:FATFS/Target/sd_diskio.c **** /* Private function prototypes -----------------------------------------------*/
 108:FATFS/Target/sd_diskio.c **** static DSTATUS SD_CheckStatus(BYTE lun);
 109:FATFS/Target/sd_diskio.c **** DSTATUS SD_initialize (BYTE);
 110:FATFS/Target/sd_diskio.c **** DSTATUS SD_status (BYTE);
 111:FATFS/Target/sd_diskio.c **** DRESULT SD_read (BYTE, BYTE*, DWORD, UINT);
 112:FATFS/Target/sd_diskio.c **** #if _USE_WRITE == 1
 113:FATFS/Target/sd_diskio.c **** DRESULT SD_write (BYTE, const BYTE*, DWORD, UINT);
 114:FATFS/Target/sd_diskio.c **** #endif /* _USE_WRITE == 1 */
 115:FATFS/Target/sd_diskio.c **** #if _USE_IOCTL == 1
 116:FATFS/Target/sd_diskio.c **** DRESULT SD_ioctl (BYTE, BYTE, void*);
 117:FATFS/Target/sd_diskio.c **** #endif  /* _USE_IOCTL == 1 */
 118:FATFS/Target/sd_diskio.c **** 
 119:FATFS/Target/sd_diskio.c **** const Diskio_drvTypeDef  SD_Driver =
 120:FATFS/Target/sd_diskio.c **** {
 121:FATFS/Target/sd_diskio.c ****   SD_initialize,
 122:FATFS/Target/sd_diskio.c ****   SD_status,
 123:FATFS/Target/sd_diskio.c ****   SD_read,
 124:FATFS/Target/sd_diskio.c **** #if  _USE_WRITE == 1
 125:FATFS/Target/sd_diskio.c ****   SD_write,
 126:FATFS/Target/sd_diskio.c **** #endif /* _USE_WRITE == 1 */
 127:FATFS/Target/sd_diskio.c **** 
 128:FATFS/Target/sd_diskio.c **** #if  _USE_IOCTL == 1
 129:FATFS/Target/sd_diskio.c ****   SD_ioctl,
 130:FATFS/Target/sd_diskio.c **** #endif /* _USE_IOCTL == 1 */
 131:FATFS/Target/sd_diskio.c **** };
 132:FATFS/Target/sd_diskio.c **** 
 133:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeFunctionSection */
 134:FATFS/Target/sd_diskio.c **** /* can be used to modify / undefine following code or add new code */
 135:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeFunctionSection */
 136:FATFS/Target/sd_diskio.c **** 
 137:FATFS/Target/sd_diskio.c **** /* Private functions ---------------------------------------------------------*/
 138:FATFS/Target/sd_diskio.c **** 
 139:FATFS/Target/sd_diskio.c **** static int SD_CheckStatusWithTimeout(uint32_t timeout)
 140:FATFS/Target/sd_diskio.c **** {
 141:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 142:FATFS/Target/sd_diskio.c ****   /* block until SDIO peripherial is ready again or a timeout occur */
 143:FATFS/Target/sd_diskio.c **** #if (osCMSIS <= 0x20000U)
 144:FATFS/Target/sd_diskio.c ****   timer = osKernelSysTick();
 145:FATFS/Target/sd_diskio.c ****   while( osKernelSysTick() - timer < timeout)
 146:FATFS/Target/sd_diskio.c **** #else
ARM GAS  /tmp/ccNKnSLP.s 			page 4


 147:FATFS/Target/sd_diskio.c ****   timer = osKernelGetTickCount();
 148:FATFS/Target/sd_diskio.c ****   while( osKernelGetTickCount() - timer < timeout)
 149:FATFS/Target/sd_diskio.c **** #endif
 150:FATFS/Target/sd_diskio.c ****   {
 151:FATFS/Target/sd_diskio.c ****     if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 152:FATFS/Target/sd_diskio.c ****     {
 153:FATFS/Target/sd_diskio.c ****       return 0;
 154:FATFS/Target/sd_diskio.c ****     }
 155:FATFS/Target/sd_diskio.c ****   }
 156:FATFS/Target/sd_diskio.c **** 
 157:FATFS/Target/sd_diskio.c ****   return -1;
 158:FATFS/Target/sd_diskio.c **** }
 159:FATFS/Target/sd_diskio.c **** 
 160:FATFS/Target/sd_diskio.c **** static DSTATUS SD_CheckStatus(BYTE lun)
 161:FATFS/Target/sd_diskio.c **** {
  27              		.loc 1 161 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 162:FATFS/Target/sd_diskio.c ****   Stat = STA_NOINIT;
  37              		.loc 1 162 0
  38 0002 074B     		ldr	r3, .L4
  39 0004 0122     		movs	r2, #1
  40 0006 1A70     		strb	r2, [r3]
 163:FATFS/Target/sd_diskio.c **** 
 164:FATFS/Target/sd_diskio.c ****   if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
  41              		.loc 1 164 0
  42 0008 FFF7FEFF 		bl	BSP_SD_GetCardState
  43              	.LVL1:
  44 000c 20B9     		cbnz	r0, .L2
 165:FATFS/Target/sd_diskio.c ****   {
 166:FATFS/Target/sd_diskio.c ****     Stat &= ~STA_NOINIT;
  45              		.loc 1 166 0
  46 000e 044A     		ldr	r2, .L4
  47 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  48 0012 03F0FE03 		and	r3, r3, #254
  49 0016 1370     		strb	r3, [r2]
  50              	.L2:
 167:FATFS/Target/sd_diskio.c ****   }
 168:FATFS/Target/sd_diskio.c **** 
 169:FATFS/Target/sd_diskio.c ****   return Stat;
  51              		.loc 1 169 0
  52 0018 014B     		ldr	r3, .L4
  53 001a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 170:FATFS/Target/sd_diskio.c **** }
  54              		.loc 1 170 0
  55 001c 08BD     		pop	{r3, pc}
  56              	.L5:
  57 001e 00BF     		.align	2
  58              	.L4:
  59 0020 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccNKnSLP.s 			page 5


  60              		.cfi_endproc
  61              	.LFE150:
  63              		.section	.text.SD_initialize,"ax",%progbits
  64              		.align	1
  65              		.global	SD_initialize
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv5-sp-d16
  71              	SD_initialize:
  72              	.LFB151:
 171:FATFS/Target/sd_diskio.c ****  
 172:FATFS/Target/sd_diskio.c **** /**
 173:FATFS/Target/sd_diskio.c ****   * @brief  Initializes a Drive
 174:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 175:FATFS/Target/sd_diskio.c ****   * @retval DSTATUS: Operation status
 176:FATFS/Target/sd_diskio.c ****   */
 177:FATFS/Target/sd_diskio.c **** DSTATUS SD_initialize(BYTE lun)
 178:FATFS/Target/sd_diskio.c **** {
  73              		.loc 1 178 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 16
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              	.LVL2:
  78 0000 10B5     		push	{r4, lr}
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  83 0002 84B0     		sub	sp, sp, #16
  84              	.LCFI2:
  85              		.cfi_def_cfa_offset 24
  86 0004 0446     		mov	r4, r0
 179:FATFS/Target/sd_diskio.c **** Stat = STA_NOINIT; 
  87              		.loc 1 179 0
  88 0006 184B     		ldr	r3, .L14
  89 0008 0122     		movs	r2, #1
  90 000a 1A70     		strb	r2, [r3]
 180:FATFS/Target/sd_diskio.c **** 
 181:FATFS/Target/sd_diskio.c ****   /*
 182:FATFS/Target/sd_diskio.c ****    * check that the kernel has been started before continuing
 183:FATFS/Target/sd_diskio.c ****    * as the osMessage API will fail otherwise
 184:FATFS/Target/sd_diskio.c ****    */
 185:FATFS/Target/sd_diskio.c **** #if (osCMSIS <= 0x20000U)
 186:FATFS/Target/sd_diskio.c ****   if(osKernelRunning())
  91              		.loc 1 186 0
  92 000c FFF7FEFF 		bl	osKernelRunning
  93              	.LVL3:
  94 0010 18B9     		cbnz	r0, .L11
  95              	.L7:
 187:FATFS/Target/sd_diskio.c **** #else
 188:FATFS/Target/sd_diskio.c ****   if(osKernelGetState() == osKernelRunning)
 189:FATFS/Target/sd_diskio.c **** #endif
 190:FATFS/Target/sd_diskio.c ****   {
 191:FATFS/Target/sd_diskio.c **** #if !defined(DISABLE_SD_INIT)
 192:FATFS/Target/sd_diskio.c **** 
 193:FATFS/Target/sd_diskio.c ****     if(BSP_SD_Init() == MSD_OK)
ARM GAS  /tmp/ccNKnSLP.s 			page 6


 194:FATFS/Target/sd_diskio.c ****     {
 195:FATFS/Target/sd_diskio.c ****       Stat = SD_CheckStatus(lun);
 196:FATFS/Target/sd_diskio.c ****     }
 197:FATFS/Target/sd_diskio.c **** 
 198:FATFS/Target/sd_diskio.c **** #else
 199:FATFS/Target/sd_diskio.c ****     Stat = SD_CheckStatus(lun);
 200:FATFS/Target/sd_diskio.c **** #endif
 201:FATFS/Target/sd_diskio.c **** 
 202:FATFS/Target/sd_diskio.c ****     /*
 203:FATFS/Target/sd_diskio.c ****     * if the SD is correctly initialized, create the operation queue
 204:FATFS/Target/sd_diskio.c ****     * if not already created
 205:FATFS/Target/sd_diskio.c ****     */
 206:FATFS/Target/sd_diskio.c **** 
 207:FATFS/Target/sd_diskio.c ****     if (Stat != STA_NOINIT)
 208:FATFS/Target/sd_diskio.c ****     {
 209:FATFS/Target/sd_diskio.c ****       if (SDQueueID == NULL)
 210:FATFS/Target/sd_diskio.c ****       {
 211:FATFS/Target/sd_diskio.c ****  #if (osCMSIS <= 0x20000U)
 212:FATFS/Target/sd_diskio.c ****       osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 213:FATFS/Target/sd_diskio.c ****       SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 214:FATFS/Target/sd_diskio.c **** #else
 215:FATFS/Target/sd_diskio.c ****       SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 216:FATFS/Target/sd_diskio.c **** #endif
 217:FATFS/Target/sd_diskio.c ****       }
 218:FATFS/Target/sd_diskio.c **** 
 219:FATFS/Target/sd_diskio.c ****       if (SDQueueID == NULL)
 220:FATFS/Target/sd_diskio.c ****       {
 221:FATFS/Target/sd_diskio.c ****         Stat |= STA_NOINIT;
 222:FATFS/Target/sd_diskio.c ****       }
 223:FATFS/Target/sd_diskio.c ****     }
 224:FATFS/Target/sd_diskio.c ****   }
 225:FATFS/Target/sd_diskio.c **** 
 226:FATFS/Target/sd_diskio.c ****   return Stat;
  96              		.loc 1 226 0
  97 0012 154B     		ldr	r3, .L14
  98 0014 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 227:FATFS/Target/sd_diskio.c **** }
  99              		.loc 1 227 0
 100 0016 04B0     		add	sp, sp, #16
 101              	.LCFI3:
 102              		.cfi_remember_state
 103              		.cfi_def_cfa_offset 8
 104              		@ sp needed
 105 0018 10BD     		pop	{r4, pc}
 106              	.L11:
 107              	.LCFI4:
 108              		.cfi_restore_state
 193:FATFS/Target/sd_diskio.c ****     {
 109              		.loc 1 193 0
 110 001a FFF7FEFF 		bl	BSP_SD_Init
 111              	.LVL4:
 112 001e 88B1     		cbz	r0, .L12
 113              	.L8:
 207:FATFS/Target/sd_diskio.c ****     {
 114              		.loc 1 207 0
 115 0020 114B     		ldr	r3, .L14
 116 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccNKnSLP.s 			page 7


 117 0024 DBB2     		uxtb	r3, r3
 118 0026 012B     		cmp	r3, #1
 119 0028 F3D0     		beq	.L7
 209:FATFS/Target/sd_diskio.c ****       {
 120              		.loc 1 209 0
 121 002a 104B     		ldr	r3, .L14+4
 122 002c 1B68     		ldr	r3, [r3]
 123 002e 7BB1     		cbz	r3, .L13
 124              	.L9:
 219:FATFS/Target/sd_diskio.c ****       {
 125              		.loc 1 219 0
 126 0030 0E4B     		ldr	r3, .L14+4
 127 0032 1B68     		ldr	r3, [r3]
 128 0034 002B     		cmp	r3, #0
 129 0036 ECD1     		bne	.L7
 221:FATFS/Target/sd_diskio.c ****       }
 130              		.loc 1 221 0
 131 0038 0B4A     		ldr	r2, .L14
 132 003a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 133 003c 43F00103 		orr	r3, r3, #1
 134 0040 1370     		strb	r3, [r2]
 135 0042 E6E7     		b	.L7
 136              	.L12:
 195:FATFS/Target/sd_diskio.c ****     }
 137              		.loc 1 195 0
 138 0044 2046     		mov	r0, r4
 139 0046 FFF7FEFF 		bl	SD_CheckStatus
 140              	.LVL5:
 141 004a 074B     		ldr	r3, .L14
 142 004c 1870     		strb	r0, [r3]
 143 004e E7E7     		b	.L8
 144              	.L13:
 145              	.LBB2:
 212:FATFS/Target/sd_diskio.c ****       SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 146              		.loc 1 212 0
 147 0050 074B     		ldr	r3, .L14+8
 148 0052 6C46     		mov	r4, sp
 149 0054 0FCB     		ldm	r3, {r0, r1, r2, r3}
 150 0056 84E80F00 		stm	r4, {r0, r1, r2, r3}
 213:FATFS/Target/sd_diskio.c **** #else
 151              		.loc 1 213 0
 152 005a 0021     		movs	r1, #0
 153 005c 2046     		mov	r0, r4
 154 005e FFF7FEFF 		bl	osMessageCreate
 155              	.LVL6:
 156 0062 024B     		ldr	r3, .L14+4
 157 0064 1860     		str	r0, [r3]
 158 0066 E3E7     		b	.L9
 159              	.L15:
 160              		.align	2
 161              	.L14:
 162 0068 00000000 		.word	.LANCHOR0
 163 006c 00000000 		.word	.LANCHOR1
 164 0070 00000000 		.word	.LANCHOR2
 165              	.LBE2:
 166              		.cfi_endproc
 167              	.LFE151:
ARM GAS  /tmp/ccNKnSLP.s 			page 8


 169              		.section	.text.SD_status,"ax",%progbits
 170              		.align	1
 171              		.global	SD_status
 172              		.syntax unified
 173              		.thumb
 174              		.thumb_func
 175              		.fpu fpv5-sp-d16
 177              	SD_status:
 178              	.LFB152:
 228:FATFS/Target/sd_diskio.c **** 
 229:FATFS/Target/sd_diskio.c **** /**
 230:FATFS/Target/sd_diskio.c ****   * @brief  Gets Disk Status
 231:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 232:FATFS/Target/sd_diskio.c ****   * @retval DSTATUS: Operation status
 233:FATFS/Target/sd_diskio.c ****   */
 234:FATFS/Target/sd_diskio.c **** DSTATUS SD_status(BYTE lun)
 235:FATFS/Target/sd_diskio.c **** {
 179              		.loc 1 235 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              	.LVL7:
 184 0000 08B5     		push	{r3, lr}
 185              	.LCFI5:
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 3, -8
 188              		.cfi_offset 14, -4
 236:FATFS/Target/sd_diskio.c ****   return SD_CheckStatus(lun);
 189              		.loc 1 236 0
 190 0002 FFF7FEFF 		bl	SD_CheckStatus
 191              	.LVL8:
 237:FATFS/Target/sd_diskio.c **** }
 192              		.loc 1 237 0
 193 0006 08BD     		pop	{r3, pc}
 194              		.cfi_endproc
 195              	.LFE152:
 197              		.section	.text.SD_CheckStatusWithTimeout,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv5-sp-d16
 204              	SD_CheckStatusWithTimeout:
 205              	.LFB149:
 140:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 206              		.loc 1 140 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              	.LVL9:
 211 0000 38B5     		push	{r3, r4, r5, lr}
 212              	.LCFI6:
 213              		.cfi_def_cfa_offset 16
 214              		.cfi_offset 3, -16
 215              		.cfi_offset 4, -12
 216              		.cfi_offset 5, -8
 217              		.cfi_offset 14, -4
ARM GAS  /tmp/ccNKnSLP.s 			page 9


 218 0002 0546     		mov	r5, r0
 144:FATFS/Target/sd_diskio.c ****   while( osKernelSysTick() - timer < timeout)
 219              		.loc 1 144 0
 220 0004 FFF7FEFF 		bl	osKernelSysTick
 221              	.LVL10:
 222 0008 0446     		mov	r4, r0
 223              	.LVL11:
 224              	.L19:
 145:FATFS/Target/sd_diskio.c **** #else
 225              		.loc 1 145 0
 226 000a FFF7FEFF 		bl	osKernelSysTick
 227              	.LVL12:
 228 000e 001B     		subs	r0, r0, r4
 229 0010 A842     		cmp	r0, r5
 230 0012 05D2     		bcs	.L24
 151:FATFS/Target/sd_diskio.c ****     {
 231              		.loc 1 151 0
 232 0014 FFF7FEFF 		bl	BSP_SD_GetCardState
 233              	.LVL13:
 234 0018 0028     		cmp	r0, #0
 235 001a F6D1     		bne	.L19
 153:FATFS/Target/sd_diskio.c ****     }
 236              		.loc 1 153 0
 237 001c 0020     		movs	r0, #0
 238 001e 01E0     		b	.L18
 239              	.L24:
 157:FATFS/Target/sd_diskio.c **** }
 240              		.loc 1 157 0
 241 0020 4FF0FF30 		mov	r0, #-1
 242              	.L18:
 158:FATFS/Target/sd_diskio.c **** 
 243              		.loc 1 158 0
 244 0024 38BD     		pop	{r3, r4, r5, pc}
 245              		.cfi_endproc
 246              	.LFE149:
 248              		.section	.text.SD_read,"ax",%progbits
 249              		.align	1
 250              		.global	SD_read
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu fpv5-sp-d16
 256              	SD_read:
 257              	.LFB153:
 238:FATFS/Target/sd_diskio.c **** 
 239:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeReadSection */
 240:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 241:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeReadSection */
 242:FATFS/Target/sd_diskio.c **** /**
 243:FATFS/Target/sd_diskio.c ****   * @brief  Reads Sector(s)
 244:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 245:FATFS/Target/sd_diskio.c ****   * @param  *buff: Data buffer to store read data
 246:FATFS/Target/sd_diskio.c ****   * @param  sector: Sector address (LBA)
 247:FATFS/Target/sd_diskio.c ****   * @param  count: Number of sectors to read (1..128)
 248:FATFS/Target/sd_diskio.c ****   * @retval DRESULT: Operation result
 249:FATFS/Target/sd_diskio.c ****   */
 250:FATFS/Target/sd_diskio.c ****    
ARM GAS  /tmp/ccNKnSLP.s 			page 10


 251:FATFS/Target/sd_diskio.c **** DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 252:FATFS/Target/sd_diskio.c **** {
 258              		.loc 1 252 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 16
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              	.LVL14:
 263 0000 70B5     		push	{r4, r5, r6, lr}
 264              	.LCFI7:
 265              		.cfi_def_cfa_offset 16
 266              		.cfi_offset 4, -16
 267              		.cfi_offset 5, -12
 268              		.cfi_offset 6, -8
 269              		.cfi_offset 14, -4
 270 0002 84B0     		sub	sp, sp, #16
 271              	.LCFI8:
 272              		.cfi_def_cfa_offset 32
 273 0004 0C46     		mov	r4, r1
 274 0006 1546     		mov	r5, r2
 275 0008 1E46     		mov	r6, r3
 276              	.LVL15:
 253:FATFS/Target/sd_diskio.c ****   DRESULT res = RES_ERROR;
 254:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 255:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 256:FATFS/Target/sd_diskio.c ****   osEvent event;
 257:FATFS/Target/sd_diskio.c **** #else
 258:FATFS/Target/sd_diskio.c ****   uint16_t event;
 259:FATFS/Target/sd_diskio.c ****   osStatus_t status;
 260:FATFS/Target/sd_diskio.c **** #endif
 261:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 262:FATFS/Target/sd_diskio.c ****   uint32_t alignedAddr;
 263:FATFS/Target/sd_diskio.c **** #endif
 264:FATFS/Target/sd_diskio.c ****   /*
 265:FATFS/Target/sd_diskio.c ****   * ensure the SDCard is ready for a new operation
 266:FATFS/Target/sd_diskio.c ****   */
 267:FATFS/Target/sd_diskio.c **** 
 268:FATFS/Target/sd_diskio.c ****   if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 277              		.loc 1 268 0
 278 000a 47F23050 		movw	r0, #30000
 279              	.LVL16:
 280 000e FFF7FEFF 		bl	SD_CheckStatusWithTimeout
 281              	.LVL17:
 282 0012 0028     		cmp	r0, #0
 283 0014 2ADB     		blt	.L29
 269:FATFS/Target/sd_diskio.c ****   {
 270:FATFS/Target/sd_diskio.c ****     return res;
 271:FATFS/Target/sd_diskio.c ****   }
 272:FATFS/Target/sd_diskio.c **** 
 273:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 274:FATFS/Target/sd_diskio.c ****   if (!((uint32_t)buff & 0x3))
 275:FATFS/Target/sd_diskio.c ****   {
 276:FATFS/Target/sd_diskio.c **** #endif
 277:FATFS/Target/sd_diskio.c ****     /* Fast path cause destination buffer is correctly aligned */
 278:FATFS/Target/sd_diskio.c ****     uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 284              		.loc 1 278 0
 285 0016 3246     		mov	r2, r6
 286 0018 2946     		mov	r1, r5
ARM GAS  /tmp/ccNKnSLP.s 			page 11


 287 001a 2046     		mov	r0, r4
 288 001c FFF7FEFF 		bl	BSP_SD_ReadBlocks_DMA
 289              	.LVL18:
 279:FATFS/Target/sd_diskio.c **** 
 280:FATFS/Target/sd_diskio.c ****     if (ret == MSD_OK) {
 290              		.loc 1 280 0
 291 0020 08B1     		cbz	r0, .L35
 253:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 292              		.loc 1 253 0
 293 0022 0120     		movs	r0, #1
 294              	.LVL19:
 295 0024 23E0     		b	.L26
 296              	.LVL20:
 297              	.L35:
 281:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 282:FATFS/Target/sd_diskio.c ****     /* wait for a message from the queue or a timeout */
 283:FATFS/Target/sd_diskio.c ****     event = osMessageGet(SDQueueID, SD_TIMEOUT);
 298              		.loc 1 283 0
 299 0026 47F23052 		movw	r2, #30000
 300 002a 124B     		ldr	r3, .L39
 301 002c 1968     		ldr	r1, [r3]
 302 002e 01A8     		add	r0, sp, #4
 303              	.LVL21:
 304 0030 FFF7FEFF 		bl	osMessageGet
 305              	.LVL22:
 284:FATFS/Target/sd_diskio.c **** 
 285:FATFS/Target/sd_diskio.c ****     if (event.status == osEventMessage)
 306              		.loc 1 285 0
 307 0034 019B     		ldr	r3, [sp, #4]
 308 0036 102B     		cmp	r3, #16
 309 0038 01D0     		beq	.L36
 253:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 310              		.loc 1 253 0
 311 003a 0120     		movs	r0, #1
 312 003c 17E0     		b	.L26
 313              	.L36:
 286:FATFS/Target/sd_diskio.c ****     {
 287:FATFS/Target/sd_diskio.c ****       if (event.value.v == READ_CPLT_MSG)
 314              		.loc 1 287 0
 315 003e 029B     		ldr	r3, [sp, #8]
 316 0040 012B     		cmp	r3, #1
 317 0042 01D0     		beq	.L37
 253:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 318              		.loc 1 253 0
 319 0044 0120     		movs	r0, #1
 320 0046 12E0     		b	.L26
 321              	.L37:
 288:FATFS/Target/sd_diskio.c ****       {
 289:FATFS/Target/sd_diskio.c ****         timer = osKernelSysTick();
 322              		.loc 1 289 0
 323 0048 FFF7FEFF 		bl	osKernelSysTick
 324              	.LVL23:
 325 004c 0446     		mov	r4, r0
 326              	.LVL24:
 327              	.L27:
 290:FATFS/Target/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 291:FATFS/Target/sd_diskio.c ****         while(osKernelSysTick() - timer <SD_TIMEOUT)
ARM GAS  /tmp/ccNKnSLP.s 			page 12


 328              		.loc 1 291 0
 329 004e FFF7FEFF 		bl	osKernelSysTick
 330              	.LVL25:
 331 0052 001B     		subs	r0, r0, r4
 332 0054 47F22F53 		movw	r3, #29999
 333 0058 9842     		cmp	r0, r3
 334 005a 05D8     		bhi	.L38
 292:FATFS/Target/sd_diskio.c **** #else
 293:FATFS/Target/sd_diskio.c ****           status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 294:FATFS/Target/sd_diskio.c ****           if ((status == osOK) && (event == READ_CPLT_MSG))
 295:FATFS/Target/sd_diskio.c ****           {
 296:FATFS/Target/sd_diskio.c ****             timer = osKernelGetTickCount();
 297:FATFS/Target/sd_diskio.c ****             /* block until SDIO IP is ready or a timeout occur */
 298:FATFS/Target/sd_diskio.c ****             while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 299:FATFS/Target/sd_diskio.c **** #endif
 300:FATFS/Target/sd_diskio.c ****             {
 301:FATFS/Target/sd_diskio.c ****               if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 335              		.loc 1 301 0
 336 005c FFF7FEFF 		bl	BSP_SD_GetCardState
 337              	.LVL26:
 338 0060 0028     		cmp	r0, #0
 339 0062 F4D1     		bne	.L27
 302:FATFS/Target/sd_diskio.c ****               {
 303:FATFS/Target/sd_diskio.c ****                 res = RES_OK;
 340              		.loc 1 303 0
 341 0064 0020     		movs	r0, #0
 342 0066 02E0     		b	.L26
 343              	.L38:
 253:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 344              		.loc 1 253 0
 345 0068 0120     		movs	r0, #1
 346 006a 00E0     		b	.L26
 347              	.LVL27:
 348              	.L29:
 270:FATFS/Target/sd_diskio.c ****   }
 349              		.loc 1 270 0
 350 006c 0120     		movs	r0, #1
 351              	.LVL28:
 352              	.L26:
 304:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 305:FATFS/Target/sd_diskio.c ****                 /*
 306:FATFS/Target/sd_diskio.c ****                 the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
 307:FATFS/Target/sd_diskio.c ****                 adjust the address and the D-Cache size to invalidate accordingly.
 308:FATFS/Target/sd_diskio.c ****                 */
 309:FATFS/Target/sd_diskio.c ****                 alignedAddr = (uint32_t)buff & ~0x1F;
 310:FATFS/Target/sd_diskio.c ****                 SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)b
 311:FATFS/Target/sd_diskio.c **** #endif
 312:FATFS/Target/sd_diskio.c ****                 break;
 313:FATFS/Target/sd_diskio.c ****               }
 314:FATFS/Target/sd_diskio.c ****             }
 315:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 316:FATFS/Target/sd_diskio.c ****           }
 317:FATFS/Target/sd_diskio.c ****         }
 318:FATFS/Target/sd_diskio.c **** #else
 319:FATFS/Target/sd_diskio.c ****       }
 320:FATFS/Target/sd_diskio.c **** #endif
 321:FATFS/Target/sd_diskio.c ****     }
ARM GAS  /tmp/ccNKnSLP.s 			page 13


 322:FATFS/Target/sd_diskio.c **** 
 323:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 324:FATFS/Target/sd_diskio.c ****     }
 325:FATFS/Target/sd_diskio.c ****     else
 326:FATFS/Target/sd_diskio.c ****     {
 327:FATFS/Target/sd_diskio.c ****       /* Slow path, fetch each sector a part and memcpy to destination buffer */
 328:FATFS/Target/sd_diskio.c ****       int i;
 329:FATFS/Target/sd_diskio.c **** 
 330:FATFS/Target/sd_diskio.c ****       for (i = 0; i < count; i++)
 331:FATFS/Target/sd_diskio.c ****       {
 332:FATFS/Target/sd_diskio.c ****         ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 333:FATFS/Target/sd_diskio.c ****         if (ret == MSD_OK )
 334:FATFS/Target/sd_diskio.c ****         {
 335:FATFS/Target/sd_diskio.c ****           /* wait until the read is successful or a timeout occurs */
 336:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 337:FATFS/Target/sd_diskio.c ****           /* wait for a message from the queue or a timeout */
 338:FATFS/Target/sd_diskio.c ****           event = osMessageGet(SDQueueID, SD_TIMEOUT);
 339:FATFS/Target/sd_diskio.c **** 
 340:FATFS/Target/sd_diskio.c ****           if (event.status == osEventMessage)
 341:FATFS/Target/sd_diskio.c ****           {
 342:FATFS/Target/sd_diskio.c ****             if (event.value.v == READ_CPLT_MSG)
 343:FATFS/Target/sd_diskio.c ****             {
 344:FATFS/Target/sd_diskio.c ****               timer = osKernelSysTick();
 345:FATFS/Target/sd_diskio.c ****               /* block until SDIO IP is ready or a timeout occur */
 346:FATFS/Target/sd_diskio.c ****               while(osKernelSysTick() - timer <SD_TIMEOUT)
 347:FATFS/Target/sd_diskio.c **** #else
 348:FATFS/Target/sd_diskio.c ****                 status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 349:FATFS/Target/sd_diskio.c ****               if ((status == osOK) && (event == READ_CPLT_MSG))
 350:FATFS/Target/sd_diskio.c ****               {
 351:FATFS/Target/sd_diskio.c ****                 timer = osKernelGetTickCount();
 352:FATFS/Target/sd_diskio.c ****                 /* block until SDIO IP is ready or a timeout occur */
 353:FATFS/Target/sd_diskio.c ****                 ret = MSD_ERROR;
 354:FATFS/Target/sd_diskio.c ****                 while(osKernelGetTickCount() - timer < SD_TIMEOUT)
 355:FATFS/Target/sd_diskio.c **** #endif
 356:FATFS/Target/sd_diskio.c ****                 {
 357:FATFS/Target/sd_diskio.c ****                   ret = BSP_SD_GetCardState();
 358:FATFS/Target/sd_diskio.c **** 
 359:FATFS/Target/sd_diskio.c ****                   if (ret == MSD_OK)
 360:FATFS/Target/sd_diskio.c ****                   {
 361:FATFS/Target/sd_diskio.c ****                     break;
 362:FATFS/Target/sd_diskio.c ****                   }
 363:FATFS/Target/sd_diskio.c ****                 }
 364:FATFS/Target/sd_diskio.c **** 
 365:FATFS/Target/sd_diskio.c ****                 if (ret != MSD_OK)
 366:FATFS/Target/sd_diskio.c ****                 {
 367:FATFS/Target/sd_diskio.c ****                   break;
 368:FATFS/Target/sd_diskio.c ****                 }
 369:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 370:FATFS/Target/sd_diskio.c ****               }
 371:FATFS/Target/sd_diskio.c ****             }
 372:FATFS/Target/sd_diskio.c **** #else
 373:FATFS/Target/sd_diskio.c ****           }
 374:FATFS/Target/sd_diskio.c **** #endif
 375:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 376:FATFS/Target/sd_diskio.c ****           /*
 377:FATFS/Target/sd_diskio.c ****           *
 378:FATFS/Target/sd_diskio.c ****           * invalidate the scratch buffer before the next read to get the actual data instead of th
ARM GAS  /tmp/ccNKnSLP.s 			page 14


 379:FATFS/Target/sd_diskio.c ****           */
 380:FATFS/Target/sd_diskio.c ****           SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 381:FATFS/Target/sd_diskio.c **** #endif
 382:FATFS/Target/sd_diskio.c ****           memcpy(buff, scratch, BLOCKSIZE);
 383:FATFS/Target/sd_diskio.c ****           buff += BLOCKSIZE;
 384:FATFS/Target/sd_diskio.c ****         }
 385:FATFS/Target/sd_diskio.c ****         else
 386:FATFS/Target/sd_diskio.c ****         {
 387:FATFS/Target/sd_diskio.c ****           break;
 388:FATFS/Target/sd_diskio.c ****         }
 389:FATFS/Target/sd_diskio.c ****       }
 390:FATFS/Target/sd_diskio.c **** 
 391:FATFS/Target/sd_diskio.c ****       if ((i == count) && (ret == MSD_OK ))
 392:FATFS/Target/sd_diskio.c ****         res = RES_OK;
 393:FATFS/Target/sd_diskio.c ****     }
 394:FATFS/Target/sd_diskio.c **** #endif
 395:FATFS/Target/sd_diskio.c ****   return res;
 396:FATFS/Target/sd_diskio.c **** }
 353              		.loc 1 396 0
 354 006e 04B0     		add	sp, sp, #16
 355              	.LCFI9:
 356              		.cfi_def_cfa_offset 16
 357              		@ sp needed
 358 0070 70BD     		pop	{r4, r5, r6, pc}
 359              	.LVL29:
 360              	.L40:
 361 0072 00BF     		.align	2
 362              	.L39:
 363 0074 00000000 		.word	.LANCHOR1
 364              		.cfi_endproc
 365              	.LFE153:
 367              		.section	.text.SD_write,"ax",%progbits
 368              		.align	1
 369              		.global	SD_write
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu fpv5-sp-d16
 375              	SD_write:
 376              	.LFB154:
 397:FATFS/Target/sd_diskio.c ****  
 398:FATFS/Target/sd_diskio.c **** 
 399:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeWriteSection */
 400:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 401:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeWriteSection */
 402:FATFS/Target/sd_diskio.c **** /**
 403:FATFS/Target/sd_diskio.c ****   * @brief  Writes Sector(s)
 404:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 405:FATFS/Target/sd_diskio.c ****   * @param  *buff: Data to be written
 406:FATFS/Target/sd_diskio.c ****   * @param  sector: Sector address (LBA)
 407:FATFS/Target/sd_diskio.c ****   * @param  count: Number of sectors to write (1..128)
 408:FATFS/Target/sd_diskio.c ****   * @retval DRESULT: Operation result
 409:FATFS/Target/sd_diskio.c ****   */
 410:FATFS/Target/sd_diskio.c **** #if _USE_WRITE == 1
 411:FATFS/Target/sd_diskio.c ****    
 412:FATFS/Target/sd_diskio.c **** DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
 413:FATFS/Target/sd_diskio.c **** {
ARM GAS  /tmp/ccNKnSLP.s 			page 15


 377              		.loc 1 413 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 16
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              	.LVL30:
 382 0000 70B5     		push	{r4, r5, r6, lr}
 383              	.LCFI10:
 384              		.cfi_def_cfa_offset 16
 385              		.cfi_offset 4, -16
 386              		.cfi_offset 5, -12
 387              		.cfi_offset 6, -8
 388              		.cfi_offset 14, -4
 389 0002 84B0     		sub	sp, sp, #16
 390              	.LCFI11:
 391              		.cfi_def_cfa_offset 32
 392 0004 0C46     		mov	r4, r1
 393 0006 1546     		mov	r5, r2
 394 0008 1E46     		mov	r6, r3
 395              	.LVL31:
 414:FATFS/Target/sd_diskio.c ****   DRESULT res = RES_ERROR;
 415:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 416:FATFS/Target/sd_diskio.c **** 
 417:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 418:FATFS/Target/sd_diskio.c ****   osEvent event;
 419:FATFS/Target/sd_diskio.c **** #else
 420:FATFS/Target/sd_diskio.c ****   uint16_t event;
 421:FATFS/Target/sd_diskio.c ****   osStatus_t status;
 422:FATFS/Target/sd_diskio.c **** #endif
 423:FATFS/Target/sd_diskio.c **** 
 424:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 425:FATFS/Target/sd_diskio.c ****   int32_t ret;
 426:FATFS/Target/sd_diskio.c **** #endif
 427:FATFS/Target/sd_diskio.c **** 
 428:FATFS/Target/sd_diskio.c ****   /*
 429:FATFS/Target/sd_diskio.c ****   * ensure the SDCard is ready for a new operation
 430:FATFS/Target/sd_diskio.c ****   */
 431:FATFS/Target/sd_diskio.c **** 
 432:FATFS/Target/sd_diskio.c ****   if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 396              		.loc 1 432 0
 397 000a 47F23050 		movw	r0, #30000
 398              	.LVL32:
 399 000e FFF7FEFF 		bl	SD_CheckStatusWithTimeout
 400              	.LVL33:
 401 0012 0028     		cmp	r0, #0
 402 0014 2ADB     		blt	.L45
 433:FATFS/Target/sd_diskio.c ****   {
 434:FATFS/Target/sd_diskio.c ****     return res;
 435:FATFS/Target/sd_diskio.c ****   }
 436:FATFS/Target/sd_diskio.c **** 
 437:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 438:FATFS/Target/sd_diskio.c ****   if (!((uint32_t)buff & 0x3))
 439:FATFS/Target/sd_diskio.c ****   {
 440:FATFS/Target/sd_diskio.c **** #endif
 441:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 442:FATFS/Target/sd_diskio.c ****   uint32_t alignedAddr;
 443:FATFS/Target/sd_diskio.c ****   /*
 444:FATFS/Target/sd_diskio.c ****     the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
ARM GAS  /tmp/ccNKnSLP.s 			page 16


 445:FATFS/Target/sd_diskio.c ****     adjust the address and the D-Cache size to clean accordingly.
 446:FATFS/Target/sd_diskio.c ****   */
 447:FATFS/Target/sd_diskio.c ****   alignedAddr = (uint32_t)buff & ~0x1F;
 448:FATFS/Target/sd_diskio.c ****   SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr))
 449:FATFS/Target/sd_diskio.c **** #endif
 450:FATFS/Target/sd_diskio.c **** 
 451:FATFS/Target/sd_diskio.c ****   if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 403              		.loc 1 451 0
 404 0016 3246     		mov	r2, r6
 405 0018 2946     		mov	r1, r5
 406 001a 2046     		mov	r0, r4
 407 001c FFF7FEFF 		bl	BSP_SD_WriteBlocks_DMA
 408              	.LVL34:
 409 0020 08B1     		cbz	r0, .L51
 414:FATFS/Target/sd_diskio.c ****   DRESULT res = RES_ERROR;
 410              		.loc 1 414 0
 411 0022 0120     		movs	r0, #1
 412 0024 23E0     		b	.L42
 413              	.L51:
 452:FATFS/Target/sd_diskio.c ****                            (uint32_t) (sector),
 453:FATFS/Target/sd_diskio.c ****                            count) == MSD_OK)
 454:FATFS/Target/sd_diskio.c ****   {
 455:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 456:FATFS/Target/sd_diskio.c ****     /* Get the message from the queue */
 457:FATFS/Target/sd_diskio.c ****     event = osMessageGet(SDQueueID, SD_TIMEOUT);
 414              		.loc 1 457 0
 415 0026 47F23052 		movw	r2, #30000
 416 002a 124B     		ldr	r3, .L55
 417 002c 1968     		ldr	r1, [r3]
 418 002e 01A8     		add	r0, sp, #4
 419 0030 FFF7FEFF 		bl	osMessageGet
 420              	.LVL35:
 458:FATFS/Target/sd_diskio.c **** 
 459:FATFS/Target/sd_diskio.c ****     if (event.status == osEventMessage)
 421              		.loc 1 459 0
 422 0034 019B     		ldr	r3, [sp, #4]
 423 0036 102B     		cmp	r3, #16
 424 0038 01D0     		beq	.L52
 414:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 425              		.loc 1 414 0
 426 003a 0120     		movs	r0, #1
 427 003c 17E0     		b	.L42
 428              	.L52:
 460:FATFS/Target/sd_diskio.c ****     {
 461:FATFS/Target/sd_diskio.c ****       if (event.value.v == WRITE_CPLT_MSG)
 429              		.loc 1 461 0
 430 003e 029B     		ldr	r3, [sp, #8]
 431 0040 022B     		cmp	r3, #2
 432 0042 01D0     		beq	.L53
 414:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 433              		.loc 1 414 0
 434 0044 0120     		movs	r0, #1
 435 0046 12E0     		b	.L42
 436              	.L53:
 462:FATFS/Target/sd_diskio.c ****       {
 463:FATFS/Target/sd_diskio.c **** #else
 464:FATFS/Target/sd_diskio.c ****     status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
ARM GAS  /tmp/ccNKnSLP.s 			page 17


 465:FATFS/Target/sd_diskio.c ****     if ((status == osOK) && (event == WRITE_CPLT_MSG))
 466:FATFS/Target/sd_diskio.c ****     {
 467:FATFS/Target/sd_diskio.c **** #endif
 468:FATFS/Target/sd_diskio.c ****  #if (osCMSIS < 0x20000U)
 469:FATFS/Target/sd_diskio.c ****         timer = osKernelSysTick();
 437              		.loc 1 469 0
 438 0048 FFF7FEFF 		bl	osKernelSysTick
 439              	.LVL36:
 440 004c 0446     		mov	r4, r0
 441              	.LVL37:
 442              	.L43:
 470:FATFS/Target/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 471:FATFS/Target/sd_diskio.c ****         while(osKernelSysTick() - timer  < SD_TIMEOUT)
 443              		.loc 1 471 0
 444 004e FFF7FEFF 		bl	osKernelSysTick
 445              	.LVL38:
 446 0052 001B     		subs	r0, r0, r4
 447 0054 47F22F53 		movw	r3, #29999
 448 0058 9842     		cmp	r0, r3
 449 005a 05D8     		bhi	.L54
 472:FATFS/Target/sd_diskio.c **** #else
 473:FATFS/Target/sd_diskio.c ****         timer = osKernelGetTickCount();
 474:FATFS/Target/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 475:FATFS/Target/sd_diskio.c ****         while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 476:FATFS/Target/sd_diskio.c **** #endif
 477:FATFS/Target/sd_diskio.c ****         {
 478:FATFS/Target/sd_diskio.c ****           if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 450              		.loc 1 478 0
 451 005c FFF7FEFF 		bl	BSP_SD_GetCardState
 452              	.LVL39:
 453 0060 0028     		cmp	r0, #0
 454 0062 F4D1     		bne	.L43
 479:FATFS/Target/sd_diskio.c ****           {
 480:FATFS/Target/sd_diskio.c ****             res = RES_OK;
 455              		.loc 1 480 0
 456 0064 0020     		movs	r0, #0
 457 0066 02E0     		b	.L42
 458              	.L54:
 414:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 459              		.loc 1 414 0
 460 0068 0120     		movs	r0, #1
 461 006a 00E0     		b	.L42
 462              	.LVL40:
 463              	.L45:
 434:FATFS/Target/sd_diskio.c ****   }
 464              		.loc 1 434 0
 465 006c 0120     		movs	r0, #1
 466              	.LVL41:
 467              	.L42:
 481:FATFS/Target/sd_diskio.c ****             break;
 482:FATFS/Target/sd_diskio.c ****           }
 483:FATFS/Target/sd_diskio.c ****         }
 484:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 485:FATFS/Target/sd_diskio.c ****       }
 486:FATFS/Target/sd_diskio.c ****     }
 487:FATFS/Target/sd_diskio.c **** #else
 488:FATFS/Target/sd_diskio.c ****     }
ARM GAS  /tmp/ccNKnSLP.s 			page 18


 489:FATFS/Target/sd_diskio.c **** #endif
 490:FATFS/Target/sd_diskio.c ****   }
 491:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 492:FATFS/Target/sd_diskio.c ****   else {
 493:FATFS/Target/sd_diskio.c ****     /* Slow path, fetch each sector a part and memcpy to destination buffer */
 494:FATFS/Target/sd_diskio.c ****     int i;
 495:FATFS/Target/sd_diskio.c **** 
 496:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 497:FATFS/Target/sd_diskio.c ****     /*
 498:FATFS/Target/sd_diskio.c ****      * invalidate the scratch buffer before the next write to get the actual data instead of the ca
 499:FATFS/Target/sd_diskio.c ****      */
 500:FATFS/Target/sd_diskio.c ****      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 501:FATFS/Target/sd_diskio.c **** #endif
 502:FATFS/Target/sd_diskio.c ****       for (i = 0; i < count; i++)
 503:FATFS/Target/sd_diskio.c ****       {
 504:FATFS/Target/sd_diskio.c ****         memcpy((void *)scratch, buff, BLOCKSIZE);
 505:FATFS/Target/sd_diskio.c ****         buff += BLOCKSIZE;
 506:FATFS/Target/sd_diskio.c **** 
 507:FATFS/Target/sd_diskio.c ****         ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 508:FATFS/Target/sd_diskio.c ****         if (ret == MSD_OK )
 509:FATFS/Target/sd_diskio.c ****         {
 510:FATFS/Target/sd_diskio.c ****           /* wait until the read is successful or a timeout occurs */
 511:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 512:FATFS/Target/sd_diskio.c ****           /* wait for a message from the queue or a timeout */
 513:FATFS/Target/sd_diskio.c ****           event = osMessageGet(SDQueueID, SD_TIMEOUT);
 514:FATFS/Target/sd_diskio.c **** 
 515:FATFS/Target/sd_diskio.c ****           if (event.status == osEventMessage)
 516:FATFS/Target/sd_diskio.c ****           {
 517:FATFS/Target/sd_diskio.c ****             if (event.value.v == READ_CPLT_MSG)
 518:FATFS/Target/sd_diskio.c ****             {
 519:FATFS/Target/sd_diskio.c ****               timer = osKernelSysTick();
 520:FATFS/Target/sd_diskio.c ****               /* block until SDIO IP is ready or a timeout occur */
 521:FATFS/Target/sd_diskio.c ****               while(osKernelSysTick() - timer <SD_TIMEOUT)
 522:FATFS/Target/sd_diskio.c **** #else
 523:FATFS/Target/sd_diskio.c ****                 status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 524:FATFS/Target/sd_diskio.c ****               if ((status == osOK) && (event == READ_CPLT_MSG))
 525:FATFS/Target/sd_diskio.c ****               {
 526:FATFS/Target/sd_diskio.c ****                 timer = osKernelGetTickCount();
 527:FATFS/Target/sd_diskio.c ****                 /* block until SDIO IP is ready or a timeout occur */
 528:FATFS/Target/sd_diskio.c ****                 ret = MSD_ERROR;
 529:FATFS/Target/sd_diskio.c ****                 while(osKernelGetTickCount() - timer < SD_TIMEOUT)
 530:FATFS/Target/sd_diskio.c **** #endif
 531:FATFS/Target/sd_diskio.c ****                 {
 532:FATFS/Target/sd_diskio.c ****                   ret = BSP_SD_GetCardState();
 533:FATFS/Target/sd_diskio.c **** 
 534:FATFS/Target/sd_diskio.c ****                   if (ret == MSD_OK)
 535:FATFS/Target/sd_diskio.c ****                   {
 536:FATFS/Target/sd_diskio.c ****                     break;
 537:FATFS/Target/sd_diskio.c ****                   }
 538:FATFS/Target/sd_diskio.c ****                 }
 539:FATFS/Target/sd_diskio.c **** 
 540:FATFS/Target/sd_diskio.c ****                 if (ret != MSD_OK)
 541:FATFS/Target/sd_diskio.c ****                 {
 542:FATFS/Target/sd_diskio.c ****                   break;
 543:FATFS/Target/sd_diskio.c ****                 }
 544:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 545:FATFS/Target/sd_diskio.c ****               }
ARM GAS  /tmp/ccNKnSLP.s 			page 19


 546:FATFS/Target/sd_diskio.c ****             }
 547:FATFS/Target/sd_diskio.c **** #else
 548:FATFS/Target/sd_diskio.c ****           }
 549:FATFS/Target/sd_diskio.c **** #endif
 550:FATFS/Target/sd_diskio.c ****         }
 551:FATFS/Target/sd_diskio.c ****         else
 552:FATFS/Target/sd_diskio.c ****         {
 553:FATFS/Target/sd_diskio.c ****           break;
 554:FATFS/Target/sd_diskio.c ****         }
 555:FATFS/Target/sd_diskio.c ****       }
 556:FATFS/Target/sd_diskio.c **** 
 557:FATFS/Target/sd_diskio.c ****       if ((i == count) && (ret == MSD_OK ))
 558:FATFS/Target/sd_diskio.c ****         res = RES_OK;
 559:FATFS/Target/sd_diskio.c ****     }
 560:FATFS/Target/sd_diskio.c **** 
 561:FATFS/Target/sd_diskio.c ****   }
 562:FATFS/Target/sd_diskio.c **** #endif
 563:FATFS/Target/sd_diskio.c **** 
 564:FATFS/Target/sd_diskio.c ****   return res;
 565:FATFS/Target/sd_diskio.c **** }
 468              		.loc 1 565 0
 469 006e 04B0     		add	sp, sp, #16
 470              	.LCFI12:
 471              		.cfi_def_cfa_offset 16
 472              		@ sp needed
 473 0070 70BD     		pop	{r4, r5, r6, pc}
 474              	.LVL42:
 475              	.L56:
 476 0072 00BF     		.align	2
 477              	.L55:
 478 0074 00000000 		.word	.LANCHOR1
 479              		.cfi_endproc
 480              	.LFE154:
 482              		.section	.text.SD_ioctl,"ax",%progbits
 483              		.align	1
 484              		.global	SD_ioctl
 485              		.syntax unified
 486              		.thumb
 487              		.thumb_func
 488              		.fpu fpv5-sp-d16
 490              	SD_ioctl:
 491              	.LFB155:
 566:FATFS/Target/sd_diskio.c ****  #endif /* _USE_WRITE == 1 */
 567:FATFS/Target/sd_diskio.c **** 
 568:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeIoctlSection */
 569:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 570:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeIoctlSection */
 571:FATFS/Target/sd_diskio.c **** /**
 572:FATFS/Target/sd_diskio.c ****   * @brief  I/O control operation
 573:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 574:FATFS/Target/sd_diskio.c ****   * @param  cmd: Control code
 575:FATFS/Target/sd_diskio.c ****   * @param  *buff: Buffer to send/receive control data
 576:FATFS/Target/sd_diskio.c ****   * @retval DRESULT: Operation result
 577:FATFS/Target/sd_diskio.c ****   */
 578:FATFS/Target/sd_diskio.c **** #if _USE_IOCTL == 1
 579:FATFS/Target/sd_diskio.c **** DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
 580:FATFS/Target/sd_diskio.c **** {
ARM GAS  /tmp/ccNKnSLP.s 			page 20


 492              		.loc 1 580 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 32
 495              		@ frame_needed = 0, uses_anonymous_args = 0
 496              	.LVL43:
 581:FATFS/Target/sd_diskio.c ****   DRESULT res = RES_ERROR;
 582:FATFS/Target/sd_diskio.c ****   BSP_SD_CardInfo CardInfo;
 583:FATFS/Target/sd_diskio.c **** 
 584:FATFS/Target/sd_diskio.c ****   if (Stat & STA_NOINIT) return RES_NOTRDY;
 497              		.loc 1 584 0
 498 0000 154B     		ldr	r3, .L70
 499 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 500 0004 13F0010F 		tst	r3, #1
 501 0008 21D1     		bne	.L64
 580:FATFS/Target/sd_diskio.c ****   DRESULT res = RES_ERROR;
 502              		.loc 1 580 0
 503 000a 10B5     		push	{r4, lr}
 504              	.LCFI13:
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 4, -8
 507              		.cfi_offset 14, -4
 508 000c 88B0     		sub	sp, sp, #32
 509              	.LCFI14:
 510              		.cfi_def_cfa_offset 40
 511 000e 1446     		mov	r4, r2
 585:FATFS/Target/sd_diskio.c **** 
 586:FATFS/Target/sd_diskio.c ****   switch (cmd)
 512              		.loc 1 586 0
 513 0010 0329     		cmp	r1, #3
 514 0012 1ED8     		bhi	.L65
 515 0014 DFE801F0 		tbb	[pc, r1]
 516              	.L60:
 517 0018 02       		.byte	(.L59-.L60)/2
 518 0019 05       		.byte	(.L61-.L60)/2
 519 001a 0C       		.byte	(.L62-.L60)/2
 520 001b 13       		.byte	(.L63-.L60)/2
 521              		.p2align 1
 522              	.L59:
 587:FATFS/Target/sd_diskio.c ****   {
 588:FATFS/Target/sd_diskio.c ****   /* Make sure that no pending write process */
 589:FATFS/Target/sd_diskio.c ****   case CTRL_SYNC :
 590:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 523              		.loc 1 590 0
 524 001c 0020     		movs	r0, #0
 525              	.LVL44:
 526              	.L58:
 591:FATFS/Target/sd_diskio.c ****     break;
 592:FATFS/Target/sd_diskio.c **** 
 593:FATFS/Target/sd_diskio.c ****   /* Get number of sectors on the disk (DWORD) */
 594:FATFS/Target/sd_diskio.c ****   case GET_SECTOR_COUNT :
 595:FATFS/Target/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 596:FATFS/Target/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockNbr;
 597:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 598:FATFS/Target/sd_diskio.c ****     break;
 599:FATFS/Target/sd_diskio.c **** 
 600:FATFS/Target/sd_diskio.c ****   /* Get R/W sector size (WORD) */
 601:FATFS/Target/sd_diskio.c ****   case GET_SECTOR_SIZE :
ARM GAS  /tmp/ccNKnSLP.s 			page 21


 602:FATFS/Target/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 603:FATFS/Target/sd_diskio.c ****     *(WORD*)buff = CardInfo.LogBlockSize;
 604:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 605:FATFS/Target/sd_diskio.c ****     break;
 606:FATFS/Target/sd_diskio.c **** 
 607:FATFS/Target/sd_diskio.c ****   /* Get erase block size in unit of sector (DWORD) */
 608:FATFS/Target/sd_diskio.c ****   case GET_BLOCK_SIZE :
 609:FATFS/Target/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 610:FATFS/Target/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 611:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 612:FATFS/Target/sd_diskio.c ****     break;
 613:FATFS/Target/sd_diskio.c **** 
 614:FATFS/Target/sd_diskio.c ****   default:
 615:FATFS/Target/sd_diskio.c ****     res = RES_PARERR;
 616:FATFS/Target/sd_diskio.c ****   }
 617:FATFS/Target/sd_diskio.c **** 
 618:FATFS/Target/sd_diskio.c ****   return res;
 619:FATFS/Target/sd_diskio.c **** }
 527              		.loc 1 619 0
 528 001e 08B0     		add	sp, sp, #32
 529              	.LCFI15:
 530              		.cfi_remember_state
 531              		.cfi_def_cfa_offset 8
 532              		@ sp needed
 533 0020 10BD     		pop	{r4, pc}
 534              	.LVL45:
 535              	.L61:
 536              	.LCFI16:
 537              		.cfi_restore_state
 595:FATFS/Target/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockNbr;
 538              		.loc 1 595 0
 539 0022 6846     		mov	r0, sp
 540              	.LVL46:
 541 0024 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 542              	.LVL47:
 596:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 543              		.loc 1 596 0
 544 0028 069B     		ldr	r3, [sp, #24]
 545 002a 2360     		str	r3, [r4]
 546              	.LVL48:
 597:FATFS/Target/sd_diskio.c ****     break;
 547              		.loc 1 597 0
 548 002c 0020     		movs	r0, #0
 598:FATFS/Target/sd_diskio.c **** 
 549              		.loc 1 598 0
 550 002e F6E7     		b	.L58
 551              	.LVL49:
 552              	.L62:
 602:FATFS/Target/sd_diskio.c ****     *(WORD*)buff = CardInfo.LogBlockSize;
 553              		.loc 1 602 0
 554 0030 6846     		mov	r0, sp
 555              	.LVL50:
 556 0032 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 557              	.LVL51:
 603:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 558              		.loc 1 603 0
 559 0036 079B     		ldr	r3, [sp, #28]
ARM GAS  /tmp/ccNKnSLP.s 			page 22


 560 0038 2380     		strh	r3, [r4]	@ movhi
 561              	.LVL52:
 604:FATFS/Target/sd_diskio.c ****     break;
 562              		.loc 1 604 0
 563 003a 0020     		movs	r0, #0
 605:FATFS/Target/sd_diskio.c **** 
 564              		.loc 1 605 0
 565 003c EFE7     		b	.L58
 566              	.LVL53:
 567              	.L63:
 609:FATFS/Target/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 568              		.loc 1 609 0
 569 003e 6846     		mov	r0, sp
 570              	.LVL54:
 571 0040 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 572              	.LVL55:
 610:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 573              		.loc 1 610 0
 574 0044 079B     		ldr	r3, [sp, #28]
 575 0046 5B0A     		lsrs	r3, r3, #9
 576 0048 2360     		str	r3, [r4]
 577              	.LVL56:
 611:FATFS/Target/sd_diskio.c ****     break;
 578              		.loc 1 611 0
 579 004a 0020     		movs	r0, #0
 612:FATFS/Target/sd_diskio.c **** 
 580              		.loc 1 612 0
 581 004c E7E7     		b	.L58
 582              	.LVL57:
 583              	.L64:
 584              	.LCFI17:
 585              		.cfi_def_cfa_offset 0
 586              		.cfi_restore 4
 587              		.cfi_restore 14
 584:FATFS/Target/sd_diskio.c **** 
 588              		.loc 1 584 0
 589 004e 0320     		movs	r0, #3
 590              	.LVL58:
 591              		.loc 1 619 0
 592 0050 7047     		bx	lr
 593              	.LVL59:
 594              	.L65:
 615:FATFS/Target/sd_diskio.c ****   }
 595              		.loc 1 615 0
 596 0052 0420     		movs	r0, #4
 597              	.LVL60:
 598 0054 E3E7     		b	.L58
 599              	.L71:
 600 0056 00BF     		.align	2
 601              	.L70:
 602 0058 00000000 		.word	.LANCHOR0
 603              		.cfi_endproc
 604              	.LFE155:
 606              		.section	.text.BSP_SD_WriteCpltCallback,"ax",%progbits
 607              		.align	1
 608              		.global	BSP_SD_WriteCpltCallback
 609              		.syntax unified
ARM GAS  /tmp/ccNKnSLP.s 			page 23


 610              		.thumb
 611              		.thumb_func
 612              		.fpu fpv5-sp-d16
 614              	BSP_SD_WriteCpltCallback:
 615              	.LFB156:
 620:FATFS/Target/sd_diskio.c **** #endif /* _USE_IOCTL == 1 */
 621:FATFS/Target/sd_diskio.c **** 
 622:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN afterIoctlSection */
 623:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 624:FATFS/Target/sd_diskio.c **** /* USER CODE END afterIoctlSection */
 625:FATFS/Target/sd_diskio.c **** 
 626:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN callbackSection */ 
 627:FATFS/Target/sd_diskio.c **** /* can be used to modify / following code or add new code */
 628:FATFS/Target/sd_diskio.c **** /* USER CODE END callbackSection */
 629:FATFS/Target/sd_diskio.c **** /**
 630:FATFS/Target/sd_diskio.c ****   * @brief Tx Transfer completed callbacks
 631:FATFS/Target/sd_diskio.c ****   * @param hsd: SD handle
 632:FATFS/Target/sd_diskio.c ****   * @retval None
 633:FATFS/Target/sd_diskio.c ****   */
 634:FATFS/Target/sd_diskio.c **** void BSP_SD_WriteCpltCallback(void)
 635:FATFS/Target/sd_diskio.c **** {
 616              		.loc 1 635 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620 0000 08B5     		push	{r3, lr}
 621              	.LCFI18:
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 3, -8
 624              		.cfi_offset 14, -4
 636:FATFS/Target/sd_diskio.c ****   
 637:FATFS/Target/sd_diskio.c ****   /*
 638:FATFS/Target/sd_diskio.c ****    * No need to add an "osKernelRunning()" check here, as the SD_initialize()
 639:FATFS/Target/sd_diskio.c ****    * is always called before any SD_Read()/SD_Write() call
 640:FATFS/Target/sd_diskio.c ****    */
 641:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 642:FATFS/Target/sd_diskio.c ****    osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 625              		.loc 1 642 0
 626 0002 0022     		movs	r2, #0
 627 0004 0221     		movs	r1, #2
 628 0006 024B     		ldr	r3, .L74
 629 0008 1868     		ldr	r0, [r3]
 630 000a FFF7FEFF 		bl	osMessagePut
 631              	.LVL61:
 643:FATFS/Target/sd_diskio.c **** #else
 644:FATFS/Target/sd_diskio.c ****    const uint16_t msg = WRITE_CPLT_MSG;
 645:FATFS/Target/sd_diskio.c ****    osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 646:FATFS/Target/sd_diskio.c **** #endif
 647:FATFS/Target/sd_diskio.c **** }
 632              		.loc 1 647 0
 633 000e 08BD     		pop	{r3, pc}
 634              	.L75:
 635              		.align	2
 636              	.L74:
 637 0010 00000000 		.word	.LANCHOR1
 638              		.cfi_endproc
 639              	.LFE156:
ARM GAS  /tmp/ccNKnSLP.s 			page 24


 641              		.section	.text.BSP_SD_ReadCpltCallback,"ax",%progbits
 642              		.align	1
 643              		.global	BSP_SD_ReadCpltCallback
 644              		.syntax unified
 645              		.thumb
 646              		.thumb_func
 647              		.fpu fpv5-sp-d16
 649              	BSP_SD_ReadCpltCallback:
 650              	.LFB157:
 648:FATFS/Target/sd_diskio.c **** 
 649:FATFS/Target/sd_diskio.c **** /**
 650:FATFS/Target/sd_diskio.c ****   * @brief Rx Transfer completed callbacks
 651:FATFS/Target/sd_diskio.c ****   * @param hsd: SD handle
 652:FATFS/Target/sd_diskio.c ****   * @retval None
 653:FATFS/Target/sd_diskio.c ****   */
 654:FATFS/Target/sd_diskio.c **** void BSP_SD_ReadCpltCallback(void)
 655:FATFS/Target/sd_diskio.c **** {
 651              		.loc 1 655 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655 0000 08B5     		push	{r3, lr}
 656              	.LCFI19:
 657              		.cfi_def_cfa_offset 8
 658              		.cfi_offset 3, -8
 659              		.cfi_offset 14, -4
 656:FATFS/Target/sd_diskio.c ****   /*
 657:FATFS/Target/sd_diskio.c ****    * No need to add an "osKernelRunning()" check here, as the SD_initialize()
 658:FATFS/Target/sd_diskio.c ****    * is always called before any SD_Read()/SD_Write() call
 659:FATFS/Target/sd_diskio.c ****    */
 660:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 661:FATFS/Target/sd_diskio.c ****    osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 660              		.loc 1 661 0
 661 0002 0022     		movs	r2, #0
 662 0004 0121     		movs	r1, #1
 663 0006 024B     		ldr	r3, .L78
 664 0008 1868     		ldr	r0, [r3]
 665 000a FFF7FEFF 		bl	osMessagePut
 666              	.LVL62:
 662:FATFS/Target/sd_diskio.c **** #else
 663:FATFS/Target/sd_diskio.c ****    const uint16_t msg = READ_CPLT_MSG;
 664:FATFS/Target/sd_diskio.c ****    osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 665:FATFS/Target/sd_diskio.c **** #endif
 666:FATFS/Target/sd_diskio.c **** }
 667              		.loc 1 666 0
 668 000e 08BD     		pop	{r3, pc}
 669              	.L79:
 670              		.align	2
 671              	.L78:
 672 0010 00000000 		.word	.LANCHOR1
 673              		.cfi_endproc
 674              	.LFE157:
 676              		.global	SD_Driver
 677              		.section	.rodata
 678              		.align	2
 679              		.set	.LANCHOR2,. + 0
 680              	.LC0:
ARM GAS  /tmp/ccNKnSLP.s 			page 25


 681 0000 0A000000 		.word	10
 682 0004 02000000 		.word	2
 683 0008 00000000 		.word	0
 684 000c 00000000 		.word	0
 685              		.section	.bss.SDQueueID,"aw",%nobits
 686              		.align	2
 687              		.set	.LANCHOR1,. + 0
 690              	SDQueueID:
 691 0000 00000000 		.space	4
 692              		.section	.data.Stat,"aw",%progbits
 693              		.set	.LANCHOR0,. + 0
 696              	Stat:
 697 0000 01       		.byte	1
 698              		.section	.rodata.SD_Driver,"a",%progbits
 699              		.align	2
 702              	SD_Driver:
 703 0000 00000000 		.word	SD_initialize
 704 0004 00000000 		.word	SD_status
 705 0008 00000000 		.word	SD_read
 706 000c 00000000 		.word	SD_write
 707 0010 00000000 		.word	SD_ioctl
 708              		.text
 709              	.Letext0:
 710              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 711              		.file 3 "Middlewares/Third_Party/FatFs/src/diskio.h"
 712              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 713              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 714              		.file 6 "Drivers/CMSIS/Include/core_cm7.h"
 715              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 716              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 717              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 718              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 719              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 720              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 721              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 722              		.file 14 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 723              		.file 15 "FATFS/Target/sd_diskio.h"
 724              		.file 16 "/usr/include/newlib/sys/lock.h"
 725              		.file 17 "/usr/include/newlib/sys/_types.h"
 726              		.file 18 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 727              		.file 19 "/usr/include/newlib/sys/reent.h"
 728              		.file 20 "FATFS/Target/bsp_driver_sd.h"
ARM GAS  /tmp/ccNKnSLP.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sd_diskio.c
     /tmp/ccNKnSLP.s:18     .text.SD_CheckStatus:0000000000000000 $t
     /tmp/ccNKnSLP.s:24     .text.SD_CheckStatus:0000000000000000 SD_CheckStatus
     /tmp/ccNKnSLP.s:59     .text.SD_CheckStatus:0000000000000020 $d
     /tmp/ccNKnSLP.s:64     .text.SD_initialize:0000000000000000 $t
     /tmp/ccNKnSLP.s:71     .text.SD_initialize:0000000000000000 SD_initialize
     /tmp/ccNKnSLP.s:162    .text.SD_initialize:0000000000000068 $d
     /tmp/ccNKnSLP.s:170    .text.SD_status:0000000000000000 $t
     /tmp/ccNKnSLP.s:177    .text.SD_status:0000000000000000 SD_status
     /tmp/ccNKnSLP.s:198    .text.SD_CheckStatusWithTimeout:0000000000000000 $t
     /tmp/ccNKnSLP.s:204    .text.SD_CheckStatusWithTimeout:0000000000000000 SD_CheckStatusWithTimeout
     /tmp/ccNKnSLP.s:249    .text.SD_read:0000000000000000 $t
     /tmp/ccNKnSLP.s:256    .text.SD_read:0000000000000000 SD_read
     /tmp/ccNKnSLP.s:363    .text.SD_read:0000000000000074 $d
     /tmp/ccNKnSLP.s:368    .text.SD_write:0000000000000000 $t
     /tmp/ccNKnSLP.s:375    .text.SD_write:0000000000000000 SD_write
     /tmp/ccNKnSLP.s:478    .text.SD_write:0000000000000074 $d
     /tmp/ccNKnSLP.s:483    .text.SD_ioctl:0000000000000000 $t
     /tmp/ccNKnSLP.s:490    .text.SD_ioctl:0000000000000000 SD_ioctl
     /tmp/ccNKnSLP.s:517    .text.SD_ioctl:0000000000000018 $d
     /tmp/ccNKnSLP.s:521    .text.SD_ioctl:000000000000001c $t
     /tmp/ccNKnSLP.s:602    .text.SD_ioctl:0000000000000058 $d
     /tmp/ccNKnSLP.s:607    .text.BSP_SD_WriteCpltCallback:0000000000000000 $t
     /tmp/ccNKnSLP.s:614    .text.BSP_SD_WriteCpltCallback:0000000000000000 BSP_SD_WriteCpltCallback
     /tmp/ccNKnSLP.s:637    .text.BSP_SD_WriteCpltCallback:0000000000000010 $d
     /tmp/ccNKnSLP.s:642    .text.BSP_SD_ReadCpltCallback:0000000000000000 $t
     /tmp/ccNKnSLP.s:649    .text.BSP_SD_ReadCpltCallback:0000000000000000 BSP_SD_ReadCpltCallback
     /tmp/ccNKnSLP.s:672    .text.BSP_SD_ReadCpltCallback:0000000000000010 $d
     /tmp/ccNKnSLP.s:702    .rodata.SD_Driver:0000000000000000 SD_Driver
     /tmp/ccNKnSLP.s:678    .rodata:0000000000000000 $d
     /tmp/ccNKnSLP.s:686    .bss.SDQueueID:0000000000000000 $d
     /tmp/ccNKnSLP.s:690    .bss.SDQueueID:0000000000000000 SDQueueID
     /tmp/ccNKnSLP.s:696    .data.Stat:0000000000000000 Stat
     /tmp/ccNKnSLP.s:699    .rodata.SD_Driver:0000000000000000 $d

UNDEFINED SYMBOLS
BSP_SD_GetCardState
osKernelRunning
BSP_SD_Init
osMessageCreate
osKernelSysTick
BSP_SD_ReadBlocks_DMA
osMessageGet
BSP_SD_WriteBlocks_DMA
BSP_SD_GetCardInfo
osMessagePut
