ARM GAS  /tmp/ccRCsb68.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7xx_hal_uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.UART_EndTxTransfer,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	UART_EndTxTransfer:
  25              	.LFB187:
  26              		.file 1 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c"
   1:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
   2:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @file    stm32f7xx_hal_uart.c
   4:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
  12:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
  13:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   @verbatim
  14:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
  15:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                         ##### How to use this driver #####
  16:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
  17:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   [..]
  18:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  19:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  20:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  21:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  22:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Enable the USARTx interface clock.
  23:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) UART pins configuration:
  24:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  25:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  26:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  27:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  28:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  29:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  30:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) UART interrupts handling:
  31:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****               -@@-  The specific UART interrupts (Transmission complete interrupt,
  32:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                 RXNE interrupt, RX/TX FIFOs related interrupts and Error Interrupts)
ARM GAS  /tmp/ccRCsb68.s 			page 2


  33:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                 are managed using the macros __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT()
  34:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                 inside the transmit and receive processes.
  35:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  36:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  37:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  38:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  39:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  40:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  41:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  42:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  43:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  44:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  45:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         flow control and Mode (Receiver/Transmitter) in the huart handle Init structure.
  46:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  47:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) If required, program UART advanced features (TX/RX pins swap, auto Baud rate detection,...)
  48:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         in the huart handle AdvancedInit structure.
  49:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  50:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  51:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         the HAL_UART_Init() API.
  52:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  53:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  54:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  55:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  56:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART LIN (Local Interconnection Network) mode, initialize the UART registers
  57:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         by calling the HAL_LIN_Init() API.
  58:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  59:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART Multiprocessor mode, initialize the UART registers
  60:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         by calling the HAL_MultiProcessor_Init() API.
  61:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  62:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For the UART RS485 Driver Enabled mode, initialize the UART registers
  63:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         by calling the HAL_RS485Ex_Init() API.
  64:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  65:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  66:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (@) These API's (HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init(), HAL_MultiProcessor_Ini
  67:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         also configure the low level Hardware GPIO, CLOCK, CORTEX...etc) by
  68:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         calling the customized HAL_UART_MspInit() API.
  69:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  70:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     ##### Callback registration #####
  71:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     ==================================
  72:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  73:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  74:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  75:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  76:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  77:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  78:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  79:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  80:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  81:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  82:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  83:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  84:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  85:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  86:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  87:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  88:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
  89:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxFifoFullCallback        : Rx Fifo Full Callback.
ARM GAS  /tmp/ccRCsb68.s 			page 3


  90:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxFifoEmptyCallback       : Tx Fifo Empty Callback.
  91:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  92:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  93:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  94:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and a pointer to the user callback function.
  95:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
  96:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
  97:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
  98:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     weak (surcharged) function.
  99:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and the Callback ID.
 101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This function allows to reset following callbacks:
 102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
 111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) RxFifoFullCallback        : Rx Fifo Full Callback.
 112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) TxFifoEmptyCallback       : Tx Fifo Empty Callback.
 113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     not defined, the callback registration feature is not available
 138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   @endverbatim
 142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ******************************************************************************
 143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @attention
 144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * All rights reserved.</center></h2>
ARM GAS  /tmp/ccRCsb68.s 			page 4


 147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ******************************************************************************
 154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #include "stm32f7xx_hal.h"
 158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @addtogroup STM32F7xx_HAL_Driver
 160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART UART
 164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief HAL UART module driver
 165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Private_Constants UART Private Constants
 173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define USART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                                       USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8 )) /*!< UART or
 177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define USART_CR3_FIELDS  ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT))  /*!< UA
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define UART_BRR_MIN    0x10U        /* UART BRR minimum authorized value */
 182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #define UART_BRR_MAX    0x0000FFFFU  /* UART BRR maximum authorized value */
 183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
 186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private macros ------------------------------------------------------------*/
 189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @addtogroup UART_Private_Functions
 192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
ARM GAS  /tmp/ccRCsb68.s 			page 5


 204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart);
 207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart);
 208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart);
 210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart);
 211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
 213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /* Exported functions --------------------------------------------------------*/
 216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
 225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** ===============================================================================
 226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
 228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     in asynchronous mode.
 231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) For the asynchronous mode the parameters below can be configured:
 232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Baud Rate
 233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Word Length
 234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Stop Bit
 235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Hardware flow control
 238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Receiver/transmitter modes
 239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) Over Sampling Method
 240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) One-Bit Sampling Method
 241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
 242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) TX and/or RX pin level inversion
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) data logical level inversion
 244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) RX and TX pins swap
 245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) RX overrun detection disabling
 246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) DMA disabling on RX error
 247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) MSB first on communication line
 248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (++) auto Baud rate detection
 249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
 250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init()and HAL_MultiProcessor_Init()API
 251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, UART LIN mode
 252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and UART multiprocessor mode configuration procedures (details for the procedures
 253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     are available in reference manual).
 254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
 256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   Depending on the frame length defined by the M1 and M0 bits (7-bit,
 258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   8-bit or 9-bit), the possible UART formats are listed in the
 259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   following table.
 260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 6


 261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   Table 1. UART frame format.
 262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    0    |    0      |    | SB |    8 bit data   | STB |     |
 266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    1    |    0      |    | SB |    9 bit data   | STB |     |
 270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    0    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    1    |    0    |    0      |    | SB |    7 bit data   | STB |     |
 274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     |    1    |    0    |    1      |    | SB | 6 bit data | PB | STB |     |
 276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the UART mode according to the specified
 283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check the parameters */
 298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
 301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check the parameters */
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
ARM GAS  /tmp/ccRCsb68.s 			page 7


 318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the half-duplex mode according to the specified
 356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check UART instance */
 369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
ARM GAS  /tmp/ccRCsb68.s 			page 8


 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the LIN mode according to the specified
 425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart             UART handle.
 427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param BreakDetectLength Specifies the LIN break detection length.
 428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        This parameter can be one of the following values:
 429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
 430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
 431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/ccRCsb68.s 			page 9


 432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the LIN UART instance */
 442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the Break detection length parameter */
 444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* LIN mode limited to 16-bit oversampling only */
 447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* LIN mode limited to 8-bit data length */
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
ARM GAS  /tmp/ccRCsb68.s 			page 10


 489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the multiprocessor mode according to the specified
 514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart        UART handle.
 516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Address      UART node address (4-, 6-, 7- or 8-bit long).
 517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param WakeUpMethod Specifies the UART wakeup method.
 518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        This parameter can be one of the following values:
 519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_IDLELINE WakeUp by an idle line detection
 520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_ADDRESSMARK WakeUp by an address mark
 521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note  If the user resorts to idle line detection wake up, the Address parameter
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        is useless and ignored by the initialization function.
 523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note  If the user resorts to address mark wake up, the address length detection
 524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        is configured by default to 4 bits only. For the UART to be able to
 525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        manage 6-, 7- or 8-bit long addresses detection, the API
 526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
 527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *        HAL_MultiProcessor_Init().
 528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the wake up method parameter */
 539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 11


 546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware */
 555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* In multiprocessor mode, the following bits must be kept cleared:
 578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
 580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* If address mark wake up method is chosen, set the USART address node */
 586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS)
 587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DeInitialize the UART peripheral.
 601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/ccRCsb68.s 			page 12


 603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart == NULL)
 608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
 613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR1 = 0x0U;
 620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DeInit the low level hardware */
 629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
 631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DeInit the low level hardware */
 632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Initialize the UART MSP.
 646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
 648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
 653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_MspInit can be implemented in the user file
 656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
 657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
ARM GAS  /tmp/ccRCsb68.s 			page 13


 660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DeInitialize the UART MSP.
 661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
 662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
 663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
 668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_MspDeInit can be implemented in the user file
 671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
 672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Register a User UART Callback
 677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart uart handle
 679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This parameter can be one of the following values:
 681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_FIFO_FULL_CB_ID Rx Fifo Full Callback ID
 691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_FIFO_EMPTY_CB_ID Tx Fifo Empty Callback ID
 692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                                             pUART_CallbackTypeDef pCallback)
 699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (pCallback == NULL)
 703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_ERROR;
 707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
 714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
ARM GAS  /tmp/ccRCsb68.s 			page 14


 717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_WAKEUP_CB_ID :
 748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->WakeupCallback = pCallback;
 749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
 770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
ARM GAS  /tmp/ccRCsb68.s 			page 15


 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
 787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     status =  HAL_ERROR;
 791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return status;
 796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart uart handle
 802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This parameter can be one of the following values:
 804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_FIFO_FULL_CB_ID Rx Fifo Full Callback ID
 814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_FIFO_EMPTY_CB_ID Tx Fifo Empty Callback ID
 815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
 818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
 828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
ARM GAS  /tmp/ccRCsb68.s 			page 16


 831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR1_UESM)
 862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_WAKEUP_CB_ID :
 863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->WakeupCallback = HAL_UARTEx_WakeupCallback;                     /* Legacy weak Wakeu
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR1_UESM */
 867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (CallbackID)
 885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
ARM GAS  /tmp/ccRCsb68.s 			page 17


 888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default :
 895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         status =  HAL_ERROR;
 898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
 902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     status =  HAL_ERROR;
 906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return status;
 911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
 916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief UART Transmit/Receive functions
 920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
 921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
 922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                       ##### IO operation functions #####
 924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
 925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     and Half duplex data transfers.
 927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) There are two mode of transfer:
 929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            after finishing transfer.
 932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            or DMA, These API's return the HAL status.
 934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The end of the data processing will be indicated through the
 935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
 936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            using DMA mode.
 937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
 938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            will be executed respectively at the end of the transmit or Receive process
 939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
 940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Blocking mode API's are :
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Transmit()
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Receive()
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 18


 945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
 946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
 947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
 948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
 949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
 951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
 952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
 953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
 954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
 955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
 956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
 958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
 959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
 960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
 961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
 962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
 963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Abort()
 966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
 967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
 968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
 969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
 970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
 971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
 973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
 974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
 975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
 976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR1_UESM)
 977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) Wakeup from Stop mode Callback:
 979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         (+) HAL_UARTEx_WakeupCallback()
 980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif
 981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
 983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         Errors are handled as follows :
 984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
 985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
 986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
 987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
 988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
 989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
 990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
 991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
 992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
 994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
 995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
 997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
 998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
 999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Send an amount of data in blocking mode.
ARM GAS  /tmp/ccRCsb68.s 			page 19


1002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 provided through pData.
1005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart   UART handle.
1006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData   Pointer to data buffer (u8 or u16 data elements).
1007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size    Amount of data elements (u8 or u16) to be sent.
1008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Timeout Timeout duration.
1009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *pdata16bits;
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return  HAL_ERROR;
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
1031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tickstart = HAL_GetTick();
1032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
1035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = NULL;
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = pData;
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = NULL;
1046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_TIMEOUT;
1055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (pdata8bits == NULL)
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
ARM GAS  /tmp/ccRCsb68.s 			page 20


1059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
1060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
1064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
1065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount--;
1067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
1070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_TIMEOUT;
1072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode.
1087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 available through pData.
1090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart   UART handle.
1091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData   Pointer to data buffer (u8 or u16 data elements).
1092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size    Amount of data elements (u8 or u16) to be received.
1093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Timeout Timeout duration.
1094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
1099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *pdata16bits;
1100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t uhMask;
1101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
1102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return  HAL_ERROR;
1109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 21


1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
1117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tickstart = HAL_GetTick();
1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferSize  = Size;
1120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = Size;
1121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
1124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = NULL;
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
1131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata8bits  = pData;
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = NULL;
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* as long as data have to be received */
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
1142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
1144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_TIMEOUT;
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (pdata8bits == NULL)
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
1150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
1151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
1155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
1156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxXferCount--;
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Send an amount of data in interrupt mode.
ARM GAS  /tmp/ccRCsb68.s 			page 22


1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 provided through pData.
1176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR       = NULL;
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set the Tx ISR function pointer according to the data word length */
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR = UART_TxISR_16BIT;
1205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR = UART_TxISR_8BIT;
1209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the Transmit Data Register Empty interrupt */
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
1215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode.
1226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 available through pData.
1229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
ARM GAS  /tmp/ccRCsb68.s 			page 23


1230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr  = pData;
1247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferSize  = Size;
1248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = Size;
1249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxISR       = NULL;
1250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
1253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set the Rx ISR function pointer according to the data word length */
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxISR = UART_RxISR_16BIT;
1264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxISR = UART_RxISR_8BIT;
1268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
1273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Send an amount of data in DMA mode.
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
ARM GAS  /tmp/ccRCsb68.s 			page 24


1287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 provided through pData.
1288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
1306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
1308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA transfer complete callback */
1315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
1316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Half transfer complete callback */
1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
1319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the DMA error callback */
1321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferErrorCallback = UART_DMAError;
1322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the DMA abort callback */
1324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the UART transmit DMA channel */
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->
1328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Set error code to DMA */
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_DMA;
1331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         __HAL_UNLOCK(huart);
1333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Restore huart->gState to ready */
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
1336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_ERROR;
1338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the TC flag in the ICR register */
1341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
1342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
ARM GAS  /tmp/ccRCsb68.s 			page 25


1344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     in the UART CR3 register */
1347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode.
1359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the parity bit (MSB position).
1361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         of u16 available through pData.
1364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_ERROR;
1377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
1380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
1382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferSize = Size;
1383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA transfer complete callback */
1390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
1391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Half transfer complete callback */
1393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
1394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the DMA error callback */
1396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferErrorCallback = UART_DMAError;
1397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the DMA abort callback */
1399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 26


1401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the DMA channel */
1402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuff
1403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Set error code to DMA */
1405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_DMA;
1406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         __HAL_UNLOCK(huart);
1408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Restore huart->gState to ready */
1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
1411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_ERROR;
1413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     in the UART CR3 register */
1425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
1428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
1432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Pause the DMA Transfer.
1437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
1444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
1446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
1448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
1454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
1455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
ARM GAS  /tmp/ccRCsb68.s 			page 27


1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Resume the DMA Transfer.
1471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
1477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
1479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
1484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
1486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Stop the DMA Transfer.
1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
1511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
1512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
1513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      the stream and the corresponding call back is executed. */
1514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 28


1515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
1516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
1517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
1520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
1540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
1544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
1545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
1564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
ARM GAS  /tmp/ccRCsb68.s 			page 29


1572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
ARM GAS  /tmp/ccRCsb68.s 			page 30


1629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
1639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
1640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
1643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
1646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
1647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
1649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
1650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
1653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 31


1686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
1690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset Tx transfer counter */
1700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
1701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
ARM GAS  /tmp/ccRCsb68.s 			page 32


1743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Set error code to DMA */
1744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
1747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
1748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset Rx transfer counter */
1753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
1754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
1757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
1759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
1760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t abortcplt = 1U;
1784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable interrupts */
1786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      before any call to DMA Abort functions */
1791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmatx != NULL)
1793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        Otherwise, set it to NULL */
1796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
1799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
ARM GAS  /tmp/ccRCsb68.s 			page 33


1800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmarx != NULL)
1807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        Otherwise, set it to NULL */
1810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
1813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
1830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA TX */
1833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
1836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 0U;
1840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
1853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA RX */
1856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
ARM GAS  /tmp/ccRCsb68.s 			page 34


1857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
1859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 1U;
1860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
1862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 0U;
1864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (abortcplt == 1U)
1870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
1873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
1874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear ISR function pointers */
1876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxISR = NULL;
1877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR = NULL;
1878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset errorCode */
1880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
1883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
1884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Discard the received data */
1887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
1888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
1891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call registered Abort complete callback */
1896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
1897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
1898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
1899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
1900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
ARM GAS  /tmp/ccRCsb68.s 			page 35


1914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
1919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
1920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
1922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable interrupts */
1923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
1934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
1936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA TX */
1938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
1940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
1942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
1943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
1945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
1946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Reset Tx transfer counter */
1947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount = 0U;
1948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear TxISR function pointers */
1950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR = NULL;
1951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Restore huart->gState to Ready */
1953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
1954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
1958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
1959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
1960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
1961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
1962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
1964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
1966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
1967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset Tx transfer counter */
1968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
1969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear TxISR function pointers */
ARM GAS  /tmp/ccRCsb68.s 			page 36


1971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR = NULL;
1972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Restore huart->gState to Ready */
1975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
1980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
1981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
1982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
1983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
1984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
1986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
1988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
1989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
1990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
1991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
1993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         This procedure performs following operations :
1995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - Set handle State to READY
1999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
2008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
2016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
2017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
2021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Abort DMA RX */
2023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
2027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
ARM GAS  /tmp/ccRCsb68.s 			page 37


2028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
2030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Reset Rx transfer counter */
2032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxXferCount = 0U;
2033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear RxISR function pointer */
2035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->pRxBuffPtr = NULL;
2036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear the Error flags in the ICR register */
2038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_F
2039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Discard the received data */
2041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
2042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
2045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
2052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
2053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Reset Rx transfer counter */
2059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
2060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear RxISR function pointer */
2062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr = NULL;
2063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
2065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
2066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
2069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
2077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Handle UART interrupt request.
ARM GAS  /tmp/ccRCsb68.s 			page 38


2085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
2091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
2092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
2093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t errorflags;
2095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t errorcode;
2096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If no error occurs */
2098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | 
2099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (errorflags == 0U)
2100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART in mode Receiver ---------------------------------------------------*/
2102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_RXNE) != 0U)
2103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && ((cr1its & USART_CR1_RXNEIE) != 0U))
2104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (huart->RxISR != NULL)
2106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxISR(huart);
2108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return;
2110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* If some errors occur */
2114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((errorflags != 0U)
2115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && (((cr3its & USART_CR3_EIE) != 0U)
2116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
2117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART parity error interrupt occurred -------------------------------------*/
2119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
2120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
2122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
2124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART frame error interrupt occurred --------------------------------------*/
2127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
2128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
2130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
2132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART noise error interrupt occurred --------------------------------------*/
2135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
2136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
2138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
2140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 39


2142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART Over-Run interrupt occurred -----------------------------------------*/
2143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_ORE) != 0U)
2144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
2145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ((cr3its & USART_CR3_EIE) != 0U)))
2146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
2148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
2150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART Receiver Timeout interrupt occurred ---------------------------------*/
2153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
2154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
2156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_RTO;
2158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call UART Error Call back function if need be ----------------------------*/
2161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
2162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* UART in mode Receiver --------------------------------------------------*/
2164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (((isrflags & USART_ISR_RXNE) != 0U)
2165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           && ((cr1its & USART_CR1_RXNEIE) != 0U))
2166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (huart->RxISR != NULL)
2168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
2169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->RxISR(huart);
2170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
2171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* If Error is to be considered as blocking :
2174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           - Receiver Timeout error in Reception
2175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           - Overrun error in Reception
2176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           - any error occurs in DMA mode reception
2177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       */
2178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       errorcode = huart->ErrorCode;
2179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
2180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
2181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         UART_EndRxTransfer(huart);
2186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
2190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           if (huart->hdmarx != NULL)
2194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           {
2195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
2198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 40


2199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /* Abort DMA RX */
2200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             {
2202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****               /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
2204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             }
2205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           }
2206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           else
2207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           {
2208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /* Call user error callback */
2209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /*Call registered error callback*/
2211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             huart->ErrorCallback(huart);
2212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             /*Call legacy weak error callback*/
2214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
2215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           }
2218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
2219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         else
2220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
2221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Call user error callback */
2222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /*Call registered error callback*/
2224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCallback(huart);
2225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /*Call legacy weak error callback*/
2227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
2228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
2230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       else
2232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
2233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            Error is notified to user through user error callback */
2235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call registered error callback*/
2237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCallback(huart);
2238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /*Call legacy weak error callback*/
2240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
2241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
2243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
2244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
2246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   } /* End if some error occurs */
2248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR1_UESM)
2249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
2251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
2252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
2254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* UART Rx state is not reset as a reception process might be ongoing.
ARM GAS  /tmp/ccRCsb68.s 			page 41


2256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        If UART handle state fields need to be reset to READY, this could be done in Wakeup callback
2257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call registered Wakeup Callback */
2260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->WakeupCallback(huart);
2261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
2262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Call legacy weak Wakeup Callback */
2263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UARTEx_WakeupCallback(huart);
2264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
2266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR1_UESM */
2268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (((isrflags & USART_ISR_TXE) != 0U)
2271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && ((cr1its & USART_CR1_TXEIE) != 0U))
2272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->TxISR != NULL)
2274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxISR(huart);
2276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
2278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* UART in mode Transmitter (transmission end) -----------------------------*/
2281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
2282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
2284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
2285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Tx Transfer completed callback.
2291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_TxCpltCallback can be implemented in the user file.
2301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callback.
2306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
ARM GAS  /tmp/ccRCsb68.s 			page 42


2313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
2316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Rx Transfer completed callback.
2321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_RxCpltCallback can be implemented in the user file.
2331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callback.
2336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
2346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART error callback.
2351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_ErrorCallback can be implemented in the user file.
2361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccRCsb68.s 			page 43


2370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR1_UESM)
2410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief UART wakeup from Stop mode callback.
2412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
2416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UNUSED(huart);
2419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             the HAL_UARTEx_WakeupCallback can be implemented in the user file.
2422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****    */
2423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR1_UESM */
2426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
ARM GAS  /tmp/ccRCsb68.s 			page 44


2427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
2428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  @brief   UART control functions
2432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
2433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
2434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
2435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****  ===============================================================================
2437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
2438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART.
2439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_UART_ReceiverTimeout_Config() API allows to configure the receiver timeout value on th
2440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_UART_EnableReceiverTimeout() API enables the receiver timeout feature
2441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_UART_DisableReceiverTimeout() API disables the receiver timeout feature
2442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnableMuteMode() API enables mute mode
2443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_MultiProcessor_DisableMuteMode() API disables mute mode
2444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnterMuteMode() API enters mute mode
2445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) UART_SetConfig() API configures the UART peripheral
2446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) UART_AdvFeatureConfig() API optionally configures the UART advanced features
2447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) UART_CheckIdleState() API ensures that TEACK and/or REACK are set after initialization
2448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableTransmitter() API disables receiver and enables transmitter
2449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableReceiver() API disables transmitter and enables receiver
2450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****      (+) HAL_LIN_SendBreak() API transmits the break characters
2451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
2452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
2453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Update on the fly the receiver timeout value in RTOR register.
2457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
2460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                     value must be less or equal to 0x0FFFFFFFF.
2461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
2464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
2466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
2467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Enable the UART receiver timeout feature.
2471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
2476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
2478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Locked */
2480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
2481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY;
2483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 45


2484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Set the USART RTOEN bit */
2485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
2486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
2488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Unlocked */
2490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
2491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
2493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
2497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Disable the UART receiver timeout feature.
2502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DisableReceiverTimeout(UART_HandleTypeDef *huart)
2507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
2509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Locked */
2511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_LOCK(huart);
2512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY;
2514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear the USART RTOEN bit */
2516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
2517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
2519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Process Unlocked */
2521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
2522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_OK;
2524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return HAL_BUSY;
2528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Enable UART in mute mode (does not mean UART enters mute mode;
2533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
2534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
2538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 46


2541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable USART mute mode by setting the MME bit in the CR1 register */
2544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_MME);
2545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
2549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Disable UART mute mode (does not mean the UART actually exits mute mode
2553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         as it may not have been in mute mode at this very moment).
2554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
2558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable USART mute mode by clearing the MME bit in the CR1 register */
2564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
2565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
2569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Enter UART mute mode (means UART actually enters mute mode).
2573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
2574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
2580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Enable the UART transmitter and disable the UART receiver.
2584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear TE and RE bits */
2593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
2594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_TE);
2597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 47


2598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Enable the UART receiver and disable the UART transmitter.
2607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status.
2609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear TE and RE bits */
2616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
2617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RE);
2620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Transmit break characters.
2631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
2637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
2638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
2640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Send break characters */
2644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
2645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
ARM GAS  /tmp/ccRCsb68.s 			page 48


2655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Error functions
2658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  @brief   UART Peripheral State functions
2659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *
2660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @verbatim
2661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ==============================================================================
2662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ##### Peripheral State and Error functions #####
2663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   ==============================================================================
2664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     [..]
2665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     This subsection provides functions allowing to :
2666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) Return the UART handle state.
2667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (+) Return the UART handle error code
2668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** @endverbatim
2670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
2671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Return the UART handle state.
2675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *               the configuration information for the specified UART.
2677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL state
2678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t temp1;
2682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t temp2;
2683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   temp1 = huart->gState;
2684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   temp2 = huart->RxState;
2685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
2687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Return the UART handle error code.
2691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *               the configuration information for the specified UART.
2693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval UART Error Code
2694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return huart->ErrorCode;
2698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
2701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @}
2705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @{
2709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
ARM GAS  /tmp/ccRCsb68.s 			page 49


2712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
2714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval none
2715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Init the UART Callback settings */
2720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_CR1_UESM)
2729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallb
2730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USART_CR1_UESM */
2731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Configure the UART peripheral.
2737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
2741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tmpreg;
2743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t brrtemp;
2744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_ClockSourceTypeDef clocksource;
2745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t usartdiv                   = 0x00000000U;
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
2747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
2748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
2750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
2751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
2752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
2753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
2754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
2756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
2757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
2758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
2759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
2762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  the UART Word Length, Parity, Mode and oversampling:
2763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set the M bits according to huart->Init.WordLength value
2764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set PCE and PS bits according to huart->Init.Parity value
2765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set TE and RE bits according to huart->Init.Mode value
2766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *  set OVER8 bit according to huart->Init.OverSampling value */
2767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
2768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
ARM GAS  /tmp/ccRCsb68.s 			page 50


2769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
2771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
2772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * to huart->Init.StopBits value */
2773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
2774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Configure
2777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * - UART HardWare Flow Control: set CTSE and RTSE bits according
2778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *   to huart->Init.HwFlowCtl value
2779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * - one-bit sampling method versus three samples' majority rule according
2780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
2781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl;
2782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tmpreg |= huart->Init.OneBitSampling;
2784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
2785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
2789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
2791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (clocksource)
2793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK1Freq();
2796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
2797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
2799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK2Freq();
2800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
2801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
2804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetSysClockFreq();
2807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
2808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
2811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default:
2813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         ret = HAL_ERROR;
2814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* USARTDIV must be greater than or equal to 0d16 */
2818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
2819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
2821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
2822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->BRR = brrtemp;
2823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
2825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
ARM GAS  /tmp/ccRCsb68.s 			page 51


2826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       ret = HAL_ERROR;
2827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
2830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     switch (clocksource)
2832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK1Freq();
2835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
2836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
2838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK2Freq();
2839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
2840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
2843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pclk = HAL_RCC_GetSysClockFreq();
2846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
2847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
2850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default:
2852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         ret = HAL_ERROR;
2853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
2854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* USARTDIV must be greater than or equal to 0d16 */
2857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
2858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->BRR = usartdiv;
2860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
2862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       ret = HAL_ERROR;
2864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear ISR function pointers */
2869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxISR = NULL;
2870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxISR = NULL;
2871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return ret;
2873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Configure the UART peripheral advanced features.
2877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
2879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
2881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
ARM GAS  /tmp/ccRCsb68.s 			page 52


2883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
2884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure TX pin active level inversion */
2886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
2887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
2889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
2890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure RX pin active level inversion */
2893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
2894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
2896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
2897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure data inversion */
2900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
2901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
2903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
2904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure RX/TX pins swap */
2907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
2908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
2910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
2911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure RX overrun detection disabling */
2914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
2915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
2917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
2918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure DMA disabling on reception error */
2921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
2922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
2924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
2925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure auto Baud rate detection scheme */
2928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
2929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
2931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
2932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
2933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
2934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
2935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
2937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
2938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccRCsb68.s 			page 53


2940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* if required, configure MSB first on communication line */
2942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
2943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
2945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
2946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief Check the UART Idle State.
2951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
2952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
2953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
2954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
2956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
2957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Initialize the UART ErrorCode */
2959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
2960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Init tickstart for timeout managment*/
2962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   tickstart = HAL_GetTick();
2963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check if the Transmitter is enabled */
2965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
2966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Wait until TEACK flag is set */
2968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALU
2969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Timeout occurred */
2971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_TIMEOUT;
2972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if defined(USART_ISR_REACK)
2975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check if the Receiver is enabled */
2977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
2978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
2979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Wait until REACK flag is set */
2980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALU
2981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
2982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Timeout occurred */
2983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return HAL_TIMEOUT;
2984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
2985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
2986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif
2987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Initialize the UART State */
2989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
2994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
2995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
2996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 54


2997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
2998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Handle UART Communication Timeout.
2999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart     UART handle.
3000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Flag      Specifies the UART flag to check
3001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Status    Flag status (SET or RESET)
3002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Tickstart Tick start value
3003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param Timeout   Timeout duration
3004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval HAL status
3005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
3007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****                                               uint32_t Tickstart, uint32_t Timeout)
3008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Wait until flag is set */
3010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Check for the Timeout */
3013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
3014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
3017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
3018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
3019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
3022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
3023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         __HAL_UNLOCK(huart);
3025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         return HAL_TIMEOUT;
3027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
3028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
3030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
3031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
3033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Clear Receiver Timeout flag*/
3034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           
3036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for
3037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
3038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->gState = HAL_UART_STATE_READY;
3041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
3042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_RTO;
3043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           
3044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           /* Process Unlocked */
3045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           __HAL_UNLOCK(huart);
3046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           
3047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           return HAL_TIMEOUT;
3048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
3049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
3050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return HAL_OK;
3053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
ARM GAS  /tmp/ccRCsb68.s 			page 55


3054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
3058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
3059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
3062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
  27              		.loc 1 3062 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
3063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
3064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
  33              		.loc 1 3064 0
  34 0000 0268     		ldr	r2, [r0]
  35 0002 1368     		ldr	r3, [r2]
  36 0004 23F0C003 		bic	r3, r3, #192
  37 0008 1360     		str	r3, [r2]
3065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
3067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
  38              		.loc 1 3067 0
  39 000a 2023     		movs	r3, #32
  40 000c 4367     		str	r3, [r0, #116]
3068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
  41              		.loc 1 3068 0
  42 000e 7047     		bx	lr
  43              		.cfi_endproc
  44              	.LFE187:
  46              		.section	.text.UART_EndRxTransfer,"ax",%progbits
  47              		.align	1
  48              		.syntax unified
  49              		.thumb
  50              		.thumb_func
  51              		.fpu fpv5-sp-d16
  53              	UART_EndRxTransfer:
  54              	.LFB188:
3069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
3073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart UART handle.
3074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
3077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
  55              		.loc 1 3077 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              	.LVL1:
3078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
ARM GAS  /tmp/ccRCsb68.s 			page 56


3079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  61              		.loc 1 3079 0
  62 0000 0268     		ldr	r2, [r0]
  63 0002 1368     		ldr	r3, [r2]
  64 0004 23F49073 		bic	r3, r3, #288
  65 0008 1360     		str	r3, [r2]
3080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
  66              		.loc 1 3080 0
  67 000a 0268     		ldr	r2, [r0]
  68 000c 9368     		ldr	r3, [r2, #8]
  69 000e 23F00103 		bic	r3, r3, #1
  70 0012 9360     		str	r3, [r2, #8]
3081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
3083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
  71              		.loc 1 3083 0
  72 0014 2023     		movs	r3, #32
  73 0016 8367     		str	r3, [r0, #120]
3084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset RxIsr function pointer */
3086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxISR = NULL;
  74              		.loc 1 3086 0
  75 0018 0023     		movs	r3, #0
  76 001a 0366     		str	r3, [r0, #96]
3087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
  77              		.loc 1 3087 0
  78 001c 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE188:
  82              		.section	.text.UART_TxISR_8BIT,"ax",%progbits
  83              		.align	1
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  87              		.fpu fpv5-sp-d16
  89              	UART_TxISR_8BIT:
  90              	.LFB199:
3088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART transmit process complete callback.
3092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
3096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Normal mode */
3100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
3101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
3103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by resetting the DMAT bit
3105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        in the UART CR3 register */
3106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
3107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 57


3108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
3109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Circular mode */
3112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
3113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call registered Tx complete callback*/
3116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxCpltCallback(huart);
3117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
3119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
3120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback.
3126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
3130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered Tx Half complete callback*/
3135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
3136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak Tx Half complete callback*/
3138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
3139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART receive process complete callback.
3144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* DMA Normal mode */
3152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
3153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
3155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
3157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
3158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
3161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****        in the UART CR3 register */
3162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
3163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
ARM GAS  /tmp/ccRCsb68.s 			page 58


3165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
3166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered Rx complete callback*/
3170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxCpltCallback(huart);
3171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak Rx complete callback*/
3173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
3174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback.
3179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered Rx Half complete callback*/
3188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxHalfCpltCallback(huart);
3189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak Rx Half complete callback*/
3191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart);
3192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief DMA UART communication error callback.
3197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param hdma DMA handle.
3198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
3201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
3205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
3206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
3209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
3210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = 0U;
3212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
3213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
3217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
3218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
3220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
3221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccRCsb68.s 			page 59


3222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
3224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered error callback*/
3227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCallback(huart);
3228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak error callback*/
3230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
3231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
3241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered error callback*/
3248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCallback(huart);
3249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak error callback*/
3251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
3252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
3258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
3268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmarx != NULL)
3271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
3273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return;
3275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
ARM GAS  /tmp/ccRCsb68.s 			page 60


3279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset errorCode */
3283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
3284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
3287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
3291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort complete callback */
3296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
3300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
3317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->hdmatx != NULL)
3320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
3322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       return;
3324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Reset errorCode */
3332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
3333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
ARM GAS  /tmp/ccRCsb68.s 			page 61


3336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
3338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
3342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort complete callback */
3347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
3351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
3365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
3372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
3380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  hdma DMA handle.
3389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
ARM GAS  /tmp/ccRCsb68.s 			page 62


3393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
3394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
3399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Discard the received data */
3401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call user Abort complete callback */
3407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
3413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
3415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief TX interrrupt handler for 7 or 8 bits data word length .
3418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
3424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
  91              		.loc 1 3424 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96              	.LVL2:
3425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
  97              		.loc 1 3426 0
  98 0000 436F     		ldr	r3, [r0, #116]
  99 0002 212B     		cmp	r3, #33
 100 0004 00D0     		beq	.L6
 101              	.L3:
3427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
3429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
3432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
3437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
ARM GAS  /tmp/ccRCsb68.s 			page 63


3439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->pTxBuffPtr++;
3440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount--;
3441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 102              		.loc 1 3443 0
 103 0006 7047     		bx	lr
 104              	.L6:
3428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 105              		.loc 1 3428 0
 106 0008 B0F85230 		ldrh	r3, [r0, #82]
 107 000c 9BB2     		uxth	r3, r3
 108 000e 6BB1     		cbz	r3, .L7
3438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->pTxBuffPtr++;
 109              		.loc 1 3438 0
 110 0010 C36C     		ldr	r3, [r0, #76]
 111 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 112 0014 0368     		ldr	r3, [r0]
 113 0016 9A62     		str	r2, [r3, #40]
3439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount--;
 114              		.loc 1 3439 0
 115 0018 C36C     		ldr	r3, [r0, #76]
 116 001a 0133     		adds	r3, r3, #1
 117 001c C364     		str	r3, [r0, #76]
3440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 118              		.loc 1 3440 0
 119 001e B0F85230 		ldrh	r3, [r0, #82]
 120 0022 013B     		subs	r3, r3, #1
 121 0024 9BB2     		uxth	r3, r3
 122 0026 A0F85230 		strh	r3, [r0, #82]	@ movhi
 123              		.loc 1 3443 0
 124 002a ECE7     		b	.L3
 125              	.L7:
3431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 126              		.loc 1 3431 0
 127 002c 0268     		ldr	r2, [r0]
 128 002e 1368     		ldr	r3, [r2]
 129 0030 23F08003 		bic	r3, r3, #128
 130 0034 1360     		str	r3, [r2]
3434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 131              		.loc 1 3434 0
 132 0036 0268     		ldr	r2, [r0]
 133 0038 1368     		ldr	r3, [r2]
 134 003a 43F04003 		orr	r3, r3, #64
 135 003e 1360     		str	r3, [r2]
 136 0040 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE199:
 140              		.section	.text.UART_TxISR_16BIT,"ax",%progbits
 141              		.align	1
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu fpv5-sp-d16
 147              	UART_TxISR_16BIT:
 148              	.LFB200:
3444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 64


3445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief TX interrrupt handler for 9 bits data word length.
3447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
3453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 149              		.loc 1 3453 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              	.LVL3:
3454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *tmp;
3455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 155              		.loc 1 3457 0
 156 0000 436F     		ldr	r3, [r0, #116]
 157 0002 212B     		cmp	r3, #33
 158 0004 00D0     		beq	.L11
 159              	.L8:
3458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
3460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
3463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     else
3468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
3470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
3471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
3472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount--;
3473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 160              		.loc 1 3475 0
 161 0006 7047     		bx	lr
 162              	.L11:
3459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 163              		.loc 1 3459 0
 164 0008 B0F85230 		ldrh	r3, [r0, #82]
 165 000c 9BB2     		uxth	r3, r3
 166 000e 7BB1     		cbz	r3, .L12
3469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 167              		.loc 1 3469 0
 168 0010 C36C     		ldr	r3, [r0, #76]
 169              	.LVL4:
3470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 170              		.loc 1 3470 0
 171 0012 1B88     		ldrh	r3, [r3]
ARM GAS  /tmp/ccRCsb68.s 			page 65


 172              	.LVL5:
 173 0014 0268     		ldr	r2, [r0]
 174 0016 C3F30803 		ubfx	r3, r3, #0, #9
 175 001a 9362     		str	r3, [r2, #40]
 176              	.LVL6:
3471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->TxXferCount--;
 177              		.loc 1 3471 0
 178 001c C36C     		ldr	r3, [r0, #76]
 179 001e 0233     		adds	r3, r3, #2
 180 0020 C364     		str	r3, [r0, #76]
3472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 181              		.loc 1 3472 0
 182 0022 B0F85230 		ldrh	r3, [r0, #82]
 183 0026 013B     		subs	r3, r3, #1
 184 0028 9BB2     		uxth	r3, r3
 185 002a A0F85230 		strh	r3, [r0, #82]	@ movhi
 186              		.loc 1 3475 0
 187 002e EAE7     		b	.L8
 188              	.L12:
3462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 189              		.loc 1 3462 0
 190 0030 0268     		ldr	r2, [r0]
 191 0032 1368     		ldr	r3, [r2]
 192 0034 23F08003 		bic	r3, r3, #128
 193 0038 1360     		str	r3, [r2]
3465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 194              		.loc 1 3465 0
 195 003a 0268     		ldr	r2, [r0]
 196 003c 1368     		ldr	r3, [r2]
 197 003e 43F04003 		orr	r3, r3, #64
 198 0042 1360     		str	r3, [r2]
 199 0044 7047     		bx	lr
 200              		.cfi_endproc
 201              	.LFE200:
 203              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 204              		.align	1
 205              		.weak	HAL_UART_MspInit
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu fpv5-sp-d16
 211              	HAL_UART_MspInit:
 212              	.LFB146:
 650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 213              		.loc 1 650 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218              	.LVL7:
 657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 219              		.loc 1 657 0
 220 0000 7047     		bx	lr
 221              		.cfi_endproc
 222              	.LFE146:
 224              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 225              		.align	1
ARM GAS  /tmp/ccRCsb68.s 			page 66


 226              		.weak	HAL_UART_MspDeInit
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu fpv5-sp-d16
 232              	HAL_UART_MspDeInit:
 233              	.LFB147:
 665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 234              		.loc 1 665 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239              	.LVL8:
 672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 240              		.loc 1 672 0
 241 0000 7047     		bx	lr
 242              		.cfi_endproc
 243              	.LFE147:
 245              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 246              		.align	1
 247              		.global	HAL_UART_DeInit
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv5-sp-d16
 253              	HAL_UART_DeInit:
 254              	.LFB145:
 605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 255              		.loc 1 605 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              	.LVL9:
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 260              		.loc 1 607 0
 261 0000 C0B1     		cbz	r0, .L17
 605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 262              		.loc 1 605 0
 263 0002 38B5     		push	{r3, r4, r5, lr}
 264              	.LCFI0:
 265              		.cfi_def_cfa_offset 16
 266              		.cfi_offset 3, -16
 267              		.cfi_offset 4, -12
 268              		.cfi_offset 5, -8
 269              		.cfi_offset 14, -4
 270 0004 0446     		mov	r4, r0
 615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 271              		.loc 1 615 0
 272 0006 2423     		movs	r3, #36
 273 0008 4367     		str	r3, [r0, #116]
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 274              		.loc 1 617 0
 275 000a 0268     		ldr	r2, [r0]
 276 000c 1368     		ldr	r3, [r2]
 277 000e 23F00103 		bic	r3, r3, #1
 278 0012 1360     		str	r3, [r2]
ARM GAS  /tmp/ccRCsb68.s 			page 67


 619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 279              		.loc 1 619 0
 280 0014 0368     		ldr	r3, [r0]
 281 0016 0025     		movs	r5, #0
 282 0018 1D60     		str	r5, [r3]
 620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 283              		.loc 1 620 0
 284 001a 0368     		ldr	r3, [r0]
 285 001c 5D60     		str	r5, [r3, #4]
 621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 286              		.loc 1 621 0
 287 001e 0368     		ldr	r3, [r0]
 288 0020 9D60     		str	r5, [r3, #8]
 632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 289              		.loc 1 632 0
 290 0022 FFF7FEFF 		bl	HAL_UART_MspDeInit
 291              	.LVL10:
 635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 292              		.loc 1 635 0
 293 0026 E567     		str	r5, [r4, #124]
 636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 294              		.loc 1 636 0
 295 0028 6567     		str	r5, [r4, #116]
 637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 296              		.loc 1 637 0
 297 002a A567     		str	r5, [r4, #120]
 639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 298              		.loc 1 639 0
 299 002c 84F87050 		strb	r5, [r4, #112]
 641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 300              		.loc 1 641 0
 301 0030 2846     		mov	r0, r5
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 302              		.loc 1 642 0
 303 0032 38BD     		pop	{r3, r4, r5, pc}
 304              	.LVL11:
 305              	.L17:
 306              	.LCFI1:
 307              		.cfi_def_cfa_offset 0
 308              		.cfi_restore 3
 309              		.cfi_restore 4
 310              		.cfi_restore 5
 311              		.cfi_restore 14
 609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 312              		.loc 1 609 0
 313 0034 0120     		movs	r0, #1
 314              	.LVL12:
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 315              		.loc 1 642 0
 316 0036 7047     		bx	lr
 317              		.cfi_endproc
 318              	.LFE145:
 320              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 321              		.align	1
 322              		.global	HAL_UART_Transmit_IT
 323              		.syntax unified
 324              		.thumb
ARM GAS  /tmp/ccRCsb68.s 			page 68


 325              		.thumb_func
 326              		.fpu fpv5-sp-d16
 328              	HAL_UART_Transmit_IT:
 329              	.LFB150:
1182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 330              		.loc 1 1182 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              		@ link register save eliminated.
 335              	.LVL13:
1184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 336              		.loc 1 1184 0
 337 0000 436F     		ldr	r3, [r0, #116]
 338 0002 202B     		cmp	r3, #32
 339 0004 2DD1     		bne	.L26
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 340              		.loc 1 1186 0
 341 0006 B2FA82F3 		clz	r3, r2
 342 000a 5B09     		lsrs	r3, r3, #5
 343 000c 0029     		cmp	r1, #0
 344 000e 08BF     		it	eq
 345 0010 0123     		moveq	r3, #1
 346 0012 43BB     		cbnz	r3, .L27
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 347              		.loc 1 1191 0
 348 0014 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 349 0018 012B     		cmp	r3, #1
 350 001a 26D0     		beq	.L28
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 351              		.loc 1 1191 0 is_stmt 0 discriminator 2
 352 001c 0123     		movs	r3, #1
 353 001e 80F87030 		strb	r3, [r0, #112]
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
 354              		.loc 1 1193 0 is_stmt 1 discriminator 2
 355 0022 C164     		str	r1, [r0, #76]
1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
 356              		.loc 1 1194 0 discriminator 2
 357 0024 A0F85020 		strh	r2, [r0, #80]	@ movhi
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR       = NULL;
 358              		.loc 1 1195 0 discriminator 2
 359 0028 A0F85220 		strh	r2, [r0, #82]	@ movhi
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 360              		.loc 1 1196 0 discriminator 2
 361 002c 0023     		movs	r3, #0
 362 002e 4366     		str	r3, [r0, #100]
1198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 363              		.loc 1 1198 0 discriminator 2
 364 0030 C367     		str	r3, [r0, #124]
1199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 365              		.loc 1 1199 0 discriminator 2
 366 0032 2123     		movs	r3, #33
 367 0034 4367     		str	r3, [r0, #116]
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 368              		.loc 1 1202 0 discriminator 2
 369 0036 8368     		ldr	r3, [r0, #8]
 370 0038 B3F5805F 		cmp	r3, #4096
ARM GAS  /tmp/ccRCsb68.s 			page 69


 371 003c 0BD0     		beq	.L29
 372              	.L24:
1208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 373              		.loc 1 1208 0
 374 003e 0C4B     		ldr	r3, .L30
 375 0040 4366     		str	r3, [r0, #100]
 376              	.L25:
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 377              		.loc 1 1211 0
 378 0042 0023     		movs	r3, #0
 379 0044 80F87030 		strb	r3, [r0, #112]
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 380              		.loc 1 1214 0
 381 0048 0168     		ldr	r1, [r0]
 382              	.LVL14:
 383 004a 0A68     		ldr	r2, [r1]
 384              	.LVL15:
 385 004c 42F08002 		orr	r2, r2, #128
 386 0050 0A60     		str	r2, [r1]
 387              	.LVL16:
1216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 388              		.loc 1 1216 0
 389 0052 1846     		mov	r0, r3
 390              	.LVL17:
 391 0054 7047     		bx	lr
 392              	.LVL18:
 393              	.L29:
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 394              		.loc 1 1202 0 discriminator 1
 395 0056 0369     		ldr	r3, [r0, #16]
 396 0058 002B     		cmp	r3, #0
 397 005a F0D1     		bne	.L24
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 398              		.loc 1 1204 0
 399 005c 054B     		ldr	r3, .L30+4
 400 005e 4366     		str	r3, [r0, #100]
 401 0060 EFE7     		b	.L25
 402              	.L26:
1220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 403              		.loc 1 1220 0
 404 0062 0220     		movs	r0, #2
 405              	.LVL19:
 406 0064 7047     		bx	lr
 407              	.LVL20:
 408              	.L27:
1188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 409              		.loc 1 1188 0
 410 0066 0120     		movs	r0, #1
 411              	.LVL21:
 412 0068 7047     		bx	lr
 413              	.LVL22:
 414              	.L28:
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 415              		.loc 1 1191 0
 416 006a 0220     		movs	r0, #2
 417              	.LVL23:
1222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 70


 418              		.loc 1 1222 0
 419 006c 7047     		bx	lr
 420              	.L31:
 421 006e 00BF     		.align	2
 422              	.L30:
 423 0070 00000000 		.word	UART_TxISR_8BIT
 424 0074 00000000 		.word	UART_TxISR_16BIT
 425              		.cfi_endproc
 426              	.LFE150:
 428              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 429              		.align	1
 430              		.global	HAL_UART_Receive_IT
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 434              		.fpu fpv5-sp-d16
 436              	HAL_UART_Receive_IT:
 437              	.LFB151:
1235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 438              		.loc 1 1235 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 442              		@ link register save eliminated.
 443              	.LVL24:
1237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 444              		.loc 1 1237 0
 445 0000 836F     		ldr	r3, [r0, #120]
 446 0002 202B     		cmp	r3, #32
 447 0004 5ED1     		bne	.L43
1239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 448              		.loc 1 1239 0
 449 0006 B2FA82F3 		clz	r3, r2
 450 000a 5B09     		lsrs	r3, r3, #5
 451 000c 0029     		cmp	r1, #0
 452 000e 08BF     		it	eq
 453 0010 0123     		moveq	r3, #1
 454 0012 002B     		cmp	r3, #0
 455 0014 58D1     		bne	.L44
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 456              		.loc 1 1244 0
 457 0016 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 458 001a 012B     		cmp	r3, #1
 459 001c 56D0     		beq	.L45
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 460              		.loc 1 1244 0 is_stmt 0 discriminator 2
 461 001e 0123     		movs	r3, #1
 462 0020 80F87030 		strb	r3, [r0, #112]
1246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferSize  = Size;
 463              		.loc 1 1246 0 is_stmt 1 discriminator 2
 464 0024 4165     		str	r1, [r0, #84]
1247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = Size;
 465              		.loc 1 1247 0 discriminator 2
 466 0026 A0F85820 		strh	r2, [r0, #88]	@ movhi
1248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxISR       = NULL;
 467              		.loc 1 1248 0 discriminator 2
 468 002a A0F85A20 		strh	r2, [r0, #90]	@ movhi
ARM GAS  /tmp/ccRCsb68.s 			page 71


1249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 469              		.loc 1 1249 0 discriminator 2
 470 002e 0023     		movs	r3, #0
 471 0030 0366     		str	r3, [r0, #96]
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 472              		.loc 1 1252 0 discriminator 2
 473 0032 8368     		ldr	r3, [r0, #8]
 474 0034 B3F5805F 		cmp	r3, #4096
 475 0038 06D0     		beq	.L46
 476 003a A3B9     		cbnz	r3, .L37
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 477              		.loc 1 1252 0 is_stmt 0 discriminator 5
 478 003c 0369     		ldr	r3, [r0, #16]
 479 003e 73B9     		cbnz	r3, .L38
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 480              		.loc 1 1252 0 discriminator 7
 481 0040 FF23     		movs	r3, #255
 482 0042 A0F85C30 		strh	r3, [r0, #92]	@ movhi
 483 0046 14E0     		b	.L36
 484              	.L46:
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 485              		.loc 1 1252 0 discriminator 1
 486 0048 0369     		ldr	r3, [r0, #16]
 487 004a 23B9     		cbnz	r3, .L35
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 488              		.loc 1 1252 0 discriminator 3
 489 004c 40F2FF13 		movw	r3, #511
 490 0050 A0F85C30 		strh	r3, [r0, #92]	@ movhi
 491 0054 0DE0     		b	.L36
 492              	.L35:
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 493              		.loc 1 1252 0 discriminator 4
 494 0056 FF23     		movs	r3, #255
 495 0058 A0F85C30 		strh	r3, [r0, #92]	@ movhi
 496 005c 09E0     		b	.L36
 497              	.L38:
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 498              		.loc 1 1252 0 discriminator 8
 499 005e 7F23     		movs	r3, #127
 500 0060 A0F85C30 		strh	r3, [r0, #92]	@ movhi
 501 0064 05E0     		b	.L36
 502              	.L37:
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 503              		.loc 1 1252 0 discriminator 6
 504 0066 B3F1805F 		cmp	r3, #268435456
 505 006a 1BD0     		beq	.L47
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 506              		.loc 1 1252 0 discriminator 10
 507 006c 0023     		movs	r3, #0
 508 006e A0F85C30 		strh	r3, [r0, #92]	@ movhi
 509              	.L36:
1254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 510              		.loc 1 1254 0 is_stmt 1
 511 0072 0023     		movs	r3, #0
 512 0074 C367     		str	r3, [r0, #124]
1255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 513              		.loc 1 1255 0
ARM GAS  /tmp/ccRCsb68.s 			page 72


 514 0076 2223     		movs	r3, #34
 515 0078 8367     		str	r3, [r0, #120]
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 516              		.loc 1 1258 0
 517 007a 0268     		ldr	r2, [r0]
 518              	.LVL25:
 519 007c 9368     		ldr	r3, [r2, #8]
 520 007e 43F00103 		orr	r3, r3, #1
 521 0082 9360     		str	r3, [r2, #8]
 522              	.LVL26:
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 523              		.loc 1 1261 0
 524 0084 8368     		ldr	r3, [r0, #8]
 525 0086 B3F5805F 		cmp	r3, #4096
 526 008a 15D0     		beq	.L48
 527              	.L41:
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 528              		.loc 1 1267 0
 529 008c 104B     		ldr	r3, .L49
 530 008e 0366     		str	r3, [r0, #96]
 531              	.L42:
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 532              		.loc 1 1270 0
 533 0090 0023     		movs	r3, #0
 534 0092 80F87030 		strb	r3, [r0, #112]
1273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 535              		.loc 1 1273 0
 536 0096 0168     		ldr	r1, [r0]
 537              	.LVL27:
 538 0098 0A68     		ldr	r2, [r1]
 539 009a 42F49072 		orr	r2, r2, #288
 540 009e 0A60     		str	r2, [r1]
1275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 541              		.loc 1 1275 0
 542 00a0 1846     		mov	r0, r3
 543              	.LVL28:
 544 00a2 7047     		bx	lr
 545              	.LVL29:
 546              	.L47:
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 547              		.loc 1 1252 0 discriminator 9
 548 00a4 0369     		ldr	r3, [r0, #16]
 549 00a6 1BB9     		cbnz	r3, .L40
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 550              		.loc 1 1252 0 is_stmt 0 discriminator 11
 551 00a8 7F23     		movs	r3, #127
 552 00aa A0F85C30 		strh	r3, [r0, #92]	@ movhi
 553 00ae E0E7     		b	.L36
 554              	.L40:
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 555              		.loc 1 1252 0 discriminator 12
 556 00b0 3F23     		movs	r3, #63
 557 00b2 A0F85C30 		strh	r3, [r0, #92]	@ movhi
 558 00b6 DCE7     		b	.L36
 559              	.LVL30:
 560              	.L48:
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
ARM GAS  /tmp/ccRCsb68.s 			page 73


 561              		.loc 1 1261 0 is_stmt 1 discriminator 1
 562 00b8 0369     		ldr	r3, [r0, #16]
 563 00ba 002B     		cmp	r3, #0
 564 00bc E6D1     		bne	.L41
1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 565              		.loc 1 1263 0
 566 00be 054B     		ldr	r3, .L49+4
 567 00c0 0366     		str	r3, [r0, #96]
 568 00c2 E5E7     		b	.L42
 569              	.LVL31:
 570              	.L43:
1279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 571              		.loc 1 1279 0
 572 00c4 0220     		movs	r0, #2
 573              	.LVL32:
 574 00c6 7047     		bx	lr
 575              	.LVL33:
 576              	.L44:
1241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 577              		.loc 1 1241 0
 578 00c8 0120     		movs	r0, #1
 579              	.LVL34:
 580 00ca 7047     		bx	lr
 581              	.LVL35:
 582              	.L45:
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 583              		.loc 1 1244 0
 584 00cc 0220     		movs	r0, #2
 585              	.LVL36:
1281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 586              		.loc 1 1281 0
 587 00ce 7047     		bx	lr
 588              	.L50:
 589              		.align	2
 590              	.L49:
 591 00d0 00000000 		.word	UART_RxISR_8BIT
 592 00d4 00000000 		.word	UART_RxISR_16BIT
 593              		.cfi_endproc
 594              	.LFE151:
 596              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 597              		.align	1
 598              		.global	HAL_UART_Transmit_DMA
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 602              		.fpu fpv5-sp-d16
 604              	HAL_UART_Transmit_DMA:
 605              	.LFB152:
1294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 606              		.loc 1 1294 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610              	.LVL37:
 611 0000 38B5     		push	{r3, r4, r5, lr}
 612              	.LCFI2:
 613              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccRCsb68.s 			page 74


 614              		.cfi_offset 3, -16
 615              		.cfi_offset 4, -12
 616              		.cfi_offset 5, -8
 617              		.cfi_offset 14, -4
1296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 618              		.loc 1 1296 0
 619 0002 446F     		ldr	r4, [r0, #116]
 620 0004 202C     		cmp	r4, #32
 621 0006 42D1     		bne	.L54
1298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 622              		.loc 1 1298 0
 623 0008 B2FA82F5 		clz	r5, r2
 624 000c 6D09     		lsrs	r5, r5, #5
 625 000e 0029     		cmp	r1, #0
 626 0010 08BF     		it	eq
 627 0012 0125     		moveq	r5, #1
 628 0014 002D     		cmp	r5, #0
 629 0016 3CD1     		bne	.L55
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 630              		.loc 1 1303 0
 631 0018 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 632 001c 012B     		cmp	r3, #1
 633 001e 3AD0     		beq	.L56
 634 0020 1346     		mov	r3, r2
 635 0022 0446     		mov	r4, r0
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 636              		.loc 1 1303 0 is_stmt 0 discriminator 2
 637 0024 0122     		movs	r2, #1
 638              	.LVL38:
 639 0026 80F87020 		strb	r2, [r0, #112]
1305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferSize  = Size;
 640              		.loc 1 1305 0 is_stmt 1 discriminator 2
 641 002a C164     		str	r1, [r0, #76]
1306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
 642              		.loc 1 1306 0 discriminator 2
 643 002c A0F85030 		strh	r3, [r0, #80]	@ movhi
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 644              		.loc 1 1307 0 discriminator 2
 645 0030 A0F85230 		strh	r3, [r0, #82]	@ movhi
1309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 646              		.loc 1 1309 0 discriminator 2
 647 0034 0022     		movs	r2, #0
 648 0036 C267     		str	r2, [r0, #124]
1310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 649              		.loc 1 1310 0 discriminator 2
 650 0038 2122     		movs	r2, #33
 651 003a 4267     		str	r2, [r0, #116]
1312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 652              		.loc 1 1312 0 discriminator 2
 653 003c 826E     		ldr	r2, [r0, #104]
 654 003e 8AB1     		cbz	r2, .L53
1315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 655              		.loc 1 1315 0
 656 0040 1649     		ldr	r1, .L59
 657              	.LVL39:
 658 0042 D163     		str	r1, [r2, #60]
 659              	.LVL40:
ARM GAS  /tmp/ccRCsb68.s 			page 75


1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 660              		.loc 1 1318 0
 661 0044 826E     		ldr	r2, [r0, #104]
 662 0046 1649     		ldr	r1, .L59+4
 663 0048 1164     		str	r1, [r2, #64]
1321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 664              		.loc 1 1321 0
 665 004a 826E     		ldr	r2, [r0, #104]
 666 004c 1549     		ldr	r1, .L59+8
 667 004e D164     		str	r1, [r2, #76]
1324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 668              		.loc 1 1324 0
 669 0050 826E     		ldr	r2, [r0, #104]
 670 0052 0021     		movs	r1, #0
 671 0054 1165     		str	r1, [r2, #80]
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 672              		.loc 1 1327 0
 673 0056 0268     		ldr	r2, [r0]
 674 0058 2832     		adds	r2, r2, #40
 675 005a C16C     		ldr	r1, [r0, #76]
 676 005c 806E     		ldr	r0, [r0, #104]
 677              	.LVL41:
 678 005e FFF7FEFF 		bl	HAL_DMA_Start_IT
 679              	.LVL42:
 680 0062 58B9     		cbnz	r0, .L58
 681              	.L53:
1341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 682              		.loc 1 1341 0
 683 0064 2368     		ldr	r3, [r4]
 684 0066 4022     		movs	r2, #64
 685 0068 1A62     		str	r2, [r3, #32]
1343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 686              		.loc 1 1343 0
 687 006a 0020     		movs	r0, #0
 688 006c 84F87000 		strb	r0, [r4, #112]
1347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 689              		.loc 1 1347 0
 690 0070 2268     		ldr	r2, [r4]
 691 0072 9368     		ldr	r3, [r2, #8]
 692 0074 43F08003 		orr	r3, r3, #128
 693 0078 9360     		str	r3, [r2, #8]
1349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 694              		.loc 1 1349 0
 695 007a 09E0     		b	.L52
 696              	.L58:
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 697              		.loc 1 1330 0
 698 007c 1023     		movs	r3, #16
 699 007e E367     		str	r3, [r4, #124]
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 700              		.loc 1 1332 0
 701 0080 0023     		movs	r3, #0
 702 0082 84F87030 		strb	r3, [r4, #112]
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 703              		.loc 1 1335 0
 704 0086 2023     		movs	r3, #32
 705 0088 6367     		str	r3, [r4, #116]
ARM GAS  /tmp/ccRCsb68.s 			page 76


1337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 706              		.loc 1 1337 0
 707 008a 0120     		movs	r0, #1
 708 008c 00E0     		b	.L52
 709              	.LVL43:
 710              	.L54:
1353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 711              		.loc 1 1353 0
 712 008e 0220     		movs	r0, #2
 713              	.LVL44:
 714              	.L52:
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 715              		.loc 1 1355 0
 716 0090 38BD     		pop	{r3, r4, r5, pc}
 717              	.LVL45:
 718              	.L55:
1300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 719              		.loc 1 1300 0
 720 0092 0120     		movs	r0, #1
 721              	.LVL46:
 722 0094 FCE7     		b	.L52
 723              	.LVL47:
 724              	.L56:
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 725              		.loc 1 1303 0
 726 0096 0220     		movs	r0, #2
 727              	.LVL48:
 728 0098 FAE7     		b	.L52
 729              	.L60:
 730 009a 00BF     		.align	2
 731              	.L59:
 732 009c 00000000 		.word	UART_DMATransmitCplt
 733 00a0 00000000 		.word	UART_DMATxHalfCplt
 734 00a4 00000000 		.word	UART_DMAError
 735              		.cfi_endproc
 736              	.LFE152:
 738              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 739              		.align	1
 740              		.global	HAL_UART_Receive_DMA
 741              		.syntax unified
 742              		.thumb
 743              		.thumb_func
 744              		.fpu fpv5-sp-d16
 746              	HAL_UART_Receive_DMA:
 747              	.LFB153:
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 748              		.loc 1 1370 0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 0
 751              		@ frame_needed = 0, uses_anonymous_args = 0
 752              	.LVL49:
 753 0000 38B5     		push	{r3, r4, r5, lr}
 754              	.LCFI3:
 755              		.cfi_def_cfa_offset 16
 756              		.cfi_offset 3, -16
 757              		.cfi_offset 4, -12
 758              		.cfi_offset 5, -8
ARM GAS  /tmp/ccRCsb68.s 			page 77


 759              		.cfi_offset 14, -4
1372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 760              		.loc 1 1372 0
 761 0002 846F     		ldr	r4, [r0, #120]
 762 0004 202C     		cmp	r4, #32
 763 0006 47D1     		bne	.L64
1374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 764              		.loc 1 1374 0
 765 0008 B2FA82F5 		clz	r5, r2
 766 000c 6D09     		lsrs	r5, r5, #5
 767 000e 0029     		cmp	r1, #0
 768 0010 08BF     		it	eq
 769 0012 0125     		moveq	r5, #1
 770 0014 002D     		cmp	r5, #0
 771 0016 41D1     		bne	.L65
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 772              		.loc 1 1379 0
 773 0018 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 774 001c 012B     		cmp	r3, #1
 775 001e 3FD0     		beq	.L66
 776 0020 1346     		mov	r3, r2
 777 0022 0446     		mov	r4, r0
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 778              		.loc 1 1379 0 is_stmt 0 discriminator 2
 779 0024 0122     		movs	r2, #1
 780              	.LVL50:
 781 0026 80F87020 		strb	r2, [r0, #112]
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferSize = Size;
 782              		.loc 1 1381 0 is_stmt 1 discriminator 2
 783 002a 4165     		str	r1, [r0, #84]
1382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 784              		.loc 1 1382 0 discriminator 2
 785 002c A0F85830 		strh	r3, [r0, #88]	@ movhi
1384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 786              		.loc 1 1384 0 discriminator 2
 787 0030 0022     		movs	r2, #0
 788 0032 C267     		str	r2, [r0, #124]
1385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 789              		.loc 1 1385 0 discriminator 2
 790 0034 2222     		movs	r2, #34
 791 0036 8267     		str	r2, [r0, #120]
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 792              		.loc 1 1387 0 discriminator 2
 793 0038 C26E     		ldr	r2, [r0, #108]
 794 003a 8AB1     		cbz	r2, .L63
1390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 795              		.loc 1 1390 0
 796 003c 1949     		ldr	r1, .L69
 797              	.LVL51:
 798 003e D163     		str	r1, [r2, #60]
 799              	.LVL52:
1393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 800              		.loc 1 1393 0
 801 0040 C26E     		ldr	r2, [r0, #108]
 802 0042 1949     		ldr	r1, .L69+4
 803 0044 1164     		str	r1, [r2, #64]
1396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 78


 804              		.loc 1 1396 0
 805 0046 C26E     		ldr	r2, [r0, #108]
 806 0048 1849     		ldr	r1, .L69+8
 807 004a D164     		str	r1, [r2, #76]
1399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 808              		.loc 1 1399 0
 809 004c C26E     		ldr	r2, [r0, #108]
 810 004e 0021     		movs	r1, #0
 811 0050 1165     		str	r1, [r2, #80]
1402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 812              		.loc 1 1402 0
 813 0052 0168     		ldr	r1, [r0]
 814 0054 426D     		ldr	r2, [r0, #84]
 815 0056 2431     		adds	r1, r1, #36
 816 0058 C06E     		ldr	r0, [r0, #108]
 817              	.LVL53:
 818 005a FFF7FEFF 		bl	HAL_DMA_Start_IT
 819              	.LVL54:
 820 005e 90B9     		cbnz	r0, .L68
 821              	.L63:
1415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 822              		.loc 1 1415 0
 823 0060 0020     		movs	r0, #0
 824 0062 84F87000 		strb	r0, [r4, #112]
1418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 825              		.loc 1 1418 0
 826 0066 2268     		ldr	r2, [r4]
 827 0068 1368     		ldr	r3, [r2]
 828 006a 43F48073 		orr	r3, r3, #256
 829 006e 1360     		str	r3, [r2]
1421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 830              		.loc 1 1421 0
 831 0070 2268     		ldr	r2, [r4]
 832 0072 9368     		ldr	r3, [r2, #8]
 833 0074 43F00103 		orr	r3, r3, #1
 834 0078 9360     		str	r3, [r2, #8]
1425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 835              		.loc 1 1425 0
 836 007a 2268     		ldr	r2, [r4]
 837 007c 9368     		ldr	r3, [r2, #8]
 838 007e 43F04003 		orr	r3, r3, #64
 839 0082 9360     		str	r3, [r2, #8]
1427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 840              		.loc 1 1427 0
 841 0084 09E0     		b	.L62
 842              	.L68:
1405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 843              		.loc 1 1405 0
 844 0086 1023     		movs	r3, #16
 845 0088 E367     		str	r3, [r4, #124]
1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 846              		.loc 1 1407 0
 847 008a 0023     		movs	r3, #0
 848 008c 84F87030 		strb	r3, [r4, #112]
1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 849              		.loc 1 1410 0
 850 0090 2023     		movs	r3, #32
ARM GAS  /tmp/ccRCsb68.s 			page 79


 851 0092 6367     		str	r3, [r4, #116]
1412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 852              		.loc 1 1412 0
 853 0094 0120     		movs	r0, #1
 854 0096 00E0     		b	.L62
 855              	.LVL55:
 856              	.L64:
1431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 857              		.loc 1 1431 0
 858 0098 0220     		movs	r0, #2
 859              	.LVL56:
 860              	.L62:
1433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 861              		.loc 1 1433 0
 862 009a 38BD     		pop	{r3, r4, r5, pc}
 863              	.LVL57:
 864              	.L65:
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 865              		.loc 1 1376 0
 866 009c 0120     		movs	r0, #1
 867              	.LVL58:
 868 009e FCE7     		b	.L62
 869              	.LVL59:
 870              	.L66:
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 871              		.loc 1 1379 0
 872 00a0 0220     		movs	r0, #2
 873              	.LVL60:
 874 00a2 FAE7     		b	.L62
 875              	.L70:
 876              		.align	2
 877              	.L69:
 878 00a4 00000000 		.word	UART_DMAReceiveCplt
 879 00a8 00000000 		.word	UART_DMARxHalfCplt
 880 00ac 00000000 		.word	UART_DMAError
 881              		.cfi_endproc
 882              	.LFE153:
 884              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 885              		.align	1
 886              		.global	HAL_UART_DMAPause
 887              		.syntax unified
 888              		.thumb
 889              		.thumb_func
 890              		.fpu fpv5-sp-d16
 892              	HAL_UART_DMAPause:
 893              	.LFB154:
1441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 894              		.loc 1 1441 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 0
 897              		@ frame_needed = 0, uses_anonymous_args = 0
 898              		@ link register save eliminated.
 899              	.LVL61:
 900 0000 10B4     		push	{r4}
 901              	.LCFI4:
 902              		.cfi_def_cfa_offset 4
 903              		.cfi_offset 4, -4
ARM GAS  /tmp/ccRCsb68.s 			page 80


1442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 904              		.loc 1 1442 0
 905 0002 446F     		ldr	r4, [r0, #116]
 906              	.LVL62:
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 907              		.loc 1 1443 0
 908 0004 816F     		ldr	r1, [r0, #120]
 909              	.LVL63:
1445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 910              		.loc 1 1445 0
 911 0006 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 912 000a 012B     		cmp	r3, #1
 913 000c 2BD0     		beq	.L75
1445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 914              		.loc 1 1445 0 is_stmt 0 discriminator 2
 915 000e 0123     		movs	r3, #1
 916 0010 80F87030 		strb	r3, [r0, #112]
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 917              		.loc 1 1447 0 is_stmt 1 discriminator 2
 918 0014 0368     		ldr	r3, [r0]
 919 0016 9A68     		ldr	r2, [r3, #8]
 920 0018 12F0800F 		tst	r2, #128
 921 001c 01D0     		beq	.L73
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 922              		.loc 1 1447 0 is_stmt 0 discriminator 1
 923 001e 212C     		cmp	r4, #33
 924 0020 0DD0     		beq	.L77
 925              	.L73:
1453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 926              		.loc 1 1453 0 is_stmt 1
 927 0022 0368     		ldr	r3, [r0]
 928 0024 9A68     		ldr	r2, [r3, #8]
 929 0026 12F0400F 		tst	r2, #64
 930 002a 01D0     		beq	.L74
1453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 931              		.loc 1 1453 0 is_stmt 0 discriminator 1
 932 002c 2229     		cmp	r1, #34
 933 002e 0BD0     		beq	.L78
 934              	.L74:
1464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 935              		.loc 1 1464 0 is_stmt 1
 936 0030 0023     		movs	r3, #0
 937 0032 80F87030 		strb	r3, [r0, #112]
1466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 938              		.loc 1 1466 0
 939 0036 1846     		mov	r0, r3
 940              	.LVL64:
 941              	.L72:
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 942              		.loc 1 1467 0
 943 0038 5DF8044B 		ldr	r4, [sp], #4
 944              	.LCFI5:
 945              		.cfi_remember_state
 946              		.cfi_restore 4
 947              		.cfi_def_cfa_offset 0
 948              	.LVL65:
 949 003c 7047     		bx	lr
ARM GAS  /tmp/ccRCsb68.s 			page 81


 950              	.LVL66:
 951              	.L77:
 952              	.LCFI6:
 953              		.cfi_restore_state
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 954              		.loc 1 1451 0
 955 003e 9A68     		ldr	r2, [r3, #8]
 956 0040 22F08002 		bic	r2, r2, #128
 957 0044 9A60     		str	r2, [r3, #8]
 958 0046 ECE7     		b	.L73
 959              	.L78:
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 960              		.loc 1 1457 0
 961 0048 1A68     		ldr	r2, [r3]
 962 004a 22F48072 		bic	r2, r2, #256
 963 004e 1A60     		str	r2, [r3]
1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 964              		.loc 1 1458 0
 965 0050 0268     		ldr	r2, [r0]
 966 0052 9368     		ldr	r3, [r2, #8]
 967 0054 23F00103 		bic	r3, r3, #1
 968 0058 9360     		str	r3, [r2, #8]
1461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 969              		.loc 1 1461 0
 970 005a 0268     		ldr	r2, [r0]
 971 005c 9368     		ldr	r3, [r2, #8]
 972 005e 23F04003 		bic	r3, r3, #64
 973 0062 9360     		str	r3, [r2, #8]
 974 0064 E4E7     		b	.L74
 975              	.L75:
1445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 976              		.loc 1 1445 0
 977 0066 0220     		movs	r0, #2
 978              	.LVL67:
 979 0068 E6E7     		b	.L72
 980              		.cfi_endproc
 981              	.LFE154:
 983              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 984              		.align	1
 985              		.global	HAL_UART_DMAResume
 986              		.syntax unified
 987              		.thumb
 988              		.thumb_func
 989              		.fpu fpv5-sp-d16
 991              	HAL_UART_DMAResume:
 992              	.LFB155:
1475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 993              		.loc 1 1475 0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 0
 996              		@ frame_needed = 0, uses_anonymous_args = 0
 997              		@ link register save eliminated.
 998              	.LVL68:
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 999              		.loc 1 1476 0
 1000 0000 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 1001 0004 012B     		cmp	r3, #1
ARM GAS  /tmp/ccRCsb68.s 			page 82


 1002 0006 26D0     		beq	.L83
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1003              		.loc 1 1476 0 is_stmt 0 discriminator 2
 1004 0008 0123     		movs	r3, #1
 1005 000a 80F87030 		strb	r3, [r0, #112]
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1006              		.loc 1 1478 0 is_stmt 1 discriminator 2
 1007 000e 436F     		ldr	r3, [r0, #116]
 1008 0010 212B     		cmp	r3, #33
 1009 0012 07D0     		beq	.L84
 1010              	.L81:
1483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1011              		.loc 1 1483 0
 1012 0014 836F     		ldr	r3, [r0, #120]
 1013 0016 222B     		cmp	r3, #34
 1014 0018 0AD0     		beq	.L85
 1015              	.L82:
1496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1016              		.loc 1 1496 0
 1017 001a 0023     		movs	r3, #0
 1018 001c 80F87030 		strb	r3, [r0, #112]
1498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 1019              		.loc 1 1498 0
 1020 0020 1846     		mov	r0, r3
 1021              	.LVL69:
 1022 0022 7047     		bx	lr
 1023              	.LVL70:
 1024              	.L84:
1481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1025              		.loc 1 1481 0
 1026 0024 0268     		ldr	r2, [r0]
 1027 0026 9368     		ldr	r3, [r2, #8]
 1028 0028 43F08003 		orr	r3, r3, #128
 1029 002c 9360     		str	r3, [r2, #8]
 1030 002e F1E7     		b	.L81
 1031              	.L85:
1486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1032              		.loc 1 1486 0
 1033 0030 0368     		ldr	r3, [r0]
 1034 0032 0822     		movs	r2, #8
 1035 0034 1A62     		str	r2, [r3, #32]
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1036              		.loc 1 1489 0
 1037 0036 0268     		ldr	r2, [r0]
 1038 0038 1368     		ldr	r3, [r2]
 1039 003a 43F48073 		orr	r3, r3, #256
 1040 003e 1360     		str	r3, [r2]
1490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1041              		.loc 1 1490 0
 1042 0040 0268     		ldr	r2, [r0]
 1043 0042 9368     		ldr	r3, [r2, #8]
 1044 0044 43F00103 		orr	r3, r3, #1
 1045 0048 9360     		str	r3, [r2, #8]
1493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1046              		.loc 1 1493 0
 1047 004a 0268     		ldr	r2, [r0]
 1048 004c 9368     		ldr	r3, [r2, #8]
ARM GAS  /tmp/ccRCsb68.s 			page 83


 1049 004e 43F04003 		orr	r3, r3, #64
 1050 0052 9360     		str	r3, [r2, #8]
 1051 0054 E1E7     		b	.L82
 1052              	.L83:
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1053              		.loc 1 1476 0
 1054 0056 0220     		movs	r0, #2
 1055              	.LVL71:
1499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1056              		.loc 1 1499 0
 1057 0058 7047     		bx	lr
 1058              		.cfi_endproc
 1059              	.LFE155:
 1061              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 1062              		.align	1
 1063              		.global	HAL_UART_DMAStop
 1064              		.syntax unified
 1065              		.thumb
 1066              		.thumb_func
 1067              		.fpu fpv5-sp-d16
 1069              	HAL_UART_DMAStop:
 1070              	.LFB156:
1507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
 1071              		.loc 1 1507 0
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 0
 1074              		@ frame_needed = 0, uses_anonymous_args = 0
 1075              	.LVL72:
 1076 0000 38B5     		push	{r3, r4, r5, lr}
 1077              	.LCFI7:
 1078              		.cfi_def_cfa_offset 16
 1079              		.cfi_offset 3, -16
 1080              		.cfi_offset 4, -12
 1081              		.cfi_offset 5, -8
 1082              		.cfi_offset 14, -4
 1083 0002 0446     		mov	r4, r0
1515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 1084              		.loc 1 1515 0
 1085 0004 416F     		ldr	r1, [r0, #116]
 1086              	.LVL73:
1516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1087              		.loc 1 1516 0
 1088 0006 856F     		ldr	r5, [r0, #120]
 1089              	.LVL74:
1519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1090              		.loc 1 1519 0
 1091 0008 0368     		ldr	r3, [r0]
 1092 000a 9A68     		ldr	r2, [r3, #8]
 1093 000c 12F0800F 		tst	r2, #128
 1094 0010 01D0     		beq	.L87
1519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1095              		.loc 1 1519 0 is_stmt 0 discriminator 1
 1096 0012 2129     		cmp	r1, #33
 1097 0014 08D0     		beq	.L94
 1098              	.LVL75:
 1099              	.L87:
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
ARM GAS  /tmp/ccRCsb68.s 			page 84


 1100              		.loc 1 1543 0 is_stmt 1
 1101 0016 2368     		ldr	r3, [r4]
 1102 0018 9A68     		ldr	r2, [r3, #8]
 1103 001a 12F0400F 		tst	r2, #64
 1104 001e 30D0     		beq	.L91
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 1105              		.loc 1 1543 0 is_stmt 0 discriminator 1
 1106 0020 222D     		cmp	r5, #34
 1107 0022 17D0     		beq	.L95
1566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 1108              		.loc 1 1566 0 is_stmt 1
 1109 0024 0020     		movs	r0, #0
 1110 0026 2DE0     		b	.L89
 1111              	.LVL76:
 1112              	.L94:
1522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1113              		.loc 1 1522 0
 1114 0028 9A68     		ldr	r2, [r3, #8]
 1115 002a 22F08002 		bic	r2, r2, #128
 1116 002e 9A60     		str	r2, [r3, #8]
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1117              		.loc 1 1525 0
 1118 0030 806E     		ldr	r0, [r0, #104]
 1119              	.LVL77:
 1120 0032 10B1     		cbz	r0, .L88
1527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1121              		.loc 1 1527 0
 1122 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1123              	.LVL78:
 1124 0038 18B9     		cbnz	r0, .L96
 1125              	.L88:
1539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1126              		.loc 1 1539 0
 1127 003a 2046     		mov	r0, r4
 1128 003c FFF7FEFF 		bl	UART_EndTxTransfer
 1129              	.LVL79:
 1130 0040 E9E7     		b	.L87
 1131              	.L96:
1529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1132              		.loc 1 1529 0
 1133 0042 A06E     		ldr	r0, [r4, #104]
 1134 0044 FFF7FEFF 		bl	HAL_DMA_GetError
 1135              	.LVL80:
 1136 0048 2028     		cmp	r0, #32
 1137 004a F6D1     		bne	.L88
1532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1138              		.loc 1 1532 0
 1139 004c 1023     		movs	r3, #16
 1140 004e E367     		str	r3, [r4, #124]
1534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1141              		.loc 1 1534 0
 1142 0050 0320     		movs	r0, #3
 1143 0052 17E0     		b	.L89
 1144              	.L95:
1546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1145              		.loc 1 1546 0
 1146 0054 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccRCsb68.s 			page 85


 1147 0056 22F04002 		bic	r2, r2, #64
 1148 005a 9A60     		str	r2, [r3, #8]
1549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1149              		.loc 1 1549 0
 1150 005c E06E     		ldr	r0, [r4, #108]
 1151 005e 10B1     		cbz	r0, .L90
1551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1152              		.loc 1 1551 0
 1153 0060 FFF7FEFF 		bl	HAL_DMA_Abort
 1154              	.LVL81:
 1155 0064 20B9     		cbnz	r0, .L97
 1156              	.L90:
1563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1157              		.loc 1 1563 0
 1158 0066 2046     		mov	r0, r4
 1159 0068 FFF7FEFF 		bl	UART_EndRxTransfer
 1160              	.LVL82:
1566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 1161              		.loc 1 1566 0
 1162 006c 0020     		movs	r0, #0
 1163 006e 09E0     		b	.L89
 1164              	.L97:
1553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1165              		.loc 1 1553 0
 1166 0070 E06E     		ldr	r0, [r4, #108]
 1167 0072 FFF7FEFF 		bl	HAL_DMA_GetError
 1168              	.LVL83:
 1169 0076 2028     		cmp	r0, #32
 1170 0078 F5D1     		bne	.L90
1556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1171              		.loc 1 1556 0
 1172 007a 1023     		movs	r3, #16
 1173 007c E367     		str	r3, [r4, #124]
1558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1174              		.loc 1 1558 0
 1175 007e 0320     		movs	r0, #3
 1176 0080 00E0     		b	.L89
 1177              	.L91:
1566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 1178              		.loc 1 1566 0
 1179 0082 0020     		movs	r0, #0
 1180              	.L89:
1567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1181              		.loc 1 1567 0
 1182 0084 38BD     		pop	{r3, r4, r5, pc}
 1183              		.cfi_endproc
 1184              	.LFE156:
 1186              		.section	.text.HAL_UART_Abort,"ax",%progbits
 1187              		.align	1
 1188              		.global	HAL_UART_Abort
 1189              		.syntax unified
 1190              		.thumb
 1191              		.thumb_func
 1192              		.fpu fpv5-sp-d16
 1194              	HAL_UART_Abort:
 1195              	.LFB157:
1582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
ARM GAS  /tmp/ccRCsb68.s 			page 86


 1196              		.loc 1 1582 0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 0
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
 1200              	.LVL84:
 1201 0000 10B5     		push	{r4, lr}
 1202              	.LCFI8:
 1203              		.cfi_def_cfa_offset 8
 1204              		.cfi_offset 4, -8
 1205              		.cfi_offset 14, -4
 1206 0002 0446     		mov	r4, r0
1584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1207              		.loc 1 1584 0
 1208 0004 0268     		ldr	r2, [r0]
 1209 0006 1368     		ldr	r3, [r2]
 1210 0008 23F4F073 		bic	r3, r3, #480
 1211 000c 1360     		str	r3, [r2]
1585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1212              		.loc 1 1585 0
 1213 000e 0268     		ldr	r2, [r0]
 1214 0010 9368     		ldr	r3, [r2, #8]
 1215 0012 23F00103 		bic	r3, r3, #1
 1216 0016 9360     		str	r3, [r2, #8]
1588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1217              		.loc 1 1588 0
 1218 0018 0368     		ldr	r3, [r0]
 1219 001a 9A68     		ldr	r2, [r3, #8]
 1220 001c 12F0800F 		tst	r2, #128
 1221 0020 0BD0     		beq	.L99
1590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1222              		.loc 1 1590 0
 1223 0022 9A68     		ldr	r2, [r3, #8]
 1224 0024 22F08002 		bic	r2, r2, #128
 1225 0028 9A60     		str	r2, [r3, #8]
1593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1226              		.loc 1 1593 0
 1227 002a 836E     		ldr	r3, [r0, #104]
 1228 002c 2BB1     		cbz	r3, .L99
1597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1229              		.loc 1 1597 0
 1230 002e 0022     		movs	r2, #0
 1231 0030 1A65     		str	r2, [r3, #80]
1599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1232              		.loc 1 1599 0
 1233 0032 806E     		ldr	r0, [r0, #104]
 1234              	.LVL85:
 1235 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1236              	.LVL86:
 1237 0038 10BB     		cbnz	r0, .L103
 1238              	.L99:
1613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1239              		.loc 1 1613 0
 1240 003a 2368     		ldr	r3, [r4]
 1241 003c 9A68     		ldr	r2, [r3, #8]
 1242 003e 12F0400F 		tst	r2, #64
 1243 0042 0BD0     		beq	.L101
1615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 87


 1244              		.loc 1 1615 0
 1245 0044 9A68     		ldr	r2, [r3, #8]
 1246 0046 22F04002 		bic	r2, r2, #64
 1247 004a 9A60     		str	r2, [r3, #8]
1618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1248              		.loc 1 1618 0
 1249 004c E36E     		ldr	r3, [r4, #108]
 1250 004e 2BB1     		cbz	r3, .L101
1622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1251              		.loc 1 1622 0
 1252 0050 0022     		movs	r2, #0
 1253 0052 1A65     		str	r2, [r3, #80]
1624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1254              		.loc 1 1624 0
 1255 0054 E06E     		ldr	r0, [r4, #108]
 1256 0056 FFF7FEFF 		bl	HAL_DMA_Abort
 1257              	.LVL87:
 1258 005a D0B9     		cbnz	r0, .L104
 1259              	.L101:
1638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 1260              		.loc 1 1638 0
 1261 005c 0020     		movs	r0, #0
 1262 005e A4F85200 		strh	r0, [r4, #82]	@ movhi
1639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1263              		.loc 1 1639 0
 1264 0062 A4F85A00 		strh	r0, [r4, #90]	@ movhi
1642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1265              		.loc 1 1642 0
 1266 0066 2368     		ldr	r3, [r4]
 1267 0068 0F22     		movs	r2, #15
 1268 006a 1A62     		str	r2, [r3, #32]
1646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1269              		.loc 1 1646 0
 1270 006c 2268     		ldr	r2, [r4]
 1271 006e 9369     		ldr	r3, [r2, #24]
 1272 0070 43F00803 		orr	r3, r3, #8
 1273 0074 9361     		str	r3, [r2, #24]
1649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 1274              		.loc 1 1649 0
 1275 0076 2023     		movs	r3, #32
 1276 0078 6367     		str	r3, [r4, #116]
1650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1277              		.loc 1 1650 0
 1278 007a A367     		str	r3, [r4, #120]
1652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1279              		.loc 1 1652 0
 1280 007c E067     		str	r0, [r4, #124]
 1281              	.L100:
1655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1282              		.loc 1 1655 0
 1283 007e 10BD     		pop	{r4, pc}
 1284              	.LVL88:
 1285              	.L103:
1601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1286              		.loc 1 1601 0
 1287 0080 A06E     		ldr	r0, [r4, #104]
 1288 0082 FFF7FEFF 		bl	HAL_DMA_GetError
ARM GAS  /tmp/ccRCsb68.s 			page 88


 1289              	.LVL89:
 1290 0086 2028     		cmp	r0, #32
 1291 0088 D7D1     		bne	.L99
1604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1292              		.loc 1 1604 0
 1293 008a 1023     		movs	r3, #16
 1294 008c E367     		str	r3, [r4, #124]
1606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1295              		.loc 1 1606 0
 1296 008e 0320     		movs	r0, #3
 1297 0090 F5E7     		b	.L100
 1298              	.L104:
1626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1299              		.loc 1 1626 0
 1300 0092 E06E     		ldr	r0, [r4, #108]
 1301 0094 FFF7FEFF 		bl	HAL_DMA_GetError
 1302              	.LVL90:
 1303 0098 2028     		cmp	r0, #32
 1304 009a DFD1     		bne	.L101
1629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1305              		.loc 1 1629 0
 1306 009c 1023     		movs	r3, #16
 1307 009e E367     		str	r3, [r4, #124]
1631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1308              		.loc 1 1631 0
 1309 00a0 0320     		movs	r0, #3
 1310 00a2 ECE7     		b	.L100
 1311              		.cfi_endproc
 1312              	.LFE157:
 1314              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 1315              		.align	1
 1316              		.global	HAL_UART_AbortTransmit
 1317              		.syntax unified
 1318              		.thumb
 1319              		.thumb_func
 1320              		.fpu fpv5-sp-d16
 1322              	HAL_UART_AbortTransmit:
 1323              	.LFB158:
1670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 1324              		.loc 1 1670 0
 1325              		.cfi_startproc
 1326              		@ args = 0, pretend = 0, frame = 0
 1327              		@ frame_needed = 0, uses_anonymous_args = 0
 1328              	.LVL91:
 1329 0000 10B5     		push	{r4, lr}
 1330              	.LCFI9:
 1331              		.cfi_def_cfa_offset 8
 1332              		.cfi_offset 4, -8
 1333              		.cfi_offset 14, -4
 1334 0002 0446     		mov	r4, r0
1672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1335              		.loc 1 1672 0
 1336 0004 0268     		ldr	r2, [r0]
 1337 0006 1368     		ldr	r3, [r2]
 1338 0008 23F0C003 		bic	r3, r3, #192
 1339 000c 1360     		str	r3, [r2]
1675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
ARM GAS  /tmp/ccRCsb68.s 			page 89


 1340              		.loc 1 1675 0
 1341 000e 0368     		ldr	r3, [r0]
 1342 0010 9A68     		ldr	r2, [r3, #8]
 1343 0012 12F0800F 		tst	r2, #128
 1344 0016 0BD0     		beq	.L106
1677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1345              		.loc 1 1677 0
 1346 0018 9A68     		ldr	r2, [r3, #8]
 1347 001a 22F08002 		bic	r2, r2, #128
 1348 001e 9A60     		str	r2, [r3, #8]
1680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1349              		.loc 1 1680 0
 1350 0020 836E     		ldr	r3, [r0, #104]
 1351 0022 2BB1     		cbz	r3, .L106
1684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1352              		.loc 1 1684 0
 1353 0024 0022     		movs	r2, #0
 1354 0026 1A65     		str	r2, [r3, #80]
1686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1355              		.loc 1 1686 0
 1356 0028 806E     		ldr	r0, [r0, #104]
 1357              	.LVL92:
 1358 002a FFF7FEFF 		bl	HAL_DMA_Abort
 1359              	.LVL93:
 1360 002e 28B9     		cbnz	r0, .L109
 1361              	.L106:
1700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1362              		.loc 1 1700 0
 1363 0030 0020     		movs	r0, #0
 1364 0032 A4F85200 		strh	r0, [r4, #82]	@ movhi
1704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1365              		.loc 1 1704 0
 1366 0036 2023     		movs	r3, #32
 1367 0038 6367     		str	r3, [r4, #116]
 1368              	.L107:
1707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1369              		.loc 1 1707 0
 1370 003a 10BD     		pop	{r4, pc}
 1371              	.LVL94:
 1372              	.L109:
1688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1373              		.loc 1 1688 0
 1374 003c A06E     		ldr	r0, [r4, #104]
 1375 003e FFF7FEFF 		bl	HAL_DMA_GetError
 1376              	.LVL95:
 1377 0042 2028     		cmp	r0, #32
 1378 0044 F4D1     		bne	.L106
1691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1379              		.loc 1 1691 0
 1380 0046 1023     		movs	r3, #16
 1381 0048 E367     		str	r3, [r4, #124]
1693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1382              		.loc 1 1693 0
 1383 004a 0320     		movs	r0, #3
 1384 004c F5E7     		b	.L107
 1385              		.cfi_endproc
 1386              	.LFE158:
ARM GAS  /tmp/ccRCsb68.s 			page 90


 1388              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 1389              		.align	1
 1390              		.global	HAL_UART_AbortReceive
 1391              		.syntax unified
 1392              		.thumb
 1393              		.thumb_func
 1394              		.fpu fpv5-sp-d16
 1396              	HAL_UART_AbortReceive:
 1397              	.LFB159:
1722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1398              		.loc 1 1722 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 0
 1401              		@ frame_needed = 0, uses_anonymous_args = 0
 1402              	.LVL96:
 1403 0000 10B5     		push	{r4, lr}
 1404              	.LCFI10:
 1405              		.cfi_def_cfa_offset 8
 1406              		.cfi_offset 4, -8
 1407              		.cfi_offset 14, -4
 1408 0002 0446     		mov	r4, r0
1724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1409              		.loc 1 1724 0
 1410 0004 0268     		ldr	r2, [r0]
 1411 0006 1368     		ldr	r3, [r2]
 1412 0008 23F49073 		bic	r3, r3, #288
 1413 000c 1360     		str	r3, [r2]
1725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1414              		.loc 1 1725 0
 1415 000e 0268     		ldr	r2, [r0]
 1416 0010 9368     		ldr	r3, [r2, #8]
 1417 0012 23F00103 		bic	r3, r3, #1
 1418 0016 9360     		str	r3, [r2, #8]
1728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1419              		.loc 1 1728 0
 1420 0018 0368     		ldr	r3, [r0]
 1421 001a 9A68     		ldr	r2, [r3, #8]
 1422 001c 12F0400F 		tst	r2, #64
 1423 0020 0BD0     		beq	.L111
1730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1424              		.loc 1 1730 0
 1425 0022 9A68     		ldr	r2, [r3, #8]
 1426 0024 22F04002 		bic	r2, r2, #64
 1427 0028 9A60     		str	r2, [r3, #8]
1733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1428              		.loc 1 1733 0
 1429 002a C36E     		ldr	r3, [r0, #108]
 1430 002c 2BB1     		cbz	r3, .L111
1737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1431              		.loc 1 1737 0
 1432 002e 0022     		movs	r2, #0
 1433 0030 1A65     		str	r2, [r3, #80]
1739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 1434              		.loc 1 1739 0
 1435 0032 C06E     		ldr	r0, [r0, #108]
 1436              	.LVL97:
 1437 0034 FFF7FEFF 		bl	HAL_DMA_Abort
ARM GAS  /tmp/ccRCsb68.s 			page 91


 1438              	.LVL98:
 1439 0038 68B9     		cbnz	r0, .L114
 1440              	.L111:
1753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1441              		.loc 1 1753 0
 1442 003a 0020     		movs	r0, #0
 1443 003c A4F85A00 		strh	r0, [r4, #90]	@ movhi
1756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1444              		.loc 1 1756 0
 1445 0040 2368     		ldr	r3, [r4]
 1446 0042 0F22     		movs	r2, #15
 1447 0044 1A62     		str	r2, [r3, #32]
1759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1448              		.loc 1 1759 0
 1449 0046 2268     		ldr	r2, [r4]
 1450 0048 9369     		ldr	r3, [r2, #24]
 1451 004a 43F00803 		orr	r3, r3, #8
 1452 004e 9361     		str	r3, [r2, #24]
1762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1453              		.loc 1 1762 0
 1454 0050 2023     		movs	r3, #32
 1455 0052 A367     		str	r3, [r4, #120]
 1456              	.L112:
1765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1457              		.loc 1 1765 0
 1458 0054 10BD     		pop	{r4, pc}
 1459              	.LVL99:
 1460              	.L114:
1741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 1461              		.loc 1 1741 0
 1462 0056 E06E     		ldr	r0, [r4, #108]
 1463 0058 FFF7FEFF 		bl	HAL_DMA_GetError
 1464              	.LVL100:
 1465 005c 2028     		cmp	r0, #32
 1466 005e ECD1     		bne	.L111
1744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1467              		.loc 1 1744 0
 1468 0060 1023     		movs	r3, #16
 1469 0062 E367     		str	r3, [r4, #124]
1746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 1470              		.loc 1 1746 0
 1471 0064 0320     		movs	r0, #3
 1472 0066 F5E7     		b	.L112
 1473              		.cfi_endproc
 1474              	.LFE159:
 1476              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 1477              		.align	1
 1478              		.weak	HAL_UART_TxCpltCallback
 1479              		.syntax unified
 1480              		.thumb
 1481              		.thumb_func
 1482              		.fpu fpv5-sp-d16
 1484              	HAL_UART_TxCpltCallback:
 1485              	.LFB164:
2295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1486              		.loc 1 2295 0
 1487              		.cfi_startproc
ARM GAS  /tmp/ccRCsb68.s 			page 92


 1488              		@ args = 0, pretend = 0, frame = 0
 1489              		@ frame_needed = 0, uses_anonymous_args = 0
 1490              		@ link register save eliminated.
 1491              	.LVL101:
2302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1492              		.loc 1 2302 0
 1493 0000 7047     		bx	lr
 1494              		.cfi_endproc
 1495              	.LFE164:
 1497              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 1498              		.align	1
 1499              		.syntax unified
 1500              		.thumb
 1501              		.thumb_func
 1502              		.fpu fpv5-sp-d16
 1504              	UART_DMATransmitCplt:
 1505              	.LFB189:
3096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1506              		.loc 1 3096 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 0
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              	.LVL102:
 1511 0000 08B5     		push	{r3, lr}
 1512              	.LCFI11:
 1513              		.cfi_def_cfa_offset 8
 1514              		.cfi_offset 3, -8
 1515              		.cfi_offset 14, -4
3097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1516              		.loc 1 3097 0
 1517 0002 836B     		ldr	r3, [r0, #56]
 1518              	.LVL103:
3100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1519              		.loc 1 3100 0
 1520 0004 C269     		ldr	r2, [r0, #28]
 1521 0006 B2F5807F 		cmp	r2, #256
 1522 000a 0DD0     		beq	.L117
3102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1523              		.loc 1 3102 0
 1524 000c 0022     		movs	r2, #0
 1525 000e A3F85220 		strh	r2, [r3, #82]	@ movhi
3106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1526              		.loc 1 3106 0
 1527 0012 1968     		ldr	r1, [r3]
 1528 0014 8A68     		ldr	r2, [r1, #8]
 1529 0016 22F08002 		bic	r2, r2, #128
 1530 001a 8A60     		str	r2, [r1, #8]
3109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1531              		.loc 1 3109 0
 1532 001c 1A68     		ldr	r2, [r3]
 1533 001e 1368     		ldr	r3, [r2]
 1534              	.LVL104:
 1535 0020 43F04003 		orr	r3, r3, #64
 1536 0024 1360     		str	r3, [r2]
 1537              	.LVL105:
 1538              	.L116:
3122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 93


 1539              		.loc 1 3122 0
 1540 0026 08BD     		pop	{r3, pc}
 1541              	.LVL106:
 1542              	.L117:
3119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1543              		.loc 1 3119 0
 1544 0028 1846     		mov	r0, r3
 1545              	.LVL107:
 1546 002a FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 1547              	.LVL108:
3122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1548              		.loc 1 3122 0
 1549 002e FAE7     		b	.L116
 1550              		.cfi_endproc
 1551              	.LFE189:
 1553              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 1554              		.align	1
 1555              		.syntax unified
 1556              		.thumb
 1557              		.thumb_func
 1558              		.fpu fpv5-sp-d16
 1560              	UART_EndTransmit_IT:
 1561              	.LFB201:
3476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief  Wrap up transmission in non-blocking mode.
3480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
3481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
3485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 1562              		.loc 1 3485 0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 0
 1565              		@ frame_needed = 0, uses_anonymous_args = 0
 1566              	.LVL109:
 1567 0000 08B5     		push	{r3, lr}
 1568              	.LCFI12:
 1569              		.cfi_def_cfa_offset 8
 1570              		.cfi_offset 3, -8
 1571              		.cfi_offset 14, -4
3486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 1572              		.loc 1 3487 0
 1573 0002 0168     		ldr	r1, [r0]
 1574 0004 0A68     		ldr	r2, [r1]
 1575 0006 22F04002 		bic	r2, r2, #64
 1576 000a 0A60     		str	r2, [r1]
3488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 1577              		.loc 1 3490 0
 1578 000c 2022     		movs	r2, #32
 1579 000e 4267     		str	r2, [r0, #116]
3491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 94


3492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Cleat TxISR function pointer */
3493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxISR = NULL;
 1580              		.loc 1 3493 0
 1581 0010 0022     		movs	r2, #0
 1582 0012 4266     		str	r2, [r0, #100]
3494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxCpltCallback(huart);
3498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 1583              		.loc 1 3500 0
 1584 0014 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 1585              	.LVL110:
3501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 1586              		.loc 1 3502 0
 1587 0018 08BD     		pop	{r3, pc}
 1588              		.cfi_endproc
 1589              	.LFE201:
 1591              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 1592              		.align	1
 1593              		.weak	HAL_UART_TxHalfCpltCallback
 1594              		.syntax unified
 1595              		.thumb
 1596              		.thumb_func
 1597              		.fpu fpv5-sp-d16
 1599              	HAL_UART_TxHalfCpltCallback:
 1600              	.LFB165:
2310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1601              		.loc 1 2310 0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 0
 1604              		@ frame_needed = 0, uses_anonymous_args = 0
 1605              		@ link register save eliminated.
 1606              	.LVL111:
2317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1607              		.loc 1 2317 0
 1608 0000 7047     		bx	lr
 1609              		.cfi_endproc
 1610              	.LFE165:
 1612              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 1613              		.align	1
 1614              		.syntax unified
 1615              		.thumb
 1616              		.thumb_func
 1617              		.fpu fpv5-sp-d16
 1619              	UART_DMATxHalfCplt:
 1620              	.LFB190:
3130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1621              		.loc 1 3130 0
 1622              		.cfi_startproc
 1623              		@ args = 0, pretend = 0, frame = 0
 1624              		@ frame_needed = 0, uses_anonymous_args = 0
 1625              	.LVL112:
 1626 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccRCsb68.s 			page 95


 1627              	.LCFI13:
 1628              		.cfi_def_cfa_offset 8
 1629              		.cfi_offset 3, -8
 1630              		.cfi_offset 14, -4
 1631              	.LVL113:
3138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1632              		.loc 1 3138 0
 1633 0002 806B     		ldr	r0, [r0, #56]
 1634              	.LVL114:
 1635 0004 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
 1636              	.LVL115:
3140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1637              		.loc 1 3140 0
 1638 0008 08BD     		pop	{r3, pc}
 1639              		.cfi_endproc
 1640              	.LFE190:
 1642              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1643              		.align	1
 1644              		.weak	HAL_UART_RxCpltCallback
 1645              		.syntax unified
 1646              		.thumb
 1647              		.thumb_func
 1648              		.fpu fpv5-sp-d16
 1650              	HAL_UART_RxCpltCallback:
 1651              	.LFB166:
2325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1652              		.loc 1 2325 0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 0
 1655              		@ frame_needed = 0, uses_anonymous_args = 0
 1656              		@ link register save eliminated.
 1657              	.LVL116:
2332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1658              		.loc 1 2332 0
 1659 0000 7047     		bx	lr
 1660              		.cfi_endproc
 1661              	.LFE166:
 1663              		.section	.text.UART_RxISR_8BIT,"ax",%progbits
 1664              		.align	1
 1665              		.syntax unified
 1666              		.thumb
 1667              		.thumb_func
 1668              		.fpu fpv5-sp-d16
 1670              	UART_RxISR_8BIT:
 1671              	.LFB202:
3503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief RX interrrupt handler for 7 or 8 bits data word length .
3506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
3510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 1672              		.loc 1 3510 0
 1673              		.cfi_startproc
 1674              		@ args = 0, pretend = 0, frame = 0
 1675              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccRCsb68.s 			page 96


 1676              	.LVL117:
 1677 0000 08B5     		push	{r3, lr}
 1678              	.LCFI14:
 1679              		.cfi_def_cfa_offset 8
 1680              		.cfi_offset 3, -8
 1681              		.cfi_offset 14, -4
3511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 1682              		.loc 1 3511 0
 1683 0002 B0F85C30 		ldrh	r3, [r0, #92]
 1684              	.LVL118:
3512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t  uhdata;
3513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 1685              		.loc 1 3515 0
 1686 0006 826F     		ldr	r2, [r0, #120]
 1687 0008 222A     		cmp	r2, #34
 1688 000a 05D0     		beq	.L130
3516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
3518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
3519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr++;
3520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
3521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
3523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupts */
3525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
3526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
3532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear RxISR function pointer */
3534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxISR = NULL;
3535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /*Call registered Rx complete callback*/
3538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxCpltCallback(huart);
3539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /*Call legacy weak Rx complete callback*/
3541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
3542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
3546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 1689              		.loc 1 3548 0
 1690 000c 0268     		ldr	r2, [r0]
 1691 000e 9369     		ldr	r3, [r2, #24]
 1692              	.LVL119:
 1693 0010 43F00803 		orr	r3, r3, #8
 1694 0014 9361     		str	r3, [r2, #24]
ARM GAS  /tmp/ccRCsb68.s 			page 97


 1695              	.LVL120:
 1696              	.L126:
3549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 1697              		.loc 1 3550 0
 1698 0016 08BD     		pop	{r3, pc}
 1699              	.LVL121:
 1700              	.L130:
3517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 1701              		.loc 1 3517 0
 1702 0018 0268     		ldr	r2, [r0]
 1703 001a 516A     		ldr	r1, [r2, #36]
 1704              	.LVL122:
3518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr++;
 1705              		.loc 1 3518 0
 1706 001c DBB2     		uxtb	r3, r3
 1707              	.LVL123:
 1708 001e 426D     		ldr	r2, [r0, #84]
 1709 0020 0B40     		ands	r3, r3, r1
 1710 0022 1370     		strb	r3, [r2]
 1711              	.LVL124:
3519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
 1712              		.loc 1 3519 0
 1713 0024 436D     		ldr	r3, [r0, #84]
 1714 0026 0133     		adds	r3, r3, #1
 1715 0028 4365     		str	r3, [r0, #84]
3520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1716              		.loc 1 3520 0
 1717 002a B0F85A30 		ldrh	r3, [r0, #90]
 1718 002e 013B     		subs	r3, r3, #1
 1719 0030 9BB2     		uxth	r3, r3
 1720 0032 A0F85A30 		strh	r3, [r0, #90]	@ movhi
3522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1721              		.loc 1 3522 0
 1722 0036 B0F85A30 		ldrh	r3, [r0, #90]
 1723 003a 9BB2     		uxth	r3, r3
 1724 003c 002B     		cmp	r3, #0
 1725 003e EAD1     		bne	.L126
3525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1726              		.loc 1 3525 0
 1727 0040 0268     		ldr	r2, [r0]
 1728 0042 1368     		ldr	r3, [r2]
 1729 0044 23F49073 		bic	r3, r3, #288
 1730 0048 1360     		str	r3, [r2]
3528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1731              		.loc 1 3528 0
 1732 004a 0268     		ldr	r2, [r0]
 1733 004c 9368     		ldr	r3, [r2, #8]
 1734 004e 23F00103 		bic	r3, r3, #1
 1735 0052 9360     		str	r3, [r2, #8]
3531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1736              		.loc 1 3531 0
 1737 0054 2023     		movs	r3, #32
 1738 0056 8367     		str	r3, [r0, #120]
3534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1739              		.loc 1 3534 0
 1740 0058 0023     		movs	r3, #0
ARM GAS  /tmp/ccRCsb68.s 			page 98


 1741 005a 0366     		str	r3, [r0, #96]
3541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1742              		.loc 1 3541 0
 1743 005c FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 1744              	.LVL125:
 1745 0060 D9E7     		b	.L126
 1746              		.cfi_endproc
 1747              	.LFE202:
 1749              		.section	.text.UART_RxISR_16BIT,"ax",%progbits
 1750              		.align	1
 1751              		.syntax unified
 1752              		.thumb
 1753              		.thumb_func
 1754              		.fpu fpv5-sp-d16
 1756              	UART_RxISR_16BIT:
 1757              	.LFB203:
3551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
3553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @brief RX interrrupt handler for 9 bits data word length .
3554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Receive_IT()
3556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @param huart UART handle.
3557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   * @retval None
3558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   */
3559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
3560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** {
 1758              		.loc 1 3560 0
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 0
 1761              		@ frame_needed = 0, uses_anonymous_args = 0
 1762              	.LVL126:
 1763 0000 08B5     		push	{r3, lr}
 1764              	.LCFI15:
 1765              		.cfi_def_cfa_offset 8
 1766              		.cfi_offset 3, -8
 1767              		.cfi_offset 14, -4
3561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t *tmp;
3562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 1768              		.loc 1 3562 0
 1769 0002 B0F85C20 		ldrh	r2, [r0, #92]
 1770              	.LVL127:
3563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint16_t  uhdata;
3564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 1771              		.loc 1 3566 0
 1772 0006 836F     		ldr	r3, [r0, #120]
 1773 0008 222B     		cmp	r3, #34
 1774 000a 05D0     		beq	.L135
3567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
3569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tmp = (uint16_t *) huart->pRxBuffPtr ;
3570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *tmp = (uint16_t)(uhdata & uhMask);
3571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr += 2U;
3572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
3573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
ARM GAS  /tmp/ccRCsb68.s 			page 99


3575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
3576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
3577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
3578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
3584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /* Clear RxISR function pointer */
3586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxISR = NULL;
3587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
3588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /*Call registered Rx complete callback*/
3590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->RxCpltCallback(huart);
3591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #else
3592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       /*Call legacy weak Rx complete callback*/
3593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
3594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
3596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   else
3598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
3599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 1775              		.loc 1 3600 0
 1776 000c 0268     		ldr	r2, [r0]
 1777              	.LVL128:
 1778 000e 9369     		ldr	r3, [r2, #24]
 1779 0010 43F00803 		orr	r3, r3, #8
 1780 0014 9361     		str	r3, [r2, #24]
 1781              	.LVL129:
 1782              	.L131:
3601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
3602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 1783              		.loc 1 3602 0
 1784 0016 08BD     		pop	{r3, pc}
 1785              	.LVL130:
 1786              	.L135:
3568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     tmp = (uint16_t *) huart->pRxBuffPtr ;
 1787              		.loc 1 3568 0
 1788 0018 0368     		ldr	r3, [r0]
 1789 001a 5B6A     		ldr	r3, [r3, #36]
 1790              	.LVL131:
3569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     *tmp = (uint16_t)(uhdata & uhMask);
 1791              		.loc 1 3569 0
 1792 001c 416D     		ldr	r1, [r0, #84]
 1793              	.LVL132:
3570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->pRxBuffPtr += 2U;
 1794              		.loc 1 3570 0
 1795 001e 1340     		ands	r3, r3, r2
 1796              	.LVL133:
 1797 0020 0B80     		strh	r3, [r1]	@ movhi
3571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount--;
 1798              		.loc 1 3571 0
 1799 0022 436D     		ldr	r3, [r0, #84]
ARM GAS  /tmp/ccRCsb68.s 			page 100


 1800 0024 0233     		adds	r3, r3, #2
 1801 0026 4365     		str	r3, [r0, #84]
3572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1802              		.loc 1 3572 0
 1803 0028 B0F85A30 		ldrh	r3, [r0, #90]
 1804 002c 013B     		subs	r3, r3, #1
 1805 002e 9BB2     		uxth	r3, r3
 1806 0030 A0F85A30 		strh	r3, [r0, #90]	@ movhi
3574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 1807              		.loc 1 3574 0
 1808 0034 B0F85A30 		ldrh	r3, [r0, #90]
 1809 0038 9BB2     		uxth	r3, r3
 1810 003a 002B     		cmp	r3, #0
 1811 003c EBD1     		bne	.L131
3577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1812              		.loc 1 3577 0
 1813 003e 0268     		ldr	r2, [r0]
 1814              	.LVL134:
 1815 0040 1368     		ldr	r3, [r2]
 1816 0042 23F49073 		bic	r3, r3, #288
 1817 0046 1360     		str	r3, [r2]
3580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1818              		.loc 1 3580 0
 1819 0048 0268     		ldr	r2, [r0]
 1820 004a 9368     		ldr	r3, [r2, #8]
 1821 004c 23F00103 		bic	r3, r3, #1
 1822 0050 9360     		str	r3, [r2, #8]
3583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1823              		.loc 1 3583 0
 1824 0052 2023     		movs	r3, #32
 1825 0054 8367     		str	r3, [r0, #120]
3586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1826              		.loc 1 3586 0
 1827 0056 0023     		movs	r3, #0
 1828 0058 0366     		str	r3, [r0, #96]
3593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1829              		.loc 1 3593 0
 1830 005a FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 1831              	.LVL135:
 1832 005e DAE7     		b	.L131
 1833              		.cfi_endproc
 1834              	.LFE203:
 1836              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 1837              		.align	1
 1838              		.syntax unified
 1839              		.thumb
 1840              		.thumb_func
 1841              		.fpu fpv5-sp-d16
 1843              	UART_DMAReceiveCplt:
 1844              	.LFB191:
3148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1845              		.loc 1 3148 0
 1846              		.cfi_startproc
 1847              		@ args = 0, pretend = 0, frame = 0
 1848              		@ frame_needed = 0, uses_anonymous_args = 0
 1849              	.LVL136:
 1850 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccRCsb68.s 			page 101


 1851              	.LCFI16:
 1852              		.cfi_def_cfa_offset 8
 1853              		.cfi_offset 3, -8
 1854              		.cfi_offset 14, -4
3149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1855              		.loc 1 3149 0
 1856 0002 836B     		ldr	r3, [r0, #56]
 1857              	.LVL137:
3152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 1858              		.loc 1 3152 0
 1859 0004 C269     		ldr	r2, [r0, #28]
 1860 0006 B2F5807F 		cmp	r2, #256
 1861 000a 13D0     		beq	.L137
3154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1862              		.loc 1 3154 0
 1863 000c 0022     		movs	r2, #0
 1864 000e A3F85A20 		strh	r2, [r3, #90]	@ movhi
3157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1865              		.loc 1 3157 0
 1866 0012 1968     		ldr	r1, [r3]
 1867 0014 0A68     		ldr	r2, [r1]
 1868 0016 22F48072 		bic	r2, r2, #256
 1869 001a 0A60     		str	r2, [r1]
3158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1870              		.loc 1 3158 0
 1871 001c 1968     		ldr	r1, [r3]
 1872 001e 8A68     		ldr	r2, [r1, #8]
 1873 0020 22F00102 		bic	r2, r2, #1
 1874 0024 8A60     		str	r2, [r1, #8]
3162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1875              		.loc 1 3162 0
 1876 0026 1968     		ldr	r1, [r3]
 1877 0028 8A68     		ldr	r2, [r1, #8]
 1878 002a 22F04002 		bic	r2, r2, #64
 1879 002e 8A60     		str	r2, [r1, #8]
3165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 1880              		.loc 1 3165 0
 1881 0030 2022     		movs	r2, #32
 1882 0032 9A67     		str	r2, [r3, #120]
 1883              	.L137:
3173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1884              		.loc 1 3173 0
 1885 0034 1846     		mov	r0, r3
 1886              	.LVL138:
 1887 0036 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 1888              	.LVL139:
3175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1889              		.loc 1 3175 0
 1890 003a 08BD     		pop	{r3, pc}
 1891              		.cfi_endproc
 1892              	.LFE191:
 1894              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 1895              		.align	1
 1896              		.weak	HAL_UART_RxHalfCpltCallback
 1897              		.syntax unified
 1898              		.thumb
 1899              		.thumb_func
ARM GAS  /tmp/ccRCsb68.s 			page 102


 1900              		.fpu fpv5-sp-d16
 1902              	HAL_UART_RxHalfCpltCallback:
 1903              	.LFB167:
2340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1904              		.loc 1 2340 0
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 0
 1907              		@ frame_needed = 0, uses_anonymous_args = 0
 1908              		@ link register save eliminated.
 1909              	.LVL140:
2347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1910              		.loc 1 2347 0
 1911 0000 7047     		bx	lr
 1912              		.cfi_endproc
 1913              	.LFE167:
 1915              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 1916              		.align	1
 1917              		.syntax unified
 1918              		.thumb
 1919              		.thumb_func
 1920              		.fpu fpv5-sp-d16
 1922              	UART_DMARxHalfCplt:
 1923              	.LFB192:
3183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1924              		.loc 1 3183 0
 1925              		.cfi_startproc
 1926              		@ args = 0, pretend = 0, frame = 0
 1927              		@ frame_needed = 0, uses_anonymous_args = 0
 1928              	.LVL141:
 1929 0000 08B5     		push	{r3, lr}
 1930              	.LCFI17:
 1931              		.cfi_def_cfa_offset 8
 1932              		.cfi_offset 3, -8
 1933              		.cfi_offset 14, -4
 1934              	.LVL142:
3191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1935              		.loc 1 3191 0
 1936 0002 806B     		ldr	r0, [r0, #56]
 1937              	.LVL143:
 1938 0004 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 1939              	.LVL144:
3193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1940              		.loc 1 3193 0
 1941 0008 08BD     		pop	{r3, pc}
 1942              		.cfi_endproc
 1943              	.LFE192:
 1945              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 1946              		.align	1
 1947              		.weak	HAL_UART_ErrorCallback
 1948              		.syntax unified
 1949              		.thumb
 1950              		.thumb_func
 1951              		.fpu fpv5-sp-d16
 1953              	HAL_UART_ErrorCallback:
 1954              	.LFB168:
2355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1955              		.loc 1 2355 0
ARM GAS  /tmp/ccRCsb68.s 			page 103


 1956              		.cfi_startproc
 1957              		@ args = 0, pretend = 0, frame = 0
 1958              		@ frame_needed = 0, uses_anonymous_args = 0
 1959              		@ link register save eliminated.
 1960              	.LVL145:
2362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1961              		.loc 1 2362 0
 1962 0000 7047     		bx	lr
 1963              		.cfi_endproc
 1964              	.LFE168:
 1966              		.section	.text.UART_DMAError,"ax",%progbits
 1967              		.align	1
 1968              		.syntax unified
 1969              		.thumb
 1970              		.thumb_func
 1971              		.fpu fpv5-sp-d16
 1973              	UART_DMAError:
 1974              	.LFB193:
3201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1975              		.loc 1 3201 0
 1976              		.cfi_startproc
 1977              		@ args = 0, pretend = 0, frame = 0
 1978              		@ frame_needed = 0, uses_anonymous_args = 0
 1979              	.LVL146:
 1980 0000 38B5     		push	{r3, r4, r5, lr}
 1981              	.LCFI18:
 1982              		.cfi_def_cfa_offset 16
 1983              		.cfi_offset 3, -16
 1984              		.cfi_offset 4, -12
 1985              		.cfi_offset 5, -8
 1986              		.cfi_offset 14, -4
3202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1987              		.loc 1 3202 0
 1988 0002 846B     		ldr	r4, [r0, #56]
 1989              	.LVL147:
3204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 1990              		.loc 1 3204 0
 1991 0004 626F     		ldr	r2, [r4, #116]
 1992              	.LVL148:
3205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 1993              		.loc 1 3205 0
 1994 0006 A56F     		ldr	r5, [r4, #120]
 1995              	.LVL149:
3208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1996              		.loc 1 3208 0
 1997 0008 2368     		ldr	r3, [r4]
 1998 000a 9B68     		ldr	r3, [r3, #8]
 1999 000c 13F0800F 		tst	r3, #128
 2000 0010 01D0     		beq	.L144
3208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 2001              		.loc 1 3208 0 is_stmt 0 discriminator 1
 2002 0012 212A     		cmp	r2, #33
 2003 0014 0ED0     		beq	.L147
 2004              	.LVL150:
 2005              	.L144:
3216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 2006              		.loc 1 3216 0 is_stmt 1
ARM GAS  /tmp/ccRCsb68.s 			page 104


 2007 0016 2368     		ldr	r3, [r4]
 2008 0018 9B68     		ldr	r3, [r3, #8]
 2009 001a 13F0400F 		tst	r3, #64
 2010 001e 01D0     		beq	.L145
3216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 2011              		.loc 1 3216 0 is_stmt 0 discriminator 1
 2012 0020 222D     		cmp	r5, #34
 2013 0022 0ED0     		beq	.L148
 2014              	.L145:
3223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2015              		.loc 1 3223 0 is_stmt 1
 2016 0024 E36F     		ldr	r3, [r4, #124]
 2017 0026 43F01003 		orr	r3, r3, #16
 2018 002a E367     		str	r3, [r4, #124]
3230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2019              		.loc 1 3230 0
 2020 002c 2046     		mov	r0, r4
 2021 002e FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2022              	.LVL151:
3232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2023              		.loc 1 3232 0
 2024 0032 38BD     		pop	{r3, r4, r5, pc}
 2025              	.LVL152:
 2026              	.L147:
3211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2027              		.loc 1 3211 0
 2028 0034 0023     		movs	r3, #0
 2029 0036 A4F85230 		strh	r3, [r4, #82]	@ movhi
3212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 2030              		.loc 1 3212 0
 2031 003a 2046     		mov	r0, r4
 2032              	.LVL153:
 2033 003c FFF7FEFF 		bl	UART_EndTxTransfer
 2034              	.LVL154:
 2035 0040 E9E7     		b	.L144
 2036              	.L148:
3219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2037              		.loc 1 3219 0
 2038 0042 0023     		movs	r3, #0
 2039 0044 A4F85A30 		strh	r3, [r4, #90]	@ movhi
3220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 2040              		.loc 1 3220 0
 2041 0048 2046     		mov	r0, r4
 2042 004a FFF7FEFF 		bl	UART_EndRxTransfer
 2043              	.LVL155:
 2044 004e E9E7     		b	.L145
 2045              		.cfi_endproc
 2046              	.LFE193:
 2048              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 2049              		.align	1
 2050              		.global	HAL_UART_IRQHandler
 2051              		.syntax unified
 2052              		.thumb
 2053              		.thumb_func
 2054              		.fpu fpv5-sp-d16
 2056              	HAL_UART_IRQHandler:
 2057              	.LFB163:
ARM GAS  /tmp/ccRCsb68.s 			page 105


2089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 2058              		.loc 1 2089 0
 2059              		.cfi_startproc
 2060              		@ args = 0, pretend = 0, frame = 0
 2061              		@ frame_needed = 0, uses_anonymous_args = 0
 2062              	.LVL156:
 2063 0000 38B5     		push	{r3, r4, r5, lr}
 2064              	.LCFI19:
 2065              		.cfi_def_cfa_offset 16
 2066              		.cfi_offset 3, -16
 2067              		.cfi_offset 4, -12
 2068              		.cfi_offset 5, -8
 2069              		.cfi_offset 14, -4
 2070 0002 0446     		mov	r4, r0
2090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 2071              		.loc 1 2090 0
 2072 0004 0168     		ldr	r1, [r0]
 2073 0006 CB69     		ldr	r3, [r1, #28]
 2074              	.LVL157:
2091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 2075              		.loc 1 2091 0
 2076 0008 0D68     		ldr	r5, [r1]
 2077              	.LVL158:
2092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2078              		.loc 1 2092 0
 2079 000a 8868     		ldr	r0, [r1, #8]
 2080              	.LVL159:
2098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (errorflags == 0U)
 2081              		.loc 1 2098 0
 2082 000c 40F60F02 		movw	r2, #2063
 2083              	.LVL160:
2099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2084              		.loc 1 2099 0
 2085 0010 1A40     		ands	r2, r3, r2
 2086              	.LVL161:
 2087 0012 0CD1     		bne	.L150
2102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && ((cr1its & USART_CR1_RXNEIE) != 0U))
 2088              		.loc 1 2102 0
 2089 0014 13F0200F 		tst	r3, #32
 2090 0018 09D0     		beq	.L150
2103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2091              		.loc 1 2103 0
 2092 001a 15F0200F 		tst	r5, #32
 2093 001e 06D0     		beq	.L150
2105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2094              		.loc 1 2105 0
 2095 0020 236E     		ldr	r3, [r4, #96]
 2096              	.LVL162:
 2097 0022 002B     		cmp	r3, #0
 2098 0024 00F09580 		beq	.L149
2107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2099              		.loc 1 2107 0
 2100 0028 2046     		mov	r0, r4
 2101              	.LVL163:
 2102 002a 9847     		blx	r3
 2103              	.LVL164:
 2104 002c 91E0     		b	.L149
ARM GAS  /tmp/ccRCsb68.s 			page 106


 2105              	.LVL165:
 2106              	.L150:
2114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && (((cr3its & USART_CR3_EIE) != 0U)
 2107              		.loc 1 2114 0
 2108 002e 002A     		cmp	r2, #0
 2109 0030 7ED0     		beq	.L152
2115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 2110              		.loc 1 2115 0
 2111 0032 10F00100 		ands	r0, r0, #1
 2112              	.LVL166:
 2113 0036 02D1     		bne	.L153
2116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2114              		.loc 1 2116 0
 2115 0038 15F4907F 		tst	r5, #288
 2116 003c 78D0     		beq	.L152
 2117              	.L153:
2119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2118              		.loc 1 2119 0
 2119 003e 13F0010F 		tst	r3, #1
 2120 0042 08D0     		beq	.L154
2119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2121              		.loc 1 2119 0 is_stmt 0 discriminator 1
 2122 0044 15F4807F 		tst	r5, #256
 2123 0048 05D0     		beq	.L154
2121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2124              		.loc 1 2121 0 is_stmt 1
 2125 004a 0122     		movs	r2, #1
 2126              	.LVL167:
 2127 004c 0A62     		str	r2, [r1, #32]
2123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2128              		.loc 1 2123 0
 2129 004e E26F     		ldr	r2, [r4, #124]
 2130 0050 42F00102 		orr	r2, r2, #1
 2131 0054 E267     		str	r2, [r4, #124]
 2132              	.L154:
2127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2133              		.loc 1 2127 0
 2134 0056 13F0020F 		tst	r3, #2
 2135 005a 07D0     		beq	.L155
2127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2136              		.loc 1 2127 0 is_stmt 0 discriminator 1
 2137 005c 30B1     		cbz	r0, .L155
2129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2138              		.loc 1 2129 0 is_stmt 1
 2139 005e 2268     		ldr	r2, [r4]
 2140 0060 0221     		movs	r1, #2
 2141 0062 1162     		str	r1, [r2, #32]
2131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2142              		.loc 1 2131 0
 2143 0064 E26F     		ldr	r2, [r4, #124]
 2144 0066 42F00402 		orr	r2, r2, #4
 2145 006a E267     		str	r2, [r4, #124]
 2146              	.L155:
2135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2147              		.loc 1 2135 0
 2148 006c 13F0040F 		tst	r3, #4
 2149 0070 07D0     		beq	.L156
ARM GAS  /tmp/ccRCsb68.s 			page 107


2135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2150              		.loc 1 2135 0 is_stmt 0 discriminator 1
 2151 0072 30B1     		cbz	r0, .L156
2137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2152              		.loc 1 2137 0 is_stmt 1
 2153 0074 2268     		ldr	r2, [r4]
 2154 0076 0421     		movs	r1, #4
 2155 0078 1162     		str	r1, [r2, #32]
2139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2156              		.loc 1 2139 0
 2157 007a E26F     		ldr	r2, [r4, #124]
 2158 007c 42F00202 		orr	r2, r2, #2
 2159 0080 E267     		str	r2, [r4, #124]
 2160              	.L156:
2143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 2161              		.loc 1 2143 0
 2162 0082 13F0080F 		tst	r3, #8
 2163 0086 09D0     		beq	.L157
2144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ((cr3its & USART_CR3_EIE) != 0U)))
 2164              		.loc 1 2144 0
 2165 0088 15F0200F 		tst	r5, #32
 2166 008c 00D1     		bne	.L158
2144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             ((cr3its & USART_CR3_EIE) != 0U)))
 2167              		.loc 1 2144 0 is_stmt 0 discriminator 1
 2168 008e 28B1     		cbz	r0, .L157
 2169              	.L158:
2147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2170              		.loc 1 2147 0 is_stmt 1
 2171 0090 2268     		ldr	r2, [r4]
 2172 0092 0821     		movs	r1, #8
 2173 0094 1162     		str	r1, [r2, #32]
2149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2174              		.loc 1 2149 0
 2175 0096 E26F     		ldr	r2, [r4, #124]
 2176 0098 0A43     		orrs	r2, r2, r1
 2177 009a E267     		str	r2, [r4, #124]
 2178              	.L157:
2153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2179              		.loc 1 2153 0
 2180 009c 13F4006F 		tst	r3, #2048
 2181 00a0 0AD0     		beq	.L159
2153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2182              		.loc 1 2153 0 is_stmt 0 discriminator 1
 2183 00a2 15F0806F 		tst	r5, #67108864
 2184 00a6 07D0     		beq	.L159
2155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2185              		.loc 1 2155 0 is_stmt 1
 2186 00a8 2268     		ldr	r2, [r4]
 2187 00aa 4FF40061 		mov	r1, #2048
 2188 00ae 1162     		str	r1, [r2, #32]
2157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2189              		.loc 1 2157 0
 2190 00b0 E26F     		ldr	r2, [r4, #124]
 2191 00b2 42F02002 		orr	r2, r2, #32
 2192 00b6 E267     		str	r2, [r4, #124]
 2193              	.L159:
2161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
ARM GAS  /tmp/ccRCsb68.s 			page 108


 2194              		.loc 1 2161 0
 2195 00b8 E26F     		ldr	r2, [r4, #124]
 2196 00ba 002A     		cmp	r2, #0
 2197 00bc 49D0     		beq	.L149
2164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           && ((cr1its & USART_CR1_RXNEIE) != 0U))
 2198              		.loc 1 2164 0
 2199 00be 13F0200F 		tst	r3, #32
 2200 00c2 06D0     		beq	.L160
2165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2201              		.loc 1 2165 0
 2202 00c4 15F0200F 		tst	r5, #32
 2203 00c8 03D0     		beq	.L160
2167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 2204              		.loc 1 2167 0
 2205 00ca 236E     		ldr	r3, [r4, #96]
 2206              	.LVL168:
 2207 00cc 0BB1     		cbz	r3, .L160
2169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 2208              		.loc 1 2169 0
 2209 00ce 2046     		mov	r0, r4
 2210 00d0 9847     		blx	r3
 2211              	.LVL169:
 2212              	.L160:
2178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 2213              		.loc 1 2178 0
 2214 00d2 E26F     		ldr	r2, [r4, #124]
 2215              	.LVL170:
2179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 2216              		.loc 1 2179 0
 2217 00d4 2368     		ldr	r3, [r4]
 2218 00d6 9B68     		ldr	r3, [r3, #8]
 2219 00d8 13F0400F 		tst	r3, #64
 2220 00dc 02D1     		bne	.L161
2179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 2221              		.loc 1 2179 0 is_stmt 0 discriminator 1
 2222 00de 12F0280F 		tst	r2, #40
 2223 00e2 1FD0     		beq	.L162
 2224              	.L161:
2185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2225              		.loc 1 2185 0 is_stmt 1
 2226 00e4 2046     		mov	r0, r4
 2227 00e6 FFF7FEFF 		bl	UART_EndRxTransfer
 2228              	.LVL171:
2188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 2229              		.loc 1 2188 0
 2230 00ea 2368     		ldr	r3, [r4]
 2231 00ec 9A68     		ldr	r2, [r3, #8]
 2232 00ee 12F0400F 		tst	r2, #64
 2233 00f2 13D0     		beq	.L163
2190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2234              		.loc 1 2190 0
 2235 00f4 9A68     		ldr	r2, [r3, #8]
 2236 00f6 22F04002 		bic	r2, r2, #64
 2237 00fa 9A60     		str	r2, [r3, #8]
2193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           {
 2238              		.loc 1 2193 0
 2239 00fc E36E     		ldr	r3, [r4, #108]
ARM GAS  /tmp/ccRCsb68.s 			page 109


 2240 00fe 4BB1     		cbz	r3, .L164
2197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2241              		.loc 1 2197 0
 2242 0100 164A     		ldr	r2, .L168
 2243 0102 1A65     		str	r2, [r3, #80]
2200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             {
 2244              		.loc 1 2200 0
 2245 0104 E06E     		ldr	r0, [r4, #108]
 2246 0106 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2247              	.LVL172:
 2248 010a 10B3     		cbz	r0, .L149
2203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****             }
 2249              		.loc 1 2203 0
 2250 010c E06E     		ldr	r0, [r4, #108]
 2251 010e 036D     		ldr	r3, [r0, #80]
 2252 0110 9847     		blx	r3
 2253              	.LVL173:
 2254 0112 1EE0     		b	.L149
 2255              	.L164:
2214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2256              		.loc 1 2214 0
 2257 0114 2046     		mov	r0, r4
 2258 0116 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2259              	.LVL174:
 2260 011a 1AE0     		b	.L149
 2261              	.L163:
2227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2262              		.loc 1 2227 0
 2263 011c 2046     		mov	r0, r4
 2264 011e FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2265              	.LVL175:
 2266 0122 16E0     		b	.L149
 2267              	.LVL176:
 2268              	.L162:
2240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2269              		.loc 1 2240 0
 2270 0124 2046     		mov	r0, r4
 2271 0126 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2272              	.LVL177:
2242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2273              		.loc 1 2242 0
 2274 012a 0023     		movs	r3, #0
 2275 012c E367     		str	r3, [r4, #124]
 2276 012e 10E0     		b	.L149
 2277              	.LVL178:
 2278              	.L152:
2270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       && ((cr1its & USART_CR1_TXEIE) != 0U))
 2279              		.loc 1 2270 0
 2280 0130 13F0800F 		tst	r3, #128
 2281 0134 07D0     		beq	.L165
2271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2282              		.loc 1 2271 0
 2283 0136 15F0800F 		tst	r5, #128
 2284 013a 04D0     		beq	.L165
2273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2285              		.loc 1 2273 0
 2286 013c 636E     		ldr	r3, [r4, #100]
ARM GAS  /tmp/ccRCsb68.s 			page 110


 2287              	.LVL179:
 2288 013e 43B1     		cbz	r3, .L149
2275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2289              		.loc 1 2275 0
 2290 0140 2046     		mov	r0, r4
 2291 0142 9847     		blx	r3
 2292              	.LVL180:
 2293 0144 05E0     		b	.L149
 2294              	.LVL181:
 2295              	.L165:
2281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2296              		.loc 1 2281 0
 2297 0146 13F0400F 		tst	r3, #64
 2298 014a 02D0     		beq	.L149
2281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2299              		.loc 1 2281 0 is_stmt 0 discriminator 1
 2300 014c 15F0400F 		tst	r5, #64
 2301 0150 00D1     		bne	.L167
 2302              	.LVL182:
 2303              	.L149:
2287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2304              		.loc 1 2287 0 is_stmt 1
 2305 0152 38BD     		pop	{r3, r4, r5, pc}
 2306              	.LVL183:
 2307              	.L167:
2283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     return;
 2308              		.loc 1 2283 0
 2309 0154 2046     		mov	r0, r4
 2310 0156 FFF7FEFF 		bl	UART_EndTransmit_IT
 2311              	.LVL184:
2284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 2312              		.loc 1 2284 0
 2313 015a FAE7     		b	.L149
 2314              	.L169:
 2315              		.align	2
 2316              	.L168:
 2317 015c 00000000 		.word	UART_DMAAbortOnError
 2318              		.cfi_endproc
 2319              	.LFE163:
 2321              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 2322              		.align	1
 2323              		.syntax unified
 2324              		.thumb
 2325              		.thumb_func
 2326              		.fpu fpv5-sp-d16
 2328              	UART_DMAAbortOnError:
 2329              	.LFB194:
3241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2330              		.loc 1 3241 0
 2331              		.cfi_startproc
 2332              		@ args = 0, pretend = 0, frame = 0
 2333              		@ frame_needed = 0, uses_anonymous_args = 0
 2334              	.LVL185:
 2335 0000 08B5     		push	{r3, lr}
 2336              	.LCFI20:
 2337              		.cfi_def_cfa_offset 8
 2338              		.cfi_offset 3, -8
ARM GAS  /tmp/ccRCsb68.s 			page 111


 2339              		.cfi_offset 14, -4
3242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2340              		.loc 1 3242 0
 2341 0002 806B     		ldr	r0, [r0, #56]
 2342              	.LVL186:
3243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxXferCount = 0U;
 2343              		.loc 1 3243 0
 2344 0004 0023     		movs	r3, #0
 2345 0006 A0F85A30 		strh	r3, [r0, #90]	@ movhi
3244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2346              		.loc 1 3244 0
 2347 000a A0F85230 		strh	r3, [r0, #82]	@ movhi
3251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2348              		.loc 1 3251 0
 2349 000e FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2350              	.LVL187:
3253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2351              		.loc 1 3253 0
 2352 0012 08BD     		pop	{r3, pc}
 2353              		.cfi_endproc
 2354              	.LFE194:
 2356              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 2357              		.align	1
 2358              		.weak	HAL_UART_AbortCpltCallback
 2359              		.syntax unified
 2360              		.thumb
 2361              		.thumb_func
 2362              		.fpu fpv5-sp-d16
 2364              	HAL_UART_AbortCpltCallback:
 2365              	.LFB169:
2370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2366              		.loc 1 2370 0
 2367              		.cfi_startproc
 2368              		@ args = 0, pretend = 0, frame = 0
 2369              		@ frame_needed = 0, uses_anonymous_args = 0
 2370              		@ link register save eliminated.
 2371              	.LVL188:
2377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2372              		.loc 1 2377 0
 2373 0000 7047     		bx	lr
 2374              		.cfi_endproc
 2375              	.LFE169:
 2377              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 2378              		.align	1
 2379              		.global	HAL_UART_Abort_IT
 2380              		.syntax unified
 2381              		.thumb
 2382              		.thumb_func
 2383              		.fpu fpv5-sp-d16
 2385              	HAL_UART_Abort_IT:
 2386              	.LFB160:
1782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t abortcplt = 1U;
 2387              		.loc 1 1782 0
 2388              		.cfi_startproc
 2389              		@ args = 0, pretend = 0, frame = 0
 2390              		@ frame_needed = 0, uses_anonymous_args = 0
 2391              	.LVL189:
ARM GAS  /tmp/ccRCsb68.s 			page 112


 2392 0000 10B5     		push	{r4, lr}
 2393              	.LCFI21:
 2394              		.cfi_def_cfa_offset 8
 2395              		.cfi_offset 4, -8
 2396              		.cfi_offset 14, -4
 2397 0002 0446     		mov	r4, r0
 2398              	.LVL190:
1786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2399              		.loc 1 1786 0
 2400 0004 0268     		ldr	r2, [r0]
 2401 0006 1368     		ldr	r3, [r2]
 2402 0008 23F4F073 		bic	r3, r3, #480
 2403 000c 1360     		str	r3, [r2]
1787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2404              		.loc 1 1787 0
 2405 000e 0268     		ldr	r2, [r0]
 2406 0010 9368     		ldr	r3, [r2, #8]
 2407 0012 23F00103 		bic	r3, r3, #1
 2408 0016 9360     		str	r3, [r2, #8]
1792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2409              		.loc 1 1792 0
 2410 0018 836E     		ldr	r3, [r0, #104]
 2411 001a 33B1     		cbz	r3, .L174
1796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2412              		.loc 1 1796 0
 2413 001c 0268     		ldr	r2, [r0]
 2414 001e 9268     		ldr	r2, [r2, #8]
 2415 0020 12F0800F 		tst	r2, #128
 2416 0024 1FD0     		beq	.L175
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2417              		.loc 1 1798 0
 2418 0026 2B4A     		ldr	r2, .L186
 2419 0028 1A65     		str	r2, [r3, #80]
 2420              	.L174:
1806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2421              		.loc 1 1806 0
 2422 002a E36E     		ldr	r3, [r4, #108]
 2423 002c 33B1     		cbz	r3, .L176
1810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2424              		.loc 1 1810 0
 2425 002e 2268     		ldr	r2, [r4]
 2426 0030 9268     		ldr	r2, [r2, #8]
 2427 0032 12F0400F 		tst	r2, #64
 2428 0036 19D0     		beq	.L177
1812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2429              		.loc 1 1812 0
 2430 0038 274A     		ldr	r2, .L186+4
 2431 003a 1A65     		str	r2, [r3, #80]
 2432              	.L176:
1821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2433              		.loc 1 1821 0
 2434 003c 2368     		ldr	r3, [r4]
 2435 003e 9A68     		ldr	r2, [r3, #8]
 2436 0040 12F0800F 		tst	r2, #128
 2437 0044 15D0     		beq	.L182
1824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2438              		.loc 1 1824 0
ARM GAS  /tmp/ccRCsb68.s 			page 113


 2439 0046 9A68     		ldr	r2, [r3, #8]
 2440 0048 22F08002 		bic	r2, r2, #128
 2441 004c 9A60     		str	r2, [r3, #8]
1827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2442              		.loc 1 1827 0
 2443 004e A06E     		ldr	r0, [r4, #104]
 2444              	.LVL191:
 2445 0050 0028     		cmp	r0, #0
 2446 0052 37D0     		beq	.L183
1833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2447              		.loc 1 1833 0
 2448 0054 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2449              	.LVL192:
 2450 0058 0028     		cmp	r0, #0
 2451 005a 35D0     		beq	.L184
1835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2452              		.loc 1 1835 0
 2453 005c A36E     		ldr	r3, [r4, #104]
 2454 005e 0022     		movs	r2, #0
 2455 0060 1A65     		str	r2, [r3, #80]
1783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2456              		.loc 1 1783 0
 2457 0062 0121     		movs	r1, #1
 2458 0064 06E0     		b	.L178
 2459              	.LVL193:
 2460              	.L175:
1802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2461              		.loc 1 1802 0
 2462 0066 0022     		movs	r2, #0
 2463 0068 1A65     		str	r2, [r3, #80]
 2464 006a DEE7     		b	.L174
 2465              	.L177:
1816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 2466              		.loc 1 1816 0
 2467 006c 0022     		movs	r2, #0
 2468 006e 1A65     		str	r2, [r3, #80]
 2469 0070 E4E7     		b	.L176
 2470              	.L182:
1783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2471              		.loc 1 1783 0
 2472 0072 0121     		movs	r1, #1
 2473              	.LVL194:
 2474              	.L178:
1845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2475              		.loc 1 1845 0
 2476 0074 2368     		ldr	r3, [r4]
 2477 0076 9A68     		ldr	r2, [r3, #8]
 2478 0078 12F0400F 		tst	r2, #64
 2479 007c 26D0     		beq	.L179
1847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2480              		.loc 1 1847 0
 2481 007e 9A68     		ldr	r2, [r3, #8]
 2482 0080 22F04002 		bic	r2, r2, #64
 2483 0084 9A60     		str	r2, [r3, #8]
1850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2484              		.loc 1 1850 0
 2485 0086 E06E     		ldr	r0, [r4, #108]
ARM GAS  /tmp/ccRCsb68.s 			page 114


 2486 0088 00B3     		cbz	r0, .L179
1856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2487              		.loc 1 1856 0
 2488 008a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2489              	.LVL195:
 2490 008e F8B1     		cbz	r0, .L180
1858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         abortcplt = 1U;
 2491              		.loc 1 1858 0
 2492 0090 E36E     		ldr	r3, [r4, #108]
 2493 0092 0022     		movs	r2, #0
 2494 0094 1A65     		str	r2, [r3, #80]
 2495              	.LVL196:
 2496              	.L181:
1872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = 0U;
 2497              		.loc 1 1872 0
 2498 0096 0023     		movs	r3, #0
 2499 0098 A4F85230 		strh	r3, [r4, #82]	@ movhi
1873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2500              		.loc 1 1873 0
 2501 009c A4F85A30 		strh	r3, [r4, #90]	@ movhi
1876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxISR = NULL;
 2502              		.loc 1 1876 0
 2503 00a0 2366     		str	r3, [r4, #96]
1877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2504              		.loc 1 1877 0
 2505 00a2 6366     		str	r3, [r4, #100]
1880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2506              		.loc 1 1880 0
 2507 00a4 E367     		str	r3, [r4, #124]
1883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2508              		.loc 1 1883 0
 2509 00a6 2368     		ldr	r3, [r4]
 2510 00a8 0F22     		movs	r2, #15
 2511 00aa 1A62     		str	r2, [r3, #32]
1887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2512              		.loc 1 1887 0
 2513 00ac 2268     		ldr	r2, [r4]
 2514 00ae 9369     		ldr	r3, [r2, #24]
 2515 00b0 43F00803 		orr	r3, r3, #8
 2516 00b4 9361     		str	r3, [r2, #24]
1890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2517              		.loc 1 1890 0
 2518 00b6 2023     		movs	r3, #32
 2519 00b8 6367     		str	r3, [r4, #116]
1891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2520              		.loc 1 1891 0
 2521 00ba A367     		str	r3, [r4, #120]
1899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2522              		.loc 1 1899 0
 2523 00bc 2046     		mov	r0, r4
 2524 00be FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2525              	.LVL197:
 2526 00c2 05E0     		b	.L180
 2527              	.LVL198:
 2528              	.L183:
1783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2529              		.loc 1 1783 0
ARM GAS  /tmp/ccRCsb68.s 			page 115


 2530 00c4 0121     		movs	r1, #1
 2531 00c6 D5E7     		b	.L178
 2532              	.L184:
1839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2533              		.loc 1 1839 0
 2534 00c8 0021     		movs	r1, #0
 2535 00ca D3E7     		b	.L178
 2536              	.LVL199:
 2537              	.L179:
1869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2538              		.loc 1 1869 0
 2539 00cc 0029     		cmp	r1, #0
 2540 00ce E2D1     		bne	.L181
 2541              	.LVL200:
 2542              	.L180:
1904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2543              		.loc 1 1904 0
 2544 00d0 0020     		movs	r0, #0
 2545 00d2 10BD     		pop	{r4, pc}
 2546              	.LVL201:
 2547              	.L187:
 2548              		.align	2
 2549              	.L186:
 2550 00d4 00000000 		.word	UART_DMATxAbortCallback
 2551 00d8 00000000 		.word	UART_DMARxAbortCallback
 2552              		.cfi_endproc
 2553              	.LFE160:
 2555              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 2556              		.align	1
 2557              		.syntax unified
 2558              		.thumb
 2559              		.thumb_func
 2560              		.fpu fpv5-sp-d16
 2562              	UART_DMARxAbortCallback:
 2563              	.LFB196:
3313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2564              		.loc 1 3313 0
 2565              		.cfi_startproc
 2566              		@ args = 0, pretend = 0, frame = 0
 2567              		@ frame_needed = 0, uses_anonymous_args = 0
 2568              	.LVL202:
 2569 0000 08B5     		push	{r3, lr}
 2570              	.LCFI22:
 2571              		.cfi_def_cfa_offset 8
 2572              		.cfi_offset 3, -8
 2573              		.cfi_offset 14, -4
3314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2574              		.loc 1 3314 0
 2575 0002 806B     		ldr	r0, [r0, #56]
 2576              	.LVL203:
3316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2577              		.loc 1 3316 0
 2578 0004 C36E     		ldr	r3, [r0, #108]
 2579 0006 0022     		movs	r2, #0
 2580 0008 1A65     		str	r2, [r3, #80]
3319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2581              		.loc 1 3319 0
ARM GAS  /tmp/ccRCsb68.s 			page 116


 2582 000a 836E     		ldr	r3, [r0, #104]
 2583 000c 13B1     		cbz	r3, .L189
3321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2584              		.loc 1 3321 0
 2585 000e 1B6D     		ldr	r3, [r3, #80]
 2586 0010 03B1     		cbz	r3, .L189
 2587              	.LVL204:
 2588              	.L188:
3352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2589              		.loc 1 3352 0
 2590 0012 08BD     		pop	{r3, pc}
 2591              	.LVL205:
 2592              	.L189:
3328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2593              		.loc 1 3328 0
 2594 0014 0023     		movs	r3, #0
 2595 0016 A0F85230 		strh	r3, [r0, #82]	@ movhi
3329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2596              		.loc 1 3329 0
 2597 001a A0F85A30 		strh	r3, [r0, #90]	@ movhi
3332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2598              		.loc 1 3332 0
 2599 001e C367     		str	r3, [r0, #124]
3335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2600              		.loc 1 3335 0
 2601 0020 0368     		ldr	r3, [r0]
 2602 0022 0F22     		movs	r2, #15
 2603 0024 1A62     		str	r2, [r3, #32]
3338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2604              		.loc 1 3338 0
 2605 0026 0268     		ldr	r2, [r0]
 2606 0028 9369     		ldr	r3, [r2, #24]
 2607 002a 43F00803 		orr	r3, r3, #8
 2608 002e 9361     		str	r3, [r2, #24]
3341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2609              		.loc 1 3341 0
 2610 0030 2023     		movs	r3, #32
 2611 0032 4367     		str	r3, [r0, #116]
3342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2612              		.loc 1 3342 0
 2613 0034 8367     		str	r3, [r0, #120]
3350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2614              		.loc 1 3350 0
 2615 0036 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2616              	.LVL206:
 2617 003a EAE7     		b	.L188
 2618              		.cfi_endproc
 2619              	.LFE196:
 2621              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 2622              		.align	1
 2623              		.syntax unified
 2624              		.thumb
 2625              		.thumb_func
 2626              		.fpu fpv5-sp-d16
 2628              	UART_DMATxAbortCallback:
 2629              	.LFB195:
3264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
ARM GAS  /tmp/ccRCsb68.s 			page 117


 2630              		.loc 1 3264 0
 2631              		.cfi_startproc
 2632              		@ args = 0, pretend = 0, frame = 0
 2633              		@ frame_needed = 0, uses_anonymous_args = 0
 2634              	.LVL207:
 2635 0000 08B5     		push	{r3, lr}
 2636              	.LCFI23:
 2637              		.cfi_def_cfa_offset 8
 2638              		.cfi_offset 3, -8
 2639              		.cfi_offset 14, -4
3265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2640              		.loc 1 3265 0
 2641 0002 806B     		ldr	r0, [r0, #56]
 2642              	.LVL208:
3267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2643              		.loc 1 3267 0
 2644 0004 836E     		ldr	r3, [r0, #104]
 2645 0006 0022     		movs	r2, #0
 2646 0008 1A65     		str	r2, [r3, #80]
3270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2647              		.loc 1 3270 0
 2648 000a C36E     		ldr	r3, [r0, #108]
 2649 000c 13B1     		cbz	r3, .L193
3272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2650              		.loc 1 3272 0
 2651 000e 1B6D     		ldr	r3, [r3, #80]
 2652 0010 03B1     		cbz	r3, .L193
 2653              	.LVL209:
 2654              	.L192:
3301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2655              		.loc 1 3301 0
 2656 0012 08BD     		pop	{r3, pc}
 2657              	.LVL210:
 2658              	.L193:
3279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2659              		.loc 1 3279 0
 2660 0014 0023     		movs	r3, #0
 2661 0016 A0F85230 		strh	r3, [r0, #82]	@ movhi
3280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2662              		.loc 1 3280 0
 2663 001a A0F85A30 		strh	r3, [r0, #90]	@ movhi
3283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2664              		.loc 1 3283 0
 2665 001e C367     		str	r3, [r0, #124]
3286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2666              		.loc 1 3286 0
 2667 0020 0368     		ldr	r3, [r0]
 2668 0022 0F22     		movs	r2, #15
 2669 0024 1A62     		str	r2, [r3, #32]
3290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2670              		.loc 1 3290 0
 2671 0026 2023     		movs	r3, #32
 2672 0028 4367     		str	r3, [r0, #116]
3291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2673              		.loc 1 3291 0
 2674 002a 8367     		str	r3, [r0, #120]
3299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccRCsb68.s 			page 118


 2675              		.loc 1 3299 0
 2676 002c FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2677              	.LVL211:
 2678 0030 EFE7     		b	.L192
 2679              		.cfi_endproc
 2680              	.LFE195:
 2682              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 2683              		.align	1
 2684              		.weak	HAL_UART_AbortTransmitCpltCallback
 2685              		.syntax unified
 2686              		.thumb
 2687              		.thumb_func
 2688              		.fpu fpv5-sp-d16
 2690              	HAL_UART_AbortTransmitCpltCallback:
 2691              	.LFB170:
2385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2692              		.loc 1 2385 0
 2693              		.cfi_startproc
 2694              		@ args = 0, pretend = 0, frame = 0
 2695              		@ frame_needed = 0, uses_anonymous_args = 0
 2696              		@ link register save eliminated.
 2697              	.LVL212:
2392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2698              		.loc 1 2392 0
 2699 0000 7047     		bx	lr
 2700              		.cfi_endproc
 2701              	.LFE170:
 2703              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 2704              		.align	1
 2705              		.global	HAL_UART_AbortTransmit_IT
 2706              		.syntax unified
 2707              		.thumb
 2708              		.thumb_func
 2709              		.fpu fpv5-sp-d16
 2711              	HAL_UART_AbortTransmit_IT:
 2712              	.LFB161:
1921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable interrupts */
 2713              		.loc 1 1921 0
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 0
 2716              		@ frame_needed = 0, uses_anonymous_args = 0
 2717              	.LVL213:
 2718 0000 10B5     		push	{r4, lr}
 2719              	.LCFI24:
 2720              		.cfi_def_cfa_offset 8
 2721              		.cfi_offset 4, -8
 2722              		.cfi_offset 14, -4
 2723 0002 0446     		mov	r4, r0
1923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2724              		.loc 1 1923 0
 2725 0004 0268     		ldr	r2, [r0]
 2726 0006 1368     		ldr	r3, [r2]
 2727 0008 23F0C003 		bic	r3, r3, #192
 2728 000c 1360     		str	r3, [r2]
1926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 2729              		.loc 1 1926 0
 2730 000e 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccRCsb68.s 			page 119


 2731 0010 9A68     		ldr	r2, [r3, #8]
 2732 0012 12F0800F 		tst	r2, #128
 2733 0016 19D0     		beq	.L198
1928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2734              		.loc 1 1928 0
 2735 0018 9A68     		ldr	r2, [r3, #8]
 2736 001a 22F08002 		bic	r2, r2, #128
 2737 001e 9A60     		str	r2, [r3, #8]
1931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2738              		.loc 1 1931 0
 2739 0020 836E     		ldr	r3, [r0, #104]
 2740 0022 53B1     		cbz	r3, .L199
1935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2741              		.loc 1 1935 0
 2742 0024 0E4A     		ldr	r2, .L202
 2743 0026 1A65     		str	r2, [r3, #80]
1938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2744              		.loc 1 1938 0
 2745 0028 806E     		ldr	r0, [r0, #104]
 2746              	.LVL214:
 2747 002a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2748              	.LVL215:
 2749 002e 10B1     		cbz	r0, .L200
1941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2750              		.loc 1 1941 0
 2751 0030 A06E     		ldr	r0, [r4, #104]
 2752 0032 036D     		ldr	r3, [r0, #80]
 2753 0034 9847     		blx	r3
 2754              	.LVL216:
 2755              	.L200:
1988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2756              		.loc 1 1988 0
 2757 0036 0020     		movs	r0, #0
 2758 0038 10BD     		pop	{r4, pc}
 2759              	.LVL217:
 2760              	.L199:
1947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2761              		.loc 1 1947 0
 2762 003a 0023     		movs	r3, #0
 2763 003c A0F85230 		strh	r3, [r0, #82]	@ movhi
1950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2764              		.loc 1 1950 0
 2765 0040 4366     		str	r3, [r0, #100]
1953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2766              		.loc 1 1953 0
 2767 0042 2023     		movs	r3, #32
 2768 0044 4367     		str	r3, [r0, #116]
1961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2769              		.loc 1 1961 0
 2770 0046 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2771              	.LVL218:
 2772 004a F4E7     		b	.L200
 2773              	.LVL219:
 2774              	.L198:
1968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2775              		.loc 1 1968 0
 2776 004c 0023     		movs	r3, #0
ARM GAS  /tmp/ccRCsb68.s 			page 120


 2777 004e A0F85230 		strh	r3, [r0, #82]	@ movhi
1971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2778              		.loc 1 1971 0
 2779 0052 4366     		str	r3, [r0, #100]
1975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2780              		.loc 1 1975 0
 2781 0054 2023     		movs	r3, #32
 2782 0056 4367     		str	r3, [r0, #116]
1983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2783              		.loc 1 1983 0
 2784 0058 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2785              	.LVL220:
 2786 005c EBE7     		b	.L200
 2787              	.L203:
 2788 005e 00BF     		.align	2
 2789              	.L202:
 2790 0060 00000000 		.word	UART_DMATxOnlyAbortCallback
 2791              		.cfi_endproc
 2792              	.LFE161:
 2794              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 2795              		.align	1
 2796              		.syntax unified
 2797              		.thumb
 2798              		.thumb_func
 2799              		.fpu fpv5-sp-d16
 2801              	UART_DMATxOnlyAbortCallback:
 2802              	.LFB197:
3364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2803              		.loc 1 3364 0
 2804              		.cfi_startproc
 2805              		@ args = 0, pretend = 0, frame = 0
 2806              		@ frame_needed = 0, uses_anonymous_args = 0
 2807              	.LVL221:
 2808 0000 08B5     		push	{r3, lr}
 2809              	.LCFI25:
 2810              		.cfi_def_cfa_offset 8
 2811              		.cfi_offset 3, -8
 2812              		.cfi_offset 14, -4
3365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2813              		.loc 1 3365 0
 2814 0002 806B     		ldr	r0, [r0, #56]
 2815              	.LVL222:
3367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2816              		.loc 1 3367 0
 2817 0004 0023     		movs	r3, #0
 2818 0006 A0F85230 		strh	r3, [r0, #82]	@ movhi
3371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2819              		.loc 1 3371 0
 2820 000a 2023     		movs	r3, #32
 2821 000c 4367     		str	r3, [r0, #116]
3379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2822              		.loc 1 3379 0
 2823 000e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2824              	.LVL223:
3381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2825              		.loc 1 3381 0
 2826 0012 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccRCsb68.s 			page 121


 2827              		.cfi_endproc
 2828              	.LFE197:
 2830              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 2831              		.align	1
 2832              		.weak	HAL_UART_AbortReceiveCpltCallback
 2833              		.syntax unified
 2834              		.thumb
 2835              		.thumb_func
 2836              		.fpu fpv5-sp-d16
 2838              	HAL_UART_AbortReceiveCpltCallback:
 2839              	.LFB171:
2400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2840              		.loc 1 2400 0
 2841              		.cfi_startproc
 2842              		@ args = 0, pretend = 0, frame = 0
 2843              		@ frame_needed = 0, uses_anonymous_args = 0
 2844              		@ link register save eliminated.
 2845              	.LVL224:
2407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2846              		.loc 1 2407 0
 2847 0000 7047     		bx	lr
 2848              		.cfi_endproc
 2849              	.LFE171:
 2851              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 2852              		.align	1
 2853              		.global	HAL_UART_AbortReceive_IT
 2854              		.syntax unified
 2855              		.thumb
 2856              		.thumb_func
 2857              		.fpu fpv5-sp-d16
 2859              	HAL_UART_AbortReceive_IT:
 2860              	.LFB162:
2005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2861              		.loc 1 2005 0
 2862              		.cfi_startproc
 2863              		@ args = 0, pretend = 0, frame = 0
 2864              		@ frame_needed = 0, uses_anonymous_args = 0
 2865              	.LVL225:
 2866 0000 10B5     		push	{r4, lr}
 2867              	.LCFI26:
 2868              		.cfi_def_cfa_offset 8
 2869              		.cfi_offset 4, -8
 2870              		.cfi_offset 14, -4
 2871 0002 0446     		mov	r4, r0
2007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2872              		.loc 1 2007 0
 2873 0004 0268     		ldr	r2, [r0]
 2874 0006 1368     		ldr	r3, [r2]
 2875 0008 23F49073 		bic	r3, r3, #288
 2876 000c 1360     		str	r3, [r2]
2008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2877              		.loc 1 2008 0
 2878 000e 0268     		ldr	r2, [r0]
 2879 0010 9368     		ldr	r3, [r2, #8]
 2880 0012 23F00103 		bic	r3, r3, #1
 2881 0016 9360     		str	r3, [r2, #8]
2011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
ARM GAS  /tmp/ccRCsb68.s 			page 122


 2882              		.loc 1 2011 0
 2883 0018 0368     		ldr	r3, [r0]
 2884 001a 9A68     		ldr	r2, [r3, #8]
 2885 001c 12F0400F 		tst	r2, #64
 2886 0020 21D0     		beq	.L208
2013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2887              		.loc 1 2013 0
 2888 0022 9A68     		ldr	r2, [r3, #8]
 2889 0024 22F04002 		bic	r2, r2, #64
 2890 0028 9A60     		str	r2, [r3, #8]
2016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 2891              		.loc 1 2016 0
 2892 002a C36E     		ldr	r3, [r0, #108]
 2893 002c 53B1     		cbz	r3, .L209
2020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2894              		.loc 1 2020 0
 2895 002e 134A     		ldr	r2, .L212
 2896 0030 1A65     		str	r2, [r3, #80]
2023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 2897              		.loc 1 2023 0
 2898 0032 C06E     		ldr	r0, [r0, #108]
 2899              	.LVL226:
 2900 0034 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2901              	.LVL227:
 2902 0038 10B1     		cbz	r0, .L210
2026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 2903              		.loc 1 2026 0
 2904 003a E06E     		ldr	r0, [r4, #108]
 2905 003c 036D     		ldr	r3, [r0, #80]
 2906 003e 9847     		blx	r3
 2907              	.LVL228:
 2908              	.L210:
2081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2909              		.loc 1 2081 0
 2910 0040 0020     		movs	r0, #0
 2911 0042 10BD     		pop	{r4, pc}
 2912              	.LVL229:
 2913              	.L209:
2032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2914              		.loc 1 2032 0
 2915 0044 0023     		movs	r3, #0
 2916 0046 A0F85A30 		strh	r3, [r0, #90]	@ movhi
2035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2917              		.loc 1 2035 0
 2918 004a 4365     		str	r3, [r0, #84]
2038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2919              		.loc 1 2038 0
 2920 004c 0368     		ldr	r3, [r0]
 2921 004e 0F22     		movs	r2, #15
 2922 0050 1A62     		str	r2, [r3, #32]
2041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2923              		.loc 1 2041 0
 2924 0052 0268     		ldr	r2, [r0]
 2925 0054 9369     		ldr	r3, [r2, #24]
 2926 0056 43F00803 		orr	r3, r3, #8
 2927 005a 9361     		str	r3, [r2, #24]
2044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 123


 2928              		.loc 1 2044 0
 2929 005c 2023     		movs	r3, #32
 2930 005e 8367     		str	r3, [r0, #120]
2052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2931              		.loc 1 2052 0
 2932 0060 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2933              	.LVL230:
 2934 0064 ECE7     		b	.L210
 2935              	.LVL231:
 2936              	.L208:
2059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2937              		.loc 1 2059 0
 2938 0066 0022     		movs	r2, #0
 2939 0068 A0F85A20 		strh	r2, [r0, #90]	@ movhi
2062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2940              		.loc 1 2062 0
 2941 006c 4265     		str	r2, [r0, #84]
2065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2942              		.loc 1 2065 0
 2943 006e 0F22     		movs	r2, #15
 2944 0070 1A62     		str	r2, [r3, #32]
2068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2945              		.loc 1 2068 0
 2946 0072 2023     		movs	r3, #32
 2947 0074 8367     		str	r3, [r0, #120]
2076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2948              		.loc 1 2076 0
 2949 0076 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2950              	.LVL232:
 2951 007a E1E7     		b	.L210
 2952              	.L213:
 2953              		.align	2
 2954              	.L212:
 2955 007c 00000000 		.word	UART_DMARxOnlyAbortCallback
 2956              		.cfi_endproc
 2957              	.LFE162:
 2959              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 2960              		.align	1
 2961              		.syntax unified
 2962              		.thumb
 2963              		.thumb_func
 2964              		.fpu fpv5-sp-d16
 2966              	UART_DMARxOnlyAbortCallback:
 2967              	.LFB198:
3392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2968              		.loc 1 3392 0
 2969              		.cfi_startproc
 2970              		@ args = 0, pretend = 0, frame = 0
 2971              		@ frame_needed = 0, uses_anonymous_args = 0
 2972              	.LVL233:
 2973 0000 08B5     		push	{r3, lr}
 2974              	.LCFI27:
 2975              		.cfi_def_cfa_offset 8
 2976              		.cfi_offset 3, -8
 2977              		.cfi_offset 14, -4
3393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2978              		.loc 1 3393 0
ARM GAS  /tmp/ccRCsb68.s 			page 124


 2979 0002 806B     		ldr	r0, [r0, #56]
 2980              	.LVL234:
3395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2981              		.loc 1 3395 0
 2982 0004 0023     		movs	r3, #0
 2983 0006 A0F85A30 		strh	r3, [r0, #90]	@ movhi
3398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2984              		.loc 1 3398 0
 2985 000a 0368     		ldr	r3, [r0]
 2986 000c 0F22     		movs	r2, #15
 2987 000e 1A62     		str	r2, [r3, #32]
3401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2988              		.loc 1 3401 0
 2989 0010 0268     		ldr	r2, [r0]
 2990 0012 9369     		ldr	r3, [r2, #24]
 2991 0014 43F00803 		orr	r3, r3, #8
 2992 0018 9361     		str	r3, [r2, #24]
3404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2993              		.loc 1 3404 0
 2994 001a 2023     		movs	r3, #32
 2995 001c 8367     		str	r3, [r0, #120]
3412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2996              		.loc 1 3412 0
 2997 001e FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2998              	.LVL235:
3414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 2999              		.loc 1 3414 0
 3000 0022 08BD     		pop	{r3, pc}
 3001              		.cfi_endproc
 3002              	.LFE198:
 3004              		.section	.text.HAL_UART_ReceiverTimeout_Config,"ax",%progbits
 3005              		.align	1
 3006              		.global	HAL_UART_ReceiverTimeout_Config
 3007              		.syntax unified
 3008              		.thumb
 3009              		.thumb_func
 3010              		.fpu fpv5-sp-d16
 3012              	HAL_UART_ReceiverTimeout_Config:
 3013              	.LFB172:
2464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
 3014              		.loc 1 2464 0
 3015              		.cfi_startproc
 3016              		@ args = 0, pretend = 0, frame = 0
 3017              		@ frame_needed = 0, uses_anonymous_args = 0
 3018              		@ link register save eliminated.
 3019              	.LVL236:
2466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3020              		.loc 1 2466 0
 3021 0000 0268     		ldr	r2, [r0]
 3022 0002 5369     		ldr	r3, [r2, #20]
 3023 0004 03F07F43 		and	r3, r3, #-16777216
 3024 0008 1943     		orrs	r1, r1, r3
 3025              	.LVL237:
 3026 000a 5161     		str	r1, [r2, #20]
2467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3027              		.loc 1 2467 0
 3028 000c 7047     		bx	lr
ARM GAS  /tmp/ccRCsb68.s 			page 125


 3029              		.cfi_endproc
 3030              	.LFE172:
 3032              		.section	.text.HAL_UART_EnableReceiverTimeout,"ax",%progbits
 3033              		.align	1
 3034              		.global	HAL_UART_EnableReceiverTimeout
 3035              		.syntax unified
 3036              		.thumb
 3037              		.thumb_func
 3038              		.fpu fpv5-sp-d16
 3040              	HAL_UART_EnableReceiverTimeout:
 3041              	.LFB173:
2476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 3042              		.loc 1 2476 0
 3043              		.cfi_startproc
 3044              		@ args = 0, pretend = 0, frame = 0
 3045              		@ frame_needed = 0, uses_anonymous_args = 0
 3046              		@ link register save eliminated.
 3047              	.LVL238:
2477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3048              		.loc 1 2477 0
 3049 0000 436F     		ldr	r3, [r0, #116]
 3050 0002 202B     		cmp	r3, #32
 3051 0004 14D1     		bne	.L219
2480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3052              		.loc 1 2480 0
 3053 0006 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 3054 000a 012B     		cmp	r3, #1
 3055 000c 12D0     		beq	.L220
2480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3056              		.loc 1 2480 0 is_stmt 0 discriminator 2
 3057 000e 0123     		movs	r3, #1
 3058 0010 80F87030 		strb	r3, [r0, #112]
2482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3059              		.loc 1 2482 0 is_stmt 1 discriminator 2
 3060 0014 2423     		movs	r3, #36
 3061 0016 4367     		str	r3, [r0, #116]
2485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3062              		.loc 1 2485 0 discriminator 2
 3063 0018 0268     		ldr	r2, [r0]
 3064 001a 5368     		ldr	r3, [r2, #4]
 3065 001c 43F40003 		orr	r3, r3, #8388608
 3066 0020 5360     		str	r3, [r2, #4]
2487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3067              		.loc 1 2487 0 discriminator 2
 3068 0022 2023     		movs	r3, #32
 3069 0024 4367     		str	r3, [r0, #116]
2490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3070              		.loc 1 2490 0 discriminator 2
 3071 0026 0023     		movs	r3, #0
 3072 0028 80F87030 		strb	r3, [r0, #112]
2492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3073              		.loc 1 2492 0 discriminator 2
 3074 002c 1846     		mov	r0, r3
 3075              	.LVL239:
 3076 002e 7047     		bx	lr
 3077              	.LVL240:
 3078              	.L219:
ARM GAS  /tmp/ccRCsb68.s 			page 126


2496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3079              		.loc 1 2496 0
 3080 0030 0220     		movs	r0, #2
 3081              	.LVL241:
 3082 0032 7047     		bx	lr
 3083              	.LVL242:
 3084              	.L220:
2480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3085              		.loc 1 2480 0
 3086 0034 0220     		movs	r0, #2
 3087              	.LVL243:
2498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3088              		.loc 1 2498 0
 3089 0036 7047     		bx	lr
 3090              		.cfi_endproc
 3091              	.LFE173:
 3093              		.section	.text.HAL_UART_DisableReceiverTimeout,"ax",%progbits
 3094              		.align	1
 3095              		.global	HAL_UART_DisableReceiverTimeout
 3096              		.syntax unified
 3097              		.thumb
 3098              		.thumb_func
 3099              		.fpu fpv5-sp-d16
 3101              	HAL_UART_DisableReceiverTimeout:
 3102              	.LFB174:
2507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 3103              		.loc 1 2507 0
 3104              		.cfi_startproc
 3105              		@ args = 0, pretend = 0, frame = 0
 3106              		@ frame_needed = 0, uses_anonymous_args = 0
 3107              		@ link register save eliminated.
 3108              	.LVL244:
2508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3109              		.loc 1 2508 0
 3110 0000 436F     		ldr	r3, [r0, #116]
 3111 0002 202B     		cmp	r3, #32
 3112 0004 14D1     		bne	.L223
2511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3113              		.loc 1 2511 0
 3114 0006 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 3115 000a 012B     		cmp	r3, #1
 3116 000c 12D0     		beq	.L224
2511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3117              		.loc 1 2511 0 is_stmt 0 discriminator 2
 3118 000e 0123     		movs	r3, #1
 3119 0010 80F87030 		strb	r3, [r0, #112]
2513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3120              		.loc 1 2513 0 is_stmt 1 discriminator 2
 3121 0014 2423     		movs	r3, #36
 3122 0016 4367     		str	r3, [r0, #116]
2516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3123              		.loc 1 2516 0 discriminator 2
 3124 0018 0268     		ldr	r2, [r0]
 3125 001a 5368     		ldr	r3, [r2, #4]
 3126 001c 23F40003 		bic	r3, r3, #8388608
 3127 0020 5360     		str	r3, [r2, #4]
2518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 127


 3128              		.loc 1 2518 0 discriminator 2
 3129 0022 2023     		movs	r3, #32
 3130 0024 4367     		str	r3, [r0, #116]
2521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3131              		.loc 1 2521 0 discriminator 2
 3132 0026 0023     		movs	r3, #0
 3133 0028 80F87030 		strb	r3, [r0, #112]
2523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3134              		.loc 1 2523 0 discriminator 2
 3135 002c 1846     		mov	r0, r3
 3136              	.LVL245:
 3137 002e 7047     		bx	lr
 3138              	.LVL246:
 3139              	.L223:
2527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 3140              		.loc 1 2527 0
 3141 0030 0220     		movs	r0, #2
 3142              	.LVL247:
 3143 0032 7047     		bx	lr
 3144              	.LVL248:
 3145              	.L224:
2511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3146              		.loc 1 2511 0
 3147 0034 0220     		movs	r0, #2
 3148              	.LVL249:
2529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3149              		.loc 1 2529 0
 3150 0036 7047     		bx	lr
 3151              		.cfi_endproc
 3152              	.LFE174:
 3154              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 3155              		.align	1
 3156              		.global	HAL_MultiProcessor_EnterMuteMode
 3157              		.syntax unified
 3158              		.thumb
 3159              		.thumb_func
 3160              		.fpu fpv5-sp-d16
 3162              	HAL_MultiProcessor_EnterMuteMode:
 3163              	.LFB177:
2578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 3164              		.loc 1 2578 0
 3165              		.cfi_startproc
 3166              		@ args = 0, pretend = 0, frame = 0
 3167              		@ frame_needed = 0, uses_anonymous_args = 0
 3168              		@ link register save eliminated.
 3169              	.LVL250:
2579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3170              		.loc 1 2579 0
 3171 0000 0268     		ldr	r2, [r0]
 3172 0002 9369     		ldr	r3, [r2, #24]
 3173 0004 43F00403 		orr	r3, r3, #4
 3174 0008 9361     		str	r3, [r2, #24]
2580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3175              		.loc 1 2580 0
 3176 000a 7047     		bx	lr
 3177              		.cfi_endproc
 3178              	.LFE177:
ARM GAS  /tmp/ccRCsb68.s 			page 128


 3180              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 3181              		.align	1
 3182              		.global	HAL_HalfDuplex_EnableTransmitter
 3183              		.syntax unified
 3184              		.thumb
 3185              		.thumb_func
 3186              		.fpu fpv5-sp-d16
 3188              	HAL_HalfDuplex_EnableTransmitter:
 3189              	.LFB178:
2588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 3190              		.loc 1 2588 0
 3191              		.cfi_startproc
 3192              		@ args = 0, pretend = 0, frame = 0
 3193              		@ frame_needed = 0, uses_anonymous_args = 0
 3194              		@ link register save eliminated.
 3195              	.LVL251:
2589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3196              		.loc 1 2589 0
 3197 0000 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 3198 0004 012B     		cmp	r3, #1
 3199 0006 15D0     		beq	.L228
2589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3200              		.loc 1 2589 0 is_stmt 0 discriminator 2
 3201 0008 0123     		movs	r3, #1
 3202 000a 80F87030 		strb	r3, [r0, #112]
2590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3203              		.loc 1 2590 0 is_stmt 1 discriminator 2
 3204 000e 2423     		movs	r3, #36
 3205 0010 4367     		str	r3, [r0, #116]
2593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3206              		.loc 1 2593 0 discriminator 2
 3207 0012 0268     		ldr	r2, [r0]
 3208 0014 1368     		ldr	r3, [r2]
 3209 0016 23F00C03 		bic	r3, r3, #12
 3210 001a 1360     		str	r3, [r2]
2596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3211              		.loc 1 2596 0 discriminator 2
 3212 001c 0268     		ldr	r2, [r0]
 3213 001e 1368     		ldr	r3, [r2]
 3214 0020 43F00803 		orr	r3, r3, #8
 3215 0024 1360     		str	r3, [r2]
2598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3216              		.loc 1 2598 0 discriminator 2
 3217 0026 2023     		movs	r3, #32
 3218 0028 4367     		str	r3, [r0, #116]
2600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3219              		.loc 1 2600 0 discriminator 2
 3220 002a 0023     		movs	r3, #0
 3221 002c 80F87030 		strb	r3, [r0, #112]
2602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3222              		.loc 1 2602 0 discriminator 2
 3223 0030 1846     		mov	r0, r3
 3224              	.LVL252:
 3225 0032 7047     		bx	lr
 3226              	.LVL253:
 3227              	.L228:
2589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
ARM GAS  /tmp/ccRCsb68.s 			page 129


 3228              		.loc 1 2589 0
 3229 0034 0220     		movs	r0, #2
 3230              	.LVL254:
2603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3231              		.loc 1 2603 0
 3232 0036 7047     		bx	lr
 3233              		.cfi_endproc
 3234              	.LFE178:
 3236              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 3237              		.align	1
 3238              		.global	HAL_HalfDuplex_EnableReceiver
 3239              		.syntax unified
 3240              		.thumb
 3241              		.thumb_func
 3242              		.fpu fpv5-sp-d16
 3244              	HAL_HalfDuplex_EnableReceiver:
 3245              	.LFB179:
2611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 3246              		.loc 1 2611 0
 3247              		.cfi_startproc
 3248              		@ args = 0, pretend = 0, frame = 0
 3249              		@ frame_needed = 0, uses_anonymous_args = 0
 3250              		@ link register save eliminated.
 3251              	.LVL255:
2612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3252              		.loc 1 2612 0
 3253 0000 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 3254 0004 012B     		cmp	r3, #1
 3255 0006 15D0     		beq	.L231
2612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3256              		.loc 1 2612 0 is_stmt 0 discriminator 2
 3257 0008 0123     		movs	r3, #1
 3258 000a 80F87030 		strb	r3, [r0, #112]
2613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3259              		.loc 1 2613 0 is_stmt 1 discriminator 2
 3260 000e 2423     		movs	r3, #36
 3261 0010 4367     		str	r3, [r0, #116]
2616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3262              		.loc 1 2616 0 discriminator 2
 3263 0012 0268     		ldr	r2, [r0]
 3264 0014 1368     		ldr	r3, [r2]
 3265 0016 23F00C03 		bic	r3, r3, #12
 3266 001a 1360     		str	r3, [r2]
2619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3267              		.loc 1 2619 0 discriminator 2
 3268 001c 0268     		ldr	r2, [r0]
 3269 001e 1368     		ldr	r3, [r2]
 3270 0020 43F00403 		orr	r3, r3, #4
 3271 0024 1360     		str	r3, [r2]
2621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3272              		.loc 1 2621 0 discriminator 2
 3273 0026 2023     		movs	r3, #32
 3274 0028 4367     		str	r3, [r0, #116]
2623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3275              		.loc 1 2623 0 discriminator 2
 3276 002a 0023     		movs	r3, #0
 3277 002c 80F87030 		strb	r3, [r0, #112]
ARM GAS  /tmp/ccRCsb68.s 			page 130


2625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3278              		.loc 1 2625 0 discriminator 2
 3279 0030 1846     		mov	r0, r3
 3280              	.LVL256:
 3281 0032 7047     		bx	lr
 3282              	.LVL257:
 3283              	.L231:
2612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3284              		.loc 1 2612 0
 3285 0034 0220     		movs	r0, #2
 3286              	.LVL258:
2626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3287              		.loc 1 2626 0
 3288 0036 7047     		bx	lr
 3289              		.cfi_endproc
 3290              	.LFE179:
 3292              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 3293              		.align	1
 3294              		.global	HAL_LIN_SendBreak
 3295              		.syntax unified
 3296              		.thumb
 3297              		.thumb_func
 3298              		.fpu fpv5-sp-d16
 3300              	HAL_LIN_SendBreak:
 3301              	.LFB180:
2635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the parameters */
 3302              		.loc 1 2635 0
 3303              		.cfi_startproc
 3304              		@ args = 0, pretend = 0, frame = 0
 3305              		@ frame_needed = 0, uses_anonymous_args = 0
 3306              		@ link register save eliminated.
 3307              	.LVL259:
2639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3308              		.loc 1 2639 0
 3309 0000 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 3310 0004 012B     		cmp	r3, #1
 3311 0006 10D0     		beq	.L234
2639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3312              		.loc 1 2639 0 is_stmt 0 discriminator 2
 3313 0008 0123     		movs	r3, #1
 3314 000a 80F87030 		strb	r3, [r0, #112]
2641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3315              		.loc 1 2641 0 is_stmt 1 discriminator 2
 3316 000e 2423     		movs	r3, #36
 3317 0010 4367     		str	r3, [r0, #116]
2644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3318              		.loc 1 2644 0 discriminator 2
 3319 0012 0268     		ldr	r2, [r0]
 3320 0014 9369     		ldr	r3, [r2, #24]
 3321 0016 43F00203 		orr	r3, r3, #2
 3322 001a 9361     		str	r3, [r2, #24]
2646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3323              		.loc 1 2646 0 discriminator 2
 3324 001c 2023     		movs	r3, #32
 3325 001e 4367     		str	r3, [r0, #116]
2648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3326              		.loc 1 2648 0 discriminator 2
ARM GAS  /tmp/ccRCsb68.s 			page 131


 3327 0020 0023     		movs	r3, #0
 3328 0022 80F87030 		strb	r3, [r0, #112]
2650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3329              		.loc 1 2650 0 discriminator 2
 3330 0026 1846     		mov	r0, r3
 3331              	.LVL260:
 3332 0028 7047     		bx	lr
 3333              	.LVL261:
 3334              	.L234:
2639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3335              		.loc 1 2639 0
 3336 002a 0220     		movs	r0, #2
 3337              	.LVL262:
2651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3338              		.loc 1 2651 0
 3339 002c 7047     		bx	lr
 3340              		.cfi_endproc
 3341              	.LFE180:
 3343              		.section	.text.HAL_UART_GetState,"ax",%progbits
 3344              		.align	1
 3345              		.global	HAL_UART_GetState
 3346              		.syntax unified
 3347              		.thumb
 3348              		.thumb_func
 3349              		.fpu fpv5-sp-d16
 3351              	HAL_UART_GetState:
 3352              	.LFB181:
2680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t temp1;
 3353              		.loc 1 2680 0
 3354              		.cfi_startproc
 3355              		@ args = 0, pretend = 0, frame = 0
 3356              		@ frame_needed = 0, uses_anonymous_args = 0
 3357              		@ link register save eliminated.
 3358              	.LVL263:
2683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   temp2 = huart->RxState;
 3359              		.loc 1 2683 0
 3360 0000 426F     		ldr	r2, [r0, #116]
 3361              	.LVL264:
2684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3362              		.loc 1 2684 0
 3363 0002 806F     		ldr	r0, [r0, #120]
 3364              	.LVL265:
2687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3365              		.loc 1 2687 0
 3366 0004 1043     		orrs	r0, r0, r2
 3367              	.LVL266:
 3368 0006 7047     		bx	lr
 3369              		.cfi_endproc
 3370              	.LFE181:
 3372              		.section	.text.HAL_UART_GetError,"ax",%progbits
 3373              		.align	1
 3374              		.global	HAL_UART_GetError
 3375              		.syntax unified
 3376              		.thumb
 3377              		.thumb_func
 3378              		.fpu fpv5-sp-d16
 3380              	HAL_UART_GetError:
ARM GAS  /tmp/ccRCsb68.s 			page 132


 3381              	.LFB182:
2696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   return huart->ErrorCode;
 3382              		.loc 1 2696 0
 3383              		.cfi_startproc
 3384              		@ args = 0, pretend = 0, frame = 0
 3385              		@ frame_needed = 0, uses_anonymous_args = 0
 3386              		@ link register save eliminated.
 3387              	.LVL267:
2697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 3388              		.loc 1 2697 0
 3389 0000 C06F     		ldr	r0, [r0, #124]
 3390              	.LVL268:
2698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** /**
 3391              		.loc 1 2698 0
 3392 0002 7047     		bx	lr
 3393              		.cfi_endproc
 3394              	.LFE182:
 3396              		.section	.text.UART_SetConfig,"ax",%progbits
 3397              		.align	1
 3398              		.global	UART_SetConfig
 3399              		.syntax unified
 3400              		.thumb
 3401              		.thumb_func
 3402              		.fpu fpv5-sp-d16
 3404              	UART_SetConfig:
 3405              	.LFB183:
2741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tmpreg;
 3406              		.loc 1 2741 0
 3407              		.cfi_startproc
 3408              		@ args = 0, pretend = 0, frame = 0
 3409              		@ frame_needed = 0, uses_anonymous_args = 0
 3410              	.LVL269:
 3411 0000 10B5     		push	{r4, lr}
 3412              	.LCFI28:
 3413              		.cfi_def_cfa_offset 8
 3414              		.cfi_offset 4, -8
 3415              		.cfi_offset 14, -4
 3416 0002 0446     		mov	r4, r0
 3417              	.LVL270:
2767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 3418              		.loc 1 2767 0
 3419 0004 8368     		ldr	r3, [r0, #8]
 3420 0006 0269     		ldr	r2, [r0, #16]
 3421 0008 1343     		orrs	r3, r3, r2
 3422 000a 4269     		ldr	r2, [r0, #20]
 3423 000c 1343     		orrs	r3, r3, r2
 3424 000e C269     		ldr	r2, [r0, #28]
 3425 0010 1343     		orrs	r3, r3, r2
 3426              	.LVL271:
2768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3427              		.loc 1 2768 0
 3428 0012 0168     		ldr	r1, [r0]
 3429 0014 0868     		ldr	r0, [r1]
 3430              	.LVL272:
 3431 0016 994A     		ldr	r2, .L331
 3432 0018 0240     		ands	r2, r2, r0
 3433 001a 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccRCsb68.s 			page 133


 3434              	.LVL273:
 3435 001c 0B60     		str	r3, [r1]
 3436              	.LVL274:
2773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3437              		.loc 1 2773 0
 3438 001e 2268     		ldr	r2, [r4]
 3439 0020 5368     		ldr	r3, [r2, #4]
 3440 0022 23F44053 		bic	r3, r3, #12288
 3441 0026 E168     		ldr	r1, [r4, #12]
 3442 0028 0B43     		orrs	r3, r3, r1
 3443 002a 5360     		str	r3, [r2, #4]
2781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3444              		.loc 1 2781 0
 3445 002c A269     		ldr	r2, [r4, #24]
 3446              	.LVL275:
2783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 3447              		.loc 1 2783 0
 3448 002e 236A     		ldr	r3, [r4, #32]
 3449 0030 1A43     		orrs	r2, r2, r3
 3450              	.LVL276:
2784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3451              		.loc 1 2784 0
 3452 0032 2168     		ldr	r1, [r4]
 3453 0034 8B68     		ldr	r3, [r1, #8]
 3454 0036 23F43063 		bic	r3, r3, #2816
 3455 003a 1343     		orrs	r3, r3, r2
 3456 003c 8B60     		str	r3, [r1, #8]
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3457              		.loc 1 2788 0
 3458 003e 2368     		ldr	r3, [r4]
 3459 0040 8F4A     		ldr	r2, .L331+4
 3460              	.LVL277:
 3461 0042 9342     		cmp	r3, r2
 3462 0044 18D0     		beq	.L316
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3463              		.loc 1 2788 0 is_stmt 0 discriminator 2
 3464 0046 8F4A     		ldr	r2, .L331+8
 3465 0048 9342     		cmp	r3, r2
 3466 004a 28D0     		beq	.L317
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3467              		.loc 1 2788 0 discriminator 14
 3468 004c 8E4A     		ldr	r2, .L331+12
 3469 004e 9342     		cmp	r3, r2
 3470 0050 3DD0     		beq	.L318
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3471              		.loc 1 2788 0 discriminator 26
 3472 0052 8E4A     		ldr	r2, .L331+16
 3473 0054 9342     		cmp	r3, r2
 3474 0056 50D0     		beq	.L319
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3475              		.loc 1 2788 0 discriminator 38
 3476 0058 8D4A     		ldr	r2, .L331+20
 3477 005a 9342     		cmp	r3, r2
 3478 005c 62D0     		beq	.L320
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3479              		.loc 1 2788 0 discriminator 50
 3480 005e 8D4A     		ldr	r2, .L331+24
ARM GAS  /tmp/ccRCsb68.s 			page 134


 3481 0060 9342     		cmp	r3, r2
 3482 0062 77D0     		beq	.L321
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3483              		.loc 1 2788 0 discriminator 62
 3484 0064 8C4A     		ldr	r2, .L331+28
 3485 0066 9342     		cmp	r3, r2
 3486 0068 00F08C80 		beq	.L322
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3487              		.loc 1 2788 0 discriminator 74
 3488 006c 8B4A     		ldr	r2, .L331+32
 3489 006e 9342     		cmp	r3, r2
 3490 0070 00F0A080 		beq	.L323
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3491              		.loc 1 2788 0
 3492 0074 1023     		movs	r3, #16
 3493 0076 B6E0     		b	.L243
 3494              	.L316:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3495              		.loc 1 2788 0 discriminator 1
 3496 0078 894B     		ldr	r3, .L331+36
 3497 007a D3F89030 		ldr	r3, [r3, #144]
 3498 007e 03F00303 		and	r3, r3, #3
 3499 0082 032B     		cmp	r3, #3
 3500 0084 09D8     		bhi	.L239
 3501 0086 DFE803F0 		tbb	[pc, r3]
 3502              	.L241:
 3503 008a 02       		.byte	(.L240-.L241)/2
 3504 008b 04       		.byte	(.L242-.L241)/2
 3505 008c AD       		.byte	(.L302-.L241)/2
 3506 008d 06       		.byte	(.L244-.L241)/2
 3507              		.p2align 1
 3508              	.L240:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3509              		.loc 1 2788 0
 3510 008e 0123     		movs	r3, #1
 3511 0090 A9E0     		b	.L243
 3512              	.L242:
 3513              	.LVL278:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3514              		.loc 1 2788 0 discriminator 5
 3515 0092 0423     		movs	r3, #4
 3516 0094 A7E0     		b	.L243
 3517              	.LVL279:
 3518              	.L244:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3519              		.loc 1 2788 0 discriminator 7
 3520 0096 0823     		movs	r3, #8
 3521 0098 A5E0     		b	.L243
 3522              	.LVL280:
 3523              	.L239:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3524              		.loc 1 2788 0 discriminator 3
 3525 009a 1023     		movs	r3, #16
 3526 009c A3E0     		b	.L243
 3527              	.LVL281:
 3528              	.L317:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 135


 3529              		.loc 1 2788 0 discriminator 13
 3530 009e 804B     		ldr	r3, .L331+36
 3531 00a0 D3F89030 		ldr	r3, [r3, #144]
 3532 00a4 03F00C03 		and	r3, r3, #12
 3533 00a8 0C2B     		cmp	r3, #12
 3534 00aa 0ED8     		bhi	.L246
 3535 00ac DFE803F0 		tbb	[pc, r3]
 3536              	.L248:
 3537 00b0 07       		.byte	(.L247-.L248)/2
 3538 00b1 0D       		.byte	(.L246-.L248)/2
 3539 00b2 0D       		.byte	(.L246-.L248)/2
 3540 00b3 0D       		.byte	(.L246-.L248)/2
 3541 00b4 09       		.byte	(.L249-.L248)/2
 3542 00b5 0D       		.byte	(.L246-.L248)/2
 3543 00b6 0D       		.byte	(.L246-.L248)/2
 3544 00b7 0D       		.byte	(.L246-.L248)/2
 3545 00b8 A9       		.byte	(.L303-.L248)/2
 3546 00b9 0D       		.byte	(.L246-.L248)/2
 3547 00ba 0D       		.byte	(.L246-.L248)/2
 3548 00bb 0D       		.byte	(.L246-.L248)/2
 3549 00bc 0B       		.byte	(.L250-.L248)/2
 3550 00bd 00       		.p2align 1
 3551              	.L247:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3552              		.loc 1 2788 0
 3553 00be 0023     		movs	r3, #0
 3554 00c0 91E0     		b	.L243
 3555              	.L249:
 3556              	.LVL282:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3557              		.loc 1 2788 0 discriminator 17
 3558 00c2 0423     		movs	r3, #4
 3559 00c4 8FE0     		b	.L243
 3560              	.LVL283:
 3561              	.L250:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3562              		.loc 1 2788 0 discriminator 19
 3563 00c6 0823     		movs	r3, #8
 3564 00c8 8DE0     		b	.L243
 3565              	.LVL284:
 3566              	.L246:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3567              		.loc 1 2788 0 discriminator 15
 3568 00ca 1023     		movs	r3, #16
 3569 00cc 8BE0     		b	.L243
 3570              	.LVL285:
 3571              	.L318:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3572              		.loc 1 2788 0 discriminator 25
 3573 00ce 744B     		ldr	r3, .L331+36
 3574 00d0 D3F89030 		ldr	r3, [r3, #144]
 3575 00d4 03F03003 		and	r3, r3, #48
 3576 00d8 102B     		cmp	r3, #16
 3577 00da 0AD0     		beq	.L253
 3578 00dc 06D9     		bls	.L324
 3579 00de 202B     		cmp	r3, #32
 3580 00e0 00F09180 		beq	.L304
ARM GAS  /tmp/ccRCsb68.s 			page 136


 3581 00e4 302B     		cmp	r3, #48
 3582 00e6 06D1     		bne	.L252
 3583              	.LVL286:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3584              		.loc 1 2788 0 discriminator 31
 3585 00e8 0823     		movs	r3, #8
 3586 00ea 7CE0     		b	.L243
 3587              	.LVL287:
 3588              	.L324:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3589              		.loc 1 2788 0 discriminator 25
 3590 00ec 1BB9     		cbnz	r3, .L252
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3591              		.loc 1 2788 0
 3592 00ee 0023     		movs	r3, #0
 3593 00f0 79E0     		b	.L243
 3594              	.L253:
 3595              	.LVL288:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3596              		.loc 1 2788 0 discriminator 29
 3597 00f2 0423     		movs	r3, #4
 3598 00f4 77E0     		b	.L243
 3599              	.LVL289:
 3600              	.L252:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3601              		.loc 1 2788 0 discriminator 27
 3602 00f6 1023     		movs	r3, #16
 3603 00f8 75E0     		b	.L243
 3604              	.LVL290:
 3605              	.L319:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3606              		.loc 1 2788 0 discriminator 37
 3607 00fa 694B     		ldr	r3, .L331+36
 3608 00fc D3F89030 		ldr	r3, [r3, #144]
 3609 0100 03F0C003 		and	r3, r3, #192
 3610 0104 402B     		cmp	r3, #64
 3611 0106 09D0     		beq	.L259
 3612 0108 05D9     		bls	.L325
 3613 010a 802B     		cmp	r3, #128
 3614 010c 7DD0     		beq	.L305
 3615 010e C02B     		cmp	r3, #192
 3616 0110 06D1     		bne	.L258
 3617              	.LVL291:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3618              		.loc 1 2788 0 discriminator 43
 3619 0112 0823     		movs	r3, #8
 3620 0114 67E0     		b	.L243
 3621              	.LVL292:
 3622              	.L325:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3623              		.loc 1 2788 0 discriminator 37
 3624 0116 1BB9     		cbnz	r3, .L258
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3625              		.loc 1 2788 0
 3626 0118 0023     		movs	r3, #0
 3627 011a 64E0     		b	.L243
 3628              	.L259:
ARM GAS  /tmp/ccRCsb68.s 			page 137


 3629              	.LVL293:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3630              		.loc 1 2788 0 discriminator 41
 3631 011c 0423     		movs	r3, #4
 3632 011e 62E0     		b	.L243
 3633              	.LVL294:
 3634              	.L258:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3635              		.loc 1 2788 0 discriminator 39
 3636 0120 1023     		movs	r3, #16
 3637 0122 60E0     		b	.L243
 3638              	.LVL295:
 3639              	.L320:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3640              		.loc 1 2788 0 discriminator 49
 3641 0124 5E4B     		ldr	r3, .L331+36
 3642 0126 D3F89030 		ldr	r3, [r3, #144]
 3643 012a 03F44073 		and	r3, r3, #768
 3644 012e B3F5807F 		cmp	r3, #256
 3645 0132 0BD0     		beq	.L265
 3646 0134 07D9     		bls	.L326
 3647 0136 B3F5007F 		cmp	r3, #512
 3648 013a 68D0     		beq	.L306
 3649 013c B3F5407F 		cmp	r3, #768
 3650 0140 06D1     		bne	.L264
 3651              	.LVL296:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3652              		.loc 1 2788 0 discriminator 55
 3653 0142 0823     		movs	r3, #8
 3654 0144 4FE0     		b	.L243
 3655              	.LVL297:
 3656              	.L326:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3657              		.loc 1 2788 0 discriminator 49
 3658 0146 1BB9     		cbnz	r3, .L264
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3659              		.loc 1 2788 0
 3660 0148 0023     		movs	r3, #0
 3661 014a 4CE0     		b	.L243
 3662              	.L265:
 3663              	.LVL298:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3664              		.loc 1 2788 0 discriminator 53
 3665 014c 0423     		movs	r3, #4
 3666 014e 4AE0     		b	.L243
 3667              	.LVL299:
 3668              	.L264:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3669              		.loc 1 2788 0 discriminator 51
 3670 0150 1023     		movs	r3, #16
 3671 0152 48E0     		b	.L243
 3672              	.LVL300:
 3673              	.L321:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3674              		.loc 1 2788 0 discriminator 61
 3675 0154 524B     		ldr	r3, .L331+36
 3676 0156 D3F89030 		ldr	r3, [r3, #144]
ARM GAS  /tmp/ccRCsb68.s 			page 138


 3677 015a 03F44063 		and	r3, r3, #3072
 3678 015e B3F5806F 		cmp	r3, #1024
 3679 0162 0BD0     		beq	.L271
 3680 0164 07D9     		bls	.L327
 3681 0166 B3F5006F 		cmp	r3, #2048
 3682 016a 52D0     		beq	.L307
 3683 016c B3F5406F 		cmp	r3, #3072
 3684 0170 06D1     		bne	.L270
 3685              	.LVL301:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3686              		.loc 1 2788 0 discriminator 67
 3687 0172 0823     		movs	r3, #8
 3688 0174 37E0     		b	.L243
 3689              	.LVL302:
 3690              	.L327:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3691              		.loc 1 2788 0 discriminator 61
 3692 0176 1BB9     		cbnz	r3, .L270
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3693              		.loc 1 2788 0
 3694 0178 0123     		movs	r3, #1
 3695 017a 34E0     		b	.L243
 3696              	.L271:
 3697              	.LVL303:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3698              		.loc 1 2788 0 discriminator 65
 3699 017c 0423     		movs	r3, #4
 3700 017e 32E0     		b	.L243
 3701              	.LVL304:
 3702              	.L270:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3703              		.loc 1 2788 0 discriminator 63
 3704 0180 1023     		movs	r3, #16
 3705 0182 30E0     		b	.L243
 3706              	.LVL305:
 3707              	.L322:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3708              		.loc 1 2788 0 discriminator 73
 3709 0184 464B     		ldr	r3, .L331+36
 3710 0186 D3F89030 		ldr	r3, [r3, #144]
 3711 018a 03F44053 		and	r3, r3, #12288
 3712 018e B3F5805F 		cmp	r3, #4096
 3713 0192 0BD0     		beq	.L277
 3714 0194 07D9     		bls	.L328
 3715 0196 B3F5005F 		cmp	r3, #8192
 3716 019a 3CD0     		beq	.L308
 3717 019c B3F5405F 		cmp	r3, #12288
 3718 01a0 06D1     		bne	.L276
 3719              	.LVL306:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3720              		.loc 1 2788 0 discriminator 79
 3721 01a2 0823     		movs	r3, #8
 3722 01a4 1FE0     		b	.L243
 3723              	.LVL307:
 3724              	.L328:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3725              		.loc 1 2788 0 discriminator 73
ARM GAS  /tmp/ccRCsb68.s 			page 139


 3726 01a6 1BB9     		cbnz	r3, .L276
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3727              		.loc 1 2788 0
 3728 01a8 0023     		movs	r3, #0
 3729 01aa 1CE0     		b	.L243
 3730              	.L277:
 3731              	.LVL308:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3732              		.loc 1 2788 0 discriminator 77
 3733 01ac 0423     		movs	r3, #4
 3734 01ae 1AE0     		b	.L243
 3735              	.LVL309:
 3736              	.L276:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3737              		.loc 1 2788 0 discriminator 75
 3738 01b0 1023     		movs	r3, #16
 3739 01b2 18E0     		b	.L243
 3740              	.LVL310:
 3741              	.L323:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3742              		.loc 1 2788 0 discriminator 85
 3743 01b4 3A4B     		ldr	r3, .L331+36
 3744 01b6 D3F89030 		ldr	r3, [r3, #144]
 3745 01ba 03F44043 		and	r3, r3, #49152
 3746 01be B3F5804F 		cmp	r3, #16384
 3747 01c2 0BD0     		beq	.L282
 3748 01c4 07D9     		bls	.L329
 3749 01c6 B3F5004F 		cmp	r3, #32768
 3750 01ca 26D0     		beq	.L310
 3751 01cc B3F5404F 		cmp	r3, #49152
 3752 01d0 06D1     		bne	.L281
 3753              	.LVL311:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3754              		.loc 1 2788 0 discriminator 91
 3755 01d2 0823     		movs	r3, #8
 3756 01d4 07E0     		b	.L243
 3757              	.LVL312:
 3758              	.L329:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3759              		.loc 1 2788 0 discriminator 85
 3760 01d6 1BB9     		cbnz	r3, .L281
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3761              		.loc 1 2788 0
 3762 01d8 0023     		movs	r3, #0
 3763 01da 04E0     		b	.L243
 3764              	.L282:
 3765              	.LVL313:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3766              		.loc 1 2788 0 discriminator 89
 3767 01dc 0423     		movs	r3, #4
 3768 01de 02E0     		b	.L243
 3769              	.LVL314:
 3770              	.L281:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3771              		.loc 1 2788 0 discriminator 87
 3772 01e0 1023     		movs	r3, #16
 3773 01e2 00E0     		b	.L243
ARM GAS  /tmp/ccRCsb68.s 			page 140


 3774              	.LVL315:
 3775              	.L302:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3776              		.loc 1 2788 0
 3777 01e4 0223     		movs	r3, #2
 3778              	.L243:
 3779              	.LVL316:
2790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 3780              		.loc 1 2790 0 is_stmt 1
 3781 01e6 E269     		ldr	r2, [r4, #28]
 3782 01e8 B2F5004F 		cmp	r2, #32768
 3783 01ec 17D0     		beq	.L330
2831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 3784              		.loc 1 2831 0
 3785 01ee 082B     		cmp	r3, #8
 3786 01f0 00F2B380 		bhi	.L313
 3787 01f4 DFE803F0 		tbb	[pc, r3]
 3788              	.L297:
 3789 01f8 76       		.byte	(.L296-.L297)/2
 3790 01f9 8B       		.byte	(.L298-.L297)/2
 3791 01fa 95       		.byte	(.L299-.L297)/2
 3792 01fb B1       		.byte	(.L313-.L297)/2
 3793 01fc 9E       		.byte	(.L300-.L297)/2
 3794 01fd B1       		.byte	(.L313-.L297)/2
 3795 01fe B1       		.byte	(.L313-.L297)/2
 3796 01ff B1       		.byte	(.L313-.L297)/2
 3797 0200 A8       		.byte	(.L301-.L297)/2
 3798              	.LVL317:
 3799 0201 00       		.p2align 1
 3800              	.L303:
2788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3801              		.loc 1 2788 0
 3802 0202 0223     		movs	r3, #2
 3803 0204 EFE7     		b	.L243
 3804              	.L304:
 3805 0206 0223     		movs	r3, #2
 3806 0208 EDE7     		b	.L243
 3807              	.L305:
 3808 020a 0223     		movs	r3, #2
 3809 020c EBE7     		b	.L243
 3810              	.L306:
 3811 020e 0223     		movs	r3, #2
 3812 0210 E9E7     		b	.L243
 3813              	.L307:
 3814 0212 0223     		movs	r3, #2
 3815 0214 E7E7     		b	.L243
 3816              	.L308:
 3817 0216 0223     		movs	r3, #2
 3818 0218 E5E7     		b	.L243
 3819              	.L310:
 3820 021a 0223     		movs	r3, #2
 3821 021c E3E7     		b	.L243
 3822              	.LVL318:
 3823              	.L330:
2792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 3824              		.loc 1 2792 0
 3825 021e 082B     		cmp	r3, #8
ARM GAS  /tmp/ccRCsb68.s 			page 141


 3826 0220 5DD8     		bhi	.L311
 3827 0222 DFE803F0 		tbb	[pc, r3]
 3828              	.L289:
 3829 0226 05       		.byte	(.L288-.L289)/2
 3830 0227 1F       		.byte	(.L290-.L289)/2
 3831 0228 3F       		.byte	(.L291-.L289)/2
 3832 0229 5C       		.byte	(.L311-.L289)/2
 3833 022a 48       		.byte	(.L292-.L289)/2
 3834 022b 5C       		.byte	(.L311-.L289)/2
 3835 022c 5C       		.byte	(.L311-.L289)/2
 3836 022d 5C       		.byte	(.L311-.L289)/2
 3837 022e 53       		.byte	(.L293-.L289)/2
 3838 022f 00       		.p2align 1
 3839              	.L288:
2795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 3840              		.loc 1 2795 0
 3841 0230 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 3842              	.LVL319:
2796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3843              		.loc 1 2796 0
 3844 0234 6268     		ldr	r2, [r4, #4]
 3845 0236 5308     		lsrs	r3, r2, #1
 3846 0238 03EB4003 		add	r3, r3, r0, lsl #1
 3847 023c B3FBF2F3 		udiv	r3, r3, r2
 3848 0240 9BB2     		uxth	r3, r3
 3849              	.LVL320:
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3850              		.loc 1 2746 0
 3851 0242 0020     		movs	r0, #0
 3852              	.LVL321:
 3853              	.L287:
2818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 3854              		.loc 1 2818 0
 3855 0244 A3F11001 		sub	r1, r3, #16
 3856 0248 4FF6EF72 		movw	r2, #65519
 3857 024c 9142     		cmp	r1, r2
 3858 024e 00F28780 		bhi	.L312
2820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 3859              		.loc 1 2820 0
 3860 0252 9AB2     		uxth	r2, r3
 3861 0254 22F00F02 		bic	r2, r2, #15
 3862              	.LVL322:
2821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       huart->Instance->BRR = brrtemp;
 3863              		.loc 1 2821 0
 3864 0258 C3F34203 		ubfx	r3, r3, #1, #3
 3865              	.LVL323:
 3866 025c 1343     		orrs	r3, r3, r2
 3867              	.LVL324:
2822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 3868              		.loc 1 2822 0
 3869 025e 2268     		ldr	r2, [r4]
 3870 0260 D360     		str	r3, [r2, #12]
 3871 0262 50E0     		b	.L294
 3872              	.LVL325:
 3873              	.L290:
2799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 3874              		.loc 1 2799 0
ARM GAS  /tmp/ccRCsb68.s 			page 142


 3875 0264 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 3876              	.LVL326:
2800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3877              		.loc 1 2800 0
 3878 0268 6268     		ldr	r2, [r4, #4]
 3879 026a 5308     		lsrs	r3, r2, #1
 3880 026c 03EB4003 		add	r3, r3, r0, lsl #1
 3881 0270 B3FBF2F3 		udiv	r3, r3, r2
 3882 0274 9BB2     		uxth	r3, r3
 3883              	.LVL327:
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3884              		.loc 1 2746 0
 3885 0276 0020     		movs	r0, #0
 3886              	.LVL328:
2801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
 3887              		.loc 1 2801 0
 3888 0278 E4E7     		b	.L287
 3889              	.L332:
 3890 027a 00BF     		.align	2
 3891              	.L331:
 3892 027c F369FFEF 		.word	-268473869
 3893 0280 00100140 		.word	1073811456
 3894 0284 00440040 		.word	1073759232
 3895 0288 00480040 		.word	1073760256
 3896 028c 004C0040 		.word	1073761280
 3897 0290 00500040 		.word	1073762304
 3898 0294 00140140 		.word	1073812480
 3899 0298 00780040 		.word	1073772544
 3900 029c 007C0040 		.word	1073773568
 3901 02a0 00380240 		.word	1073887232
 3902              	.LVL329:
 3903              	.L291:
2803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3904              		.loc 1 2803 0
 3905 02a4 6268     		ldr	r2, [r4, #4]
 3906 02a6 304B     		ldr	r3, .L333
 3907              	.LVL330:
 3908 02a8 03EB5203 		add	r3, r3, r2, lsr #1
 3909 02ac B3FBF2F3 		udiv	r3, r3, r2
 3910 02b0 9BB2     		uxth	r3, r3
 3911              	.LVL331:
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3912              		.loc 1 2746 0
 3913 02b2 0020     		movs	r0, #0
2804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
 3914              		.loc 1 2804 0
 3915 02b4 C6E7     		b	.L287
 3916              	.LVL332:
 3917              	.L292:
2806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 3918              		.loc 1 2806 0
 3919 02b6 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 3920              	.LVL333:
2807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3921              		.loc 1 2807 0
 3922 02ba 6268     		ldr	r2, [r4, #4]
 3923 02bc 5308     		lsrs	r3, r2, #1
ARM GAS  /tmp/ccRCsb68.s 			page 143


 3924 02be 03EB4003 		add	r3, r3, r0, lsl #1
 3925 02c2 B3FBF2F3 		udiv	r3, r3, r2
 3926 02c6 9BB2     		uxth	r3, r3
 3927              	.LVL334:
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3928              		.loc 1 2746 0
 3929 02c8 0020     		movs	r0, #0
 3930              	.LVL335:
2808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
 3931              		.loc 1 2808 0
 3932 02ca BBE7     		b	.L287
 3933              	.LVL336:
 3934              	.L293:
2810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3935              		.loc 1 2810 0
 3936 02cc 6268     		ldr	r2, [r4, #4]
 3937 02ce 5308     		lsrs	r3, r2, #1
 3938              	.LVL337:
 3939 02d0 03F58033 		add	r3, r3, #65536
 3940 02d4 B3FBF2F3 		udiv	r3, r3, r2
 3941 02d8 9BB2     		uxth	r3, r3
 3942              	.LVL338:
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3943              		.loc 1 2746 0
 3944 02da 0020     		movs	r0, #0
2811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default:
 3945              		.loc 1 2811 0
 3946 02dc B2E7     		b	.L287
 3947              	.LVL339:
 3948              	.L311:
2813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3949              		.loc 1 2813 0
 3950 02de 0120     		movs	r0, #1
2745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 3951              		.loc 1 2745 0
 3952 02e0 0023     		movs	r3, #0
 3953              	.LVL340:
 3954 02e2 AFE7     		b	.L287
 3955              	.LVL341:
 3956              	.L296:
2834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 3957              		.loc 1 2834 0
 3958 02e4 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 3959              	.LVL342:
2835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3960              		.loc 1 2835 0
 3961 02e8 6268     		ldr	r2, [r4, #4]
 3962 02ea 00EB5203 		add	r3, r0, r2, lsr #1
 3963 02ee B3FBF2F3 		udiv	r3, r3, r2
 3964 02f2 9BB2     		uxth	r3, r3
 3965              	.LVL343:
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3966              		.loc 1 2746 0
 3967 02f4 0020     		movs	r0, #0
 3968              	.LVL344:
 3969              	.L295:
2857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
ARM GAS  /tmp/ccRCsb68.s 			page 144


 3970              		.loc 1 2857 0
 3971 02f6 A3F11001 		sub	r1, r3, #16
 3972 02fa 4FF6EF72 		movw	r2, #65519
 3973 02fe 9142     		cmp	r1, r2
 3974 0300 30D8     		bhi	.L314
2859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 3975              		.loc 1 2859 0
 3976 0302 2268     		ldr	r2, [r4]
 3977 0304 D360     		str	r3, [r2, #12]
 3978              	.LVL345:
 3979              	.L294:
2869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->TxISR = NULL;
 3980              		.loc 1 2869 0
 3981 0306 0023     		movs	r3, #0
 3982 0308 2366     		str	r3, [r4, #96]
2870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3983              		.loc 1 2870 0
 3984 030a 6366     		str	r3, [r4, #100]
2873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 3985              		.loc 1 2873 0
 3986 030c 10BD     		pop	{r4, pc}
 3987              	.LVL346:
 3988              	.L298:
2838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 3989              		.loc 1 2838 0
 3990 030e FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 3991              	.LVL347:
2839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 3992              		.loc 1 2839 0
 3993 0312 6268     		ldr	r2, [r4, #4]
 3994 0314 00EB5203 		add	r3, r0, r2, lsr #1
 3995 0318 B3FBF2F3 		udiv	r3, r3, r2
 3996 031c 9BB2     		uxth	r3, r3
 3997              	.LVL348:
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 3998              		.loc 1 2746 0
 3999 031e 0020     		movs	r0, #0
 4000              	.LVL349:
2840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
 4001              		.loc 1 2840 0
 4002 0320 E9E7     		b	.L295
 4003              	.LVL350:
 4004              	.L299:
2842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 4005              		.loc 1 2842 0
 4006 0322 6268     		ldr	r2, [r4, #4]
 4007 0324 114B     		ldr	r3, .L333+4
 4008              	.LVL351:
 4009 0326 03EB5203 		add	r3, r3, r2, lsr #1
 4010 032a B3FBF2F3 		udiv	r3, r3, r2
 4011 032e 9BB2     		uxth	r3, r3
 4012              	.LVL352:
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 4013              		.loc 1 2746 0
 4014 0330 0020     		movs	r0, #0
2843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
 4015              		.loc 1 2843 0
ARM GAS  /tmp/ccRCsb68.s 			page 145


 4016 0332 E0E7     		b	.L295
 4017              	.LVL353:
 4018              	.L300:
2845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 4019              		.loc 1 2845 0
 4020 0334 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 4021              	.LVL354:
2846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 4022              		.loc 1 2846 0
 4023 0338 6268     		ldr	r2, [r4, #4]
 4024 033a 00EB5203 		add	r3, r0, r2, lsr #1
 4025 033e B3FBF2F3 		udiv	r3, r3, r2
 4026 0342 9BB2     		uxth	r3, r3
 4027              	.LVL355:
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 4028              		.loc 1 2746 0
 4029 0344 0020     		movs	r0, #0
 4030              	.LVL356:
2847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
 4031              		.loc 1 2847 0
 4032 0346 D6E7     		b	.L295
 4033              	.LVL357:
 4034              	.L301:
2849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 4035              		.loc 1 2849 0
 4036 0348 6268     		ldr	r2, [r4, #4]
 4037 034a 5308     		lsrs	r3, r2, #1
 4038              	.LVL358:
 4039 034c 03F50043 		add	r3, r3, #32768
 4040 0350 B3FBF2F3 		udiv	r3, r3, r2
 4041 0354 9BB2     		uxth	r3, r3
 4042              	.LVL359:
2746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t pclk;
 4043              		.loc 1 2746 0
 4044 0356 0020     		movs	r0, #0
2850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       default:
 4045              		.loc 1 2850 0
 4046 0358 CDE7     		b	.L295
 4047              	.LVL360:
 4048              	.L313:
2852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         break;
 4049              		.loc 1 2852 0
 4050 035a 0120     		movs	r0, #1
2745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 4051              		.loc 1 2745 0
 4052 035c 0023     		movs	r3, #0
 4053              	.LVL361:
 4054 035e CAE7     		b	.L295
 4055              	.LVL362:
 4056              	.L312:
2826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4057              		.loc 1 2826 0
 4058 0360 0120     		movs	r0, #1
 4059              	.LVL363:
 4060 0362 D0E7     		b	.L294
 4061              	.LVL364:
 4062              	.L314:
ARM GAS  /tmp/ccRCsb68.s 			page 146


2863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4063              		.loc 1 2863 0
 4064 0364 0120     		movs	r0, #1
 4065              	.LVL365:
 4066 0366 CEE7     		b	.L294
 4067              	.L334:
 4068              		.align	2
 4069              	.L333:
 4070 0368 0048E801 		.word	32000000
 4071 036c 0024F400 		.word	16000000
 4072              		.cfi_endproc
 4073              	.LFE183:
 4075              		.section	.text.UART_AdvFeatureConfig,"ax",%progbits
 4076              		.align	1
 4077              		.global	UART_AdvFeatureConfig
 4078              		.syntax unified
 4079              		.thumb
 4080              		.thumb_func
 4081              		.fpu fpv5-sp-d16
 4083              	UART_AdvFeatureConfig:
 4084              	.LFB184:
2881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
 4085              		.loc 1 2881 0
 4086              		.cfi_startproc
 4087              		@ args = 0, pretend = 0, frame = 0
 4088              		@ frame_needed = 0, uses_anonymous_args = 0
 4089              		@ link register save eliminated.
 4090              	.LVL366:
2886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4091              		.loc 1 2886 0
 4092 0000 436A     		ldr	r3, [r0, #36]
 4093 0002 13F0010F 		tst	r3, #1
 4094 0006 06D0     		beq	.L336
2889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4095              		.loc 1 2889 0
 4096 0008 0268     		ldr	r2, [r0]
 4097 000a 5368     		ldr	r3, [r2, #4]
 4098 000c 23F40033 		bic	r3, r3, #131072
 4099 0010 816A     		ldr	r1, [r0, #40]
 4100 0012 0B43     		orrs	r3, r3, r1
 4101 0014 5360     		str	r3, [r2, #4]
 4102              	.L336:
2893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4103              		.loc 1 2893 0
 4104 0016 436A     		ldr	r3, [r0, #36]
 4105 0018 13F0020F 		tst	r3, #2
 4106 001c 06D0     		beq	.L337
2896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4107              		.loc 1 2896 0
 4108 001e 0268     		ldr	r2, [r0]
 4109 0020 5368     		ldr	r3, [r2, #4]
 4110 0022 23F48033 		bic	r3, r3, #65536
 4111 0026 C16A     		ldr	r1, [r0, #44]
 4112 0028 0B43     		orrs	r3, r3, r1
 4113 002a 5360     		str	r3, [r2, #4]
 4114              	.L337:
2900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
ARM GAS  /tmp/ccRCsb68.s 			page 147


 4115              		.loc 1 2900 0
 4116 002c 436A     		ldr	r3, [r0, #36]
 4117 002e 13F0040F 		tst	r3, #4
 4118 0032 06D0     		beq	.L338
2903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4119              		.loc 1 2903 0
 4120 0034 0268     		ldr	r2, [r0]
 4121 0036 5368     		ldr	r3, [r2, #4]
 4122 0038 23F48023 		bic	r3, r3, #262144
 4123 003c 016B     		ldr	r1, [r0, #48]
 4124 003e 0B43     		orrs	r3, r3, r1
 4125 0040 5360     		str	r3, [r2, #4]
 4126              	.L338:
2907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4127              		.loc 1 2907 0
 4128 0042 436A     		ldr	r3, [r0, #36]
 4129 0044 13F0080F 		tst	r3, #8
 4130 0048 06D0     		beq	.L339
2910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4131              		.loc 1 2910 0
 4132 004a 0268     		ldr	r2, [r0]
 4133 004c 5368     		ldr	r3, [r2, #4]
 4134 004e 23F40043 		bic	r3, r3, #32768
 4135 0052 416B     		ldr	r1, [r0, #52]
 4136 0054 0B43     		orrs	r3, r3, r1
 4137 0056 5360     		str	r3, [r2, #4]
 4138              	.L339:
2914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4139              		.loc 1 2914 0
 4140 0058 436A     		ldr	r3, [r0, #36]
 4141 005a 13F0100F 		tst	r3, #16
 4142 005e 06D0     		beq	.L340
2917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4143              		.loc 1 2917 0
 4144 0060 0268     		ldr	r2, [r0]
 4145 0062 9368     		ldr	r3, [r2, #8]
 4146 0064 23F48053 		bic	r3, r3, #4096
 4147 0068 816B     		ldr	r1, [r0, #56]
 4148 006a 0B43     		orrs	r3, r3, r1
 4149 006c 9360     		str	r3, [r2, #8]
 4150              	.L340:
2921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4151              		.loc 1 2921 0
 4152 006e 436A     		ldr	r3, [r0, #36]
 4153 0070 13F0200F 		tst	r3, #32
 4154 0074 06D0     		beq	.L341
2924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4155              		.loc 1 2924 0
 4156 0076 0268     		ldr	r2, [r0]
 4157 0078 9368     		ldr	r3, [r2, #8]
 4158 007a 23F40053 		bic	r3, r3, #8192
 4159 007e C16B     		ldr	r1, [r0, #60]
 4160 0080 0B43     		orrs	r3, r3, r1
 4161 0082 9360     		str	r3, [r2, #8]
 4162              	.L341:
2928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4163              		.loc 1 2928 0
ARM GAS  /tmp/ccRCsb68.s 			page 148


 4164 0084 436A     		ldr	r3, [r0, #36]
 4165 0086 13F0400F 		tst	r3, #64
 4166 008a 0AD0     		beq	.L342
2932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
 4167              		.loc 1 2932 0
 4168 008c 0268     		ldr	r2, [r0]
 4169 008e 5368     		ldr	r3, [r2, #4]
 4170 0090 23F48013 		bic	r3, r3, #1048576
 4171 0094 016C     		ldr	r1, [r0, #64]
 4172 0096 0B43     		orrs	r3, r3, r1
 4173 0098 5360     		str	r3, [r2, #4]
2934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4174              		.loc 1 2934 0
 4175 009a 036C     		ldr	r3, [r0, #64]
 4176 009c B3F5801F 		cmp	r3, #1048576
 4177 00a0 0BD0     		beq	.L344
 4178              	.L342:
2942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4179              		.loc 1 2942 0
 4180 00a2 436A     		ldr	r3, [r0, #36]
 4181 00a4 13F0800F 		tst	r3, #128
 4182 00a8 06D0     		beq	.L335
2945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4183              		.loc 1 2945 0
 4184 00aa 0268     		ldr	r2, [r0]
 4185 00ac 5368     		ldr	r3, [r2, #4]
 4186 00ae 23F40023 		bic	r3, r3, #524288
 4187 00b2 816C     		ldr	r1, [r0, #72]
 4188 00b4 0B43     		orrs	r3, r3, r1
 4189 00b6 5360     		str	r3, [r2, #4]
 4190              	.L335:
2947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4191              		.loc 1 2947 0
 4192 00b8 7047     		bx	lr
 4193              	.L344:
2937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4194              		.loc 1 2937 0
 4195 00ba 0268     		ldr	r2, [r0]
 4196 00bc 5368     		ldr	r3, [r2, #4]
 4197 00be 23F4C003 		bic	r3, r3, #6291456
 4198 00c2 416C     		ldr	r1, [r0, #68]
 4199 00c4 0B43     		orrs	r3, r3, r1
 4200 00c6 5360     		str	r3, [r2, #4]
 4201 00c8 EBE7     		b	.L342
 4202              		.cfi_endproc
 4203              	.LFE184:
 4205              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 4206              		.align	1
 4207              		.global	UART_WaitOnFlagUntilTimeout
 4208              		.syntax unified
 4209              		.thumb
 4210              		.thumb_func
 4211              		.fpu fpv5-sp-d16
 4213              	UART_WaitOnFlagUntilTimeout:
 4214              	.LFB186:
3008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Wait until flag is set */
 4215              		.loc 1 3008 0
ARM GAS  /tmp/ccRCsb68.s 			page 149


 4216              		.cfi_startproc
 4217              		@ args = 4, pretend = 0, frame = 0
 4218              		@ frame_needed = 0, uses_anonymous_args = 0
 4219              	.LVL367:
 4220 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4221              	.LCFI29:
 4222              		.cfi_def_cfa_offset 24
 4223              		.cfi_offset 4, -24
 4224              		.cfi_offset 5, -20
 4225              		.cfi_offset 6, -16
 4226              		.cfi_offset 7, -12
 4227              		.cfi_offset 8, -8
 4228              		.cfi_offset 14, -4
 4229 0004 0446     		mov	r4, r0
 4230 0006 0F46     		mov	r7, r1
 4231 0008 1646     		mov	r6, r2
 4232 000a 9846     		mov	r8, r3
 4233 000c 069D     		ldr	r5, [sp, #24]
 4234              	.LVL368:
 4235              	.L347:
3010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4236              		.loc 1 3010 0
 4237 000e 2368     		ldr	r3, [r4]
 4238 0010 DB69     		ldr	r3, [r3, #28]
 4239 0012 37EA0303 		bics	r3, r7, r3
 4240 0016 0CBF     		ite	eq
 4241 0018 0123     		moveq	r3, #1
 4242 001a 0023     		movne	r3, #0
 4243 001c B342     		cmp	r3, r6
 4244 001e 3AD1     		bne	.L353
3013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4245              		.loc 1 3013 0
 4246 0020 B5F1FF3F 		cmp	r5, #-1
 4247 0024 F3D0     		beq	.L347
3015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4248              		.loc 1 3015 0
 4249 0026 FFF7FEFF 		bl	HAL_GetTick
 4250              	.LVL369:
 4251 002a A0EB0800 		sub	r0, r0, r8
 4252 002e A842     		cmp	r0, r5
 4253 0030 1FD8     		bhi	.L348
3015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4254              		.loc 1 3015 0 is_stmt 0 discriminator 1
 4255 0032 F5B1     		cbz	r5, .L348
3029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4256              		.loc 1 3029 0 is_stmt 1
 4257 0034 2368     		ldr	r3, [r4]
 4258 0036 1A68     		ldr	r2, [r3]
 4259 0038 12F0040F 		tst	r2, #4
 4260 003c E7D0     		beq	.L347
3031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         {
 4261              		.loc 1 3031 0
 4262 003e DA69     		ldr	r2, [r3, #28]
 4263 0040 12F4006F 		tst	r2, #2048
 4264 0044 E3D0     		beq	.L347
3034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           
 4265              		.loc 1 3034 0
ARM GAS  /tmp/ccRCsb68.s 			page 150


 4266 0046 4FF40062 		mov	r2, #2048
 4267 004a 1A62     		str	r2, [r3, #32]
3037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4268              		.loc 1 3037 0
 4269 004c 2268     		ldr	r2, [r4]
 4270 004e 1368     		ldr	r3, [r2]
 4271 0050 23F4D073 		bic	r3, r3, #416
 4272 0054 1360     		str	r3, [r2]
3038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4273              		.loc 1 3038 0
 4274 0056 2268     		ldr	r2, [r4]
 4275 0058 9368     		ldr	r3, [r2, #8]
 4276 005a 23F00103 		bic	r3, r3, #1
 4277 005e 9360     		str	r3, [r2, #8]
3040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 4278              		.loc 1 3040 0
 4279 0060 2023     		movs	r3, #32
 4280 0062 6367     		str	r3, [r4, #116]
3041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_RTO;
 4281              		.loc 1 3041 0
 4282 0064 A367     		str	r3, [r4, #120]
3042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           
 4283              		.loc 1 3042 0
 4284 0066 E367     		str	r3, [r4, #124]
3045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****           
 4285              		.loc 1 3045 0
 4286 0068 0023     		movs	r3, #0
 4287 006a 84F87030 		strb	r3, [r4, #112]
3047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         }
 4288              		.loc 1 3047 0
 4289 006e 0320     		movs	r0, #3
 4290 0070 12E0     		b	.L350
 4291              	.L348:
3018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4292              		.loc 1 3018 0
 4293 0072 2268     		ldr	r2, [r4]
 4294 0074 1368     		ldr	r3, [r2]
 4295 0076 23F4D073 		bic	r3, r3, #416
 4296 007a 1360     		str	r3, [r2]
3019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4297              		.loc 1 3019 0
 4298 007c 2268     		ldr	r2, [r4]
 4299 007e 9368     		ldr	r3, [r2, #8]
 4300 0080 23F00103 		bic	r3, r3, #1
 4301 0084 9360     		str	r3, [r2, #8]
3021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 4302              		.loc 1 3021 0
 4303 0086 2023     		movs	r3, #32
 4304 0088 6367     		str	r3, [r4, #116]
3022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4305              		.loc 1 3022 0
 4306 008a A367     		str	r3, [r4, #120]
3024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4307              		.loc 1 3024 0
 4308 008c 0023     		movs	r3, #0
 4309 008e 84F87030 		strb	r3, [r4, #112]
3026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
ARM GAS  /tmp/ccRCsb68.s 			page 151


 4310              		.loc 1 3026 0
 4311 0092 0320     		movs	r0, #3
 4312 0094 00E0     		b	.L350
 4313              	.L353:
3052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 4314              		.loc 1 3052 0
 4315 0096 0020     		movs	r0, #0
 4316              	.L350:
3053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4317              		.loc 1 3053 0
 4318 0098 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4319              		.cfi_endproc
 4320              	.LFE186:
 4322              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 4323              		.align	1
 4324              		.global	HAL_UART_Transmit
 4325              		.syntax unified
 4326              		.thumb
 4327              		.thumb_func
 4328              		.fpu fpv5-sp-d16
 4330              	HAL_UART_Transmit:
 4331              	.LFB148:
1012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
 4332              		.loc 1 1012 0
 4333              		.cfi_startproc
 4334              		@ args = 0, pretend = 0, frame = 0
 4335              		@ frame_needed = 0, uses_anonymous_args = 0
 4336              	.LVL370:
 4337 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4338              	.LCFI30:
 4339              		.cfi_def_cfa_offset 24
 4340              		.cfi_offset 4, -24
 4341              		.cfi_offset 5, -20
 4342              		.cfi_offset 6, -16
 4343              		.cfi_offset 7, -12
 4344              		.cfi_offset 8, -8
 4345              		.cfi_offset 14, -4
 4346 0004 82B0     		sub	sp, sp, #8
 4347              	.LCFI31:
 4348              		.cfi_def_cfa_offset 32
 4349 0006 1E46     		mov	r6, r3
1018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4350              		.loc 1 1018 0
 4351 0008 436F     		ldr	r3, [r0, #116]
 4352              	.LVL371:
 4353 000a 202B     		cmp	r3, #32
 4354 000c 59D1     		bne	.L361
 4355 000e 0446     		mov	r4, r0
 4356 0010 0D46     		mov	r5, r1
 4357 0012 9046     		mov	r8, r2
1020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4358              		.loc 1 1020 0
 4359 0014 B2FA82F3 		clz	r3, r2
 4360 0018 5B09     		lsrs	r3, r3, #5
 4361 001a 0029     		cmp	r1, #0
 4362 001c 08BF     		it	eq
 4363 001e 0123     		moveq	r3, #1
ARM GAS  /tmp/ccRCsb68.s 			page 152


 4364 0020 002B     		cmp	r3, #0
 4365 0022 53D1     		bne	.L362
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4366              		.loc 1 1025 0
 4367 0024 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 4368 0028 012B     		cmp	r3, #1
 4369 002a 51D0     		beq	.L363
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4370              		.loc 1 1025 0 is_stmt 0 discriminator 2
 4371 002c 0123     		movs	r3, #1
 4372 002e 80F87030 		strb	r3, [r0, #112]
1027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 4373              		.loc 1 1027 0 is_stmt 1 discriminator 2
 4374 0032 0023     		movs	r3, #0
 4375 0034 C367     		str	r3, [r0, #124]
1028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4376              		.loc 1 1028 0 discriminator 2
 4377 0036 2123     		movs	r3, #33
 4378 0038 4367     		str	r3, [r0, #116]
1031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4379              		.loc 1 1031 0 discriminator 2
 4380 003a FFF7FEFF 		bl	HAL_GetTick
 4381              	.LVL372:
 4382 003e 0746     		mov	r7, r0
 4383              	.LVL373:
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->TxXferCount = Size;
 4384              		.loc 1 1033 0 discriminator 2
 4385 0040 A4F85080 		strh	r8, [r4, #80]	@ movhi
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4386              		.loc 1 1034 0 discriminator 2
 4387 0044 A4F85280 		strh	r8, [r4, #82]	@ movhi
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4388              		.loc 1 1037 0 discriminator 2
 4389 0048 A368     		ldr	r3, [r4, #8]
 4390 004a B3F5805F 		cmp	r3, #4096
 4391 004e 05D0     		beq	.L369
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4392              		.loc 1 1045 0
 4393 0050 4FF00008 		mov	r8, #0
 4394              	.LVL374:
 4395              	.L356:
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4396              		.loc 1 1048 0
 4397 0054 0023     		movs	r3, #0
 4398 0056 84F87030 		strb	r3, [r4, #112]
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4399              		.loc 1 1050 0
 4400 005a 13E0     		b	.L357
 4401              	.LVL375:
 4402              	.L369:
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4403              		.loc 1 1037 0 discriminator 1
 4404 005c 2369     		ldr	r3, [r4, #16]
 4405 005e 13B1     		cbz	r3, .L365
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4406              		.loc 1 1045 0
 4407 0060 4FF00008 		mov	r8, #0
ARM GAS  /tmp/ccRCsb68.s 			page 153


 4408 0064 F6E7     		b	.L356
 4409              	.L365:
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4410              		.loc 1 1040 0
 4411 0066 A846     		mov	r8, r5
1039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 4412              		.loc 1 1039 0
 4413 0068 0025     		movs	r5, #0
 4414              	.LVL376:
 4415 006a F3E7     		b	.L356
 4416              	.LVL377:
 4417              	.L371:
1058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
 4418              		.loc 1 1058 0
 4419 006c 38F8023B 		ldrh	r3, [r8], #2
 4420              	.LVL378:
 4421 0070 2268     		ldr	r2, [r4]
 4422 0072 C3F30803 		ubfx	r3, r3, #0, #9
 4423 0076 9362     		str	r3, [r2, #40]
 4424              	.LVL379:
 4425              	.L359:
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4426              		.loc 1 1066 0
 4427 0078 B4F85230 		ldrh	r3, [r4, #82]
 4428 007c 013B     		subs	r3, r3, #1
 4429 007e 9BB2     		uxth	r3, r3
 4430 0080 A4F85230 		strh	r3, [r4, #82]	@ movhi
 4431              	.L357:
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4432              		.loc 1 1050 0
 4433 0084 B4F85230 		ldrh	r3, [r4, #82]
 4434 0088 9BB2     		uxth	r3, r3
 4435 008a 73B1     		cbz	r3, .L370
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4436              		.loc 1 1052 0
 4437 008c 0096     		str	r6, [sp]
 4438 008e 3B46     		mov	r3, r7
 4439 0090 0022     		movs	r2, #0
 4440 0092 8021     		movs	r1, #128
 4441 0094 2046     		mov	r0, r4
 4442 0096 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4443              	.LVL380:
 4444 009a D8B9     		cbnz	r0, .L366
1056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4445              		.loc 1 1056 0
 4446 009c 002D     		cmp	r5, #0
 4447 009e E5D0     		beq	.L371
1063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
 4448              		.loc 1 1063 0
 4449 00a0 15F8012B 		ldrb	r2, [r5], #1	@ zero_extendqisi2
 4450              	.LVL381:
 4451 00a4 2368     		ldr	r3, [r4]
 4452 00a6 9A62     		str	r2, [r3, #40]
 4453              	.LVL382:
 4454 00a8 E6E7     		b	.L359
 4455              	.L370:
1069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
ARM GAS  /tmp/ccRCsb68.s 			page 154


 4456              		.loc 1 1069 0
 4457 00aa 0096     		str	r6, [sp]
 4458 00ac 3B46     		mov	r3, r7
 4459 00ae 0022     		movs	r2, #0
 4460 00b0 4021     		movs	r1, #64
 4461 00b2 2046     		mov	r0, r4
 4462 00b4 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4463              	.LVL383:
 4464 00b8 0346     		mov	r3, r0
 4465 00ba 68B9     		cbnz	r0, .L367
1075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4466              		.loc 1 1075 0
 4467 00bc 2022     		movs	r2, #32
 4468 00be 6267     		str	r2, [r4, #116]
1077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4469              		.loc 1 1077 0
 4470 00c0 00E0     		b	.L355
 4471              	.LVL384:
 4472              	.L361:
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4473              		.loc 1 1081 0
 4474 00c2 0223     		movs	r3, #2
 4475              	.LVL385:
 4476              	.L355:
1083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4477              		.loc 1 1083 0
 4478 00c4 1846     		mov	r0, r3
 4479 00c6 02B0     		add	sp, sp, #8
 4480              	.LCFI32:
 4481              		.cfi_remember_state
 4482              		.cfi_def_cfa_offset 24
 4483              		@ sp needed
 4484 00c8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4485              	.LVL386:
 4486              	.L362:
 4487              	.LCFI33:
 4488              		.cfi_restore_state
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4489              		.loc 1 1022 0
 4490 00cc 0123     		movs	r3, #1
 4491 00ce F9E7     		b	.L355
 4492              	.L363:
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4493              		.loc 1 1025 0
 4494 00d0 0223     		movs	r3, #2
 4495 00d2 F7E7     		b	.L355
 4496              	.LVL387:
 4497              	.L366:
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 4498              		.loc 1 1054 0
 4499 00d4 0323     		movs	r3, #3
 4500 00d6 F5E7     		b	.L355
 4501              	.L367:
1071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4502              		.loc 1 1071 0
 4503 00d8 0323     		movs	r3, #3
 4504 00da F3E7     		b	.L355
ARM GAS  /tmp/ccRCsb68.s 			page 155


 4505              		.cfi_endproc
 4506              	.LFE148:
 4508              		.section	.text.HAL_UART_Receive,"ax",%progbits
 4509              		.align	1
 4510              		.global	HAL_UART_Receive
 4511              		.syntax unified
 4512              		.thumb
 4513              		.thumb_func
 4514              		.fpu fpv5-sp-d16
 4516              	HAL_UART_Receive:
 4517              	.LFB149:
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint8_t  *pdata8bits;
 4518              		.loc 1 1097 0
 4519              		.cfi_startproc
 4520              		@ args = 0, pretend = 0, frame = 0
 4521              		@ frame_needed = 0, uses_anonymous_args = 0
 4522              	.LVL388:
 4523 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4524              	.LCFI34:
 4525              		.cfi_def_cfa_offset 28
 4526              		.cfi_offset 4, -28
 4527              		.cfi_offset 5, -24
 4528              		.cfi_offset 6, -20
 4529              		.cfi_offset 7, -16
 4530              		.cfi_offset 8, -12
 4531              		.cfi_offset 9, -8
 4532              		.cfi_offset 14, -4
 4533 0004 83B0     		sub	sp, sp, #12
 4534              	.LCFI35:
 4535              		.cfi_def_cfa_offset 40
 4536 0006 1E46     		mov	r6, r3
1104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4537              		.loc 1 1104 0
 4538 0008 836F     		ldr	r3, [r0, #120]
 4539              	.LVL389:
 4540 000a 202B     		cmp	r3, #32
 4541 000c 7FD1     		bne	.L386
 4542 000e 0446     		mov	r4, r0
 4543 0010 0D46     		mov	r5, r1
 4544 0012 9046     		mov	r8, r2
1106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4545              		.loc 1 1106 0
 4546 0014 B2FA82F3 		clz	r3, r2
 4547 0018 5B09     		lsrs	r3, r3, #5
 4548 001a 0029     		cmp	r1, #0
 4549 001c 08BF     		it	eq
 4550 001e 0123     		moveq	r3, #1
 4551 0020 002B     		cmp	r3, #0
 4552 0022 78D1     		bne	.L387
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4553              		.loc 1 1111 0
 4554 0024 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 4555 0028 012B     		cmp	r3, #1
 4556 002a 76D0     		beq	.L388
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4557              		.loc 1 1111 0 is_stmt 0 discriminator 2
 4558 002c 0123     		movs	r3, #1
ARM GAS  /tmp/ccRCsb68.s 			page 156


 4559 002e 80F87030 		strb	r3, [r0, #112]
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 4560              		.loc 1 1113 0 is_stmt 1 discriminator 2
 4561 0032 0023     		movs	r3, #0
 4562 0034 C367     		str	r3, [r0, #124]
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4563              		.loc 1 1114 0 discriminator 2
 4564 0036 2223     		movs	r3, #34
 4565 0038 8367     		str	r3, [r0, #120]
1117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4566              		.loc 1 1117 0 discriminator 2
 4567 003a FFF7FEFF 		bl	HAL_GetTick
 4568              	.LVL390:
 4569 003e 0746     		mov	r7, r0
 4570              	.LVL391:
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     huart->RxXferCount = Size;
 4571              		.loc 1 1119 0 discriminator 2
 4572 0040 A4F85880 		strh	r8, [r4, #88]	@ movhi
1120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4573              		.loc 1 1120 0 discriminator 2
 4574 0044 A4F85A80 		strh	r8, [r4, #90]	@ movhi
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4575              		.loc 1 1123 0 discriminator 2
 4576 0048 A368     		ldr	r3, [r4, #8]
 4577 004a B3F5805F 		cmp	r3, #4096
 4578 004e 06D0     		beq	.L393
 4579 0050 A3B9     		cbnz	r3, .L377
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4580              		.loc 1 1123 0 is_stmt 0 discriminator 5
 4581 0052 2269     		ldr	r2, [r4, #16]
 4582 0054 72B9     		cbnz	r2, .L378
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4583              		.loc 1 1123 0 discriminator 7
 4584 0056 FF22     		movs	r2, #255
 4585 0058 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4586 005c 14E0     		b	.L376
 4587              	.L393:
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4588              		.loc 1 1123 0 discriminator 1
 4589 005e 2269     		ldr	r2, [r4, #16]
 4590 0060 22B9     		cbnz	r2, .L375
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4591              		.loc 1 1123 0 discriminator 3
 4592 0062 40F2FF12 		movw	r2, #511
 4593 0066 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4594 006a 0DE0     		b	.L376
 4595              	.L375:
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4596              		.loc 1 1123 0 discriminator 4
 4597 006c FF22     		movs	r2, #255
 4598 006e A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4599 0072 09E0     		b	.L376
 4600              	.L378:
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4601              		.loc 1 1123 0 discriminator 8
 4602 0074 7F22     		movs	r2, #127
 4603 0076 A4F85C20 		strh	r2, [r4, #92]	@ movhi
ARM GAS  /tmp/ccRCsb68.s 			page 157


 4604 007a 05E0     		b	.L376
 4605              	.L377:
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4606              		.loc 1 1123 0 discriminator 6
 4607 007c B3F1805F 		cmp	r3, #268435456
 4608 0080 0DD0     		beq	.L394
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4609              		.loc 1 1123 0 discriminator 10
 4610 0082 0022     		movs	r2, #0
 4611 0084 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4612              	.L376:
1124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4613              		.loc 1 1124 0 is_stmt 1
 4614 0088 B4F85C80 		ldrh	r8, [r4, #92]
 4615              	.LVL392:
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4616              		.loc 1 1127 0
 4617 008c B3F5805F 		cmp	r3, #4096
 4618 0090 0FD0     		beq	.L395
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4619              		.loc 1 1135 0
 4620 0092 4FF00009 		mov	r9, #0
 4621              	.LVL393:
 4622              	.L381:
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4623              		.loc 1 1138 0
 4624 0096 0023     		movs	r3, #0
 4625 0098 84F87030 		strb	r3, [r4, #112]
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4626              		.loc 1 1141 0
 4627 009c 1DE0     		b	.L382
 4628              	.LVL394:
 4629              	.L394:
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4630              		.loc 1 1123 0 discriminator 9
 4631 009e 2269     		ldr	r2, [r4, #16]
 4632 00a0 1AB9     		cbnz	r2, .L380
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4633              		.loc 1 1123 0 is_stmt 0 discriminator 11
 4634 00a2 7F22     		movs	r2, #127
 4635 00a4 A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4636 00a8 EEE7     		b	.L376
 4637              	.L380:
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     uhMask = huart->Mask;
 4638              		.loc 1 1123 0 discriminator 12
 4639 00aa 3F22     		movs	r2, #63
 4640 00ac A4F85C20 		strh	r2, [r4, #92]	@ movhi
 4641 00b0 EAE7     		b	.L376
 4642              	.LVL395:
 4643              	.L395:
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4644              		.loc 1 1127 0 is_stmt 1 discriminator 1
 4645 00b2 2369     		ldr	r3, [r4, #16]
 4646 00b4 13B1     		cbz	r3, .L390
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4647              		.loc 1 1135 0
 4648 00b6 4FF00009 		mov	r9, #0
ARM GAS  /tmp/ccRCsb68.s 			page 158


 4649 00ba ECE7     		b	.L381
 4650              	.L390:
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4651              		.loc 1 1130 0
 4652 00bc A946     		mov	r9, r5
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 4653              		.loc 1 1129 0
 4654 00be 0025     		movs	r5, #0
 4655              	.LVL396:
 4656 00c0 E9E7     		b	.L381
 4657              	.LVL397:
 4658              	.L397:
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata16bits++;
 4659              		.loc 1 1149 0
 4660 00c2 2368     		ldr	r3, [r4]
 4661 00c4 5B6A     		ldr	r3, [r3, #36]
 4662 00c6 08EA0303 		and	r3, r8, r3
 4663 00ca 29F8023B 		strh	r3, [r9], #2	@ movhi
 4664              	.LVL398:
 4665              	.L384:
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4666              		.loc 1 1157 0
 4667 00ce B4F85A30 		ldrh	r3, [r4, #90]
 4668 00d2 013B     		subs	r3, r3, #1
 4669 00d4 9BB2     		uxth	r3, r3
 4670 00d6 A4F85A30 		strh	r3, [r4, #90]	@ movhi
 4671              	.L382:
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4672              		.loc 1 1141 0
 4673 00da B4F85A30 		ldrh	r3, [r4, #90]
 4674 00de 9BB2     		uxth	r3, r3
 4675 00e0 8BB1     		cbz	r3, .L396
1143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4676              		.loc 1 1143 0
 4677 00e2 0096     		str	r6, [sp]
 4678 00e4 3B46     		mov	r3, r7
 4679 00e6 0022     		movs	r2, #0
 4680 00e8 2021     		movs	r1, #32
 4681 00ea 2046     		mov	r0, r4
 4682 00ec FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4683              	.LVL399:
 4684 00f0 A8B9     		cbnz	r0, .L391
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       {
 4685              		.loc 1 1147 0
 4686 00f2 002D     		cmp	r5, #0
 4687 00f4 E5D0     		beq	.L397
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****         pdata8bits++;
 4688              		.loc 1 1154 0
 4689 00f6 2368     		ldr	r3, [r4]
 4690 00f8 5A6A     		ldr	r2, [r3, #36]
 4691 00fa 5FFA88F3 		uxtb	r3, r8
 4692 00fe 1340     		ands	r3, r3, r2
 4693 0100 05F8013B 		strb	r3, [r5], #1
 4694              	.LVL400:
 4695 0104 E3E7     		b	.L384
 4696              	.L396:
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 159


 4697              		.loc 1 1161 0
 4698 0106 2023     		movs	r3, #32
 4699 0108 A367     		str	r3, [r4, #120]
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4700              		.loc 1 1163 0
 4701 010a 0020     		movs	r0, #0
 4702 010c 00E0     		b	.L373
 4703              	.LVL401:
 4704              	.L386:
1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4705              		.loc 1 1167 0
 4706 010e 0220     		movs	r0, #2
 4707              	.LVL402:
 4708              	.L373:
1169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4709              		.loc 1 1169 0
 4710 0110 03B0     		add	sp, sp, #12
 4711              	.LCFI36:
 4712              		.cfi_remember_state
 4713              		.cfi_def_cfa_offset 28
 4714              		@ sp needed
 4715 0112 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4716              	.LVL403:
 4717              	.L387:
 4718              	.LCFI37:
 4719              		.cfi_restore_state
1108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4720              		.loc 1 1108 0
 4721 0116 0120     		movs	r0, #1
 4722              	.LVL404:
 4723 0118 FAE7     		b	.L373
 4724              	.LVL405:
 4725              	.L388:
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4726              		.loc 1 1111 0
 4727 011a 0220     		movs	r0, #2
 4728              	.LVL406:
 4729 011c F8E7     		b	.L373
 4730              	.LVL407:
 4731              	.L391:
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****       }
 4732              		.loc 1 1145 0
 4733 011e 0320     		movs	r0, #3
 4734 0120 F6E7     		b	.L373
 4735              		.cfi_endproc
 4736              	.LFE149:
 4738              		.section	.text.UART_CheckIdleState,"ax",%progbits
 4739              		.align	1
 4740              		.global	UART_CheckIdleState
 4741              		.syntax unified
 4742              		.thumb
 4743              		.thumb_func
 4744              		.fpu fpv5-sp-d16
 4746              	UART_CheckIdleState:
 4747              	.LFB185:
2955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   uint32_t tickstart;
 4748              		.loc 1 2955 0
ARM GAS  /tmp/ccRCsb68.s 			page 160


 4749              		.cfi_startproc
 4750              		@ args = 0, pretend = 0, frame = 0
 4751              		@ frame_needed = 0, uses_anonymous_args = 0
 4752              	.LVL408:
 4753 0000 10B5     		push	{r4, lr}
 4754              	.LCFI38:
 4755              		.cfi_def_cfa_offset 8
 4756              		.cfi_offset 4, -8
 4757              		.cfi_offset 14, -4
 4758 0002 82B0     		sub	sp, sp, #8
 4759              	.LCFI39:
 4760              		.cfi_def_cfa_offset 16
 4761 0004 0446     		mov	r4, r0
2959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4762              		.loc 1 2959 0
 4763 0006 0023     		movs	r3, #0
 4764 0008 C367     		str	r3, [r0, #124]
2962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4765              		.loc 1 2962 0
 4766 000a FFF7FEFF 		bl	HAL_GetTick
 4767              	.LVL409:
2965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4768              		.loc 1 2965 0
 4769 000e 2268     		ldr	r2, [r4]
 4770 0010 1268     		ldr	r2, [r2]
 4771 0012 12F0080F 		tst	r2, #8
 4772 0016 07D1     		bne	.L403
 4773              	.LVL410:
 4774              	.L399:
2989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4775              		.loc 1 2989 0
 4776 0018 2023     		movs	r3, #32
 4777 001a 6367     		str	r3, [r4, #116]
2990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4778              		.loc 1 2990 0
 4779 001c A367     		str	r3, [r4, #120]
2992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4780              		.loc 1 2992 0
 4781 001e 0020     		movs	r0, #0
 4782 0020 84F87000 		strb	r0, [r4, #112]
 4783              	.L400:
2995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4784              		.loc 1 2995 0
 4785 0024 02B0     		add	sp, sp, #8
 4786              	.LCFI40:
 4787              		.cfi_remember_state
 4788              		.cfi_def_cfa_offset 8
 4789              		@ sp needed
 4790 0026 10BD     		pop	{r4, pc}
 4791              	.LVL411:
 4792              	.L403:
 4793              	.LCFI41:
 4794              		.cfi_restore_state
2968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     {
 4795              		.loc 1 2968 0
 4796 0028 6FF07E43 		mvn	r3, #-33554432
 4797 002c 0093     		str	r3, [sp]
ARM GAS  /tmp/ccRCsb68.s 			page 161


 4798 002e 0346     		mov	r3, r0
 4799 0030 0022     		movs	r2, #0
 4800 0032 4FF40011 		mov	r1, #2097152
 4801 0036 2046     		mov	r0, r4
 4802              	.LVL412:
 4803 0038 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4804              	.LVL413:
 4805 003c 0028     		cmp	r0, #0
 4806 003e EBD0     		beq	.L399
2971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****     }
 4807              		.loc 1 2971 0
 4808 0040 0320     		movs	r0, #3
 4809 0042 EFE7     		b	.L400
 4810              		.cfi_endproc
 4811              	.LFE185:
 4813              		.section	.text.HAL_UART_Init,"ax",%progbits
 4814              		.align	1
 4815              		.global	HAL_UART_Init
 4816              		.syntax unified
 4817              		.thumb
 4818              		.thumb_func
 4819              		.fpu fpv5-sp-d16
 4821              	HAL_UART_Init:
 4822              	.LFB141:
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4823              		.loc 1 288 0
 4824              		.cfi_startproc
 4825              		@ args = 0, pretend = 0, frame = 0
 4826              		@ frame_needed = 0, uses_anonymous_args = 0
 4827              	.LVL414:
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4828              		.loc 1 290 0
 4829 0000 68B3     		cbz	r0, .L408
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4830              		.loc 1 288 0
 4831 0002 10B5     		push	{r4, lr}
 4832              	.LCFI42:
 4833              		.cfi_def_cfa_offset 8
 4834              		.cfi_offset 4, -8
 4835              		.cfi_offset 14, -4
 4836 0004 0446     		mov	r4, r0
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4837              		.loc 1 306 0
 4838 0006 436F     		ldr	r3, [r0, #116]
 4839 0008 03B3     		cbz	r3, .L413
 4840              	.LVL415:
 4841              	.L406:
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4842              		.loc 1 327 0
 4843 000a 2423     		movs	r3, #36
 4844 000c 6367     		str	r3, [r4, #116]
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4845              		.loc 1 329 0
 4846 000e 2268     		ldr	r2, [r4]
 4847 0010 1368     		ldr	r3, [r2]
 4848 0012 23F00103 		bic	r3, r3, #1
 4849 0016 1360     		str	r3, [r2]
ARM GAS  /tmp/ccRCsb68.s 			page 162


 332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4850              		.loc 1 332 0
 4851 0018 2046     		mov	r0, r4
 4852 001a FFF7FEFF 		bl	UART_SetConfig
 4853              	.LVL416:
 4854 001e 0128     		cmp	r0, #1
 4855 0020 13D0     		beq	.L405
 337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4856              		.loc 1 337 0
 4857 0022 636A     		ldr	r3, [r4, #36]
 4858 0024 BBB9     		cbnz	r3, .L414
 4859              	.L407:
 345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 4860              		.loc 1 345 0
 4861 0026 2268     		ldr	r2, [r4]
 4862 0028 5368     		ldr	r3, [r2, #4]
 4863 002a 23F49043 		bic	r3, r3, #18432
 4864 002e 5360     		str	r3, [r2, #4]
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4865              		.loc 1 346 0
 4866 0030 2268     		ldr	r2, [r4]
 4867 0032 9368     		ldr	r3, [r2, #8]
 4868 0034 23F02A03 		bic	r3, r3, #42
 4869 0038 9360     		str	r3, [r2, #8]
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4870              		.loc 1 348 0
 4871 003a 2268     		ldr	r2, [r4]
 4872 003c 1368     		ldr	r3, [r2]
 4873 003e 43F00103 		orr	r3, r3, #1
 4874 0042 1360     		str	r3, [r2]
 351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 4875              		.loc 1 351 0
 4876 0044 2046     		mov	r0, r4
 4877 0046 FFF7FEFF 		bl	UART_CheckIdleState
 4878              	.LVL417:
 4879              	.L405:
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4880              		.loc 1 352 0
 4881 004a 10BD     		pop	{r4, pc}
 4882              	.LVL418:
 4883              	.L413:
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4884              		.loc 1 309 0
 4885 004c 80F87030 		strb	r3, [r0, #112]
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 4886              		.loc 1 323 0
 4887 0050 FFF7FEFF 		bl	HAL_UART_MspInit
 4888              	.LVL419:
 4889 0054 D9E7     		b	.L406
 4890              	.L414:
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4891              		.loc 1 339 0
 4892 0056 2046     		mov	r0, r4
 4893 0058 FFF7FEFF 		bl	UART_AdvFeatureConfig
 4894              	.LVL420:
 4895 005c E3E7     		b	.L407
 4896              	.LVL421:
ARM GAS  /tmp/ccRCsb68.s 			page 163


 4897              	.L408:
 4898              	.LCFI43:
 4899              		.cfi_def_cfa_offset 0
 4900              		.cfi_restore 4
 4901              		.cfi_restore 14
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 4902              		.loc 1 292 0
 4903 005e 0120     		movs	r0, #1
 4904              	.LVL422:
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4905              		.loc 1 352 0
 4906 0060 7047     		bx	lr
 4907              		.cfi_endproc
 4908              	.LFE141:
 4910              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 4911              		.align	1
 4912              		.global	HAL_HalfDuplex_Init
 4913              		.syntax unified
 4914              		.thumb
 4915              		.thumb_func
 4916              		.fpu fpv5-sp-d16
 4918              	HAL_HalfDuplex_Init:
 4919              	.LFB142:
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4920              		.loc 1 361 0
 4921              		.cfi_startproc
 4922              		@ args = 0, pretend = 0, frame = 0
 4923              		@ frame_needed = 0, uses_anonymous_args = 0
 4924              	.LVL423:
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4925              		.loc 1 363 0
 4926 0000 0028     		cmp	r0, #0
 4927 0002 32D0     		beq	.L419
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 4928              		.loc 1 361 0
 4929 0004 10B5     		push	{r4, lr}
 4930              	.LCFI44:
 4931              		.cfi_def_cfa_offset 8
 4932              		.cfi_offset 4, -8
 4933              		.cfi_offset 14, -4
 4934 0006 0446     		mov	r4, r0
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4935              		.loc 1 371 0
 4936 0008 436F     		ldr	r3, [r0, #116]
 4937 000a 2BB3     		cbz	r3, .L424
 4938              	.LVL424:
 4939              	.L417:
 392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4940              		.loc 1 392 0
 4941 000c 2423     		movs	r3, #36
 4942 000e 6367     		str	r3, [r4, #116]
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4943              		.loc 1 394 0
 4944 0010 2268     		ldr	r2, [r4]
 4945 0012 1368     		ldr	r3, [r2]
 4946 0014 23F00103 		bic	r3, r3, #1
 4947 0018 1360     		str	r3, [r2]
ARM GAS  /tmp/ccRCsb68.s 			page 164


 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4948              		.loc 1 397 0
 4949 001a 2046     		mov	r0, r4
 4950 001c FFF7FEFF 		bl	UART_SetConfig
 4951              	.LVL425:
 4952 0020 0128     		cmp	r0, #1
 4953 0022 18D0     		beq	.L416
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 4954              		.loc 1 402 0
 4955 0024 636A     		ldr	r3, [r4, #36]
 4956 0026 E3B9     		cbnz	r3, .L425
 4957              	.L418:
 410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 4958              		.loc 1 410 0
 4959 0028 2268     		ldr	r2, [r4]
 4960 002a 5368     		ldr	r3, [r2, #4]
 4961 002c 23F49043 		bic	r3, r3, #18432
 4962 0030 5360     		str	r3, [r2, #4]
 411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4963              		.loc 1 411 0
 4964 0032 2268     		ldr	r2, [r4]
 4965 0034 9368     		ldr	r3, [r2, #8]
 4966 0036 23F02203 		bic	r3, r3, #34
 4967 003a 9360     		str	r3, [r2, #8]
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4968              		.loc 1 414 0
 4969 003c 2268     		ldr	r2, [r4]
 4970 003e 9368     		ldr	r3, [r2, #8]
 4971 0040 43F00803 		orr	r3, r3, #8
 4972 0044 9360     		str	r3, [r2, #8]
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4973              		.loc 1 416 0
 4974 0046 2268     		ldr	r2, [r4]
 4975 0048 1368     		ldr	r3, [r2]
 4976 004a 43F00103 		orr	r3, r3, #1
 4977 004e 1360     		str	r3, [r2]
 419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 4978              		.loc 1 419 0
 4979 0050 2046     		mov	r0, r4
 4980 0052 FFF7FEFF 		bl	UART_CheckIdleState
 4981              	.LVL426:
 4982              	.L416:
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4983              		.loc 1 420 0
 4984 0056 10BD     		pop	{r4, pc}
 4985              	.LVL427:
 4986              	.L424:
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 4987              		.loc 1 374 0
 4988 0058 80F87030 		strb	r3, [r0, #112]
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 4989              		.loc 1 388 0
 4990 005c FFF7FEFF 		bl	HAL_UART_MspInit
 4991              	.LVL428:
 4992 0060 D4E7     		b	.L417
 4993              	.L425:
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccRCsb68.s 			page 165


 4994              		.loc 1 404 0
 4995 0062 2046     		mov	r0, r4
 4996 0064 FFF7FEFF 		bl	UART_AdvFeatureConfig
 4997              	.LVL429:
 4998 0068 DEE7     		b	.L418
 4999              	.LVL430:
 5000              	.L419:
 5001              	.LCFI45:
 5002              		.cfi_def_cfa_offset 0
 5003              		.cfi_restore 4
 5004              		.cfi_restore 14
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5005              		.loc 1 365 0
 5006 006a 0120     		movs	r0, #1
 5007              	.LVL431:
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5008              		.loc 1 420 0
 5009 006c 7047     		bx	lr
 5010              		.cfi_endproc
 5011              	.LFE142:
 5013              		.section	.text.HAL_LIN_Init,"ax",%progbits
 5014              		.align	1
 5015              		.global	HAL_LIN_Init
 5016              		.syntax unified
 5017              		.thumb
 5018              		.thumb_func
 5019              		.fpu fpv5-sp-d16
 5021              	HAL_LIN_Init:
 5022              	.LFB143:
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 5023              		.loc 1 434 0
 5024              		.cfi_startproc
 5025              		@ args = 0, pretend = 0, frame = 0
 5026              		@ frame_needed = 0, uses_anonymous_args = 0
 5027              	.LVL432:
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5028              		.loc 1 436 0
 5029 0000 0028     		cmp	r0, #0
 5030 0002 40D0     		beq	.L430
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 5031              		.loc 1 434 0
 5032 0004 38B5     		push	{r3, r4, r5, lr}
 5033              	.LCFI46:
 5034              		.cfi_def_cfa_offset 16
 5035              		.cfi_offset 3, -16
 5036              		.cfi_offset 4, -12
 5037              		.cfi_offset 5, -8
 5038              		.cfi_offset 14, -4
 5039 0006 0446     		mov	r4, r0
 447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5040              		.loc 1 447 0
 5041 0008 C369     		ldr	r3, [r0, #28]
 5042 000a B3F5004F 		cmp	r3, #32768
 5043 000e 3CD0     		beq	.L431
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5044              		.loc 1 452 0
 5045 0010 8368     		ldr	r3, [r0, #8]
ARM GAS  /tmp/ccRCsb68.s 			page 166


 5046 0012 002B     		cmp	r3, #0
 5047 0014 3BD1     		bne	.L432
 5048 0016 0D46     		mov	r5, r1
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5049              		.loc 1 457 0
 5050 0018 436F     		ldr	r3, [r0, #116]
 5051 001a 5BB3     		cbz	r3, .L437
 5052              	.LVL433:
 5053              	.L428:
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5054              		.loc 1 478 0
 5055 001c 2423     		movs	r3, #36
 5056 001e 6367     		str	r3, [r4, #116]
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5057              		.loc 1 480 0
 5058 0020 2268     		ldr	r2, [r4]
 5059 0022 1368     		ldr	r3, [r2]
 5060 0024 23F00103 		bic	r3, r3, #1
 5061 0028 1360     		str	r3, [r2]
 483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5062              		.loc 1 483 0
 5063 002a 2046     		mov	r0, r4
 5064 002c FFF7FEFF 		bl	UART_SetConfig
 5065              	.LVL434:
 5066 0030 0128     		cmp	r0, #1
 5067 0032 2DD0     		beq	.L427
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5068              		.loc 1 488 0
 5069 0034 636A     		ldr	r3, [r4, #36]
 5070 0036 13BB     		cbnz	r3, .L438
 5071              	.L429:
 496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 5072              		.loc 1 496 0
 5073 0038 2268     		ldr	r2, [r4]
 5074 003a 5368     		ldr	r3, [r2, #4]
 5075 003c 23F40063 		bic	r3, r3, #2048
 5076 0040 5360     		str	r3, [r2, #4]
 497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5077              		.loc 1 497 0
 5078 0042 2268     		ldr	r2, [r4]
 5079 0044 9368     		ldr	r3, [r2, #8]
 5080 0046 23F02A03 		bic	r3, r3, #42
 5081 004a 9360     		str	r3, [r2, #8]
 500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5082              		.loc 1 500 0
 5083 004c 2268     		ldr	r2, [r4]
 5084 004e 5368     		ldr	r3, [r2, #4]
 5085 0050 43F48043 		orr	r3, r3, #16384
 5086 0054 5360     		str	r3, [r2, #4]
 503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5087              		.loc 1 503 0
 5088 0056 2368     		ldr	r3, [r4]
 5089 0058 5968     		ldr	r1, [r3, #4]
 5090 005a 21F02001 		bic	r1, r1, #32
 5091 005e 2943     		orrs	r1, r1, r5
 5092 0060 5960     		str	r1, [r3, #4]
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
ARM GAS  /tmp/ccRCsb68.s 			page 167


 5093              		.loc 1 505 0
 5094 0062 2268     		ldr	r2, [r4]
 5095 0064 1368     		ldr	r3, [r2]
 5096 0066 43F00103 		orr	r3, r3, #1
 5097 006a 1360     		str	r3, [r2]
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 5098              		.loc 1 508 0
 5099 006c 2046     		mov	r0, r4
 5100 006e FFF7FEFF 		bl	UART_CheckIdleState
 5101              	.LVL435:
 5102 0072 0DE0     		b	.L427
 5103              	.LVL436:
 5104              	.L437:
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5105              		.loc 1 460 0
 5106 0074 80F87030 		strb	r3, [r0, #112]
 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 5107              		.loc 1 474 0
 5108 0078 FFF7FEFF 		bl	HAL_UART_MspInit
 5109              	.LVL437:
 5110 007c CEE7     		b	.L428
 5111              	.L438:
 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5112              		.loc 1 490 0
 5113 007e 2046     		mov	r0, r4
 5114 0080 FFF7FEFF 		bl	UART_AdvFeatureConfig
 5115              	.LVL438:
 5116 0084 D8E7     		b	.L429
 5117              	.LVL439:
 5118              	.L430:
 5119              	.LCFI47:
 5120              		.cfi_def_cfa_offset 0
 5121              		.cfi_restore 3
 5122              		.cfi_restore 4
 5123              		.cfi_restore 5
 5124              		.cfi_restore 14
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5125              		.loc 1 438 0
 5126 0086 0120     		movs	r0, #1
 5127              	.LVL440:
 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5128              		.loc 1 509 0
 5129 0088 7047     		bx	lr
 5130              	.LVL441:
 5131              	.L431:
 5132              	.LCFI48:
 5133              		.cfi_def_cfa_offset 16
 5134              		.cfi_offset 3, -16
 5135              		.cfi_offset 4, -12
 5136              		.cfi_offset 5, -8
 5137              		.cfi_offset 14, -4
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5138              		.loc 1 449 0
 5139 008a 0120     		movs	r0, #1
 5140              	.LVL442:
 5141 008c 00E0     		b	.L427
 5142              	.LVL443:
ARM GAS  /tmp/ccRCsb68.s 			page 168


 5143              	.L432:
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5144              		.loc 1 454 0
 5145 008e 0120     		movs	r0, #1
 5146              	.LVL444:
 5147              	.L427:
 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5148              		.loc 1 509 0
 5149 0090 38BD     		pop	{r3, r4, r5, pc}
 5150              		.cfi_endproc
 5151              	.LFE143:
 5153              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 5154              		.align	1
 5155              		.global	HAL_MultiProcessor_Init
 5156              		.syntax unified
 5157              		.thumb
 5158              		.thumb_func
 5159              		.fpu fpv5-sp-d16
 5161              	HAL_MultiProcessor_Init:
 5162              	.LFB144:
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 5163              		.loc 1 531 0
 5164              		.cfi_startproc
 5165              		@ args = 0, pretend = 0, frame = 0
 5166              		@ frame_needed = 0, uses_anonymous_args = 0
 5167              	.LVL445:
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5168              		.loc 1 533 0
 5169 0000 0028     		cmp	r0, #0
 5170 0002 40D0     		beq	.L444
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   /* Check the UART handle allocation */
 5171              		.loc 1 531 0
 5172 0004 70B5     		push	{r4, r5, r6, lr}
 5173              	.LCFI49:
 5174              		.cfi_def_cfa_offset 16
 5175              		.cfi_offset 4, -16
 5176              		.cfi_offset 5, -12
 5177              		.cfi_offset 6, -8
 5178              		.cfi_offset 14, -4
 5179 0006 0446     		mov	r4, r0
 5180 0008 1546     		mov	r5, r2
 5181 000a 0E46     		mov	r6, r1
 541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5182              		.loc 1 541 0
 5183 000c 436F     		ldr	r3, [r0, #116]
 5184 000e 4BB3     		cbz	r3, .L449
 5185              	.LVL446:
 5186              	.L441:
 562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5187              		.loc 1 562 0
 5188 0010 2423     		movs	r3, #36
 5189 0012 6367     		str	r3, [r4, #116]
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5190              		.loc 1 564 0
 5191 0014 2268     		ldr	r2, [r4]
 5192 0016 1368     		ldr	r3, [r2]
 5193 0018 23F00103 		bic	r3, r3, #1
ARM GAS  /tmp/ccRCsb68.s 			page 169


 5194 001c 1360     		str	r3, [r2]
 567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5195              		.loc 1 567 0
 5196 001e 2046     		mov	r0, r4
 5197 0020 FFF7FEFF 		bl	UART_SetConfig
 5198              	.LVL447:
 5199 0024 0128     		cmp	r0, #1
 5200 0026 1CD0     		beq	.L440
 572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5201              		.loc 1 572 0
 5202 0028 636A     		ldr	r3, [r4, #36]
 5203 002a 03BB     		cbnz	r3, .L450
 5204              	.L442:
 580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 5205              		.loc 1 580 0
 5206 002c 2268     		ldr	r2, [r4]
 5207 002e 5368     		ldr	r3, [r2, #4]
 5208 0030 23F49043 		bic	r3, r3, #18432
 5209 0034 5360     		str	r3, [r2, #4]
 581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5210              		.loc 1 581 0
 5211 0036 2268     		ldr	r2, [r4]
 5212 0038 9368     		ldr	r3, [r2, #8]
 5213 003a 23F02A03 		bic	r3, r3, #42
 5214 003e 9360     		str	r3, [r2, #8]
 583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   {
 5215              		.loc 1 583 0
 5216 0040 B5F5006F 		cmp	r5, #2048
 5217 0044 17D0     		beq	.L451
 5218              	.L443:
 590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5219              		.loc 1 590 0
 5220 0046 2368     		ldr	r3, [r4]
 5221 0048 1A68     		ldr	r2, [r3]
 5222 004a 22F40062 		bic	r2, r2, #2048
 5223 004e 1543     		orrs	r5, r5, r2
 5224              	.LVL448:
 5225 0050 1D60     		str	r5, [r3]
 592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5226              		.loc 1 592 0
 5227 0052 2268     		ldr	r2, [r4]
 5228 0054 1368     		ldr	r3, [r2]
 5229 0056 43F00103 		orr	r3, r3, #1
 5230 005a 1360     		str	r3, [r2]
 595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 5231              		.loc 1 595 0
 5232 005c 2046     		mov	r0, r4
 5233 005e FFF7FEFF 		bl	UART_CheckIdleState
 5234              	.LVL449:
 5235              	.L440:
 596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5236              		.loc 1 596 0
 5237 0062 70BD     		pop	{r4, r5, r6, pc}
 5238              	.LVL450:
 5239              	.L449:
 544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5240              		.loc 1 544 0
ARM GAS  /tmp/ccRCsb68.s 			page 170


 5241 0064 80F87030 		strb	r3, [r0, #112]
 558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 5242              		.loc 1 558 0
 5243 0068 FFF7FEFF 		bl	HAL_UART_MspInit
 5244              	.LVL451:
 5245 006c D0E7     		b	.L441
 5246              	.L450:
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5247              		.loc 1 574 0
 5248 006e 2046     		mov	r0, r4
 5249 0070 FFF7FEFF 		bl	UART_AdvFeatureConfig
 5250              	.LVL452:
 5251 0074 DAE7     		b	.L442
 5252              	.L451:
 586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5253              		.loc 1 586 0
 5254 0076 2368     		ldr	r3, [r4]
 5255 0078 5968     		ldr	r1, [r3, #4]
 5256 007a 21F07F41 		bic	r1, r1, #-16777216
 5257 007e 41EA0666 		orr	r6, r1, r6, lsl #24
 5258 0082 5E60     		str	r6, [r3, #4]
 5259 0084 DFE7     		b	.L443
 5260              	.LVL453:
 5261              	.L444:
 5262              	.LCFI50:
 5263              		.cfi_def_cfa_offset 0
 5264              		.cfi_restore 4
 5265              		.cfi_restore 5
 5266              		.cfi_restore 6
 5267              		.cfi_restore 14
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   }
 5268              		.loc 1 535 0
 5269 0086 0120     		movs	r0, #1
 5270              	.LVL454:
 596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5271              		.loc 1 596 0
 5272 0088 7047     		bx	lr
 5273              		.cfi_endproc
 5274              	.LFE144:
 5276              		.section	.text.HAL_MultiProcessor_EnableMuteMode,"ax",%progbits
 5277              		.align	1
 5278              		.global	HAL_MultiProcessor_EnableMuteMode
 5279              		.syntax unified
 5280              		.thumb
 5281              		.thumb_func
 5282              		.fpu fpv5-sp-d16
 5284              	HAL_MultiProcessor_EnableMuteMode:
 5285              	.LFB175:
2538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 5286              		.loc 1 2538 0
 5287              		.cfi_startproc
 5288              		@ args = 0, pretend = 0, frame = 0
 5289              		@ frame_needed = 0, uses_anonymous_args = 0
 5290              	.LVL455:
 5291 0000 08B5     		push	{r3, lr}
 5292              	.LCFI51:
 5293              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccRCsb68.s 			page 171


 5294              		.cfi_offset 3, -8
 5295              		.cfi_offset 14, -4
2539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5296              		.loc 1 2539 0
 5297 0002 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 5298 0006 012B     		cmp	r3, #1
 5299 0008 0ED0     		beq	.L454
2539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5300              		.loc 1 2539 0 is_stmt 0 discriminator 2
 5301 000a 0123     		movs	r3, #1
 5302 000c 80F87030 		strb	r3, [r0, #112]
2541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5303              		.loc 1 2541 0 is_stmt 1 discriminator 2
 5304 0010 2423     		movs	r3, #36
 5305 0012 4367     		str	r3, [r0, #116]
2544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5306              		.loc 1 2544 0 discriminator 2
 5307 0014 0268     		ldr	r2, [r0]
 5308 0016 1368     		ldr	r3, [r2]
 5309 0018 43F40053 		orr	r3, r3, #8192
 5310 001c 1360     		str	r3, [r2]
2546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5311              		.loc 1 2546 0 discriminator 2
 5312 001e 2023     		movs	r3, #32
 5313 0020 4367     		str	r3, [r0, #116]
2548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 5314              		.loc 1 2548 0 discriminator 2
 5315 0022 FFF7FEFF 		bl	UART_CheckIdleState
 5316              	.LVL456:
 5317              	.L453:
2549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5318              		.loc 1 2549 0
 5319 0026 08BD     		pop	{r3, pc}
 5320              	.LVL457:
 5321              	.L454:
2539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5322              		.loc 1 2539 0
 5323 0028 0220     		movs	r0, #2
 5324              	.LVL458:
 5325 002a FCE7     		b	.L453
 5326              		.cfi_endproc
 5327              	.LFE175:
 5329              		.section	.text.HAL_MultiProcessor_DisableMuteMode,"ax",%progbits
 5330              		.align	1
 5331              		.global	HAL_MultiProcessor_DisableMuteMode
 5332              		.syntax unified
 5333              		.thumb
 5334              		.thumb_func
 5335              		.fpu fpv5-sp-d16
 5337              	HAL_MultiProcessor_DisableMuteMode:
 5338              	.LFB176:
2558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c ****   __HAL_LOCK(huart);
 5339              		.loc 1 2558 0
 5340              		.cfi_startproc
 5341              		@ args = 0, pretend = 0, frame = 0
 5342              		@ frame_needed = 0, uses_anonymous_args = 0
 5343              	.LVL459:
ARM GAS  /tmp/ccRCsb68.s 			page 172


 5344 0000 08B5     		push	{r3, lr}
 5345              	.LCFI52:
 5346              		.cfi_def_cfa_offset 8
 5347              		.cfi_offset 3, -8
 5348              		.cfi_offset 14, -4
2559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5349              		.loc 1 2559 0
 5350 0002 90F87030 		ldrb	r3, [r0, #112]	@ zero_extendqisi2
 5351 0006 012B     		cmp	r3, #1
 5352 0008 0ED0     		beq	.L458
2559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5353              		.loc 1 2559 0 is_stmt 0 discriminator 2
 5354 000a 0123     		movs	r3, #1
 5355 000c 80F87030 		strb	r3, [r0, #112]
2561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5356              		.loc 1 2561 0 is_stmt 1 discriminator 2
 5357 0010 2423     		movs	r3, #36
 5358 0012 4367     		str	r3, [r0, #116]
2564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5359              		.loc 1 2564 0 discriminator 2
 5360 0014 0268     		ldr	r2, [r0]
 5361 0016 1368     		ldr	r3, [r2]
 5362 0018 23F40053 		bic	r3, r3, #8192
 5363 001c 1360     		str	r3, [r2]
2566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5364              		.loc 1 2566 0 discriminator 2
 5365 001e 2023     		movs	r3, #32
 5366 0020 4367     		str	r3, [r0, #116]
2568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** }
 5367              		.loc 1 2568 0 discriminator 2
 5368 0022 FFF7FEFF 		bl	UART_CheckIdleState
 5369              	.LVL460:
 5370              	.L457:
2569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5371              		.loc 1 2569 0
 5372 0026 08BD     		pop	{r3, pc}
 5373              	.LVL461:
 5374              	.L458:
2559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_uart.c **** 
 5375              		.loc 1 2559 0
 5376 0028 0220     		movs	r0, #2
 5377              	.LVL462:
 5378 002a FCE7     		b	.L457
 5379              		.cfi_endproc
 5380              	.LFE176:
 5382              		.text
 5383              	.Letext0:
 5384              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 5385              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 5386              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 5387              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 5388              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 5389              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 5390              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 5391              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 5392              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 5393              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccRCsb68.s 			page 173


 5394              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
ARM GAS  /tmp/ccRCsb68.s 			page 174


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_uart.c
     /tmp/ccRCsb68.s:18     .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccRCsb68.s:24     .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccRCsb68.s:47     .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccRCsb68.s:53     .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccRCsb68.s:83     .text.UART_TxISR_8BIT:0000000000000000 $t
     /tmp/ccRCsb68.s:89     .text.UART_TxISR_8BIT:0000000000000000 UART_TxISR_8BIT
     /tmp/ccRCsb68.s:141    .text.UART_TxISR_16BIT:0000000000000000 $t
     /tmp/ccRCsb68.s:147    .text.UART_TxISR_16BIT:0000000000000000 UART_TxISR_16BIT
     /tmp/ccRCsb68.s:204    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccRCsb68.s:211    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccRCsb68.s:225    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccRCsb68.s:232    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccRCsb68.s:246    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccRCsb68.s:253    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccRCsb68.s:321    .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccRCsb68.s:328    .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccRCsb68.s:423    .text.HAL_UART_Transmit_IT:0000000000000070 $d
     /tmp/ccRCsb68.s:429    .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccRCsb68.s:436    .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccRCsb68.s:591    .text.HAL_UART_Receive_IT:00000000000000d0 $d
     /tmp/ccRCsb68.s:1670   .text.UART_RxISR_8BIT:0000000000000000 UART_RxISR_8BIT
     /tmp/ccRCsb68.s:1756   .text.UART_RxISR_16BIT:0000000000000000 UART_RxISR_16BIT
     /tmp/ccRCsb68.s:597    .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccRCsb68.s:604    .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccRCsb68.s:732    .text.HAL_UART_Transmit_DMA:000000000000009c $d
     /tmp/ccRCsb68.s:1504   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccRCsb68.s:1619   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccRCsb68.s:1973   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccRCsb68.s:739    .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccRCsb68.s:746    .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/ccRCsb68.s:878    .text.HAL_UART_Receive_DMA:00000000000000a4 $d
     /tmp/ccRCsb68.s:1843   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccRCsb68.s:1922   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/ccRCsb68.s:885    .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccRCsb68.s:892    .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccRCsb68.s:984    .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccRCsb68.s:991    .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccRCsb68.s:1062   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccRCsb68.s:1069   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccRCsb68.s:1187   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccRCsb68.s:1194   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccRCsb68.s:1315   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccRCsb68.s:1322   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccRCsb68.s:1389   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/ccRCsb68.s:1396   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccRCsb68.s:1477   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:1484   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccRCsb68.s:1498   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccRCsb68.s:1554   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccRCsb68.s:1560   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccRCsb68.s:1592   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:1599   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccRCsb68.s:1613   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccRCsb68.s:1643   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:1650   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
ARM GAS  /tmp/ccRCsb68.s 			page 175


     /tmp/ccRCsb68.s:1664   .text.UART_RxISR_8BIT:0000000000000000 $t
     /tmp/ccRCsb68.s:1750   .text.UART_RxISR_16BIT:0000000000000000 $t
     /tmp/ccRCsb68.s:1837   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccRCsb68.s:1895   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:1902   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccRCsb68.s:1916   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/ccRCsb68.s:1946   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:1953   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccRCsb68.s:1967   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccRCsb68.s:2049   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccRCsb68.s:2056   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccRCsb68.s:2317   .text.HAL_UART_IRQHandler:000000000000015c $d
     /tmp/ccRCsb68.s:2328   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccRCsb68.s:2322   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccRCsb68.s:2357   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:2364   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccRCsb68.s:2378   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/ccRCsb68.s:2385   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/ccRCsb68.s:2550   .text.HAL_UART_Abort_IT:00000000000000d4 $d
     /tmp/ccRCsb68.s:2628   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccRCsb68.s:2562   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/ccRCsb68.s:2556   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:2622   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:2683   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:2690   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccRCsb68.s:2704   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccRCsb68.s:2711   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccRCsb68.s:2790   .text.HAL_UART_AbortTransmit_IT:0000000000000060 $d
     /tmp/ccRCsb68.s:2801   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccRCsb68.s:2795   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:2831   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:2838   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccRCsb68.s:2852   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccRCsb68.s:2859   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccRCsb68.s:2955   .text.HAL_UART_AbortReceive_IT:000000000000007c $d
     /tmp/ccRCsb68.s:2966   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccRCsb68.s:2960   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccRCsb68.s:3005   .text.HAL_UART_ReceiverTimeout_Config:0000000000000000 $t
     /tmp/ccRCsb68.s:3012   .text.HAL_UART_ReceiverTimeout_Config:0000000000000000 HAL_UART_ReceiverTimeout_Config
     /tmp/ccRCsb68.s:3033   .text.HAL_UART_EnableReceiverTimeout:0000000000000000 $t
     /tmp/ccRCsb68.s:3040   .text.HAL_UART_EnableReceiverTimeout:0000000000000000 HAL_UART_EnableReceiverTimeout
     /tmp/ccRCsb68.s:3094   .text.HAL_UART_DisableReceiverTimeout:0000000000000000 $t
     /tmp/ccRCsb68.s:3101   .text.HAL_UART_DisableReceiverTimeout:0000000000000000 HAL_UART_DisableReceiverTimeout
     /tmp/ccRCsb68.s:3155   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccRCsb68.s:3162   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccRCsb68.s:3181   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccRCsb68.s:3188   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccRCsb68.s:3237   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/ccRCsb68.s:3244   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccRCsb68.s:3293   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/ccRCsb68.s:3300   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/ccRCsb68.s:3344   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccRCsb68.s:3351   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccRCsb68.s:3373   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccRCsb68.s:3380   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/ccRCsb68.s:3397   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccRCsb68.s:3404   .text.UART_SetConfig:0000000000000000 UART_SetConfig
ARM GAS  /tmp/ccRCsb68.s 			page 176


     /tmp/ccRCsb68.s:3503   .text.UART_SetConfig:000000000000008a $d
     /tmp/ccRCsb68.s:3507   .text.UART_SetConfig:000000000000008e $t
     /tmp/ccRCsb68.s:3537   .text.UART_SetConfig:00000000000000b0 $d
     /tmp/ccRCsb68.s:3789   .text.UART_SetConfig:00000000000001f8 $d
     /tmp/ccRCsb68.s:3829   .text.UART_SetConfig:0000000000000226 $d
     /tmp/ccRCsb68.s:3892   .text.UART_SetConfig:000000000000027c $d
     /tmp/ccRCsb68.s:3905   .text.UART_SetConfig:00000000000002a4 $t
     /tmp/ccRCsb68.s:4070   .text.UART_SetConfig:0000000000000368 $d
     /tmp/ccRCsb68.s:4076   .text.UART_AdvFeatureConfig:0000000000000000 $t
     /tmp/ccRCsb68.s:4083   .text.UART_AdvFeatureConfig:0000000000000000 UART_AdvFeatureConfig
     /tmp/ccRCsb68.s:4206   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccRCsb68.s:4213   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccRCsb68.s:4323   .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccRCsb68.s:4330   .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccRCsb68.s:4509   .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccRCsb68.s:4516   .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccRCsb68.s:4739   .text.UART_CheckIdleState:0000000000000000 $t
     /tmp/ccRCsb68.s:4746   .text.UART_CheckIdleState:0000000000000000 UART_CheckIdleState
     /tmp/ccRCsb68.s:4814   .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccRCsb68.s:4821   .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccRCsb68.s:4911   .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccRCsb68.s:4918   .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccRCsb68.s:5014   .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/ccRCsb68.s:5021   .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/ccRCsb68.s:5154   .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccRCsb68.s:5161   .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccRCsb68.s:5277   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 $t
     /tmp/ccRCsb68.s:5284   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 HAL_MultiProcessor_EnableMuteMode
     /tmp/ccRCsb68.s:5330   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 $t
     /tmp/ccRCsb68.s:5337   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 HAL_MultiProcessor_DisableMuteMode
     /tmp/ccRCsb68.s:3550   .text.UART_SetConfig:00000000000000bd $d
     /tmp/ccRCsb68.s:3550   .text.UART_SetConfig:00000000000000be $t
     /tmp/ccRCsb68.s:3799   .text.UART_SetConfig:0000000000000201 $d
     /tmp/ccRCsb68.s:3799   .text.UART_SetConfig:0000000000000202 $t
     /tmp/ccRCsb68.s:3838   .text.UART_SetConfig:000000000000022f $d
     /tmp/ccRCsb68.s:3838   .text.UART_SetConfig:0000000000000230 $t

UNDEFINED SYMBOLS
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetSysClockFreq
HAL_GetTick
