ARM GAS  /tmp/ccHZGIAD.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-sp-d16
  25              	NMI_Handler:
  26              	.LFB146:
  27              		.file 1 "Core/Src/stm32f7xx_it.c"
   1:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f7xx_it.c **** /**
   3:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f7xx_it.c ****   * @file    stm32f7xx_it.c
   5:Core/Src/stm32f7xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f7xx_it.c ****   * @attention
   8:Core/Src/stm32f7xx_it.c ****   *
   9:Core/Src/stm32f7xx_it.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Core/Src/stm32f7xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32f7xx_it.c ****   *
  12:Core/Src/stm32f7xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/stm32f7xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/stm32f7xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/stm32f7xx_it.c ****   *                             www.st.com/SLA0044
  16:Core/Src/stm32f7xx_it.c ****   *
  17:Core/Src/stm32f7xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32f7xx_it.c ****   */
  19:Core/Src/stm32f7xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32f7xx_it.c **** 
  21:Core/Src/stm32f7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f7xx_it.c **** #include "main.h"
  23:Core/Src/stm32f7xx_it.c **** #include "stm32f7xx_it.h"
  24:Core/Src/stm32f7xx_it.c **** #include "FreeRTOS.h"
  25:Core/Src/stm32f7xx_it.c **** #include "task.h"
  26:Core/Src/stm32f7xx_it.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/stm32f7xx_it.c **** /* USER CODE END Includes */
  29:Core/Src/stm32f7xx_it.c ****   
  30:Core/Src/stm32f7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN TD */
ARM GAS  /tmp/ccHZGIAD.s 			page 2


  32:Core/Src/stm32f7xx_it.c **** 
  33:Core/Src/stm32f7xx_it.c **** /* USER CODE END TD */
  34:Core/Src/stm32f7xx_it.c **** 
  35:Core/Src/stm32f7xx_it.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PD */
  37:Core/Src/stm32f7xx_it.c ****  
  38:Core/Src/stm32f7xx_it.c **** /* USER CODE END PD */
  39:Core/Src/stm32f7xx_it.c **** 
  40:Core/Src/stm32f7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PM */
  42:Core/Src/stm32f7xx_it.c **** 
  43:Core/Src/stm32f7xx_it.c **** /* USER CODE END PM */
  44:Core/Src/stm32f7xx_it.c **** 
  45:Core/Src/stm32f7xx_it.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PV */
  47:Core/Src/stm32f7xx_it.c **** 
  48:Core/Src/stm32f7xx_it.c **** /* USER CODE END PV */
  49:Core/Src/stm32f7xx_it.c **** 
  50:Core/Src/stm32f7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  51:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN PFP */
  52:Core/Src/stm32f7xx_it.c **** 
  53:Core/Src/stm32f7xx_it.c **** /* USER CODE END PFP */
  54:Core/Src/stm32f7xx_it.c **** 
  55:Core/Src/stm32f7xx_it.c **** /* Private user code ---------------------------------------------------------*/
  56:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN 0 */
  57:Core/Src/stm32f7xx_it.c **** 
  58:Core/Src/stm32f7xx_it.c **** /* USER CODE END 0 */
  59:Core/Src/stm32f7xx_it.c **** 
  60:Core/Src/stm32f7xx_it.c **** /* External variables --------------------------------------------------------*/
  61:Core/Src/stm32f7xx_it.c **** extern HCD_HandleTypeDef hhcd_USB_OTG_FS;
  62:Core/Src/stm32f7xx_it.c **** extern DMA2D_HandleTypeDef hdma2d;
  63:Core/Src/stm32f7xx_it.c **** extern LTDC_HandleTypeDef hltdc;
  64:Core/Src/stm32f7xx_it.c **** extern TIM_HandleTypeDef htim6;
  65:Core/Src/stm32f7xx_it.c **** 
  66:Core/Src/stm32f7xx_it.c **** /* USER CODE BEGIN EV */
  67:Core/Src/stm32f7xx_it.c **** 
  68:Core/Src/stm32f7xx_it.c **** /* USER CODE END EV */
  69:Core/Src/stm32f7xx_it.c **** 
  70:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  71:Core/Src/stm32f7xx_it.c **** /*           Cortex-M7 Processor Interruption and Exception Handlers          */ 
  72:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
  73:Core/Src/stm32f7xx_it.c **** /**
  74:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Non maskable interrupt.
  75:Core/Src/stm32f7xx_it.c ****   */
  76:Core/Src/stm32f7xx_it.c **** void NMI_Handler(void)
  77:Core/Src/stm32f7xx_it.c **** {
  28              		.loc 1 77 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  78:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  79:Core/Src/stm32f7xx_it.c **** 
  80:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  81:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  82:Core/Src/stm32f7xx_it.c **** 
  83:Core/Src/stm32f7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
ARM GAS  /tmp/ccHZGIAD.s 			page 3


  84:Core/Src/stm32f7xx_it.c **** }
  33              		.loc 1 84 0
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE146:
  38              		.section	.text.HardFault_Handler,"ax",%progbits
  39              		.align	1
  40              		.global	HardFault_Handler
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv5-sp-d16
  46              	HardFault_Handler:
  47              	.LFB147:
  85:Core/Src/stm32f7xx_it.c **** 
  86:Core/Src/stm32f7xx_it.c **** /**
  87:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Hard fault interrupt.
  88:Core/Src/stm32f7xx_it.c ****   */
  89:Core/Src/stm32f7xx_it.c **** void HardFault_Handler(void)
  90:Core/Src/stm32f7xx_it.c **** {
  48              		.loc 1 90 0
  49              		.cfi_startproc
  50              		@ Volatile: function does not return.
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              		@ link register save eliminated.
  54              	.L3:
  55 0000 FEE7     		b	.L3
  56              		.cfi_endproc
  57              	.LFE147:
  59              		.section	.text.MemManage_Handler,"ax",%progbits
  60              		.align	1
  61              		.global	MemManage_Handler
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv5-sp-d16
  67              	MemManage_Handler:
  68              	.LFB148:
  91:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  92:Core/Src/stm32f7xx_it.c **** 
  93:Core/Src/stm32f7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  94:Core/Src/stm32f7xx_it.c ****   while (1)
  95:Core/Src/stm32f7xx_it.c ****   {
  96:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  97:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  98:Core/Src/stm32f7xx_it.c ****   }
  99:Core/Src/stm32f7xx_it.c **** }
 100:Core/Src/stm32f7xx_it.c **** 
 101:Core/Src/stm32f7xx_it.c **** /**
 102:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Memory management fault.
 103:Core/Src/stm32f7xx_it.c ****   */
 104:Core/Src/stm32f7xx_it.c **** void MemManage_Handler(void)
 105:Core/Src/stm32f7xx_it.c **** {
  69              		.loc 1 105 0
  70              		.cfi_startproc
  71              		@ Volatile: function does not return.
ARM GAS  /tmp/ccHZGIAD.s 			page 4


  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  75              	.L5:
  76 0000 FEE7     		b	.L5
  77              		.cfi_endproc
  78              	.LFE148:
  80              		.section	.text.BusFault_Handler,"ax",%progbits
  81              		.align	1
  82              		.global	BusFault_Handler
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu fpv5-sp-d16
  88              	BusFault_Handler:
  89              	.LFB149:
 106:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 107:Core/Src/stm32f7xx_it.c **** 
 108:Core/Src/stm32f7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 109:Core/Src/stm32f7xx_it.c ****   while (1)
 110:Core/Src/stm32f7xx_it.c ****   {
 111:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 112:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 113:Core/Src/stm32f7xx_it.c ****   }
 114:Core/Src/stm32f7xx_it.c **** }
 115:Core/Src/stm32f7xx_it.c **** 
 116:Core/Src/stm32f7xx_it.c **** /**
 117:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 118:Core/Src/stm32f7xx_it.c ****   */
 119:Core/Src/stm32f7xx_it.c **** void BusFault_Handler(void)
 120:Core/Src/stm32f7xx_it.c **** {
  90              		.loc 1 120 0
  91              		.cfi_startproc
  92              		@ Volatile: function does not return.
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96              	.L7:
  97 0000 FEE7     		b	.L7
  98              		.cfi_endproc
  99              	.LFE149:
 101              		.section	.text.UsageFault_Handler,"ax",%progbits
 102              		.align	1
 103              		.global	UsageFault_Handler
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 107              		.fpu fpv5-sp-d16
 109              	UsageFault_Handler:
 110              	.LFB150:
 121:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 122:Core/Src/stm32f7xx_it.c **** 
 123:Core/Src/stm32f7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 124:Core/Src/stm32f7xx_it.c ****   while (1)
 125:Core/Src/stm32f7xx_it.c ****   {
 126:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 127:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
ARM GAS  /tmp/ccHZGIAD.s 			page 5


 128:Core/Src/stm32f7xx_it.c ****   }
 129:Core/Src/stm32f7xx_it.c **** }
 130:Core/Src/stm32f7xx_it.c **** 
 131:Core/Src/stm32f7xx_it.c **** /**
 132:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 133:Core/Src/stm32f7xx_it.c ****   */
 134:Core/Src/stm32f7xx_it.c **** void UsageFault_Handler(void)
 135:Core/Src/stm32f7xx_it.c **** {
 111              		.loc 1 135 0
 112              		.cfi_startproc
 113              		@ Volatile: function does not return.
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117              	.L9:
 118 0000 FEE7     		b	.L9
 119              		.cfi_endproc
 120              	.LFE150:
 122              		.section	.text.DebugMon_Handler,"ax",%progbits
 123              		.align	1
 124              		.global	DebugMon_Handler
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 128              		.fpu fpv5-sp-d16
 130              	DebugMon_Handler:
 131              	.LFB151:
 136:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 137:Core/Src/stm32f7xx_it.c **** 
 138:Core/Src/stm32f7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 139:Core/Src/stm32f7xx_it.c ****   while (1)
 140:Core/Src/stm32f7xx_it.c ****   {
 141:Core/Src/stm32f7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 142:Core/Src/stm32f7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 143:Core/Src/stm32f7xx_it.c ****   }
 144:Core/Src/stm32f7xx_it.c **** }
 145:Core/Src/stm32f7xx_it.c **** 
 146:Core/Src/stm32f7xx_it.c **** /**
 147:Core/Src/stm32f7xx_it.c ****   * @brief This function handles Debug monitor.
 148:Core/Src/stm32f7xx_it.c ****   */
 149:Core/Src/stm32f7xx_it.c **** void DebugMon_Handler(void)
 150:Core/Src/stm32f7xx_it.c **** {
 132              		.loc 1 150 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 151:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 152:Core/Src/stm32f7xx_it.c **** 
 153:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 154:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 155:Core/Src/stm32f7xx_it.c **** 
 156:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 157:Core/Src/stm32f7xx_it.c **** }
 137              		.loc 1 157 0
 138 0000 7047     		bx	lr
 139              		.cfi_endproc
ARM GAS  /tmp/ccHZGIAD.s 			page 6


 140              	.LFE151:
 142              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 143              		.align	1
 144              		.global	TIM6_DAC_IRQHandler
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv5-sp-d16
 150              	TIM6_DAC_IRQHandler:
 151              	.LFB152:
 158:Core/Src/stm32f7xx_it.c **** 
 159:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
 160:Core/Src/stm32f7xx_it.c **** /* STM32F7xx Peripheral Interrupt Handlers                                    */
 161:Core/Src/stm32f7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 162:Core/Src/stm32f7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 163:Core/Src/stm32f7xx_it.c **** /* please refer to the startup file (startup_stm32f7xx.s).                    */
 164:Core/Src/stm32f7xx_it.c **** /******************************************************************************/
 165:Core/Src/stm32f7xx_it.c **** 
 166:Core/Src/stm32f7xx_it.c **** /**
 167:Core/Src/stm32f7xx_it.c ****   * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
 168:Core/Src/stm32f7xx_it.c ****   */
 169:Core/Src/stm32f7xx_it.c **** void TIM6_DAC_IRQHandler(void)
 170:Core/Src/stm32f7xx_it.c **** {
 152              		.loc 1 170 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156 0000 08B5     		push	{r3, lr}
 157              	.LCFI0:
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 3, -8
 160              		.cfi_offset 14, -4
 171:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
 172:Core/Src/stm32f7xx_it.c **** 
 173:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 0 */
 174:Core/Src/stm32f7xx_it.c ****   HAL_TIM_IRQHandler(&htim6);
 161              		.loc 1 174 0
 162 0002 0248     		ldr	r0, .L13
 163 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 164              	.LVL0:
 175:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
 176:Core/Src/stm32f7xx_it.c **** 
 177:Core/Src/stm32f7xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 1 */
 178:Core/Src/stm32f7xx_it.c **** }
 165              		.loc 1 178 0
 166 0008 08BD     		pop	{r3, pc}
 167              	.L14:
 168 000a 00BF     		.align	2
 169              	.L13:
 170 000c 00000000 		.word	htim6
 171              		.cfi_endproc
 172              	.LFE152:
 174              		.section	.text.OTG_FS_IRQHandler,"ax",%progbits
 175              		.align	1
 176              		.global	OTG_FS_IRQHandler
 177              		.syntax unified
 178              		.thumb
ARM GAS  /tmp/ccHZGIAD.s 			page 7


 179              		.thumb_func
 180              		.fpu fpv5-sp-d16
 182              	OTG_FS_IRQHandler:
 183              	.LFB153:
 179:Core/Src/stm32f7xx_it.c **** 
 180:Core/Src/stm32f7xx_it.c **** /**
 181:Core/Src/stm32f7xx_it.c ****   * @brief This function handles USB On The Go FS global interrupt.
 182:Core/Src/stm32f7xx_it.c ****   */
 183:Core/Src/stm32f7xx_it.c **** void OTG_FS_IRQHandler(void)
 184:Core/Src/stm32f7xx_it.c **** {
 184              		.loc 1 184 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188 0000 08B5     		push	{r3, lr}
 189              	.LCFI1:
 190              		.cfi_def_cfa_offset 8
 191              		.cfi_offset 3, -8
 192              		.cfi_offset 14, -4
 185:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN OTG_FS_IRQn 0 */
 186:Core/Src/stm32f7xx_it.c **** 
 187:Core/Src/stm32f7xx_it.c ****   /* USER CODE END OTG_FS_IRQn 0 */
 188:Core/Src/stm32f7xx_it.c ****   HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 193              		.loc 1 188 0
 194 0002 0248     		ldr	r0, .L17
 195 0004 FFF7FEFF 		bl	HAL_HCD_IRQHandler
 196              	.LVL1:
 189:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN OTG_FS_IRQn 1 */
 190:Core/Src/stm32f7xx_it.c **** 
 191:Core/Src/stm32f7xx_it.c ****   /* USER CODE END OTG_FS_IRQn 1 */
 192:Core/Src/stm32f7xx_it.c **** }
 197              		.loc 1 192 0
 198 0008 08BD     		pop	{r3, pc}
 199              	.L18:
 200 000a 00BF     		.align	2
 201              	.L17:
 202 000c 00000000 		.word	hhcd_USB_OTG_FS
 203              		.cfi_endproc
 204              	.LFE153:
 206              		.section	.text.LTDC_IRQHandler,"ax",%progbits
 207              		.align	1
 208              		.global	LTDC_IRQHandler
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu fpv5-sp-d16
 214              	LTDC_IRQHandler:
 215              	.LFB154:
 193:Core/Src/stm32f7xx_it.c **** 
 194:Core/Src/stm32f7xx_it.c **** /**
 195:Core/Src/stm32f7xx_it.c ****   * @brief This function handles LTDC global interrupt.
 196:Core/Src/stm32f7xx_it.c ****   */
 197:Core/Src/stm32f7xx_it.c **** void LTDC_IRQHandler(void)
 198:Core/Src/stm32f7xx_it.c **** {
 216              		.loc 1 198 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccHZGIAD.s 			page 8


 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220 0000 08B5     		push	{r3, lr}
 221              	.LCFI2:
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 3, -8
 224              		.cfi_offset 14, -4
 199:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN LTDC_IRQn 0 */
 200:Core/Src/stm32f7xx_it.c **** 
 201:Core/Src/stm32f7xx_it.c ****   /* USER CODE END LTDC_IRQn 0 */
 202:Core/Src/stm32f7xx_it.c ****   HAL_LTDC_IRQHandler(&hltdc);
 225              		.loc 1 202 0
 226 0002 0248     		ldr	r0, .L21
 227 0004 FFF7FEFF 		bl	HAL_LTDC_IRQHandler
 228              	.LVL2:
 203:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN LTDC_IRQn 1 */
 204:Core/Src/stm32f7xx_it.c **** 
 205:Core/Src/stm32f7xx_it.c ****   /* USER CODE END LTDC_IRQn 1 */
 206:Core/Src/stm32f7xx_it.c **** }
 229              		.loc 1 206 0
 230 0008 08BD     		pop	{r3, pc}
 231              	.L22:
 232 000a 00BF     		.align	2
 233              	.L21:
 234 000c 00000000 		.word	hltdc
 235              		.cfi_endproc
 236              	.LFE154:
 238              		.section	.text.DMA2D_IRQHandler,"ax",%progbits
 239              		.align	1
 240              		.global	DMA2D_IRQHandler
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
 244              		.fpu fpv5-sp-d16
 246              	DMA2D_IRQHandler:
 247              	.LFB155:
 207:Core/Src/stm32f7xx_it.c **** 
 208:Core/Src/stm32f7xx_it.c **** /**
 209:Core/Src/stm32f7xx_it.c ****   * @brief This function handles DMA2D global interrupt.
 210:Core/Src/stm32f7xx_it.c ****   */
 211:Core/Src/stm32f7xx_it.c **** void DMA2D_IRQHandler(void)
 212:Core/Src/stm32f7xx_it.c **** {
 248              		.loc 1 212 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252 0000 08B5     		push	{r3, lr}
 253              	.LCFI3:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 3, -8
 256              		.cfi_offset 14, -4
 213:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA2D_IRQn 0 */
 214:Core/Src/stm32f7xx_it.c **** 
 215:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA2D_IRQn 0 */
 216:Core/Src/stm32f7xx_it.c ****   HAL_DMA2D_IRQHandler(&hdma2d);
 257              		.loc 1 216 0
 258 0002 0248     		ldr	r0, .L25
 259 0004 FFF7FEFF 		bl	HAL_DMA2D_IRQHandler
ARM GAS  /tmp/ccHZGIAD.s 			page 9


 260              	.LVL3:
 217:Core/Src/stm32f7xx_it.c ****   /* USER CODE BEGIN DMA2D_IRQn 1 */
 218:Core/Src/stm32f7xx_it.c **** 
 219:Core/Src/stm32f7xx_it.c ****   /* USER CODE END DMA2D_IRQn 1 */
 220:Core/Src/stm32f7xx_it.c **** }
 261              		.loc 1 220 0
 262 0008 08BD     		pop	{r3, pc}
 263              	.L26:
 264 000a 00BF     		.align	2
 265              	.L25:
 266 000c 00000000 		.word	hdma2d
 267              		.cfi_endproc
 268              	.LFE155:
 270              		.text
 271              	.Letext0:
 272              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 273              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 274              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 275              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 276              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 277              		.file 7 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 278              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 279              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma2d.h"
 280              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_ltdc.h"
 281              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 282              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_usb.h"
 283              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_hcd.h"
 284              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/ccHZGIAD.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_it.c
     /tmp/ccHZGIAD.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccHZGIAD.s:25     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccHZGIAD.s:39     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccHZGIAD.s:46     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccHZGIAD.s:60     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccHZGIAD.s:67     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccHZGIAD.s:81     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccHZGIAD.s:88     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccHZGIAD.s:102    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccHZGIAD.s:109    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccHZGIAD.s:123    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccHZGIAD.s:130    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccHZGIAD.s:143    .text.TIM6_DAC_IRQHandler:0000000000000000 $t
     /tmp/ccHZGIAD.s:150    .text.TIM6_DAC_IRQHandler:0000000000000000 TIM6_DAC_IRQHandler
     /tmp/ccHZGIAD.s:170    .text.TIM6_DAC_IRQHandler:000000000000000c $d
     /tmp/ccHZGIAD.s:175    .text.OTG_FS_IRQHandler:0000000000000000 $t
     /tmp/ccHZGIAD.s:182    .text.OTG_FS_IRQHandler:0000000000000000 OTG_FS_IRQHandler
     /tmp/ccHZGIAD.s:202    .text.OTG_FS_IRQHandler:000000000000000c $d
     /tmp/ccHZGIAD.s:207    .text.LTDC_IRQHandler:0000000000000000 $t
     /tmp/ccHZGIAD.s:214    .text.LTDC_IRQHandler:0000000000000000 LTDC_IRQHandler
     /tmp/ccHZGIAD.s:234    .text.LTDC_IRQHandler:000000000000000c $d
     /tmp/ccHZGIAD.s:239    .text.DMA2D_IRQHandler:0000000000000000 $t
     /tmp/ccHZGIAD.s:246    .text.DMA2D_IRQHandler:0000000000000000 DMA2D_IRQHandler
     /tmp/ccHZGIAD.s:266    .text.DMA2D_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_TIM_IRQHandler
htim6
HAL_HCD_IRQHandler
hhcd_USB_OTG_FS
HAL_LTDC_IRQHandler
hltdc
HAL_DMA2D_IRQHandler
hdma2d
