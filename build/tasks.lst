ARM GAS  /tmp/ccaGl0eL.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB15:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  /tmp/ccaGl0eL.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
ARM GAS  /tmp/ccaGl0eL.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
ARM GAS  /tmp/ccaGl0eL.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
ARM GAS  /tmp/ccaGl0eL.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
ARM GAS  /tmp/ccaGl0eL.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = { 0 };/*< Prioritised rea
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = { 0 };						/*< Delayed tasks. */
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = { 0 };						/*< Delayed tasks (two lists are used
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;				/*< Points to the delayed tas
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;		/*< Points to the delay
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = { 0 };						/*< Tasks that have been readied whil
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xTasksWaitingTermination = { 0 };				/*< Tasks that have been deleted
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = { 0 };					/*< Tasks that are currently suspend
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
ARM GAS  /tmp/ccaGl0eL.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccaGl0eL.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
ARM GAS  /tmp/ccaGl0eL.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
ARM GAS  /tmp/ccaGl0eL.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
ARM GAS  /tmp/ccaGl0eL.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccaGl0eL.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
ARM GAS  /tmp/ccaGl0eL.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  /tmp/ccaGl0eL.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccaGl0eL.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccaGl0eL.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
ARM GAS  /tmp/ccaGl0eL.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
ARM GAS  /tmp/ccaGl0eL.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
ARM GAS  /tmp/ccaGl0eL.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
ARM GAS  /tmp/ccaGl0eL.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
ARM GAS  /tmp/ccaGl0eL.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
ARM GAS  /tmp/ccaGl0eL.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
ARM GAS  /tmp/ccaGl0eL.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  /tmp/ccaGl0eL.s 			page 32


1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1798 0
ARM GAS  /tmp/ccaGl0eL.s 			page 33


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1806 0
  34 0000 50B1     		cbz	r0, .L8
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1809 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0D4A     		ldr	r2, .L9
  38 0006 9142     		cmp	r1, r2
  39 0008 11D1     		bne	.L5
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  40              		.loc 1 1812 0
  41 000a 836A     		ldr	r3, [r0, #40]
  42 000c 0C4A     		ldr	r2, .L9+4
  43 000e 9342     		cmp	r3, r2
  44 0010 0FD0     		beq	.L6
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  45              		.loc 1 1816 0
  46 0012 83B1     		cbz	r3, .L7
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  47              		.loc 1 1799 0
  48 0014 0020     		movs	r0, #0
  49              	.LVL1:
  50 0016 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
  53              	.LBB113:
  54              	.LBB114:
  55              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * subject to the following conditions:
ARM GAS  /tmp/ccaGl0eL.s 			page 34


  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
ARM GAS  /tmp/ccaGl0eL.s 			page 35


  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
ARM GAS  /tmp/ccaGl0eL.s 			page 36


 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
ARM GAS  /tmp/ccaGl0eL.s 			page 37


 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
  56              		.loc 2 195 0
  57              		.syntax unified
  58              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  59 0018 4FF05003 			mov r3, #80												
  60 001c 72B6     		cpsid i													
  61 001e 83F31188 		msr basepri, r3											
  62 0022 BFF36F8F 		isb														
  63 0026 BFF34F8F 		dsb														
  64 002a 62B6     		cpsie i													
  65              	
  66              	@ 0 "" 2
  67              	.LVL3:
  68              		.thumb
  69              		.syntax unified
  70              	.L3:
  71 002c FEE7     		b	.L3
  72              	.L5:
  73              	.LBE114:
  74              	.LBE113:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  75              		.loc 1 1799 0
  76 002e 0020     		movs	r0, #0
  77              	.LVL4:
  78 0030 7047     		bx	lr
  79              	.LVL5:
  80              	.L6:
  81 0032 0020     		movs	r0, #0
  82              	.LVL6:
  83 0034 7047     		bx	lr
  84              	.LVL7:
  85              	.L7:
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  86              		.loc 1 1818 0
  87 0036 0120     		movs	r0, #1
  88              	.LVL8:
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccaGl0eL.s 			page 38


1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  89              		.loc 1 1836 0
  90 0038 7047     		bx	lr
  91              	.L10:
  92 003a 00BF     		.align	2
  93              	.L9:
  94 003c 00000000 		.word	.LANCHOR0
  95 0040 00000000 		.word	.LANCHOR1
  96              		.cfi_endproc
  97              	.LFE15:
  99              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 100              		.align	1
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu fpv5-sp-d16
 106              	prvResetNextTaskUnblockTime:
 107              	.LFB44:
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
ARM GAS  /tmp/ccaGl0eL.s 			page 39


1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 40


1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
ARM GAS  /tmp/ccaGl0eL.s 			page 41


1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
ARM GAS  /tmp/ccaGl0eL.s 			page 42


2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
ARM GAS  /tmp/ccaGl0eL.s 			page 43


2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccaGl0eL.s 			page 44


2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
ARM GAS  /tmp/ccaGl0eL.s 			page 45


2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
ARM GAS  /tmp/ccaGl0eL.s 			page 46


2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccaGl0eL.s 			page 47


2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
ARM GAS  /tmp/ccaGl0eL.s 			page 48


2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 49


2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
ARM GAS  /tmp/ccaGl0eL.s 			page 50


2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
ARM GAS  /tmp/ccaGl0eL.s 			page 51


2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
ARM GAS  /tmp/ccaGl0eL.s 			page 52


2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  /tmp/ccaGl0eL.s 			page 53


2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 54


2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
ARM GAS  /tmp/ccaGl0eL.s 			page 55


2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccaGl0eL.s 			page 56


2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 57


2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccaGl0eL.s 			page 58


2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
ARM GAS  /tmp/ccaGl0eL.s 			page 59


3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 60


3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
ARM GAS  /tmp/ccaGl0eL.s 			page 61


3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
ARM GAS  /tmp/ccaGl0eL.s 			page 62


3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
ARM GAS  /tmp/ccaGl0eL.s 			page 63


3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
ARM GAS  /tmp/ccaGl0eL.s 			page 64


3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
ARM GAS  /tmp/ccaGl0eL.s 			page 65


3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
ARM GAS  /tmp/ccaGl0eL.s 			page 66


3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
ARM GAS  /tmp/ccaGl0eL.s 			page 67


3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccaGl0eL.s 			page 68


3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccaGl0eL.s 			page 69


3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
ARM GAS  /tmp/ccaGl0eL.s 			page 70


3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccaGl0eL.s 			page 71


3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccaGl0eL.s 			page 72


3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 73


3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
ARM GAS  /tmp/ccaGl0eL.s 			page 74


3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 108              		.loc 1 3881 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 113              		.loc 1 3884 0
 114 0000 084B     		ldr	r3, .L15
 115 0002 1B68     		ldr	r3, [r3]
 116 0004 1B68     		ldr	r3, [r3]
 117 0006 3BB1     		cbz	r3, .L14
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 118              		.loc 1 3898 0
 119 0008 064B     		ldr	r3, .L15
 120 000a 1B68     		ldr	r3, [r3]
 121 000c DB68     		ldr	r3, [r3, #12]
 122 000e DB68     		ldr	r3, [r3, #12]
 123              	.LVL9:
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 124              		.loc 1 3899 0
 125 0010 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/ccaGl0eL.s 			page 75


 126 0012 054B     		ldr	r3, .L15+4
 127              	.LVL10:
 128 0014 1A60     		str	r2, [r3]
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 129              		.loc 1 3901 0
 130 0016 7047     		bx	lr
 131              	.L14:
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 132              		.loc 1 3890 0
 133 0018 034B     		ldr	r3, .L15+4
 134 001a 4FF0FF32 		mov	r2, #-1
 135 001e 1A60     		str	r2, [r3]
 136 0020 7047     		bx	lr
 137              	.L16:
 138 0022 00BF     		.align	2
 139              	.L15:
 140 0024 00000000 		.word	.LANCHOR2
 141 0028 00000000 		.word	.LANCHOR3
 142              		.cfi_endproc
 143              	.LFE44:
 145              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 146              		.align	1
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv5-sp-d16
 152              	prvInitialiseNewTask:
 153              	.LFB7:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 154              		.loc 1 829 0
 155              		.cfi_startproc
 156              		@ args = 16, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              	.LVL11:
 159 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 40
 162              		.cfi_offset 3, -40
 163              		.cfi_offset 4, -36
 164              		.cfi_offset 5, -32
 165              		.cfi_offset 6, -28
 166              		.cfi_offset 7, -24
 167              		.cfi_offset 8, -20
 168              		.cfi_offset 9, -16
 169              		.cfi_offset 10, -12
 170              		.cfi_offset 11, -8
 171              		.cfi_offset 14, -4
 172 0004 8146     		mov	r9, r0
 173 0006 0D46     		mov	r5, r1
 174 0008 9346     		mov	fp, r2
 175 000a 9A46     		mov	r10, r3
 176 000c 0A9E     		ldr	r6, [sp, #40]
 177 000e DDF82C80 		ldr	r8, [sp, #44]
 178 0012 0C9C     		ldr	r4, [sp, #48]
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 179              		.loc 1 851 0
ARM GAS  /tmp/ccaGl0eL.s 			page 76


 180 0014 9200     		lsls	r2, r2, #2
 181              	.LVL12:
 182 0016 A521     		movs	r1, #165
 183              	.LVL13:
 184 0018 206B     		ldr	r0, [r4, #48]
 185              	.LVL14:
 186 001a FFF7FEFF 		bl	memset
 187              	.LVL15:
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 188              		.loc 1 861 0
 189 001e 276B     		ldr	r7, [r4, #48]
 190 0020 6FF04043 		mvn	r3, #-1073741824
 191 0024 5B44     		add	r3, r3, fp
 192 0026 07EB8307 		add	r7, r7, r3, lsl #2
 193              	.LVL16:
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194              		.loc 1 862 0
 195 002a 27F00707 		bic	r7, r7, #7
 196              	.LVL17:
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 197              		.loc 1 889 0
 198 002e 8DB3     		cbz	r5, .L29
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 199              		.loc 1 891 0
 200 0030 0023     		movs	r3, #0
 201              	.L18:
 202              	.LVL18:
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 203              		.loc 1 891 0 is_stmt 0 discriminator 1
 204 0032 0F2B     		cmp	r3, #15
 205 0034 07D8     		bhi	.L20
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 206              		.loc 1 893 0 is_stmt 1
 207 0036 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 208 0038 E218     		adds	r2, r4, r3
 209 003a 82F83410 		strb	r1, [r2, #52]
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 210              		.loc 1 898 0
 211 003e EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 212 0040 0AB1     		cbz	r2, .L20
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 213              		.loc 1 891 0 discriminator 2
 214 0042 0133     		adds	r3, r3, #1
 215              	.LVL19:
 216 0044 F5E7     		b	.L18
 217              	.L20:
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 218              		.loc 1 910 0
 219 0046 0023     		movs	r3, #0
 220              	.LVL20:
 221 0048 84F84330 		strb	r3, [r4, #67]
 222              	.L22:
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 223              		.loc 1 921 0
 224 004c 062E     		cmp	r6, #6
 225 004e 00D9     		bls	.L23
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccaGl0eL.s 			page 77


 226              		.loc 1 923 0
 227 0050 0626     		movs	r6, #6
 228              	.L23:
 229              	.LVL21:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 230              		.loc 1 930 0
 231 0052 E662     		str	r6, [r4, #44]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 232              		.loc 1 933 0
 233 0054 6664     		str	r6, [r4, #68]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 234              		.loc 1 934 0
 235 0056 0025     		movs	r5, #0
 236              	.LVL22:
 237 0058 A564     		str	r5, [r4, #72]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 238              		.loc 1 938 0
 239 005a 201D     		adds	r0, r4, #4
 240 005c FFF7FEFF 		bl	vListInitialiseItem
 241              	.LVL23:
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242              		.loc 1 939 0
 243 0060 04F11800 		add	r0, r4, #24
 244 0064 FFF7FEFF 		bl	vListInitialiseItem
 245              	.LVL24:
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 246              		.loc 1 943 0
 247 0068 2461     		str	r4, [r4, #16]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 248              		.loc 1 946 0
 249 006a C6F10706 		rsb	r6, r6, #7
 250              	.LVL25:
 251 006e A661     		str	r6, [r4, #24]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 252              		.loc 1 947 0
 253 0070 6462     		str	r4, [r4, #36]
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 254              		.loc 1 957 0
 255 0072 E564     		str	r5, [r4, #76]
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 256              		.loc 1 989 0
 257 0074 2565     		str	r5, [r4, #80]
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 258              		.loc 1 990 0
 259 0076 84F85450 		strb	r5, [r4, #84]
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 260              		.loc 1 1053 0
 261 007a 5246     		mov	r2, r10
 262 007c 4946     		mov	r1, r9
 263 007e 3846     		mov	r0, r7
 264 0080 FFF7FEFF 		bl	pxPortInitialiseStack
 265              	.LVL26:
 266 0084 2060     		str	r0, [r4]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 267              		.loc 1 1059 0
 268 0086 B8F1000F 		cmp	r8, #0
 269 008a 01D0     		beq	.L17
ARM GAS  /tmp/ccaGl0eL.s 			page 78


1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 270              		.loc 1 1063 0
 271 008c C8F80040 		str	r4, [r8]
 272              	.L17:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 273              		.loc 1 1069 0
 274 0090 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 275              	.LVL27:
 276              	.L29:
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 277              		.loc 1 916 0
 278 0094 0023     		movs	r3, #0
 279 0096 84F83430 		strb	r3, [r4, #52]
 280 009a D7E7     		b	.L22
 281              		.cfi_endproc
 282              	.LFE7:
 284              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 285              		.align	1
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 289              		.fpu fpv5-sp-d16
 291              	prvInitialiseTaskLists:
 292              	.LFB41:
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 293              		.loc 1 3547 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297 0000 38B5     		push	{r3, r4, r5, lr}
 298              	.LCFI1:
 299              		.cfi_def_cfa_offset 16
 300              		.cfi_offset 3, -16
 301              		.cfi_offset 4, -12
 302              		.cfi_offset 5, -8
 303              		.cfi_offset 14, -4
 304              	.LVL28:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 305              		.loc 1 3550 0
 306 0002 0024     		movs	r4, #0
 307 0004 07E0     		b	.L31
 308              	.LVL29:
 309              	.L32:
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 310              		.loc 1 3552 0 discriminator 3
 311 0006 04EB8402 		add	r2, r4, r4, lsl #2
 312 000a 9300     		lsls	r3, r2, #2
 313 000c 0E48     		ldr	r0, .L34
 314 000e 1844     		add	r0, r0, r3
 315 0010 FFF7FEFF 		bl	vListInitialise
 316              	.LVL30:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 317              		.loc 1 3550 0 discriminator 3
 318 0014 0134     		adds	r4, r4, #1
 319              	.LVL31:
 320              	.L31:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccaGl0eL.s 			page 79


 321              		.loc 1 3550 0 is_stmt 0 discriminator 1
 322 0016 062C     		cmp	r4, #6
 323 0018 F5D9     		bls	.L32
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 324              		.loc 1 3555 0 is_stmt 1
 325 001a 0C4D     		ldr	r5, .L34+4
 326 001c 2846     		mov	r0, r5
 327 001e FFF7FEFF 		bl	vListInitialise
 328              	.LVL32:
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 329              		.loc 1 3556 0
 330 0022 0B4C     		ldr	r4, .L34+8
 331              	.LVL33:
 332 0024 2046     		mov	r0, r4
 333 0026 FFF7FEFF 		bl	vListInitialise
 334              	.LVL34:
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335              		.loc 1 3557 0
 336 002a 0A48     		ldr	r0, .L34+12
 337 002c FFF7FEFF 		bl	vListInitialise
 338              	.LVL35:
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 339              		.loc 1 3561 0
 340 0030 0948     		ldr	r0, .L34+16
 341 0032 FFF7FEFF 		bl	vListInitialise
 342              	.LVL36:
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 343              		.loc 1 3567 0
 344 0036 0948     		ldr	r0, .L34+20
 345 0038 FFF7FEFF 		bl	vListInitialise
 346              	.LVL37:
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 347              		.loc 1 3573 0
 348 003c 084B     		ldr	r3, .L34+24
 349 003e 1D60     		str	r5, [r3]
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 350              		.loc 1 3574 0
 351 0040 084B     		ldr	r3, .L34+28
 352 0042 1C60     		str	r4, [r3]
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 353              		.loc 1 3575 0
 354 0044 38BD     		pop	{r3, r4, r5, pc}
 355              	.L35:
 356 0046 00BF     		.align	2
 357              	.L34:
 358 0048 00000000 		.word	.LANCHOR4
 359 004c 00000000 		.word	.LANCHOR5
 360 0050 00000000 		.word	.LANCHOR6
 361 0054 00000000 		.word	.LANCHOR1
 362 0058 00000000 		.word	.LANCHOR7
 363 005c 00000000 		.word	.LANCHOR0
 364 0060 00000000 		.word	.LANCHOR2
 365 0064 00000000 		.word	.LANCHOR8
 366              		.cfi_endproc
 367              	.LFE41:
 369              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 370              		.align	1
ARM GAS  /tmp/ccaGl0eL.s 			page 80


 371              		.syntax unified
 372              		.thumb
 373              		.thumb_func
 374              		.fpu fpv5-sp-d16
 376              	prvAddNewTaskToReadyList:
 377              	.LFB8:
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 378              		.loc 1 1073 0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 0
 381              		@ frame_needed = 0, uses_anonymous_args = 0
 382              	.LVL38:
 383 0000 10B5     		push	{r4, lr}
 384              	.LCFI2:
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 4, -8
 387              		.cfi_offset 14, -4
 388 0002 0446     		mov	r4, r0
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 389              		.loc 1 1076 0
 390 0004 FFF7FEFF 		bl	vPortEnterCritical
 391              	.LVL39:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 392              		.loc 1 1078 0
 393 0008 204A     		ldr	r2, .L43
 394 000a 1368     		ldr	r3, [r2]
 395 000c 0133     		adds	r3, r3, #1
 396 000e 1360     		str	r3, [r2]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 397              		.loc 1 1079 0
 398 0010 1F4B     		ldr	r3, .L43+4
 399 0012 1B68     		ldr	r3, [r3]
 400 0014 5BB1     		cbz	r3, .L41
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 401              		.loc 1 1102 0
 402 0016 1F4B     		ldr	r3, .L43+8
 403 0018 1B68     		ldr	r3, [r3]
 404 001a 6BB9     		cbnz	r3, .L38
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 405              		.loc 1 1104 0
 406 001c 1C4B     		ldr	r3, .L43+4
 407 001e 1B68     		ldr	r3, [r3]
 408 0020 DA6A     		ldr	r2, [r3, #44]
 409 0022 E36A     		ldr	r3, [r4, #44]
 410 0024 9A42     		cmp	r2, r3
 411 0026 07D8     		bhi	.L38
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 412              		.loc 1 1106 0
 413 0028 194B     		ldr	r3, .L43+4
 414 002a 1C60     		str	r4, [r3]
 415 002c 04E0     		b	.L38
 416              	.L41:
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417              		.loc 1 1083 0
 418 002e 184B     		ldr	r3, .L43+4
 419 0030 1C60     		str	r4, [r3]
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccaGl0eL.s 			page 81


 420              		.loc 1 1085 0
 421 0032 1368     		ldr	r3, [r2]
 422 0034 012B     		cmp	r3, #1
 423 0036 26D0     		beq	.L42
 424              	.L38:
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425              		.loc 1 1119 0
 426 0038 174A     		ldr	r2, .L43+12
 427 003a 1368     		ldr	r3, [r2]
 428 003c 0133     		adds	r3, r3, #1
 429 003e 1360     		str	r3, [r2]
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 430              		.loc 1 1129 0
 431 0040 E36A     		ldr	r3, [r4, #44]
 432 0042 0122     		movs	r2, #1
 433 0044 9A40     		lsls	r2, r2, r3
 434 0046 1549     		ldr	r1, .L43+16
 435 0048 0868     		ldr	r0, [r1]
 436 004a 0243     		orrs	r2, r2, r0
 437 004c 0A60     		str	r2, [r1]
 438 004e 03EB8303 		add	r3, r3, r3, lsl #2
 439 0052 9A00     		lsls	r2, r3, #2
 440 0054 211D     		adds	r1, r4, #4
 441 0056 1248     		ldr	r0, .L43+20
 442 0058 1044     		add	r0, r0, r2
 443 005a FFF7FEFF 		bl	vListInsertEnd
 444              	.LVL40:
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 445              		.loc 1 1133 0
 446 005e FFF7FEFF 		bl	vPortExitCritical
 447              	.LVL41:
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 448              		.loc 1 1135 0
 449 0062 0C4B     		ldr	r3, .L43+8
 450 0064 1B68     		ldr	r3, [r3]
 451 0066 6BB1     		cbz	r3, .L36
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 452              		.loc 1 1139 0
 453 0068 094B     		ldr	r3, .L43+4
 454 006a 1B68     		ldr	r3, [r3]
 455 006c DA6A     		ldr	r2, [r3, #44]
 456 006e E36A     		ldr	r3, [r4, #44]
 457 0070 9A42     		cmp	r2, r3
 458 0072 07D2     		bcs	.L36
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 459              		.loc 1 1141 0
 460 0074 0B4B     		ldr	r3, .L43+24
 461 0076 4FF08052 		mov	r2, #268435456
 462 007a 1A60     		str	r2, [r3]
 463              		.syntax unified
 464              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 465 007c BFF34F8F 		dsb
 466              	@ 0 "" 2
 467              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 468 0080 BFF36F8F 		isb
 469              	@ 0 "" 2
 470              		.thumb
ARM GAS  /tmp/ccaGl0eL.s 			page 82


 471              		.syntax unified
 472              	.L36:
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 473              		.loc 1 1152 0
 474 0084 10BD     		pop	{r4, pc}
 475              	.LVL42:
 476              	.L42:
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 477              		.loc 1 1090 0
 478 0086 FFF7FEFF 		bl	prvInitialiseTaskLists
 479              	.LVL43:
 480 008a D5E7     		b	.L38
 481              	.L44:
 482              		.align	2
 483              	.L43:
 484 008c 00000000 		.word	.LANCHOR9
 485 0090 00000000 		.word	.LANCHOR10
 486 0094 00000000 		.word	.LANCHOR11
 487 0098 00000000 		.word	.LANCHOR12
 488 009c 00000000 		.word	.LANCHOR13
 489 00a0 00000000 		.word	.LANCHOR4
 490 00a4 04ED00E0 		.word	-536810236
 491              		.cfi_endproc
 492              	.LFE8:
 494              		.section	.text.prvDeleteTCB,"ax",%progbits
 495              		.align	1
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv5-sp-d16
 501              	prvDeleteTCB:
 502              	.LFB43:
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 503              		.loc 1 3827 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              	.LVL44:
 508 0000 10B5     		push	{r4, lr}
 509              	.LCFI3:
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 4, -8
 512              		.cfi_offset 14, -4
 513 0002 0446     		mov	r4, r0
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 514              		.loc 1 3853 0
 515 0004 90F85530 		ldrb	r3, [r0, #85]	@ zero_extendqisi2
 516 0008 33B9     		cbnz	r3, .L46
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 517              		.loc 1 3857 0
 518 000a 006B     		ldr	r0, [r0, #48]
 519              	.LVL45:
 520 000c FFF7FEFF 		bl	vPortFree
 521              	.LVL46:
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 522              		.loc 1 3858 0
 523 0010 2046     		mov	r0, r4
ARM GAS  /tmp/ccaGl0eL.s 			page 83


 524 0012 FFF7FEFF 		bl	vPortFree
 525              	.LVL47:
 526              	.L45:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527              		.loc 1 3875 0
 528 0016 10BD     		pop	{r4, pc}
 529              	.LVL48:
 530              	.L46:
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 531              		.loc 1 3860 0
 532 0018 012B     		cmp	r3, #1
 533 001a 0CD0     		beq	.L51
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 534              		.loc 1 3870 0
 535 001c 022B     		cmp	r3, #2
 536 001e FAD0     		beq	.L45
 537              	.LBB115:
 538              	.LBB116:
 539              		.loc 2 195 0
 540              		.syntax unified
 541              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 542 0020 4FF05003 			mov r3, #80												
 543 0024 72B6     		cpsid i													
 544 0026 83F31188 		msr basepri, r3											
 545 002a BFF36F8F 		isb														
 546 002e BFF34F8F 		dsb														
 547 0032 62B6     		cpsie i													
 548              	
 549              	@ 0 "" 2
 550              	.LVL49:
 551              		.thumb
 552              		.syntax unified
 553              	.L49:
 554 0034 FEE7     		b	.L49
 555              	.L51:
 556              	.LBE116:
 557              	.LBE115:
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 558              		.loc 1 3864 0
 559 0036 FFF7FEFF 		bl	vPortFree
 560              	.LVL50:
 561 003a ECE7     		b	.L45
 562              		.cfi_endproc
 563              	.LFE43:
 565              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 566              		.align	1
 567              		.syntax unified
 568              		.thumb
 569              		.thumb_func
 570              		.fpu fpv5-sp-d16
 572              	prvCheckTasksWaitingTermination:
 573              	.LFB42:
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574              		.loc 1 3579 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccaGl0eL.s 			page 84


 578              	.LBB117:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 579              		.loc 1 3589 0
 580 0000 0F4B     		ldr	r3, .L59
 581 0002 1B68     		ldr	r3, [r3]
 582 0004 D3B1     		cbz	r3, .L58
 583              	.LBE117:
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584              		.loc 1 3579 0
 585 0006 10B5     		push	{r4, lr}
 586              	.LCFI4:
 587              		.cfi_def_cfa_offset 8
 588              		.cfi_offset 4, -8
 589              		.cfi_offset 14, -4
 590              	.L54:
 591              	.LBB118:
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 592              		.loc 1 3591 0
 593 0008 FFF7FEFF 		bl	vPortEnterCritical
 594              	.LVL51:
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 595              		.loc 1 3593 0
 596 000c 0D4B     		ldr	r3, .L59+4
 597 000e DB68     		ldr	r3, [r3, #12]
 598 0010 DC68     		ldr	r4, [r3, #12]
 599              	.LVL52:
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 600              		.loc 1 3594 0
 601 0012 201D     		adds	r0, r4, #4
 602 0014 FFF7FEFF 		bl	uxListRemove
 603              	.LVL53:
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 604              		.loc 1 3595 0
 605 0018 0B4A     		ldr	r2, .L59+8
 606 001a 1368     		ldr	r3, [r2]
 607 001c 013B     		subs	r3, r3, #1
 608 001e 1360     		str	r3, [r2]
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 609              		.loc 1 3596 0
 610 0020 074A     		ldr	r2, .L59
 611 0022 1368     		ldr	r3, [r2]
 612 0024 013B     		subs	r3, r3, #1
 613 0026 1360     		str	r3, [r2]
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614              		.loc 1 3598 0
 615 0028 FFF7FEFF 		bl	vPortExitCritical
 616              	.LVL54:
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 617              		.loc 1 3600 0
 618 002c 2046     		mov	r0, r4
 619 002e FFF7FEFF 		bl	prvDeleteTCB
 620              	.LVL55:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 621              		.loc 1 3589 0
 622 0032 034B     		ldr	r3, .L59
 623 0034 1B68     		ldr	r3, [r3]
 624 0036 002B     		cmp	r3, #0
ARM GAS  /tmp/ccaGl0eL.s 			page 85


 625 0038 E6D1     		bne	.L54
 626              	.LBE118:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 627              		.loc 1 3604 0
 628 003a 10BD     		pop	{r4, pc}
 629              	.LVL56:
 630              	.L58:
 631              	.LCFI5:
 632              		.cfi_def_cfa_offset 0
 633              		.cfi_restore 4
 634              		.cfi_restore 14
 635 003c 7047     		bx	lr
 636              	.L60:
 637 003e 00BF     		.align	2
 638              	.L59:
 639 0040 00000000 		.word	.LANCHOR14
 640 0044 00000000 		.word	.LANCHOR7
 641 0048 00000000 		.word	.LANCHOR9
 642              		.cfi_endproc
 643              	.LFE42:
 645              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 646              		.align	1
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu fpv5-sp-d16
 652              	prvAddCurrentTaskToDelayedList:
 653              	.LFB58:
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccaGl0eL.s 			page 86


3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccaGl0eL.s 			page 87


3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccaGl0eL.s 			page 88


4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccaGl0eL.s 			page 89


4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
ARM GAS  /tmp/ccaGl0eL.s 			page 90


4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
ARM GAS  /tmp/ccaGl0eL.s 			page 91


4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/ccaGl0eL.s 			page 92


4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
ARM GAS  /tmp/ccaGl0eL.s 			page 93


4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
ARM GAS  /tmp/ccaGl0eL.s 			page 94


4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
ARM GAS  /tmp/ccaGl0eL.s 			page 95


4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  /tmp/ccaGl0eL.s 			page 96


4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 97


4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
ARM GAS  /tmp/ccaGl0eL.s 			page 98


4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccaGl0eL.s 			page 99


4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccaGl0eL.s 			page 100


4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 101


4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
ARM GAS  /tmp/ccaGl0eL.s 			page 102


4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
ARM GAS  /tmp/ccaGl0eL.s 			page 103


4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 104


4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccaGl0eL.s 			page 105


5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
ARM GAS  /tmp/ccaGl0eL.s 			page 106


5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 654              		.loc 1 5082 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 0
 657              		@ frame_needed = 0, uses_anonymous_args = 0
 658              	.LVL57:
 659 0000 70B5     		push	{r4, r5, r6, lr}
 660              	.LCFI6:
 661              		.cfi_def_cfa_offset 16
 662              		.cfi_offset 4, -16
 663              		.cfi_offset 5, -12
 664              		.cfi_offset 6, -8
 665              		.cfi_offset 14, -4
 666 0002 0446     		mov	r4, r0
 667 0004 0E46     		mov	r6, r1
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 668              		.loc 1 5084 0
 669 0006 1F4B     		ldr	r3, .L69
 670 0008 1D68     		ldr	r5, [r3]
 671              	.LVL58:
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 672              		.loc 1 5097 0
 673 000a 1F4B     		ldr	r3, .L69+4
 674 000c 1868     		ldr	r0, [r3]
 675              	.LVL59:
 676 000e 0430     		adds	r0, r0, #4
 677 0010 FFF7FEFF 		bl	uxListRemove
 678              	.LVL60:
 679 0014 50B9     		cbnz	r0, .L62
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
ARM GAS  /tmp/ccaGl0eL.s 			page 107


 680              		.loc 1 5101 0
 681 0016 1C4B     		ldr	r3, .L69+4
 682 0018 1B68     		ldr	r3, [r3]
 683 001a DA6A     		ldr	r2, [r3, #44]
 684 001c 0123     		movs	r3, #1
 685 001e 03FA02F2 		lsl	r2, r3, r2
 686 0022 1A49     		ldr	r1, .L69+8
 687 0024 0B68     		ldr	r3, [r1]
 688 0026 23EA0203 		bic	r3, r3, r2
 689 002a 0B60     		str	r3, [r1]
 690              	.L62:
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 691              		.loc 1 5110 0
 692 002c B4F1FF3F 		cmp	r4, #-1
 693 0030 14BF     		ite	ne
 694 0032 0023     		movne	r3, #0
 695 0034 0123     		moveq	r3, #1
 696 0036 002E     		cmp	r6, #0
 697 0038 08BF     		it	eq
 698 003a 0023     		moveq	r3, #0
 699 003c 9BB9     		cbnz	r3, .L67
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 700              		.loc 1 5122 0
 701 003e 2C44     		add	r4, r4, r5
 702              	.LVL61:
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 703              		.loc 1 5125 0
 704 0040 114B     		ldr	r3, .L69+4
 705 0042 1B68     		ldr	r3, [r3]
 706 0044 5C60     		str	r4, [r3, #4]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 707              		.loc 1 5127 0
 708 0046 A542     		cmp	r5, r4
 709 0048 14D8     		bhi	.L68
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccaGl0eL.s 			page 108


5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 710              		.loc 1 5137 0
 711 004a 114B     		ldr	r3, .L69+12
 712 004c 1868     		ldr	r0, [r3]
 713 004e 0E4B     		ldr	r3, .L69+4
 714 0050 1968     		ldr	r1, [r3]
 715 0052 0431     		adds	r1, r1, #4
 716 0054 FFF7FEFF 		bl	vListInsert
 717              	.LVL62:
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 718              		.loc 1 5142 0
 719 0058 0E4B     		ldr	r3, .L69+16
 720 005a 1B68     		ldr	r3, [r3]
 721 005c A342     		cmp	r3, r4
 722 005e 10D9     		bls	.L61
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 723              		.loc 1 5144 0
 724 0060 0C4B     		ldr	r3, .L69+16
 725 0062 1C60     		str	r4, [r3]
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccaGl0eL.s 			page 109


5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 726              		.loc 1 5190 0
 727 0064 0DE0     		b	.L61
 728              	.LVL63:
 729              	.L67:
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 730              		.loc 1 5115 0
 731 0066 084B     		ldr	r3, .L69+4
 732 0068 1968     		ldr	r1, [r3]
 733 006a 0431     		adds	r1, r1, #4
 734 006c 0A48     		ldr	r0, .L69+20
 735 006e FFF7FEFF 		bl	vListInsertEnd
 736              	.LVL64:
 737 0072 06E0     		b	.L61
 738              	.LVL65:
 739              	.L68:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 740              		.loc 1 5131 0
 741 0074 094B     		ldr	r3, .L69+24
 742 0076 1868     		ldr	r0, [r3]
 743 0078 034B     		ldr	r3, .L69+4
 744 007a 1968     		ldr	r1, [r3]
 745 007c 0431     		adds	r1, r1, #4
 746 007e FFF7FEFF 		bl	vListInsert
 747              	.LVL66:
 748              	.L61:
 749              		.loc 1 5190 0
 750 0082 70BD     		pop	{r4, r5, r6, pc}
 751              	.LVL67:
 752              	.L70:
 753              		.align	2
 754              	.L69:
 755 0084 00000000 		.word	.LANCHOR15
 756 0088 00000000 		.word	.LANCHOR10
 757 008c 00000000 		.word	.LANCHOR13
 758 0090 00000000 		.word	.LANCHOR2
 759 0094 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/ccaGl0eL.s 			page 110


 760 0098 00000000 		.word	.LANCHOR0
 761 009c 00000000 		.word	.LANCHOR8
 762              		.cfi_endproc
 763              	.LFE58:
 765              		.section	.text.prvIdleTask,"ax",%progbits
 766              		.align	1
 767              		.syntax unified
 768              		.thumb
 769              		.thumb_func
 770              		.fpu fpv5-sp-d16
 772              	prvIdleTask:
 773              	.LFB40:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 774              		.loc 1 3335 0
 775              		.cfi_startproc
 776              		@ Volatile: function does not return.
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              	.LVL68:
 780 0000 08B5     		push	{r3, lr}
 781              	.LCFI7:
 782              		.cfi_def_cfa_offset 8
 783              		.cfi_offset 3, -8
 784              		.cfi_offset 14, -4
 785 0002 01E0     		b	.L73
 786              	.LVL69:
 787              	.L72:
 788              	.LBB119:
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 789              		.loc 1 3394 0
 790 0004 FFF7FEFF 		bl	vApplicationIdleHook
 791              	.LVL70:
 792              	.L73:
 793              	.LBE119:
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 794              		.loc 1 3351 0
 795 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 796              	.LVL71:
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 797              		.loc 1 3374 0
 798 000c 064B     		ldr	r3, .L75
 799 000e 1B68     		ldr	r3, [r3]
 800 0010 012B     		cmp	r3, #1
 801 0012 F7D9     		bls	.L72
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 802              		.loc 1 3376 0
 803 0014 054B     		ldr	r3, .L75+4
 804 0016 4FF08052 		mov	r2, #268435456
 805 001a 1A60     		str	r2, [r3]
 806              		.syntax unified
 807              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 808 001c BFF34F8F 		dsb
 809              	@ 0 "" 2
 810              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 811 0020 BFF36F8F 		isb
 812              	@ 0 "" 2
 813              		.thumb
ARM GAS  /tmp/ccaGl0eL.s 			page 111


 814              		.syntax unified
 815 0024 EEE7     		b	.L72
 816              	.L76:
 817 0026 00BF     		.align	2
 818              	.L75:
 819 0028 00000000 		.word	.LANCHOR4
 820 002c 04ED00E0 		.word	-536810236
 821              		.cfi_endproc
 822              	.LFE40:
 824              		.section	.text.xTaskCreateStatic,"ax",%progbits
 825              		.align	1
 826              		.global	xTaskCreateStatic
 827              		.syntax unified
 828              		.thumb
 829              		.thumb_func
 830              		.fpu fpv5-sp-d16
 832              	xTaskCreateStatic:
 833              	.LFB5:
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 834              		.loc 1 585 0
 835              		.cfi_startproc
 836              		@ args = 12, pretend = 0, frame = 8
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              	.LVL72:
 839 0000 70B5     		push	{r4, r5, r6, lr}
 840              	.LCFI8:
 841              		.cfi_def_cfa_offset 16
 842              		.cfi_offset 4, -16
 843              		.cfi_offset 5, -12
 844              		.cfi_offset 6, -8
 845              		.cfi_offset 14, -4
 846 0002 86B0     		sub	sp, sp, #24
 847              	.LCFI9:
 848              		.cfi_def_cfa_offset 40
 849 0004 0B9D     		ldr	r5, [sp, #44]
 850 0006 0C9C     		ldr	r4, [sp, #48]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 851              		.loc 1 589 0
 852 0008 55B9     		cbnz	r5, .L78
 853              	.LBB120:
 854              	.LBB121:
 855              		.loc 2 195 0
 856              		.syntax unified
 857              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 858 000a 4FF05003 			mov r3, #80												
 859 000e 72B6     		cpsid i													
 860 0010 83F31188 		msr basepri, r3											
 861 0014 BFF36F8F 		isb														
 862 0018 BFF34F8F 		dsb														
 863 001c 62B6     		cpsie i													
 864              	
 865              	@ 0 "" 2
 866              	.LVL73:
 867              		.thumb
 868              		.syntax unified
 869              	.L79:
 870 001e FEE7     		b	.L79
ARM GAS  /tmp/ccaGl0eL.s 			page 112


 871              	.LVL74:
 872              	.L78:
 873              	.LBE121:
 874              	.LBE120:
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875              		.loc 1 590 0
 876 0020 54B9     		cbnz	r4, .L80
 877              	.LBB122:
 878              	.LBB123:
 879              		.loc 2 195 0
 880              		.syntax unified
 881              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 882 0022 4FF05003 			mov r3, #80												
 883 0026 72B6     		cpsid i													
 884 0028 83F31188 		msr basepri, r3											
 885 002c BFF36F8F 		isb														
 886 0030 BFF34F8F 		dsb														
 887 0034 62B6     		cpsie i													
 888              	
 889              	@ 0 "" 2
 890              	.LVL75:
 891              		.thumb
 892              		.syntax unified
 893              	.L81:
 894 0036 FEE7     		b	.L81
 895              	.LVL76:
 896              	.L80:
 897              	.LBE123:
 898              	.LBE122:
 899              	.LBB124:
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 900              		.loc 1 597 0
 901 0038 5826     		movs	r6, #88
 902 003a 0496     		str	r6, [sp, #16]
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 903              		.loc 1 598 0
 904 003c 049E     		ldr	r6, [sp, #16]
 905 003e 582E     		cmp	r6, #88
 906 0040 0AD0     		beq	.L82
 907              	.LBB125:
 908              	.LBB126:
 909              		.loc 2 195 0
 910              		.syntax unified
 911              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 912 0042 4FF05003 			mov r3, #80												
 913 0046 72B6     		cpsid i													
 914 0048 83F31188 		msr basepri, r3											
 915 004c BFF36F8F 		isb														
 916 0050 BFF34F8F 		dsb														
 917 0054 62B6     		cpsie i													
 918              	
 919              	@ 0 "" 2
 920              	.LVL77:
 921              		.thumb
 922              		.syntax unified
 923              	.L83:
 924 0056 FEE7     		b	.L83
ARM GAS  /tmp/ccaGl0eL.s 			page 113


 925              	.LVL78:
 926              	.L82:
 927              	.LBE126:
 928              	.LBE125:
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 929              		.loc 1 599 0
 930 0058 049E     		ldr	r6, [sp, #16]
 931              	.LVL79:
 932              	.LBE124:
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933              		.loc 1 609 0
 934 005a 2563     		str	r5, [r4, #48]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 935              		.loc 1 615 0
 936 005c 0225     		movs	r5, #2
 937 005e 84F85550 		strb	r5, [r4, #85]
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 938              		.loc 1 619 0
 939 0062 0025     		movs	r5, #0
 940 0064 0395     		str	r5, [sp, #12]
 941 0066 0294     		str	r4, [sp, #8]
 942 0068 05AD     		add	r5, sp, #20
 943 006a 0195     		str	r5, [sp, #4]
 944 006c 0A9D     		ldr	r5, [sp, #40]
 945 006e 0095     		str	r5, [sp]
 946 0070 FFF7FEFF 		bl	prvInitialiseNewTask
 947              	.LVL80:
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 948              		.loc 1 620 0
 949 0074 2046     		mov	r0, r4
 950 0076 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 951              	.LVL81:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952              		.loc 1 628 0
 953 007a 0598     		ldr	r0, [sp, #20]
 954 007c 06B0     		add	sp, sp, #24
 955              	.LCFI10:
 956              		.cfi_def_cfa_offset 16
 957              		@ sp needed
 958 007e 70BD     		pop	{r4, r5, r6, pc}
 959              		.cfi_endproc
 960              	.LFE5:
 962              		.section	.text.xTaskCreate,"ax",%progbits
 963              		.align	1
 964              		.global	xTaskCreate
 965              		.syntax unified
 966              		.thumb
 967              		.thumb_func
 968              		.fpu fpv5-sp-d16
 970              	xTaskCreate:
 971              	.LFB6:
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 972              		.loc 1 736 0
 973              		.cfi_startproc
 974              		@ args = 8, pretend = 0, frame = 0
 975              		@ frame_needed = 0, uses_anonymous_args = 0
 976              	.LVL82:
ARM GAS  /tmp/ccaGl0eL.s 			page 114


 977 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 978              	.LCFI11:
 979              		.cfi_def_cfa_offset 28
 980              		.cfi_offset 4, -28
 981              		.cfi_offset 5, -24
 982              		.cfi_offset 6, -20
 983              		.cfi_offset 7, -16
 984              		.cfi_offset 8, -12
 985              		.cfi_offset 9, -8
 986              		.cfi_offset 14, -4
 987 0004 85B0     		sub	sp, sp, #20
 988              	.LCFI12:
 989              		.cfi_def_cfa_offset 48
 990 0006 0746     		mov	r7, r0
 991 0008 8846     		mov	r8, r1
 992 000a 1546     		mov	r5, r2
 993 000c 9946     		mov	r9, r3
 994              	.LBB127:
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 995              		.loc 1 770 0
 996 000e 9000     		lsls	r0, r2, #2
 997              	.LVL83:
 998 0010 FFF7FEFF 		bl	pvPortMalloc
 999              	.LVL84:
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1000              		.loc 1 772 0
 1001 0014 08B3     		cbz	r0, .L89
 1002 0016 0646     		mov	r6, r0
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1003              		.loc 1 775 0
 1004 0018 5820     		movs	r0, #88
 1005              	.LVL85:
 1006 001a FFF7FEFF 		bl	pvPortMalloc
 1007              	.LVL86:
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1008              		.loc 1 777 0
 1009 001e 0446     		mov	r4, r0
 1010 0020 B8B1     		cbz	r0, .L87
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1011              		.loc 1 780 0
 1012 0022 0663     		str	r6, [r0, #48]
 1013              	.LVL87:
 1014              	.L88:
 1015              	.LBE127:
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1016              		.loc 1 796 0
 1017 0024 E4B1     		cbz	r4, .L90
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1018              		.loc 1 802 0
 1019 0026 0023     		movs	r3, #0
 1020 0028 84F85530 		strb	r3, [r4, #85]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1021              		.loc 1 806 0
 1022 002c 0393     		str	r3, [sp, #12]
 1023 002e 0294     		str	r4, [sp, #8]
 1024 0030 0D9B     		ldr	r3, [sp, #52]
 1025 0032 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccaGl0eL.s 			page 115


 1026 0034 0C9B     		ldr	r3, [sp, #48]
 1027 0036 0093     		str	r3, [sp]
 1028 0038 4B46     		mov	r3, r9
 1029 003a 2A46     		mov	r2, r5
 1030 003c 4146     		mov	r1, r8
 1031 003e 3846     		mov	r0, r7
 1032 0040 FFF7FEFF 		bl	prvInitialiseNewTask
 1033              	.LVL88:
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1034              		.loc 1 807 0
 1035 0044 2046     		mov	r0, r4
 1036 0046 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1037              	.LVL89:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1038              		.loc 1 808 0
 1039 004a 0120     		movs	r0, #1
 1040              	.LVL90:
 1041              	.L85:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1042              		.loc 1 816 0
 1043 004c 05B0     		add	sp, sp, #20
 1044              	.LCFI13:
 1045              		.cfi_remember_state
 1046              		.cfi_def_cfa_offset 28
 1047              		@ sp needed
 1048 004e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1049              	.LVL91:
 1050              	.L87:
 1051              	.LCFI14:
 1052              		.cfi_restore_state
 1053              	.LBB128:
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1054              		.loc 1 786 0
 1055 0052 3046     		mov	r0, r6
 1056              	.LVL92:
 1057 0054 FFF7FEFF 		bl	vPortFree
 1058              	.LVL93:
 1059 0058 E4E7     		b	.L88
 1060              	.LVL94:
 1061              	.L89:
 1062              	.LBE128:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1063              		.loc 1 812 0
 1064 005a 4FF0FF30 		mov	r0, #-1
 1065              	.LVL95:
 1066 005e F5E7     		b	.L85
 1067              	.LVL96:
 1068              	.L90:
 1069 0060 4FF0FF30 		mov	r0, #-1
 1070              	.LVL97:
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1071              		.loc 1 815 0
 1072 0064 F2E7     		b	.L85
 1073              		.cfi_endproc
 1074              	.LFE6:
 1076              		.section	.text.vTaskDelete,"ax",%progbits
 1077              		.align	1
ARM GAS  /tmp/ccaGl0eL.s 			page 116


 1078              		.global	vTaskDelete
 1079              		.syntax unified
 1080              		.thumb
 1081              		.thumb_func
 1082              		.fpu fpv5-sp-d16
 1084              	vTaskDelete:
 1085              	.LFB9:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1086              		.loc 1 1158 0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 0
 1089              		@ frame_needed = 0, uses_anonymous_args = 0
 1090              	.LVL98:
 1091 0000 38B5     		push	{r3, r4, r5, lr}
 1092              	.LCFI15:
 1093              		.cfi_def_cfa_offset 16
 1094              		.cfi_offset 3, -16
 1095              		.cfi_offset 4, -12
 1096              		.cfi_offset 5, -8
 1097              		.cfi_offset 14, -4
 1098 0002 0446     		mov	r4, r0
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1099              		.loc 1 1161 0
 1100 0004 FFF7FEFF 		bl	vPortEnterCritical
 1101              	.LVL99:
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1102              		.loc 1 1165 0
 1103 0008 002C     		cmp	r4, #0
 1104 000a 34D0     		beq	.L102
 1105              	.LVL100:
 1106              	.L93:
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1107              		.loc 1 1168 0 discriminator 4
 1108 000c 251D     		adds	r5, r4, #4
 1109 000e 2846     		mov	r0, r5
 1110 0010 FFF7FEFF 		bl	uxListRemove
 1111              	.LVL101:
 1112 0014 70B9     		cbnz	r0, .L94
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1113              		.loc 1 1170 0
 1114 0016 E26A     		ldr	r2, [r4, #44]
 1115 0018 02EB8201 		add	r1, r2, r2, lsl #2
 1116 001c 8B00     		lsls	r3, r1, #2
 1117 001e 2749     		ldr	r1, .L105
 1118 0020 CB58     		ldr	r3, [r1, r3]
 1119 0022 3BB9     		cbnz	r3, .L94
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1120              		.loc 1 1170 0 is_stmt 0 discriminator 1
 1121 0024 0123     		movs	r3, #1
 1122 0026 03FA02F2 		lsl	r2, r3, r2
 1123 002a 2549     		ldr	r1, .L105+4
 1124 002c 0B68     		ldr	r3, [r1]
 1125 002e 23EA0203 		bic	r3, r3, r2
 1126 0032 0B60     		str	r3, [r1]
 1127              	.L94:
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1128              		.loc 1 1178 0 is_stmt 1
ARM GAS  /tmp/ccaGl0eL.s 			page 117


 1129 0034 A36A     		ldr	r3, [r4, #40]
 1130 0036 1BB1     		cbz	r3, .L95
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1131              		.loc 1 1180 0
 1132 0038 04F11800 		add	r0, r4, #24
 1133 003c FFF7FEFF 		bl	uxListRemove
 1134              	.LVL102:
 1135              	.L95:
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1136              		.loc 1 1191 0
 1137 0040 204A     		ldr	r2, .L105+8
 1138 0042 1368     		ldr	r3, [r2]
 1139 0044 0133     		adds	r3, r3, #1
 1140 0046 1360     		str	r3, [r2]
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1141              		.loc 1 1193 0
 1142 0048 1F4B     		ldr	r3, .L105+12
 1143 004a 1B68     		ldr	r3, [r3]
 1144 004c A342     		cmp	r3, r4
 1145 004e 15D0     		beq	.L103
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1146              		.loc 1 1216 0
 1147 0050 1E4A     		ldr	r2, .L105+16
 1148 0052 1368     		ldr	r3, [r2]
 1149 0054 013B     		subs	r3, r3, #1
 1150 0056 1360     		str	r3, [r2]
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1151              		.loc 1 1217 0
 1152 0058 2046     		mov	r0, r4
 1153 005a FFF7FEFF 		bl	prvDeleteTCB
 1154              	.LVL103:
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1155              		.loc 1 1221 0
 1156 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1157              	.LVL104:
 1158              	.L97:
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1159              		.loc 1 1226 0
 1160 0062 FFF7FEFF 		bl	vPortExitCritical
 1161              	.LVL105:
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1162              		.loc 1 1230 0
 1163 0066 1A4B     		ldr	r3, .L105+20
 1164 0068 1B68     		ldr	r3, [r3]
 1165 006a 1BB1     		cbz	r3, .L92
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1166              		.loc 1 1232 0
 1167 006c 164B     		ldr	r3, .L105+12
 1168 006e 1B68     		ldr	r3, [r3]
 1169 0070 A342     		cmp	r3, r4
 1170 0072 0CD0     		beq	.L104
 1171              	.L92:
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1172              		.loc 1 1242 0
 1173 0074 38BD     		pop	{r3, r4, r5, pc}
 1174              	.LVL106:
 1175              	.L102:
ARM GAS  /tmp/ccaGl0eL.s 			page 118


1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1176              		.loc 1 1165 0 discriminator 1
 1177 0076 144B     		ldr	r3, .L105+12
 1178 0078 1C68     		ldr	r4, [r3]
 1179              	.LVL107:
 1180 007a C7E7     		b	.L93
 1181              	.LVL108:
 1182              	.L103:
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1183              		.loc 1 1200 0
 1184 007c 2946     		mov	r1, r5
 1185 007e 1548     		ldr	r0, .L105+24
 1186 0080 FFF7FEFF 		bl	vListInsertEnd
 1187              	.LVL109:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1188              		.loc 1 1205 0
 1189 0084 144A     		ldr	r2, .L105+28
 1190 0086 1368     		ldr	r3, [r2]
 1191 0088 0133     		adds	r3, r3, #1
 1192 008a 1360     		str	r3, [r2]
 1193 008c E9E7     		b	.L97
 1194              	.L104:
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1195              		.loc 1 1234 0
 1196 008e 134B     		ldr	r3, .L105+32
 1197 0090 1B68     		ldr	r3, [r3]
 1198 0092 53B1     		cbz	r3, .L99
 1199              	.LBB129:
 1200              	.LBB130:
 1201              		.loc 2 195 0
 1202              		.syntax unified
 1203              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1204 0094 4FF05003 			mov r3, #80												
 1205 0098 72B6     		cpsid i													
 1206 009a 83F31188 		msr basepri, r3											
 1207 009e BFF36F8F 		isb														
 1208 00a2 BFF34F8F 		dsb														
 1209 00a6 62B6     		cpsie i													
 1210              	
 1211              	@ 0 "" 2
 1212              	.LVL110:
 1213              		.thumb
 1214              		.syntax unified
 1215              	.L100:
 1216 00a8 FEE7     		b	.L100
 1217              	.L99:
 1218              	.LBE130:
 1219              	.LBE129:
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1220              		.loc 1 1235 0
 1221 00aa 0D4B     		ldr	r3, .L105+36
 1222 00ac 4FF08052 		mov	r2, #268435456
 1223 00b0 1A60     		str	r2, [r3]
 1224              		.syntax unified
 1225              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1226 00b2 BFF34F8F 		dsb
 1227              	@ 0 "" 2
ARM GAS  /tmp/ccaGl0eL.s 			page 119


 1228              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1229 00b6 BFF36F8F 		isb
 1230              	@ 0 "" 2
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1231              		.loc 1 1242 0
 1232              		.thumb
 1233              		.syntax unified
 1234 00ba DBE7     		b	.L92
 1235              	.L106:
 1236              		.align	2
 1237              	.L105:
 1238 00bc 00000000 		.word	.LANCHOR4
 1239 00c0 00000000 		.word	.LANCHOR13
 1240 00c4 00000000 		.word	.LANCHOR12
 1241 00c8 00000000 		.word	.LANCHOR10
 1242 00cc 00000000 		.word	.LANCHOR9
 1243 00d0 00000000 		.word	.LANCHOR11
 1244 00d4 00000000 		.word	.LANCHOR7
 1245 00d8 00000000 		.word	.LANCHOR14
 1246 00dc 00000000 		.word	.LANCHOR16
 1247 00e0 04ED00E0 		.word	-536810236
 1248              		.cfi_endproc
 1249              	.LFE9:
 1251              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1252              		.align	1
 1253              		.global	uxTaskPriorityGet
 1254              		.syntax unified
 1255              		.thumb
 1256              		.thumb_func
 1257              		.fpu fpv5-sp-d16
 1259              	uxTaskPriorityGet:
 1260              	.LFB11:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1261              		.loc 1 1471 0
 1262              		.cfi_startproc
 1263              		@ args = 0, pretend = 0, frame = 0
 1264              		@ frame_needed = 0, uses_anonymous_args = 0
 1265              	.LVL111:
 1266 0000 10B5     		push	{r4, lr}
 1267              	.LCFI16:
 1268              		.cfi_def_cfa_offset 8
 1269              		.cfi_offset 4, -8
 1270              		.cfi_offset 14, -4
 1271 0002 0446     		mov	r4, r0
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1272              		.loc 1 1475 0
 1273 0004 FFF7FEFF 		bl	vPortEnterCritical
 1274              	.LVL112:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1275              		.loc 1 1479 0
 1276 0008 24B1     		cbz	r4, .L110
 1277              	.LVL113:
 1278              	.L108:
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1279              		.loc 1 1480 0 discriminator 4
 1280 000a E46A     		ldr	r4, [r4, #44]
 1281              	.LVL114:
ARM GAS  /tmp/ccaGl0eL.s 			page 120


1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1282              		.loc 1 1482 0 discriminator 4
 1283 000c FFF7FEFF 		bl	vPortExitCritical
 1284              	.LVL115:
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1285              		.loc 1 1485 0 discriminator 4
 1286 0010 2046     		mov	r0, r4
 1287 0012 10BD     		pop	{r4, pc}
 1288              	.LVL116:
 1289              	.L110:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1290              		.loc 1 1479 0 discriminator 1
 1291 0014 014B     		ldr	r3, .L111
 1292 0016 1C68     		ldr	r4, [r3]
 1293              	.LVL117:
 1294 0018 F7E7     		b	.L108
 1295              	.L112:
 1296 001a 00BF     		.align	2
 1297              	.L111:
 1298 001c 00000000 		.word	.LANCHOR10
 1299              		.cfi_endproc
 1300              	.LFE11:
 1302              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1303              		.align	1
 1304              		.global	uxTaskPriorityGetFromISR
 1305              		.syntax unified
 1306              		.thumb
 1307              		.thumb_func
 1308              		.fpu fpv5-sp-d16
 1310              	uxTaskPriorityGetFromISR:
 1311              	.LFB12:
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1312              		.loc 1 1493 0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 0
 1315              		@ frame_needed = 0, uses_anonymous_args = 0
 1316              	.LVL118:
 1317 0000 10B5     		push	{r4, lr}
 1318              	.LCFI17:
 1319              		.cfi_def_cfa_offset 8
 1320              		.cfi_offset 4, -8
 1321              		.cfi_offset 14, -4
 1322 0002 0446     		mov	r4, r0
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1323              		.loc 1 1513 0
 1324 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1325              	.LVL119:
 1326              	.LBB131:
 1327              	.LBB132:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0											\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
ARM GAS  /tmp/ccaGl0eL.s 			page 121


 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 1328              		.loc 2 213 0
 1329              		.syntax unified
 1330              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1331 0008 EFF31183 			mrs r3, basepri											
 1332 000c 4FF05002 		mov r2, #80												
 1333 0010 72B6     		cpsid i													
 1334 0012 82F31188 		msr basepri, r2											
 1335 0016 BFF36F8F 		isb														
 1336 001a BFF34F8F 		dsb														
 1337 001e 62B6     		cpsie i													
 1338              	
 1339              	@ 0 "" 2
 1340              		.thumb
 1341              		.syntax unified
 1342              	.LBE132:
 1343              	.LBE131:
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1344              		.loc 1 1519 0
 1345 0020 1CB1     		cbz	r4, .L116
 1346              	.LVL120:
 1347              	.L114:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1348              		.loc 1 1520 0 discriminator 4
 1349 0022 E06A     		ldr	r0, [r4, #44]
 1350              	.LVL121:
 1351              	.LBB133:
 1352              	.LBB134:
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %1, %2												\n"	\
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %1											\n" \
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	warnings. */
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return ulOriginalBASEPRI;
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
ARM GAS  /tmp/ccaGl0eL.s 			page 122


 1353              		.loc 2 233 0 discriminator 4
 1354              		.syntax unified
 1355              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1356 0024 83F31188 			msr basepri, r3	
 1357              	@ 0 "" 2
 1358              	.LVL122:
 1359              		.thumb
 1360              		.syntax unified
 1361              	.LBE134:
 1362              	.LBE133:
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1363              		.loc 1 1525 0 discriminator 4
 1364 0028 10BD     		pop	{r4, pc}
 1365              	.LVL123:
 1366              	.L116:
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1367              		.loc 1 1519 0 discriminator 1
 1368 002a 014A     		ldr	r2, .L117
 1369 002c 1468     		ldr	r4, [r2]
 1370              	.LVL124:
 1371 002e F8E7     		b	.L114
 1372              	.L118:
 1373              		.align	2
 1374              	.L117:
 1375 0030 00000000 		.word	.LANCHOR10
 1376              		.cfi_endproc
 1377              	.LFE12:
 1379              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1380              		.align	1
 1381              		.global	vTaskPrioritySet
 1382              		.syntax unified
 1383              		.thumb
 1384              		.thumb_func
 1385              		.fpu fpv5-sp-d16
 1387              	vTaskPrioritySet:
 1388              	.LFB13:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1389              		.loc 1 1533 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 0
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393              	.LVL125:
 1394 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1395              	.LCFI18:
 1396              		.cfi_def_cfa_offset 24
 1397              		.cfi_offset 3, -24
 1398              		.cfi_offset 4, -20
 1399              		.cfi_offset 5, -16
 1400              		.cfi_offset 6, -12
 1401              		.cfi_offset 7, -8
 1402              		.cfi_offset 14, -4
 1403              	.LVL126:
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1404              		.loc 1 1538 0
 1405 0002 0629     		cmp	r1, #6
 1406 0004 0AD9     		bls	.L120
 1407              	.LBB135:
ARM GAS  /tmp/ccaGl0eL.s 			page 123


 1408              	.LBB136:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1409              		.loc 2 195 0
 1410              		.syntax unified
 1411              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1412 0006 4FF05003 			mov r3, #80												
 1413 000a 72B6     		cpsid i													
 1414 000c 83F31188 		msr basepri, r3											
 1415 0010 BFF36F8F 		isb														
 1416 0014 BFF34F8F 		dsb														
 1417 0018 62B6     		cpsie i													
 1418              	
 1419              	@ 0 "" 2
 1420              	.LVL127:
 1421              		.thumb
 1422              		.syntax unified
 1423              	.L121:
 1424 001a FEE7     		b	.L121
 1425              	.L120:
 1426 001c 0446     		mov	r4, r0
 1427 001e 0D46     		mov	r5, r1
 1428              	.LVL128:
 1429              	.LBE136:
 1430              	.LBE135:
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1431              		.loc 1 1550 0
 1432 0020 FFF7FEFF 		bl	vPortEnterCritical
 1433              	.LVL129:
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1434              		.loc 1 1554 0
 1435 0024 0CB9     		cbnz	r4, .L122
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1436              		.loc 1 1554 0 is_stmt 0 discriminator 1
 1437 0026 2A4B     		ldr	r3, .L134
 1438 0028 1C68     		ldr	r4, [r3]
 1439              	.LVL130:
 1440              	.L122:
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1441              		.loc 1 1560 0 is_stmt 1 discriminator 4
 1442 002a 636C     		ldr	r3, [r4, #68]
 1443              	.LVL131:
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1444              		.loc 1 1568 0 discriminator 4
 1445 002c 9D42     		cmp	r5, r3
 1446 002e 40D0     		beq	.L123
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1447              		.loc 1 1572 0
 1448 0030 42D9     		bls	.L124
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1449              		.loc 1 1574 0
 1450 0032 274A     		ldr	r2, .L134
 1451 0034 1268     		ldr	r2, [r2]
 1452 0036 A242     		cmp	r2, r4
 1453 0038 44D0     		beq	.L130
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1454              		.loc 1 1579 0
 1455 003a 254A     		ldr	r2, .L134
ARM GAS  /tmp/ccaGl0eL.s 			page 124


 1456 003c 1268     		ldr	r2, [r2]
 1457 003e D26A     		ldr	r2, [r2, #44]
 1458 0040 AA42     		cmp	r2, r5
 1459 0042 41D9     		bls	.L131
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1460              		.loc 1 1536 0
 1461 0044 0026     		movs	r6, #0
 1462              	.L125:
 1463              	.LVL132:
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1464              		.loc 1 1612 0
 1465 0046 E76A     		ldr	r7, [r4, #44]
 1466              	.LVL133:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1467              		.loc 1 1618 0
 1468 0048 BB42     		cmp	r3, r7
 1469 004a 00D1     		bne	.L126
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1470              		.loc 1 1620 0
 1471 004c E562     		str	r5, [r4, #44]
 1472              	.L126:
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1473              		.loc 1 1628 0
 1474 004e 6564     		str	r5, [r4, #68]
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1475              		.loc 1 1638 0
 1476 0050 A369     		ldr	r3, [r4, #24]
 1477              	.LVL134:
 1478 0052 002B     		cmp	r3, #0
 1479 0054 02DB     		blt	.L127
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1480              		.loc 1 1640 0
 1481 0056 C5F10705 		rsb	r5, r5, #7
 1482              	.LVL135:
 1483 005a A561     		str	r5, [r4, #24]
 1484              	.L127:
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1485              		.loc 1 1651 0
 1486 005c 6269     		ldr	r2, [r4, #20]
 1487 005e 1D49     		ldr	r1, .L134+4
 1488 0060 1423     		movs	r3, #20
 1489 0062 03FB0713 		mla	r3, r3, r7, r1
 1490 0066 9A42     		cmp	r2, r3
 1491 0068 1AD1     		bne	.L128
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1492              		.loc 1 1656 0
 1493 006a 251D     		adds	r5, r4, #4
 1494 006c 2846     		mov	r0, r5
 1495 006e FFF7FEFF 		bl	uxListRemove
 1496              	.LVL136:
 1497 0072 38B9     		cbnz	r0, .L129
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1498              		.loc 1 1661 0
 1499 0074 0123     		movs	r3, #1
 1500 0076 03FA07F2 		lsl	r2, r3, r7
 1501 007a 1749     		ldr	r1, .L134+8
 1502 007c 0B68     		ldr	r3, [r1]
ARM GAS  /tmp/ccaGl0eL.s 			page 125


 1503 007e 23EA0203 		bic	r3, r3, r2
 1504 0082 0B60     		str	r3, [r1]
 1505              	.L129:
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1506              		.loc 1 1667 0
 1507 0084 E26A     		ldr	r2, [r4, #44]
 1508 0086 0123     		movs	r3, #1
 1509 0088 9340     		lsls	r3, r3, r2
 1510 008a 1349     		ldr	r1, .L134+8
 1511 008c 0868     		ldr	r0, [r1]
 1512 008e 0343     		orrs	r3, r3, r0
 1513 0090 0B60     		str	r3, [r1]
 1514 0092 2946     		mov	r1, r5
 1515 0094 0F4B     		ldr	r3, .L134+4
 1516 0096 1420     		movs	r0, #20
 1517 0098 00FB0230 		mla	r0, r0, r2, r3
 1518 009c FFF7FEFF 		bl	vListInsertEnd
 1519              	.LVL137:
 1520              	.L128:
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1521              		.loc 1 1674 0
 1522 00a0 3EB1     		cbz	r6, .L123
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1523              		.loc 1 1676 0
 1524 00a2 0E4B     		ldr	r3, .L134+12
 1525 00a4 4FF08052 		mov	r2, #268435456
 1526 00a8 1A60     		str	r2, [r3]
 1527              		.syntax unified
 1528              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1529 00aa BFF34F8F 		dsb
 1530              	@ 0 "" 2
 1531              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1532 00ae BFF36F8F 		isb
 1533              	@ 0 "" 2
 1534              	.LVL138:
 1535              		.thumb
 1536              		.syntax unified
 1537              	.L123:
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1538              		.loc 1 1688 0
 1539 00b2 FFF7FEFF 		bl	vPortExitCritical
 1540              	.LVL139:
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1541              		.loc 1 1689 0
 1542 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1543              	.LVL140:
 1544              	.L124:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1545              		.loc 1 1595 0
 1546 00b8 054A     		ldr	r2, .L134
 1547 00ba 1268     		ldr	r2, [r2]
 1548 00bc A242     		cmp	r2, r4
 1549 00be 05D0     		beq	.L132
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1550              		.loc 1 1536 0
 1551 00c0 0026     		movs	r6, #0
 1552 00c2 C0E7     		b	.L125
ARM GAS  /tmp/ccaGl0eL.s 			page 126


 1553              	.L130:
 1554 00c4 0026     		movs	r6, #0
 1555 00c6 BEE7     		b	.L125
 1556              	.L131:
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1557              		.loc 1 1581 0
 1558 00c8 0126     		movs	r6, #1
 1559 00ca BCE7     		b	.L125
 1560              	.L132:
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1561              		.loc 1 1600 0
 1562 00cc 0126     		movs	r6, #1
 1563 00ce BAE7     		b	.L125
 1564              	.L135:
 1565              		.align	2
 1566              	.L134:
 1567 00d0 00000000 		.word	.LANCHOR10
 1568 00d4 00000000 		.word	.LANCHOR4
 1569 00d8 00000000 		.word	.LANCHOR13
 1570 00dc 04ED00E0 		.word	-536810236
 1571              		.cfi_endproc
 1572              	.LFE13:
 1574              		.section	.text.vTaskResume,"ax",%progbits
 1575              		.align	1
 1576              		.global	vTaskResume
 1577              		.syntax unified
 1578              		.thumb
 1579              		.thumb_func
 1580              		.fpu fpv5-sp-d16
 1582              	vTaskResume:
 1583              	.LFB16:
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1584              		.loc 1 1844 0
 1585              		.cfi_startproc
 1586              		@ args = 0, pretend = 0, frame = 0
 1587              		@ frame_needed = 0, uses_anonymous_args = 0
 1588              	.LVL141:
 1589 0000 38B5     		push	{r3, r4, r5, lr}
 1590              	.LCFI19:
 1591              		.cfi_def_cfa_offset 16
 1592              		.cfi_offset 3, -16
 1593              		.cfi_offset 4, -12
 1594              		.cfi_offset 5, -8
 1595              		.cfi_offset 14, -4
 1596              	.LVL142:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1597              		.loc 1 1848 0
 1598 0002 68B1     		cbz	r0, .L142
 1599 0004 0446     		mov	r4, r0
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1600              		.loc 1 1852 0
 1601 0006 1C4B     		ldr	r3, .L144
 1602 0008 1B68     		ldr	r3, [r3]
 1603 000a 8342     		cmp	r3, r0
 1604 000c 07D0     		beq	.L136
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1605              		.loc 1 1854 0
ARM GAS  /tmp/ccaGl0eL.s 			page 127


 1606 000e FFF7FEFF 		bl	vPortEnterCritical
 1607              	.LVL143:
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1608              		.loc 1 1856 0
 1609 0012 2046     		mov	r0, r4
 1610 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1611              	.LVL144:
 1612 0018 68B9     		cbnz	r0, .L143
 1613              	.L140:
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1614              		.loc 1 1883 0
 1615 001a FFF7FEFF 		bl	vPortExitCritical
 1616              	.LVL145:
 1617              	.L136:
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1618              		.loc 1 1889 0
 1619 001e 38BD     		pop	{r3, r4, r5, pc}
 1620              	.LVL146:
 1621              	.L142:
 1622              	.LBB137:
 1623              	.LBB138:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1624              		.loc 2 195 0
 1625              		.syntax unified
 1626              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1627 0020 4FF05003 			mov r3, #80												
 1628 0024 72B6     		cpsid i													
 1629 0026 83F31188 		msr basepri, r3											
 1630 002a BFF36F8F 		isb														
 1631 002e BFF34F8F 		dsb														
 1632 0032 62B6     		cpsie i													
 1633              	
 1634              	@ 0 "" 2
 1635              	.LVL147:
 1636              		.thumb
 1637              		.syntax unified
 1638              	.L138:
 1639 0034 FEE7     		b	.L138
 1640              	.LVL148:
 1641              	.L143:
 1642              	.LBE138:
 1643              	.LBE137:
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1644              		.loc 1 1862 0
 1645 0036 251D     		adds	r5, r4, #4
 1646 0038 2846     		mov	r0, r5
 1647 003a FFF7FEFF 		bl	uxListRemove
 1648              	.LVL149:
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1649              		.loc 1 1863 0
 1650 003e E26A     		ldr	r2, [r4, #44]
 1651 0040 0123     		movs	r3, #1
 1652 0042 9340     		lsls	r3, r3, r2
 1653 0044 0D49     		ldr	r1, .L144+4
 1654 0046 0868     		ldr	r0, [r1]
 1655 0048 0343     		orrs	r3, r3, r0
 1656 004a 0B60     		str	r3, [r1]
ARM GAS  /tmp/ccaGl0eL.s 			page 128


 1657 004c 2946     		mov	r1, r5
 1658 004e 0C4B     		ldr	r3, .L144+8
 1659 0050 1420     		movs	r0, #20
 1660 0052 00FB0230 		mla	r0, r0, r2, r3
 1661 0056 FFF7FEFF 		bl	vListInsertEnd
 1662              	.LVL150:
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1663              		.loc 1 1866 0
 1664 005a E26A     		ldr	r2, [r4, #44]
 1665 005c 064B     		ldr	r3, .L144
 1666 005e 1B68     		ldr	r3, [r3]
 1667 0060 DB6A     		ldr	r3, [r3, #44]
 1668 0062 9A42     		cmp	r2, r3
 1669 0064 D9D3     		bcc	.L140
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1670              		.loc 1 1871 0
 1671 0066 074B     		ldr	r3, .L144+12
 1672 0068 4FF08052 		mov	r2, #268435456
 1673 006c 1A60     		str	r2, [r3]
 1674              		.syntax unified
 1675              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1676 006e BFF34F8F 		dsb
 1677              	@ 0 "" 2
 1678              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1679 0072 BFF36F8F 		isb
 1680              	@ 0 "" 2
 1681              		.thumb
 1682              		.syntax unified
 1683 0076 D0E7     		b	.L140
 1684              	.L145:
 1685              		.align	2
 1686              	.L144:
 1687 0078 00000000 		.word	.LANCHOR10
 1688 007c 00000000 		.word	.LANCHOR13
 1689 0080 00000000 		.word	.LANCHOR4
 1690 0084 04ED00E0 		.word	-536810236
 1691              		.cfi_endproc
 1692              	.LFE16:
 1694              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1695              		.align	1
 1696              		.global	xTaskResumeFromISR
 1697              		.syntax unified
 1698              		.thumb
 1699              		.thumb_func
 1700              		.fpu fpv5-sp-d16
 1702              	xTaskResumeFromISR:
 1703              	.LFB17:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1704              		.loc 1 1898 0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 0
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708              	.LVL151:
 1709 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1710              	.LCFI20:
 1711              		.cfi_def_cfa_offset 24
 1712              		.cfi_offset 3, -24
ARM GAS  /tmp/ccaGl0eL.s 			page 129


 1713              		.cfi_offset 4, -20
 1714              		.cfi_offset 5, -16
 1715              		.cfi_offset 6, -12
 1716              		.cfi_offset 7, -8
 1717              		.cfi_offset 14, -4
 1718              	.LVL152:
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1719              		.loc 1 1903 0
 1720 0002 50B9     		cbnz	r0, .L147
 1721              	.LBB139:
 1722              	.LBB140:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1723              		.loc 2 195 0
 1724              		.syntax unified
 1725              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1726 0004 4FF05003 			mov r3, #80												
 1727 0008 72B6     		cpsid i													
 1728 000a 83F31188 		msr basepri, r3											
 1729 000e BFF36F8F 		isb														
 1730 0012 BFF34F8F 		dsb														
 1731 0016 62B6     		cpsie i													
 1732              	
 1733              	@ 0 "" 2
 1734              	.LVL153:
 1735              		.thumb
 1736              		.syntax unified
 1737              	.L148:
 1738 0018 FEE7     		b	.L148
 1739              	.L147:
 1740 001a 0446     		mov	r4, r0
 1741              	.LBE140:
 1742              	.LBE139:
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1743              		.loc 1 1921 0
 1744 001c FFF7FEFF 		bl	vPortValidateInterruptPriority
 1745              	.LVL154:
 1746              	.LBB141:
 1747              	.LBB142:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1748              		.loc 2 213 0
 1749              		.syntax unified
 1750              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1751 0020 EFF31187 			mrs r7, basepri											
 1752 0024 4FF05003 		mov r3, #80												
 1753 0028 72B6     		cpsid i													
 1754 002a 83F31188 		msr basepri, r3											
 1755 002e BFF36F8F 		isb														
 1756 0032 BFF34F8F 		dsb														
 1757 0036 62B6     		cpsie i													
 1758              	
 1759              	@ 0 "" 2
 1760              		.thumb
 1761              		.syntax unified
 1762              	.LBE142:
 1763              	.LBE141:
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1764              		.loc 1 1925 0
ARM GAS  /tmp/ccaGl0eL.s 			page 130


 1765 0038 2046     		mov	r0, r4
 1766 003a FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1767              	.LVL155:
 1768 003e 40B3     		cbz	r0, .L152
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1769              		.loc 1 1930 0
 1770 0040 154B     		ldr	r3, .L155
 1771 0042 1B68     		ldr	r3, [r3]
 1772 0044 F3B9     		cbnz	r3, .L150
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1773              		.loc 1 1934 0
 1774 0046 E26A     		ldr	r2, [r4, #44]
 1775 0048 144B     		ldr	r3, .L155+4
 1776 004a 1B68     		ldr	r3, [r3]
 1777 004c DB6A     		ldr	r3, [r3, #44]
 1778 004e 9A42     		cmp	r2, r3
 1779 0050 16D2     		bcs	.L153
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1780              		.loc 1 1899 0
 1781 0052 0025     		movs	r5, #0
 1782              	.L151:
 1783              	.LVL156:
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1784              		.loc 1 1943 0
 1785 0054 261D     		adds	r6, r4, #4
 1786 0056 3046     		mov	r0, r6
 1787 0058 FFF7FEFF 		bl	uxListRemove
 1788              	.LVL157:
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1789              		.loc 1 1944 0
 1790 005c E26A     		ldr	r2, [r4, #44]
 1791 005e 0123     		movs	r3, #1
 1792 0060 9340     		lsls	r3, r3, r2
 1793 0062 0F49     		ldr	r1, .L155+8
 1794 0064 0868     		ldr	r0, [r1]
 1795 0066 0343     		orrs	r3, r3, r0
 1796 0068 0B60     		str	r3, [r1]
 1797 006a 3146     		mov	r1, r6
 1798 006c 0D4B     		ldr	r3, .L155+12
 1799 006e 1420     		movs	r0, #20
 1800 0070 00FB0230 		mla	r0, r0, r2, r3
 1801 0074 FFF7FEFF 		bl	vListInsertEnd
 1802              	.LVL158:
 1803              	.L149:
 1804              	.LBB143:
 1805              	.LBB144:
 1806              		.loc 2 233 0
 1807              		.syntax unified
 1808              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1809 0078 87F31188 			msr basepri, r7	
 1810              	@ 0 "" 2
 1811              	.LVL159:
 1812              		.thumb
 1813              		.syntax unified
 1814              	.LBE144:
 1815              	.LBE143:
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 131


 1816              		.loc 1 1962 0
 1817 007c 2846     		mov	r0, r5
 1818 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1819              	.LVL160:
 1820              	.L153:
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1821              		.loc 1 1936 0
 1822 0080 0125     		movs	r5, #1
 1823 0082 E7E7     		b	.L151
 1824              	.L150:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1825              		.loc 1 1951 0
 1826 0084 04F11801 		add	r1, r4, #24
 1827 0088 0748     		ldr	r0, .L155+16
 1828 008a FFF7FEFF 		bl	vListInsertEnd
 1829              	.LVL161:
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1830              		.loc 1 1899 0
 1831 008e 0025     		movs	r5, #0
 1832 0090 F2E7     		b	.L149
 1833              	.L152:
 1834 0092 0025     		movs	r5, #0
 1835 0094 F0E7     		b	.L149
 1836              	.L156:
 1837 0096 00BF     		.align	2
 1838              	.L155:
 1839 0098 00000000 		.word	.LANCHOR16
 1840 009c 00000000 		.word	.LANCHOR10
 1841 00a0 00000000 		.word	.LANCHOR13
 1842 00a4 00000000 		.word	.LANCHOR4
 1843 00a8 00000000 		.word	.LANCHOR1
 1844              		.cfi_endproc
 1845              	.LFE17:
 1847              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1848              		.align	1
 1849              		.global	vTaskStartScheduler
 1850              		.syntax unified
 1851              		.thumb
 1852              		.thumb_func
 1853              		.fpu fpv5-sp-d16
 1855              	vTaskStartScheduler:
 1856              	.LFB18:
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1857              		.loc 1 1968 0
 1858              		.cfi_startproc
 1859              		@ args = 0, pretend = 0, frame = 16
 1860              		@ frame_needed = 0, uses_anonymous_args = 0
 1861 0000 10B5     		push	{r4, lr}
 1862              	.LCFI21:
 1863              		.cfi_def_cfa_offset 8
 1864              		.cfi_offset 4, -8
 1865              		.cfi_offset 14, -4
 1866 0002 88B0     		sub	sp, sp, #32
 1867              	.LCFI22:
 1868              		.cfi_def_cfa_offset 40
 1869              	.LBB145:
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
ARM GAS  /tmp/ccaGl0eL.s 			page 132


 1870              		.loc 1 1974 0
 1871 0004 0024     		movs	r4, #0
 1872 0006 0594     		str	r4, [sp, #20]
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1873              		.loc 1 1975 0
 1874 0008 0694     		str	r4, [sp, #24]
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1875              		.loc 1 1980 0
 1876 000a 07AA     		add	r2, sp, #28
 1877 000c 06A9     		add	r1, sp, #24
 1878 000e 05A8     		add	r0, sp, #20
 1879 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1880              	.LVL162:
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 1881              		.loc 1 1981 0
 1882 0014 059B     		ldr	r3, [sp, #20]
 1883 0016 0293     		str	r3, [sp, #8]
 1884 0018 069B     		ldr	r3, [sp, #24]
 1885 001a 0193     		str	r3, [sp, #4]
 1886 001c 0094     		str	r4, [sp]
 1887 001e 2346     		mov	r3, r4
 1888 0020 079A     		ldr	r2, [sp, #28]
 1889 0022 0E49     		ldr	r1, .L162
 1890 0024 0E48     		ldr	r0, .L162+4
 1891 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1892              	.LVL163:
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1893              		.loc 1 1989 0
 1894 002a 08B9     		cbnz	r0, .L161
 1895              	.L157:
 1896              	.LBE145:
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1897              		.loc 1 2086 0
 1898 002c 08B0     		add	sp, sp, #32
 1899              	.LCFI23:
 1900              		.cfi_remember_state
 1901              		.cfi_def_cfa_offset 8
 1902              		@ sp needed
 1903 002e 10BD     		pop	{r4, pc}
 1904              	.L161:
 1905              	.LCFI24:
 1906              		.cfi_restore_state
 1907              	.LVL164:
 1908              	.LBB146:
 1909              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1910              		.loc 2 195 0
 1911              		.syntax unified
 1912              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1913 0030 4FF05003 			mov r3, #80												
 1914 0034 72B6     		cpsid i													
 1915 0036 83F31188 		msr basepri, r3											
 1916 003a BFF36F8F 		isb														
 1917 003e BFF34F8F 		dsb														
 1918 0042 62B6     		cpsie i													
 1919              	
 1920              	@ 0 "" 2
ARM GAS  /tmp/ccaGl0eL.s 			page 133


 1921              		.thumb
 1922              		.syntax unified
 1923              	.LBE147:
 1924              	.LBE146:
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1925              		.loc 1 2049 0
 1926 0044 074B     		ldr	r3, .L162+8
 1927 0046 4FF0FF32 		mov	r2, #-1
 1928 004a 1A60     		str	r2, [r3]
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1929              		.loc 1 2050 0
 1930 004c 064B     		ldr	r3, .L162+12
 1931 004e 0122     		movs	r2, #1
 1932 0050 1A60     		str	r2, [r3]
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1933              		.loc 1 2051 0
 1934 0052 064B     		ldr	r3, .L162+16
 1935 0054 1C60     		str	r4, [r3]
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1936              		.loc 1 2065 0
 1937 0056 FFF7FEFF 		bl	xPortStartScheduler
 1938              	.LVL165:
 1939 005a E7E7     		b	.L157
 1940              	.L163:
 1941              		.align	2
 1942              	.L162:
 1943 005c 00000000 		.word	.LC0
 1944 0060 00000000 		.word	prvIdleTask
 1945 0064 00000000 		.word	.LANCHOR3
 1946 0068 00000000 		.word	.LANCHOR11
 1947 006c 00000000 		.word	.LANCHOR15
 1948              		.cfi_endproc
 1949              	.LFE18:
 1951              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1952              		.align	1
 1953              		.global	vTaskEndScheduler
 1954              		.syntax unified
 1955              		.thumb
 1956              		.thumb_func
 1957              		.fpu fpv5-sp-d16
 1959              	vTaskEndScheduler:
 1960              	.LFB19:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1961              		.loc 1 2090 0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 0
 1964              		@ frame_needed = 0, uses_anonymous_args = 0
 1965 0000 08B5     		push	{r3, lr}
 1966              	.LCFI25:
 1967              		.cfi_def_cfa_offset 8
 1968              		.cfi_offset 3, -8
 1969              		.cfi_offset 14, -4
 1970              	.LBB148:
 1971              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1972              		.loc 2 195 0
 1973              		.syntax unified
ARM GAS  /tmp/ccaGl0eL.s 			page 134


 1974              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1975 0002 4FF05003 			mov r3, #80												
 1976 0006 72B6     		cpsid i													
 1977 0008 83F31188 		msr basepri, r3											
 1978 000c BFF36F8F 		isb														
 1979 0010 BFF34F8F 		dsb														
 1980 0014 62B6     		cpsie i													
 1981              	
 1982              	@ 0 "" 2
 1983              		.thumb
 1984              		.syntax unified
 1985              	.LBE149:
 1986              	.LBE148:
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1987              		.loc 1 2095 0
 1988 0016 034B     		ldr	r3, .L166
 1989 0018 0022     		movs	r2, #0
 1990 001a 1A60     		str	r2, [r3]
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1991              		.loc 1 2096 0
 1992 001c FFF7FEFF 		bl	vPortEndScheduler
 1993              	.LVL166:
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1994              		.loc 1 2097 0
 1995 0020 08BD     		pop	{r3, pc}
 1996              	.L167:
 1997 0022 00BF     		.align	2
 1998              	.L166:
 1999 0024 00000000 		.word	.LANCHOR11
 2000              		.cfi_endproc
 2001              	.LFE19:
 2003              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2004              		.align	1
 2005              		.global	vTaskSuspendAll
 2006              		.syntax unified
 2007              		.thumb
 2008              		.thumb_func
 2009              		.fpu fpv5-sp-d16
 2011              	vTaskSuspendAll:
 2012              	.LFB20:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2013              		.loc 1 2101 0
 2014              		.cfi_startproc
 2015              		@ args = 0, pretend = 0, frame = 0
 2016              		@ frame_needed = 0, uses_anonymous_args = 0
 2017              		@ link register save eliminated.
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2018              		.loc 1 2106 0
 2019 0000 024A     		ldr	r2, .L169
 2020 0002 1368     		ldr	r3, [r2]
 2021 0004 0133     		adds	r3, r3, #1
 2022 0006 1360     		str	r3, [r2]
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2023              		.loc 1 2107 0
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2024              		.loc 1 2108 0
 2025 0008 7047     		bx	lr
ARM GAS  /tmp/ccaGl0eL.s 			page 135


 2026              	.L170:
 2027 000a 00BF     		.align	2
 2028              	.L169:
 2029 000c 00000000 		.word	.LANCHOR16
 2030              		.cfi_endproc
 2031              	.LFE20:
 2033              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2034              		.align	1
 2035              		.global	xTaskGetTickCount
 2036              		.syntax unified
 2037              		.thumb
 2038              		.thumb_func
 2039              		.fpu fpv5-sp-d16
 2041              	xTaskGetTickCount:
 2042              	.LFB22:
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2043              		.loc 1 2285 0
 2044              		.cfi_startproc
 2045              		@ args = 0, pretend = 0, frame = 0
 2046              		@ frame_needed = 0, uses_anonymous_args = 0
 2047              		@ link register save eliminated.
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2048              		.loc 1 2291 0
 2049 0000 014B     		ldr	r3, .L172
 2050 0002 1868     		ldr	r0, [r3]
 2051              	.LVL167:
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2052              		.loc 1 2296 0
 2053 0004 7047     		bx	lr
 2054              	.L173:
 2055 0006 00BF     		.align	2
 2056              	.L172:
 2057 0008 00000000 		.word	.LANCHOR15
 2058              		.cfi_endproc
 2059              	.LFE22:
 2061              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2062              		.align	1
 2063              		.global	xTaskGetTickCountFromISR
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv5-sp-d16
 2069              	xTaskGetTickCountFromISR:
 2070              	.LFB23:
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2071              		.loc 1 2300 0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075 0000 08B5     		push	{r3, lr}
 2076              	.LCFI26:
 2077              		.cfi_def_cfa_offset 8
 2078              		.cfi_offset 3, -8
 2079              		.cfi_offset 14, -4
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2080              		.loc 1 2318 0
 2081 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  /tmp/ccaGl0eL.s 			page 136


 2082              	.LVL168:
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2083              		.loc 1 2322 0
 2084 0006 014B     		ldr	r3, .L176
 2085 0008 1868     		ldr	r0, [r3]
 2086              	.LVL169:
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2087              		.loc 1 2327 0
 2088 000a 08BD     		pop	{r3, pc}
 2089              	.L177:
 2090              		.align	2
 2091              	.L176:
 2092 000c 00000000 		.word	.LANCHOR15
 2093              		.cfi_endproc
 2094              	.LFE23:
 2096              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2097              		.align	1
 2098              		.global	uxTaskGetNumberOfTasks
 2099              		.syntax unified
 2100              		.thumb
 2101              		.thumb_func
 2102              		.fpu fpv5-sp-d16
 2104              	uxTaskGetNumberOfTasks:
 2105              	.LFB24:
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2106              		.loc 1 2331 0
 2107              		.cfi_startproc
 2108              		@ args = 0, pretend = 0, frame = 0
 2109              		@ frame_needed = 0, uses_anonymous_args = 0
 2110              		@ link register save eliminated.
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2111              		.loc 1 2334 0
 2112 0000 014B     		ldr	r3, .L179
 2113 0002 1868     		ldr	r0, [r3]
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2114              		.loc 1 2335 0
 2115 0004 7047     		bx	lr
 2116              	.L180:
 2117 0006 00BF     		.align	2
 2118              	.L179:
 2119 0008 00000000 		.word	.LANCHOR9
 2120              		.cfi_endproc
 2121              	.LFE24:
 2123              		.section	.text.pcTaskGetName,"ax",%progbits
 2124              		.align	1
 2125              		.global	pcTaskGetName
 2126              		.syntax unified
 2127              		.thumb
 2128              		.thumb_func
 2129              		.fpu fpv5-sp-d16
 2131              	pcTaskGetName:
 2132              	.LFB25:
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2133              		.loc 1 2339 0
 2134              		.cfi_startproc
 2135              		@ args = 0, pretend = 0, frame = 0
 2136              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccaGl0eL.s 			page 137


 2137              		@ link register save eliminated.
 2138              	.LVL170:
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2139              		.loc 1 2344 0
 2140 0000 0346     		mov	r3, r0
 2141 0002 18B1     		cbz	r0, .L185
 2142              	.LVL171:
 2143              	.L182:
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2144              		.loc 1 2345 0 discriminator 4
 2145 0004 2BB1     		cbz	r3, .L186
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2146              		.loc 1 2347 0
 2147 0006 03F13400 		add	r0, r3, #52
 2148 000a 7047     		bx	lr
 2149              	.LVL172:
 2150              	.L185:
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2151              		.loc 1 2344 0 discriminator 1
 2152 000c 064B     		ldr	r3, .L187
 2153 000e 1B68     		ldr	r3, [r3]
 2154              	.LVL173:
 2155 0010 F8E7     		b	.L182
 2156              	.LVL174:
 2157              	.L186:
 2158              	.LBB150:
 2159              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2160              		.loc 2 195 0
 2161              		.syntax unified
 2162              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2163 0012 4FF05003 			mov r3, #80												
 2164 0016 72B6     		cpsid i													
 2165 0018 83F31188 		msr basepri, r3											
 2166 001c BFF36F8F 		isb														
 2167 0020 BFF34F8F 		dsb														
 2168 0024 62B6     		cpsie i													
 2169              	
 2170              	@ 0 "" 2
 2171              	.LVL175:
 2172              		.thumb
 2173              		.syntax unified
 2174              	.L184:
 2175 0026 FEE7     		b	.L184
 2176              	.L188:
 2177              		.align	2
 2178              	.L187:
 2179 0028 00000000 		.word	.LANCHOR10
 2180              	.LBE151:
 2181              	.LBE150:
 2182              		.cfi_endproc
 2183              	.LFE25:
 2185              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2186              		.align	1
 2187              		.global	xTaskIncrementTick
 2188              		.syntax unified
 2189              		.thumb
ARM GAS  /tmp/ccaGl0eL.s 			page 138


 2190              		.thumb_func
 2191              		.fpu fpv5-sp-d16
 2193              	xTaskIncrementTick:
 2194              	.LFB26:
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2195              		.loc 1 2666 0
 2196              		.cfi_startproc
 2197              		@ args = 0, pretend = 0, frame = 0
 2198              		@ frame_needed = 0, uses_anonymous_args = 0
 2199 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2200              	.LCFI27:
 2201              		.cfi_def_cfa_offset 24
 2202              		.cfi_offset 3, -24
 2203              		.cfi_offset 4, -20
 2204              		.cfi_offset 5, -16
 2205              		.cfi_offset 6, -12
 2206              		.cfi_offset 7, -8
 2207              		.cfi_offset 14, -4
 2208              	.LVL176:
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2209              		.loc 1 2675 0
 2210 0002 3B4B     		ldr	r3, .L210
 2211 0004 1B68     		ldr	r3, [r3]
 2212 0006 002B     		cmp	r3, #0
 2213 0008 66D1     		bne	.L190
 2214              	.LBB152:
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2215              		.loc 1 2679 0
 2216 000a 3A4B     		ldr	r3, .L210+4
 2217 000c 1D68     		ldr	r5, [r3]
 2218 000e 0135     		adds	r5, r5, #1
 2219              	.LVL177:
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2220              		.loc 1 2683 0
 2221 0010 1D60     		str	r5, [r3]
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2222              		.loc 1 2685 0
 2223 0012 D5B9     		cbnz	r5, .L191
 2224              	.LBB153:
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2225              		.loc 1 2687 0
 2226 0014 384B     		ldr	r3, .L210+8
 2227 0016 1B68     		ldr	r3, [r3]
 2228 0018 1B68     		ldr	r3, [r3]
 2229 001a 53B1     		cbz	r3, .L192
 2230              	.LBB154:
 2231              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2232              		.loc 2 195 0
 2233              		.syntax unified
 2234              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2235 001c 4FF05003 			mov r3, #80												
 2236 0020 72B6     		cpsid i													
 2237 0022 83F31188 		msr basepri, r3											
 2238 0026 BFF36F8F 		isb														
 2239 002a BFF34F8F 		dsb														
 2240 002e 62B6     		cpsie i													
ARM GAS  /tmp/ccaGl0eL.s 			page 139


 2241              	
 2242              	@ 0 "" 2
 2243              	.LVL178:
 2244              		.thumb
 2245              		.syntax unified
 2246              	.L193:
 2247 0030 FEE7     		b	.L193
 2248              	.L192:
 2249              	.LBE155:
 2250              	.LBE154:
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2251              		.loc 1 2687 0 discriminator 2
 2252 0032 314A     		ldr	r2, .L210+8
 2253 0034 1168     		ldr	r1, [r2]
 2254              	.LVL179:
 2255 0036 314B     		ldr	r3, .L210+12
 2256 0038 1868     		ldr	r0, [r3]
 2257 003a 1060     		str	r0, [r2]
 2258 003c 1960     		str	r1, [r3]
 2259 003e 304A     		ldr	r2, .L210+16
 2260 0040 1368     		ldr	r3, [r2]
 2261 0042 0133     		adds	r3, r3, #1
 2262 0044 1360     		str	r3, [r2]
 2263 0046 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2264              	.LVL180:
 2265              	.L191:
 2266              	.LBE153:
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2267              		.loc 1 2698 0
 2268 004a 2E4B     		ldr	r3, .L210+20
 2269 004c 1B68     		ldr	r3, [r3]
 2270 004e AB42     		cmp	r3, r5
 2271 0050 38D9     		bls	.L203
 2272              	.LBE152:
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2273              		.loc 1 2669 0
 2274 0052 0024     		movs	r4, #0
 2275              	.LVL181:
 2276              	.L195:
 2277              	.LBB156:
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2278              		.loc 1 2781 0
 2279 0054 2C4B     		ldr	r3, .L210+24
 2280 0056 1B68     		ldr	r3, [r3]
 2281 0058 DB6A     		ldr	r3, [r3, #44]
 2282 005a 03EB8303 		add	r3, r3, r3, lsl #2
 2283 005e 9A00     		lsls	r2, r3, #2
 2284 0060 2A4B     		ldr	r3, .L210+28
 2285 0062 9B58     		ldr	r3, [r3, r2]
 2286 0064 012B     		cmp	r3, #1
 2287 0066 3CD9     		bls	.L201
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2288              		.loc 1 2783 0
 2289 0068 0124     		movs	r4, #1
 2290              	.LVL182:
 2291 006a 3AE0     		b	.L201
 2292              	.LVL183:
ARM GAS  /tmp/ccaGl0eL.s 			page 140


 2293              	.L204:
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2294              		.loc 1 2764 0
 2295 006c 0124     		movs	r4, #1
 2296              	.LVL184:
 2297              	.L194:
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2298              		.loc 1 2702 0
 2299 006e 224B     		ldr	r3, .L210+8
 2300 0070 1B68     		ldr	r3, [r3]
 2301 0072 1B68     		ldr	r3, [r3]
 2302 0074 43B3     		cbz	r3, .L208
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2303              		.loc 1 2718 0
 2304 0076 204B     		ldr	r3, .L210+8
 2305 0078 1B68     		ldr	r3, [r3]
 2306 007a DB68     		ldr	r3, [r3, #12]
 2307 007c DE68     		ldr	r6, [r3, #12]
 2308              	.LVL185:
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2309              		.loc 1 2719 0
 2310 007e 7368     		ldr	r3, [r6, #4]
 2311              	.LVL186:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2312              		.loc 1 2721 0
 2313 0080 9D42     		cmp	r5, r3
 2314 0082 26D3     		bcc	.L209
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2315              		.loc 1 2737 0
 2316 0084 371D     		adds	r7, r6, #4
 2317 0086 3846     		mov	r0, r7
 2318 0088 FFF7FEFF 		bl	uxListRemove
 2319              	.LVL187:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2320              		.loc 1 2741 0
 2321 008c B36A     		ldr	r3, [r6, #40]
 2322 008e 1BB1     		cbz	r3, .L198
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2323              		.loc 1 2743 0
 2324 0090 06F11800 		add	r0, r6, #24
 2325 0094 FFF7FEFF 		bl	uxListRemove
 2326              	.LVL188:
 2327              	.L198:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2328              		.loc 1 2752 0
 2329 0098 F36A     		ldr	r3, [r6, #44]
 2330 009a 0122     		movs	r2, #1
 2331 009c 9A40     		lsls	r2, r2, r3
 2332 009e 1C49     		ldr	r1, .L210+32
 2333 00a0 0868     		ldr	r0, [r1]
 2334 00a2 0243     		orrs	r2, r2, r0
 2335 00a4 0A60     		str	r2, [r1]
 2336 00a6 03EB8303 		add	r3, r3, r3, lsl #2
 2337 00aa 9A00     		lsls	r2, r3, #2
 2338 00ac 3946     		mov	r1, r7
 2339 00ae 1748     		ldr	r0, .L210+28
 2340 00b0 1044     		add	r0, r0, r2
ARM GAS  /tmp/ccaGl0eL.s 			page 141


 2341 00b2 FFF7FEFF 		bl	vListInsertEnd
 2342              	.LVL189:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2343              		.loc 1 2762 0
 2344 00b6 F26A     		ldr	r2, [r6, #44]
 2345 00b8 134B     		ldr	r3, .L210+24
 2346 00ba 1B68     		ldr	r3, [r3]
 2347 00bc DB6A     		ldr	r3, [r3, #44]
 2348 00be 9A42     		cmp	r2, r3
 2349 00c0 D4D2     		bcs	.L204
 2350 00c2 D4E7     		b	.L194
 2351              	.LVL190:
 2352              	.L203:
 2353              	.LBE156:
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2354              		.loc 1 2669 0
 2355 00c4 0024     		movs	r4, #0
 2356 00c6 D2E7     		b	.L194
 2357              	.LVL191:
 2358              	.L208:
 2359              	.LBB157:
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2360              		.loc 1 2709 0
 2361 00c8 0E4B     		ldr	r3, .L210+20
 2362 00ca 4FF0FF32 		mov	r2, #-1
 2363 00ce 1A60     		str	r2, [r3]
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2364              		.loc 1 2710 0
 2365 00d0 C0E7     		b	.L195
 2366              	.LVL192:
 2367              	.L209:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2368              		.loc 1 2728 0
 2369 00d2 0C4A     		ldr	r2, .L210+20
 2370 00d4 1360     		str	r3, [r2]
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2371              		.loc 1 2729 0
 2372 00d6 BDE7     		b	.L195
 2373              	.LVL193:
 2374              	.L190:
 2375              	.LBE157:
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2376              		.loc 1 2809 0
 2377 00d8 0E4A     		ldr	r2, .L210+36
 2378 00da 1368     		ldr	r3, [r2]
 2379 00dc 0133     		adds	r3, r3, #1
 2380 00de 1360     		str	r3, [r2]
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2381              		.loc 1 2669 0
 2382 00e0 0024     		movs	r4, #0
 2383              	.LVL194:
 2384              	.L201:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2385              		.loc 1 2822 0
 2386 00e2 0D4B     		ldr	r3, .L210+40
 2387 00e4 1B68     		ldr	r3, [r3]
 2388 00e6 03B1     		cbz	r3, .L189
ARM GAS  /tmp/ccaGl0eL.s 			page 142


2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2389              		.loc 1 2824 0
 2390 00e8 0124     		movs	r4, #1
 2391              	.LVL195:
 2392              	.L189:
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2393              		.loc 1 2834 0
 2394 00ea 2046     		mov	r0, r4
 2395 00ec F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2396              	.L211:
 2397 00ee 00BF     		.align	2
 2398              	.L210:
 2399 00f0 00000000 		.word	.LANCHOR16
 2400 00f4 00000000 		.word	.LANCHOR15
 2401 00f8 00000000 		.word	.LANCHOR2
 2402 00fc 00000000 		.word	.LANCHOR8
 2403 0100 00000000 		.word	.LANCHOR17
 2404 0104 00000000 		.word	.LANCHOR3
 2405 0108 00000000 		.word	.LANCHOR10
 2406 010c 00000000 		.word	.LANCHOR4
 2407 0110 00000000 		.word	.LANCHOR13
 2408 0114 00000000 		.word	.LANCHOR18
 2409 0118 00000000 		.word	.LANCHOR19
 2410              		.cfi_endproc
 2411              	.LFE26:
 2413              		.section	.text.xTaskResumeAll,"ax",%progbits
 2414              		.align	1
 2415              		.global	xTaskResumeAll
 2416              		.syntax unified
 2417              		.thumb
 2418              		.thumb_func
 2419              		.fpu fpv5-sp-d16
 2421              	xTaskResumeAll:
 2422              	.LFB21:
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2423              		.loc 1 2175 0
 2424              		.cfi_startproc
 2425              		@ args = 0, pretend = 0, frame = 0
 2426              		@ frame_needed = 0, uses_anonymous_args = 0
 2427 0000 38B5     		push	{r3, r4, r5, lr}
 2428              	.LCFI28:
 2429              		.cfi_def_cfa_offset 16
 2430              		.cfi_offset 3, -16
 2431              		.cfi_offset 4, -12
 2432              		.cfi_offset 5, -8
 2433              		.cfi_offset 14, -4
 2434              	.LVL196:
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2435              		.loc 1 2181 0
 2436 0002 344B     		ldr	r3, .L228
 2437 0004 1B68     		ldr	r3, [r3]
 2438 0006 53B9     		cbnz	r3, .L213
 2439              	.LBB158:
 2440              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2441              		.loc 2 195 0
 2442              		.syntax unified
ARM GAS  /tmp/ccaGl0eL.s 			page 143


 2443              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2444 0008 4FF05003 			mov r3, #80												
 2445 000c 72B6     		cpsid i													
 2446 000e 83F31188 		msr basepri, r3											
 2447 0012 BFF36F8F 		isb														
 2448 0016 BFF34F8F 		dsb														
 2449 001a 62B6     		cpsie i													
 2450              	
 2451              	@ 0 "" 2
 2452              	.LVL197:
 2453              		.thumb
 2454              		.syntax unified
 2455              	.L214:
 2456 001c FEE7     		b	.L214
 2457              	.L213:
 2458              	.LBE159:
 2459              	.LBE158:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2460              		.loc 1 2188 0
 2461 001e FFF7FEFF 		bl	vPortEnterCritical
 2462              	.LVL198:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2463              		.loc 1 2190 0
 2464 0022 2C4B     		ldr	r3, .L228
 2465 0024 1A68     		ldr	r2, [r3]
 2466 0026 013A     		subs	r2, r2, #1
 2467 0028 1A60     		str	r2, [r3]
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2468              		.loc 1 2192 0
 2469 002a 1B68     		ldr	r3, [r3]
 2470 002c 002B     		cmp	r3, #0
 2471 002e 4DD1     		bne	.L223
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2472              		.loc 1 2194 0
 2473 0030 294B     		ldr	r3, .L228+4
 2474 0032 1B68     		ldr	r3, [r3]
 2475 0034 23B9     		cbnz	r3, .L224
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2476              		.loc 1 2177 0
 2477 0036 0024     		movs	r4, #0
 2478              	.LVL199:
 2479              	.L215:
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2480              		.loc 1 2278 0
 2481 0038 FFF7FEFF 		bl	vPortExitCritical
 2482              	.LVL200:
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2483              		.loc 1 2281 0
 2484 003c 2046     		mov	r0, r4
 2485 003e 38BD     		pop	{r3, r4, r5, pc}
 2486              	.LVL201:
 2487              	.L224:
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2488              		.loc 1 2176 0
 2489 0040 0024     		movs	r4, #0
 2490              	.LVL202:
 2491              	.L216:
ARM GAS  /tmp/ccaGl0eL.s 			page 144


2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2492              		.loc 1 2198 0
 2493 0042 264B     		ldr	r3, .L228+8
 2494 0044 1B68     		ldr	r3, [r3]
 2495 0046 1BB3     		cbz	r3, .L227
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2496              		.loc 1 2200 0
 2497 0048 244B     		ldr	r3, .L228+8
 2498 004a DB68     		ldr	r3, [r3, #12]
 2499 004c DC68     		ldr	r4, [r3, #12]
 2500              	.LVL203:
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2501              		.loc 1 2201 0
 2502 004e 04F11800 		add	r0, r4, #24
 2503 0052 FFF7FEFF 		bl	uxListRemove
 2504              	.LVL204:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2505              		.loc 1 2202 0
 2506 0056 251D     		adds	r5, r4, #4
 2507 0058 2846     		mov	r0, r5
 2508 005a FFF7FEFF 		bl	uxListRemove
 2509              	.LVL205:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2510              		.loc 1 2203 0
 2511 005e E36A     		ldr	r3, [r4, #44]
 2512 0060 0122     		movs	r2, #1
 2513 0062 9A40     		lsls	r2, r2, r3
 2514 0064 1E49     		ldr	r1, .L228+12
 2515 0066 0868     		ldr	r0, [r1]
 2516 0068 0243     		orrs	r2, r2, r0
 2517 006a 0A60     		str	r2, [r1]
 2518 006c 03EB8303 		add	r3, r3, r3, lsl #2
 2519 0070 9A00     		lsls	r2, r3, #2
 2520 0072 2946     		mov	r1, r5
 2521 0074 1B48     		ldr	r0, .L228+16
 2522 0076 1044     		add	r0, r0, r2
 2523 0078 FFF7FEFF 		bl	vListInsertEnd
 2524              	.LVL206:
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2525              		.loc 1 2207 0
 2526 007c E26A     		ldr	r2, [r4, #44]
 2527 007e 1A4B     		ldr	r3, .L228+20
 2528 0080 1B68     		ldr	r3, [r3]
 2529 0082 DB6A     		ldr	r3, [r3, #44]
 2530 0084 9A42     		cmp	r2, r3
 2531 0086 DCD3     		bcc	.L216
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2532              		.loc 1 2209 0
 2533 0088 184B     		ldr	r3, .L228+24
 2534 008a 0122     		movs	r2, #1
 2535 008c 1A60     		str	r2, [r3]
 2536 008e D8E7     		b	.L216
 2537              	.L227:
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2538              		.loc 1 2217 0
 2539 0090 0CB1     		cbz	r4, .L219
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccaGl0eL.s 			page 145


 2540              		.loc 1 2225 0
 2541 0092 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2542              	.LVL207:
 2543              	.L219:
 2544              	.LBB160:
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2545              		.loc 1 2233 0
 2546 0096 164B     		ldr	r3, .L228+28
 2547 0098 1C68     		ldr	r4, [r3]
 2548              	.LVL208:
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2549              		.loc 1 2235 0
 2550 009a 54B1     		cbz	r4, .L220
 2551              	.L222:
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2552              		.loc 1 2239 0
 2553 009c FFF7FEFF 		bl	xTaskIncrementTick
 2554              	.LVL209:
 2555 00a0 10B1     		cbz	r0, .L221
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2556              		.loc 1 2241 0
 2557 00a2 124B     		ldr	r3, .L228+24
 2558 00a4 0122     		movs	r2, #1
 2559 00a6 1A60     		str	r2, [r3]
 2560              	.L221:
 2561              	.LVL210:
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2562              		.loc 1 2248 0
 2563 00a8 013C     		subs	r4, r4, #1
 2564              	.LVL211:
 2565 00aa F7D1     		bne	.L222
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2566              		.loc 1 2250 0
 2567 00ac 104B     		ldr	r3, .L228+28
 2568 00ae 0022     		movs	r2, #0
 2569 00b0 1A60     		str	r2, [r3]
 2570              	.L220:
 2571              	.LBE160:
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2572              		.loc 1 2258 0
 2573 00b2 0E4B     		ldr	r3, .L228+24
 2574 00b4 1B68     		ldr	r3, [r3]
 2575 00b6 5BB1     		cbz	r3, .L225
 2576              	.LVL212:
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2577              		.loc 1 2265 0
 2578 00b8 0E4B     		ldr	r3, .L228+32
 2579 00ba 4FF08052 		mov	r2, #268435456
 2580 00be 1A60     		str	r2, [r3]
 2581              		.syntax unified
 2582              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2583 00c0 BFF34F8F 		dsb
 2584              	@ 0 "" 2
 2585              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2586 00c4 BFF36F8F 		isb
 2587              	@ 0 "" 2
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccaGl0eL.s 			page 146


 2588              		.loc 1 2262 0
 2589              		.thumb
 2590              		.syntax unified
 2591 00c8 0124     		movs	r4, #1
 2592              	.LVL213:
 2593 00ca B5E7     		b	.L215
 2594              	.LVL214:
 2595              	.L223:
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2596              		.loc 1 2177 0
 2597 00cc 0024     		movs	r4, #0
 2598 00ce B3E7     		b	.L215
 2599              	.LVL215:
 2600              	.L225:
 2601 00d0 0024     		movs	r4, #0
 2602              	.LVL216:
 2603 00d2 B1E7     		b	.L215
 2604              	.L229:
 2605              		.align	2
 2606              	.L228:
 2607 00d4 00000000 		.word	.LANCHOR16
 2608 00d8 00000000 		.word	.LANCHOR9
 2609 00dc 00000000 		.word	.LANCHOR1
 2610 00e0 00000000 		.word	.LANCHOR13
 2611 00e4 00000000 		.word	.LANCHOR4
 2612 00e8 00000000 		.word	.LANCHOR10
 2613 00ec 00000000 		.word	.LANCHOR19
 2614 00f0 00000000 		.word	.LANCHOR18
 2615 00f4 04ED00E0 		.word	-536810236
 2616              		.cfi_endproc
 2617              	.LFE21:
 2619              		.section	.text.vTaskDelay,"ax",%progbits
 2620              		.align	1
 2621              		.global	vTaskDelay
 2622              		.syntax unified
 2623              		.thumb
 2624              		.thumb_func
 2625              		.fpu fpv5-sp-d16
 2627              	vTaskDelay:
 2628              	.LFB10:
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2629              		.loc 1 1334 0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 0
 2632              		@ frame_needed = 0, uses_anonymous_args = 0
 2633              	.LVL217:
 2634 0000 10B5     		push	{r4, lr}
 2635              	.LCFI29:
 2636              		.cfi_def_cfa_offset 8
 2637              		.cfi_offset 4, -8
 2638              		.cfi_offset 14, -4
 2639              	.LVL218:
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2640              		.loc 1 1338 0
 2641 0002 B8B1     		cbz	r0, .L231
 2642 0004 0446     		mov	r4, r0
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
ARM GAS  /tmp/ccaGl0eL.s 			page 147


 2643              		.loc 1 1340 0
 2644 0006 104B     		ldr	r3, .L236
 2645 0008 1B68     		ldr	r3, [r3]
 2646 000a 53B1     		cbz	r3, .L232
 2647              	.LBB161:
 2648              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2649              		.loc 2 195 0
 2650              		.syntax unified
 2651              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2652 000c 4FF05003 			mov r3, #80												
 2653 0010 72B6     		cpsid i													
 2654 0012 83F31188 		msr basepri, r3											
 2655 0016 BFF36F8F 		isb														
 2656 001a BFF34F8F 		dsb														
 2657 001e 62B6     		cpsie i													
 2658              	
 2659              	@ 0 "" 2
 2660              	.LVL219:
 2661              		.thumb
 2662              		.syntax unified
 2663              	.L233:
 2664 0020 FEE7     		b	.L233
 2665              	.L232:
 2666              	.LBE162:
 2667              	.LBE161:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2668              		.loc 1 1341 0
 2669 0022 FFF7FEFF 		bl	vTaskSuspendAll
 2670              	.LVL220:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2671              		.loc 1 1352 0
 2672 0026 0021     		movs	r1, #0
 2673 0028 2046     		mov	r0, r4
 2674 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2675              	.LVL221:
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2676              		.loc 1 1354 0
 2677 002e FFF7FEFF 		bl	xTaskResumeAll
 2678              	.LVL222:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2679              		.loc 1 1363 0
 2680 0032 38B9     		cbnz	r0, .L230
 2681              	.LVL223:
 2682              	.L231:
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2683              		.loc 1 1365 0
 2684 0034 054B     		ldr	r3, .L236+4
 2685 0036 4FF08052 		mov	r2, #268435456
 2686 003a 1A60     		str	r2, [r3]
 2687              		.syntax unified
 2688              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2689 003c BFF34F8F 		dsb
 2690              	@ 0 "" 2
 2691              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2692 0040 BFF36F8F 		isb
 2693              	@ 0 "" 2
ARM GAS  /tmp/ccaGl0eL.s 			page 148


 2694              		.thumb
 2695              		.syntax unified
 2696              	.L230:
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2697              		.loc 1 1371 0
 2698 0044 10BD     		pop	{r4, pc}
 2699              	.L237:
 2700 0046 00BF     		.align	2
 2701              	.L236:
 2702 0048 00000000 		.word	.LANCHOR16
 2703 004c 04ED00E0 		.word	-536810236
 2704              		.cfi_endproc
 2705              	.LFE10:
 2707              		.section	.text.vTaskSetApplicationTaskTag,"ax",%progbits
 2708              		.align	1
 2709              		.global	vTaskSetApplicationTaskTag
 2710              		.syntax unified
 2711              		.thumb
 2712              		.thumb_func
 2713              		.fpu fpv5-sp-d16
 2715              	vTaskSetApplicationTaskTag:
 2716              	.LFB27:
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 2717              		.loc 1 2840 0
 2718              		.cfi_startproc
 2719              		@ args = 0, pretend = 0, frame = 0
 2720              		@ frame_needed = 0, uses_anonymous_args = 0
 2721              	.LVL224:
 2722 0000 38B5     		push	{r3, r4, r5, lr}
 2723              	.LCFI30:
 2724              		.cfi_def_cfa_offset 16
 2725              		.cfi_offset 3, -16
 2726              		.cfi_offset 4, -12
 2727              		.cfi_offset 5, -8
 2728              		.cfi_offset 14, -4
 2729 0002 0D46     		mov	r5, r1
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2730              		.loc 1 2845 0
 2731 0004 0446     		mov	r4, r0
 2732 0006 28B1     		cbz	r0, .L241
 2733              	.LVL225:
 2734              	.L239:
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2735              		.loc 1 2856 0
 2736 0008 FFF7FEFF 		bl	vPortEnterCritical
 2737              	.LVL226:
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2738              		.loc 1 2858 0
 2739 000c E564     		str	r5, [r4, #76]
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2740              		.loc 1 2860 0
 2741 000e FFF7FEFF 		bl	vPortExitCritical
 2742              	.LVL227:
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2743              		.loc 1 2861 0
 2744 0012 38BD     		pop	{r3, r4, r5, pc}
 2745              	.LVL228:
ARM GAS  /tmp/ccaGl0eL.s 			page 149


 2746              	.L241:
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2747              		.loc 1 2847 0
 2748 0014 014B     		ldr	r3, .L242
 2749 0016 1C68     		ldr	r4, [r3]
 2750              	.LVL229:
 2751 0018 F6E7     		b	.L239
 2752              	.L243:
 2753 001a 00BF     		.align	2
 2754              	.L242:
 2755 001c 00000000 		.word	.LANCHOR10
 2756              		.cfi_endproc
 2757              	.LFE27:
 2759              		.section	.text.xTaskGetApplicationTaskTag,"ax",%progbits
 2760              		.align	1
 2761              		.global	xTaskGetApplicationTaskTag
 2762              		.syntax unified
 2763              		.thumb
 2764              		.thumb_func
 2765              		.fpu fpv5-sp-d16
 2767              	xTaskGetApplicationTaskTag:
 2768              	.LFB28:
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2769              		.loc 1 2869 0
 2770              		.cfi_startproc
 2771              		@ args = 0, pretend = 0, frame = 0
 2772              		@ frame_needed = 0, uses_anonymous_args = 0
 2773              	.LVL230:
 2774 0000 10B5     		push	{r4, lr}
 2775              	.LCFI31:
 2776              		.cfi_def_cfa_offset 8
 2777              		.cfi_offset 4, -8
 2778              		.cfi_offset 14, -4
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2779              		.loc 1 2874 0
 2780 0002 0446     		mov	r4, r0
 2781 0004 30B1     		cbz	r0, .L247
 2782              	.LVL231:
 2783              	.L245:
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2784              		.loc 1 2878 0 discriminator 4
 2785 0006 FFF7FEFF 		bl	vPortEnterCritical
 2786              	.LVL232:
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2787              		.loc 1 2880 0 discriminator 4
 2788 000a E46C     		ldr	r4, [r4, #76]
 2789              	.LVL233:
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2790              		.loc 1 2882 0 discriminator 4
 2791 000c FFF7FEFF 		bl	vPortExitCritical
 2792              	.LVL234:
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2793              		.loc 1 2885 0 discriminator 4
 2794 0010 2046     		mov	r0, r4
 2795 0012 10BD     		pop	{r4, pc}
 2796              	.LVL235:
 2797              	.L247:
ARM GAS  /tmp/ccaGl0eL.s 			page 150


2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2798              		.loc 1 2874 0 discriminator 1
 2799 0014 014B     		ldr	r3, .L248
 2800 0016 1C68     		ldr	r4, [r3]
 2801              	.LVL236:
 2802 0018 F5E7     		b	.L245
 2803              	.L249:
 2804 001a 00BF     		.align	2
 2805              	.L248:
 2806 001c 00000000 		.word	.LANCHOR10
 2807              		.cfi_endproc
 2808              	.LFE28:
 2810              		.section	.text.xTaskGetApplicationTaskTagFromISR,"ax",%progbits
 2811              		.align	1
 2812              		.global	xTaskGetApplicationTaskTagFromISR
 2813              		.syntax unified
 2814              		.thumb
 2815              		.thumb_func
 2816              		.fpu fpv5-sp-d16
 2818              	xTaskGetApplicationTaskTagFromISR:
 2819              	.LFB29:
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2820              		.loc 1 2893 0
 2821              		.cfi_startproc
 2822              		@ args = 0, pretend = 0, frame = 0
 2823              		@ frame_needed = 0, uses_anonymous_args = 0
 2824              		@ link register save eliminated.
 2825              	.LVL237:
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2826              		.loc 1 2899 0
 2827 0000 0346     		mov	r3, r0
 2828 0002 78B1     		cbz	r0, .L252
 2829              	.LVL238:
 2830              	.L251:
 2831              	.LBB163:
 2832              	.LBB164:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2833              		.loc 2 213 0 discriminator 4
 2834              		.syntax unified
 2835              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2836 0004 EFF31182 			mrs r2, basepri											
 2837 0008 4FF05001 		mov r1, #80												
 2838 000c 72B6     		cpsid i													
 2839 000e 81F31188 		msr basepri, r1											
 2840 0012 BFF36F8F 		isb														
 2841 0016 BFF34F8F 		dsb														
 2842 001a 62B6     		cpsie i													
 2843              	
 2844              	@ 0 "" 2
 2845              		.thumb
 2846              		.syntax unified
 2847              	.LBE164:
 2848              	.LBE163:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2849              		.loc 1 2905 0 discriminator 4
 2850 001c D86C     		ldr	r0, [r3, #76]
 2851              	.LVL239:
ARM GAS  /tmp/ccaGl0eL.s 			page 151


 2852              	.LBB165:
 2853              	.LBB166:
 2854              		.loc 2 233 0 discriminator 4
 2855              		.syntax unified
 2856              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2857 001e 82F31188 			msr basepri, r2	
 2858              	@ 0 "" 2
 2859              		.thumb
 2860              		.syntax unified
 2861              	.LBE166:
 2862              	.LBE165:
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2863              		.loc 1 2910 0 discriminator 4
 2864 0022 7047     		bx	lr
 2865              	.LVL240:
 2866              	.L252:
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2867              		.loc 1 2899 0 discriminator 1
 2868 0024 014B     		ldr	r3, .L253
 2869 0026 1B68     		ldr	r3, [r3]
 2870              	.LVL241:
 2871 0028 ECE7     		b	.L251
 2872              	.L254:
 2873 002a 00BF     		.align	2
 2874              	.L253:
 2875 002c 00000000 		.word	.LANCHOR10
 2876              		.cfi_endproc
 2877              	.LFE29:
 2879              		.section	.text.xTaskCallApplicationTaskHook,"ax",%progbits
 2880              		.align	1
 2881              		.global	xTaskCallApplicationTaskHook
 2882              		.syntax unified
 2883              		.thumb
 2884              		.thumb_func
 2885              		.fpu fpv5-sp-d16
 2887              	xTaskCallApplicationTaskHook:
 2888              	.LFB30:
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 2889              		.loc 1 2918 0
 2890              		.cfi_startproc
 2891              		@ args = 0, pretend = 0, frame = 0
 2892              		@ frame_needed = 0, uses_anonymous_args = 0
 2893              	.LVL242:
 2894 0000 08B5     		push	{r3, lr}
 2895              	.LCFI32:
 2896              		.cfi_def_cfa_offset 8
 2897              		.cfi_offset 3, -8
 2898              		.cfi_offset 14, -4
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2899              		.loc 1 2923 0
 2900 0002 0346     		mov	r3, r0
 2901 0004 20B1     		cbz	r0, .L260
 2902              	.LVL243:
 2903              	.L256:
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2904              		.loc 1 2932 0
 2905 0006 DB6C     		ldr	r3, [r3, #76]
ARM GAS  /tmp/ccaGl0eL.s 			page 152


 2906              	.LVL244:
 2907 0008 2BB1     		cbz	r3, .L258
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2908              		.loc 1 2934 0
 2909 000a 0846     		mov	r0, r1
 2910 000c 9847     		blx	r3
 2911              	.LVL245:
 2912              	.L255:
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2913              		.loc 1 2942 0
 2914 000e 08BD     		pop	{r3, pc}
 2915              	.LVL246:
 2916              	.L260:
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2917              		.loc 1 2925 0
 2918 0010 024B     		ldr	r3, .L261
 2919 0012 1B68     		ldr	r3, [r3]
 2920              	.LVL247:
 2921 0014 F7E7     		b	.L256
 2922              	.LVL248:
 2923              	.L258:
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2924              		.loc 1 2938 0
 2925 0016 0020     		movs	r0, #0
 2926              	.LVL249:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2927              		.loc 1 2941 0
 2928 0018 F9E7     		b	.L255
 2929              	.L262:
 2930 001a 00BF     		.align	2
 2931              	.L261:
 2932 001c 00000000 		.word	.LANCHOR10
 2933              		.cfi_endproc
 2934              	.LFE30:
 2936              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2937              		.align	1
 2938              		.global	vTaskSwitchContext
 2939              		.syntax unified
 2940              		.thumb
 2941              		.thumb_func
 2942              		.fpu fpv5-sp-d16
 2944              	vTaskSwitchContext:
 2945              	.LFB31:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2946              		.loc 1 2948 0
 2947              		.cfi_startproc
 2948              		@ args = 0, pretend = 0, frame = 0
 2949              		@ frame_needed = 0, uses_anonymous_args = 0
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2950              		.loc 1 2949 0
 2951 0000 2D4B     		ldr	r3, .L276
 2952 0002 1B68     		ldr	r3, [r3]
 2953 0004 1BB1     		cbz	r3, .L264
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2954              		.loc 1 2953 0
 2955 0006 2D4B     		ldr	r3, .L276+4
 2956 0008 0122     		movs	r2, #1
ARM GAS  /tmp/ccaGl0eL.s 			page 153


 2957 000a 1A60     		str	r2, [r3]
 2958 000c 7047     		bx	lr
 2959              	.L264:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2960              		.loc 1 2948 0
 2961 000e 10B5     		push	{r4, lr}
 2962              	.LCFI33:
 2963              		.cfi_def_cfa_offset 8
 2964              		.cfi_offset 4, -8
 2965              		.cfi_offset 14, -4
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2966              		.loc 1 2957 0
 2967 0010 2A4B     		ldr	r3, .L276+4
 2968 0012 0022     		movs	r2, #0
 2969 0014 1A60     		str	r2, [r3]
 2970              	.LBB167:
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2971              		.loc 1 2988 0
 2972 0016 2A4B     		ldr	r3, .L276+8
 2973 0018 1B68     		ldr	r3, [r3]
 2974 001a 1B6B     		ldr	r3, [r3, #48]
 2975              	.LVL250:
 2976 001c 1A68     		ldr	r2, [r3]
 2977 001e B2F1A53F 		cmp	r2, #-1515870811
 2978 0022 03D1     		bne	.L266
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2979              		.loc 1 2988 0 is_stmt 0 discriminator 2
 2980 0024 5A68     		ldr	r2, [r3, #4]
 2981 0026 B2F1A53F 		cmp	r2, #-1515870811
 2982 002a 1DD0     		beq	.L274
 2983              	.LVL251:
 2984              	.L266:
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2985              		.loc 1 2988 0 discriminator 7
 2986 002c 244B     		ldr	r3, .L276+8
 2987 002e 1868     		ldr	r0, [r3]
 2988 0030 1968     		ldr	r1, [r3]
 2989 0032 3431     		adds	r1, r1, #52
 2990 0034 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2991              	.LVL252:
 2992              	.L267:
 2993              	.LBE167:
 2994              	.LBB168:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2995              		.loc 1 2999 0 is_stmt 1
 2996 0038 224B     		ldr	r3, .L276+12
 2997 003a 1B68     		ldr	r3, [r3]
 2998              	.LVL253:
 2999              	.LBB169:
 3000              	.LBB170:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 3001              		.loc 2 134 0
 3002              		.syntax unified
 3003              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3004 003c B3FA83F3 		clz r3, r3
 3005              	@ 0 "" 2
 3006              	.LVL254:
ARM GAS  /tmp/ccaGl0eL.s 			page 154


 3007              		.thumb
 3008              		.syntax unified
 3009 0040 DBB2     		uxtb	r3, r3
 3010              	.LBE170:
 3011              	.LBE169:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3012              		.loc 1 2999 0
 3013 0042 C3F11F03 		rsb	r3, r3, #31
 3014              	.LVL255:
 3015 0046 03EB8301 		add	r1, r3, r3, lsl #2
 3016 004a 8A00     		lsls	r2, r1, #2
 3017 004c 1E49     		ldr	r1, .L276+16
 3018 004e 8A58     		ldr	r2, [r1, r2]
 3019 0050 9AB9     		cbnz	r2, .L268
 3020              	.LBB171:
 3021              	.LBB172:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3022              		.loc 2 195 0
 3023              		.syntax unified
 3024              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3025 0052 4FF05003 			mov r3, #80												
 3026 0056 72B6     		cpsid i													
 3027 0058 83F31188 		msr basepri, r3											
 3028 005c BFF36F8F 		isb														
 3029 0060 BFF34F8F 		dsb														
 3030 0064 62B6     		cpsie i													
 3031              	
 3032              	@ 0 "" 2
 3033              	.LVL256:
 3034              		.thumb
 3035              		.syntax unified
 3036              	.L269:
 3037 0066 FEE7     		b	.L269
 3038              	.LVL257:
 3039              	.L274:
 3040              	.LBE172:
 3041              	.LBE171:
 3042              	.LBE168:
 3043              	.LBB175:
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3044              		.loc 1 2988 0 discriminator 4
 3045 0068 9A68     		ldr	r2, [r3, #8]
 3046 006a B2F1A53F 		cmp	r2, #-1515870811
 3047 006e DDD1     		bne	.L266
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3048              		.loc 1 2988 0 is_stmt 0 discriminator 6
 3049 0070 DB68     		ldr	r3, [r3, #12]
 3050              	.LVL258:
 3051 0072 B3F1A53F 		cmp	r3, #-1515870811
 3052 0076 D9D1     		bne	.L266
 3053 0078 DEE7     		b	.L267
 3054              	.LVL259:
 3055              	.L268:
 3056              	.LBE175:
 3057              	.LBB176:
 3058              	.LBB173:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  /tmp/ccaGl0eL.s 			page 155


 3059              		.loc 1 2999 0 is_stmt 1 discriminator 2
 3060 007a 1348     		ldr	r0, .L276+16
 3061 007c 9A00     		lsls	r2, r3, #2
 3062 007e D418     		adds	r4, r2, r3
 3063 0080 A100     		lsls	r1, r4, #2
 3064 0082 0144     		add	r1, r1, r0
 3065 0084 4C68     		ldr	r4, [r1, #4]
 3066 0086 6468     		ldr	r4, [r4, #4]
 3067 0088 4C60     		str	r4, [r1, #4]
 3068 008a 1A44     		add	r2, r2, r3
 3069 008c 9100     		lsls	r1, r2, #2
 3070 008e 0831     		adds	r1, r1, #8
 3071 0090 0844     		add	r0, r0, r1
 3072 0092 8442     		cmp	r4, r0
 3073 0094 09D0     		beq	.L275
 3074              	.L270:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3075              		.loc 1 2999 0 is_stmt 0 discriminator 5
 3076 0096 03EB8303 		add	r3, r3, r3, lsl #2
 3077              	.LVL260:
 3078 009a 9A00     		lsls	r2, r3, #2
 3079 009c 0A4B     		ldr	r3, .L276+16
 3080 009e 1344     		add	r3, r3, r2
 3081 00a0 5B68     		ldr	r3, [r3, #4]
 3082 00a2 DA68     		ldr	r2, [r3, #12]
 3083 00a4 064B     		ldr	r3, .L276+8
 3084 00a6 1A60     		str	r2, [r3]
 3085              	.LBE173:
 3086              	.LBE176:
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3087              		.loc 1 3017 0 is_stmt 1 discriminator 5
 3088 00a8 10BD     		pop	{r4, pc}
 3089              	.LVL261:
 3090              	.L275:
 3091              	.LBB177:
 3092              	.LBB174:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3093              		.loc 1 2999 0 discriminator 3
 3094 00aa 6168     		ldr	r1, [r4, #4]
 3095 00ac 0648     		ldr	r0, .L276+16
 3096 00ae 1422     		movs	r2, #20
 3097 00b0 02FB0302 		mla	r2, r2, r3, r0
 3098 00b4 5160     		str	r1, [r2, #4]
 3099 00b6 EEE7     		b	.L270
 3100              	.L277:
 3101              		.align	2
 3102              	.L276:
 3103 00b8 00000000 		.word	.LANCHOR16
 3104 00bc 00000000 		.word	.LANCHOR19
 3105 00c0 00000000 		.word	.LANCHOR10
 3106 00c4 00000000 		.word	.LANCHOR13
 3107 00c8 00000000 		.word	.LANCHOR4
 3108              	.LBE174:
 3109              	.LBE177:
 3110              		.cfi_endproc
 3111              	.LFE31:
 3113              		.section	.text.vTaskSuspend,"ax",%progbits
ARM GAS  /tmp/ccaGl0eL.s 			page 156


 3114              		.align	1
 3115              		.global	vTaskSuspend
 3116              		.syntax unified
 3117              		.thumb
 3118              		.thumb_func
 3119              		.fpu fpv5-sp-d16
 3121              	vTaskSuspend:
 3122              	.LFB14:
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3123              		.loc 1 1697 0
 3124              		.cfi_startproc
 3125              		@ args = 0, pretend = 0, frame = 0
 3126              		@ frame_needed = 0, uses_anonymous_args = 0
 3127              	.LVL262:
 3128 0000 38B5     		push	{r3, r4, r5, lr}
 3129              	.LCFI34:
 3130              		.cfi_def_cfa_offset 16
 3131              		.cfi_offset 3, -16
 3132              		.cfi_offset 4, -12
 3133              		.cfi_offset 5, -8
 3134              		.cfi_offset 14, -4
 3135 0002 0446     		mov	r4, r0
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3136              		.loc 1 1700 0
 3137 0004 FFF7FEFF 		bl	vPortEnterCritical
 3138              	.LVL263:
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3139              		.loc 1 1704 0
 3140 0008 64B3     		cbz	r4, .L290
 3141              	.LVL264:
 3142              	.L279:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3143              		.loc 1 1710 0 discriminator 4
 3144 000a 251D     		adds	r5, r4, #4
 3145 000c 2846     		mov	r0, r5
 3146 000e FFF7FEFF 		bl	uxListRemove
 3147              	.LVL265:
 3148 0012 70B9     		cbnz	r0, .L280
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3149              		.loc 1 1712 0
 3150 0014 E26A     		ldr	r2, [r4, #44]
 3151 0016 02EB8201 		add	r1, r2, r2, lsl #2
 3152 001a 8B00     		lsls	r3, r1, #2
 3153 001c 2C49     		ldr	r1, .L294
 3154 001e CB58     		ldr	r3, [r1, r3]
 3155 0020 3BB9     		cbnz	r3, .L280
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3156              		.loc 1 1712 0 is_stmt 0 discriminator 1
 3157 0022 0123     		movs	r3, #1
 3158 0024 03FA02F2 		lsl	r2, r3, r2
 3159 0028 2A49     		ldr	r1, .L294+4
 3160 002a 0B68     		ldr	r3, [r1]
 3161 002c 23EA0203 		bic	r3, r3, r2
 3162 0030 0B60     		str	r3, [r1]
 3163              	.L280:
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3164              		.loc 1 1720 0 is_stmt 1
ARM GAS  /tmp/ccaGl0eL.s 			page 157


 3165 0032 A36A     		ldr	r3, [r4, #40]
 3166 0034 1BB1     		cbz	r3, .L281
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3167              		.loc 1 1722 0
 3168 0036 04F11800 		add	r0, r4, #24
 3169 003a FFF7FEFF 		bl	uxListRemove
 3170              	.LVL266:
 3171              	.L281:
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3172              		.loc 1 1729 0
 3173 003e 2946     		mov	r1, r5
 3174 0040 2548     		ldr	r0, .L294+8
 3175 0042 FFF7FEFF 		bl	vListInsertEnd
 3176              	.LVL267:
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3177              		.loc 1 1733 0
 3178 0046 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 3179 004a DBB2     		uxtb	r3, r3
 3180 004c 012B     		cmp	r3, #1
 3181 004e 0CD0     		beq	.L291
 3182              	.L282:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3183              		.loc 1 1742 0
 3184 0050 FFF7FEFF 		bl	vPortExitCritical
 3185              	.LVL268:
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3186              		.loc 1 1744 0
 3187 0054 214B     		ldr	r3, .L294+12
 3188 0056 1B68     		ldr	r3, [r3]
 3189 0058 5BB9     		cbnz	r3, .L292
 3190              	.L283:
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3191              		.loc 1 1759 0
 3192 005a 214B     		ldr	r3, .L294+16
 3193 005c 1B68     		ldr	r3, [r3]
 3194 005e A342     		cmp	r3, r4
 3195 0060 0ED0     		beq	.L293
 3196              	.L278:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3197              		.loc 1 1790 0
 3198 0062 38BD     		pop	{r3, r4, r5, pc}
 3199              	.LVL269:
 3200              	.L290:
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3201              		.loc 1 1704 0 discriminator 1
 3202 0064 1E4B     		ldr	r3, .L294+16
 3203 0066 1C68     		ldr	r4, [r3]
 3204              	.LVL270:
 3205 0068 CFE7     		b	.L279
 3206              	.LVL271:
 3207              	.L291:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3208              		.loc 1 1737 0
 3209 006a 0023     		movs	r3, #0
 3210 006c 84F85430 		strb	r3, [r4, #84]
 3211 0070 EEE7     		b	.L282
 3212              	.L292:
ARM GAS  /tmp/ccaGl0eL.s 			page 158


1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3213              		.loc 1 1748 0
 3214 0072 FFF7FEFF 		bl	vPortEnterCritical
 3215              	.LVL272:
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3216              		.loc 1 1750 0
 3217 0076 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3218              	.LVL273:
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3219              		.loc 1 1752 0
 3220 007a FFF7FEFF 		bl	vPortExitCritical
 3221              	.LVL274:
 3222 007e ECE7     		b	.L283
 3223              	.L293:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3224              		.loc 1 1761 0
 3225 0080 164B     		ldr	r3, .L294+12
 3226 0082 1B68     		ldr	r3, [r3]
 3227 0084 B3B1     		cbz	r3, .L285
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3228              		.loc 1 1764 0
 3229 0086 174B     		ldr	r3, .L294+20
 3230 0088 1B68     		ldr	r3, [r3]
 3231 008a 53B1     		cbz	r3, .L286
 3232              	.LBB178:
 3233              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3234              		.loc 2 195 0
 3235              		.syntax unified
 3236              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3237 008c 4FF05003 			mov r3, #80												
 3238 0090 72B6     		cpsid i													
 3239 0092 83F31188 		msr basepri, r3											
 3240 0096 BFF36F8F 		isb														
 3241 009a BFF34F8F 		dsb														
 3242 009e 62B6     		cpsie i													
 3243              	
 3244              	@ 0 "" 2
 3245              	.LVL275:
 3246              		.thumb
 3247              		.syntax unified
 3248              	.L287:
 3249 00a0 FEE7     		b	.L287
 3250              	.L286:
 3251              	.LBE179:
 3252              	.LBE178:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3253              		.loc 1 1765 0
 3254 00a2 114B     		ldr	r3, .L294+24
 3255 00a4 4FF08052 		mov	r2, #268435456
 3256 00a8 1A60     		str	r2, [r3]
 3257              		.syntax unified
 3258              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3259 00aa BFF34F8F 		dsb
 3260              	@ 0 "" 2
 3261              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3262 00ae BFF36F8F 		isb
ARM GAS  /tmp/ccaGl0eL.s 			page 159


 3263              	@ 0 "" 2
 3264              		.thumb
 3265              		.syntax unified
 3266 00b2 D6E7     		b	.L278
 3267              	.L285:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3268              		.loc 1 1772 0
 3269 00b4 084B     		ldr	r3, .L294+8
 3270 00b6 1A68     		ldr	r2, [r3]
 3271 00b8 0C4B     		ldr	r3, .L294+28
 3272 00ba 1B68     		ldr	r3, [r3]
 3273 00bc 9A42     		cmp	r2, r3
 3274 00be 03D1     		bne	.L288
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3275              		.loc 1 1778 0
 3276 00c0 074B     		ldr	r3, .L294+16
 3277 00c2 0022     		movs	r2, #0
 3278 00c4 1A60     		str	r2, [r3]
 3279 00c6 CCE7     		b	.L278
 3280              	.L288:
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3281              		.loc 1 1782 0
 3282 00c8 FFF7FEFF 		bl	vTaskSwitchContext
 3283              	.LVL276:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3284              		.loc 1 1790 0
 3285 00cc C9E7     		b	.L278
 3286              	.L295:
 3287 00ce 00BF     		.align	2
 3288              	.L294:
 3289 00d0 00000000 		.word	.LANCHOR4
 3290 00d4 00000000 		.word	.LANCHOR13
 3291 00d8 00000000 		.word	.LANCHOR0
 3292 00dc 00000000 		.word	.LANCHOR11
 3293 00e0 00000000 		.word	.LANCHOR10
 3294 00e4 00000000 		.word	.LANCHOR16
 3295 00e8 04ED00E0 		.word	-536810236
 3296 00ec 00000000 		.word	.LANCHOR9
 3297              		.cfi_endproc
 3298              	.LFE14:
 3300              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3301              		.align	1
 3302              		.global	vTaskPlaceOnEventList
 3303              		.syntax unified
 3304              		.thumb
 3305              		.thumb_func
 3306              		.fpu fpv5-sp-d16
 3308              	vTaskPlaceOnEventList:
 3309              	.LFB32:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3310              		.loc 1 3021 0
 3311              		.cfi_startproc
 3312              		@ args = 0, pretend = 0, frame = 0
 3313              		@ frame_needed = 0, uses_anonymous_args = 0
 3314              	.LVL277:
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3315              		.loc 1 3022 0
ARM GAS  /tmp/ccaGl0eL.s 			page 160


 3316 0000 50B9     		cbnz	r0, .L297
 3317              	.LBB180:
 3318              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3319              		.loc 2 195 0
 3320              		.syntax unified
 3321              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3322 0002 4FF05003 			mov r3, #80												
 3323 0006 72B6     		cpsid i													
 3324 0008 83F31188 		msr basepri, r3											
 3325 000c BFF36F8F 		isb														
 3326 0010 BFF34F8F 		dsb														
 3327 0014 62B6     		cpsie i													
 3328              	
 3329              	@ 0 "" 2
 3330              	.LVL278:
 3331              		.thumb
 3332              		.syntax unified
 3333              	.L298:
 3334 0016 FEE7     		b	.L298
 3335              	.L297:
 3336              	.LBE181:
 3337              	.LBE180:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3338              		.loc 1 3021 0
 3339 0018 10B5     		push	{r4, lr}
 3340              	.LCFI35:
 3341              		.cfi_def_cfa_offset 8
 3342              		.cfi_offset 4, -8
 3343              		.cfi_offset 14, -4
 3344 001a 0C46     		mov	r4, r1
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3345              		.loc 1 3031 0
 3346 001c 044B     		ldr	r3, .L301
 3347 001e 1968     		ldr	r1, [r3]
 3348              	.LVL279:
 3349 0020 1831     		adds	r1, r1, #24
 3350 0022 FFF7FEFF 		bl	vListInsert
 3351              	.LVL280:
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3352              		.loc 1 3033 0
 3353 0026 0121     		movs	r1, #1
 3354 0028 2046     		mov	r0, r4
 3355 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3356              	.LVL281:
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3357              		.loc 1 3034 0
 3358 002e 10BD     		pop	{r4, pc}
 3359              	.LVL282:
 3360              	.L302:
 3361              		.align	2
 3362              	.L301:
 3363 0030 00000000 		.word	.LANCHOR10
 3364              		.cfi_endproc
 3365              	.LFE32:
 3367              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3368              		.align	1
ARM GAS  /tmp/ccaGl0eL.s 			page 161


 3369              		.global	vTaskPlaceOnUnorderedEventList
 3370              		.syntax unified
 3371              		.thumb
 3372              		.thumb_func
 3373              		.fpu fpv5-sp-d16
 3375              	vTaskPlaceOnUnorderedEventList:
 3376              	.LFB33:
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3377              		.loc 1 3038 0
 3378              		.cfi_startproc
 3379              		@ args = 0, pretend = 0, frame = 0
 3380              		@ frame_needed = 0, uses_anonymous_args = 0
 3381              	.LVL283:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3382              		.loc 1 3039 0
 3383 0000 50B9     		cbnz	r0, .L304
 3384              	.LBB182:
 3385              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3386              		.loc 2 195 0
 3387              		.syntax unified
 3388              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3389 0002 4FF05003 			mov r3, #80												
 3390 0006 72B6     		cpsid i													
 3391 0008 83F31188 		msr basepri, r3											
 3392 000c BFF36F8F 		isb														
 3393 0010 BFF34F8F 		dsb														
 3394 0014 62B6     		cpsie i													
 3395              	
 3396              	@ 0 "" 2
 3397              	.LVL284:
 3398              		.thumb
 3399              		.syntax unified
 3400              	.L305:
 3401 0016 FEE7     		b	.L305
 3402              	.L304:
 3403 0018 0346     		mov	r3, r0
 3404              	.LBE183:
 3405              	.LBE182:
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3406              		.loc 1 3043 0
 3407 001a 1048     		ldr	r0, .L310
 3408              	.LVL285:
 3409 001c 0068     		ldr	r0, [r0]
 3410 001e 50B9     		cbnz	r0, .L306
 3411              	.LBB184:
 3412              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3413              		.loc 2 195 0
 3414              		.syntax unified
 3415              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3416 0020 4FF05003 			mov r3, #80												
 3417 0024 72B6     		cpsid i													
 3418 0026 83F31188 		msr basepri, r3											
 3419 002a BFF36F8F 		isb														
 3420 002e BFF34F8F 		dsb														
 3421 0032 62B6     		cpsie i													
ARM GAS  /tmp/ccaGl0eL.s 			page 162


 3422              	
 3423              	@ 0 "" 2
 3424              	.LVL286:
 3425              		.thumb
 3426              		.syntax unified
 3427              	.L307:
 3428 0034 FEE7     		b	.L307
 3429              	.LVL287:
 3430              	.L306:
 3431              	.LBE185:
 3432              	.LBE184:
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3433              		.loc 1 3038 0
 3434 0036 10B5     		push	{r4, lr}
 3435              	.LCFI36:
 3436              		.cfi_def_cfa_offset 8
 3437              		.cfi_offset 4, -8
 3438              		.cfi_offset 14, -4
 3439 0038 1846     		mov	r0, r3
 3440 003a 1446     		mov	r4, r2
 3441 003c 0B46     		mov	r3, r1
 3442              	.LVL288:
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3443              		.loc 1 3048 0
 3444 003e 084A     		ldr	r2, .L310+4
 3445              	.LVL289:
 3446 0040 1168     		ldr	r1, [r2]
 3447              	.LVL290:
 3448 0042 43F00043 		orr	r3, r3, #-2147483648
 3449              	.LVL291:
 3450 0046 8B61     		str	r3, [r1, #24]
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3451              		.loc 1 3055 0
 3452 0048 1168     		ldr	r1, [r2]
 3453 004a 1831     		adds	r1, r1, #24
 3454 004c FFF7FEFF 		bl	vListInsertEnd
 3455              	.LVL292:
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3456              		.loc 1 3057 0
 3457 0050 0121     		movs	r1, #1
 3458 0052 2046     		mov	r0, r4
 3459 0054 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3460              	.LVL293:
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3461              		.loc 1 3058 0
 3462 0058 10BD     		pop	{r4, pc}
 3463              	.LVL294:
 3464              	.L311:
 3465 005a 00BF     		.align	2
 3466              	.L310:
 3467 005c 00000000 		.word	.LANCHOR16
 3468 0060 00000000 		.word	.LANCHOR10
 3469              		.cfi_endproc
 3470              	.LFE33:
 3472              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3473              		.align	1
 3474              		.global	xTaskRemoveFromEventList
ARM GAS  /tmp/ccaGl0eL.s 			page 163


 3475              		.syntax unified
 3476              		.thumb
 3477              		.thumb_func
 3478              		.fpu fpv5-sp-d16
 3480              	xTaskRemoveFromEventList:
 3481              	.LFB34:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3482              		.loc 1 3095 0
 3483              		.cfi_startproc
 3484              		@ args = 0, pretend = 0, frame = 0
 3485              		@ frame_needed = 0, uses_anonymous_args = 0
 3486              	.LVL295:
 3487 0000 38B5     		push	{r3, r4, r5, lr}
 3488              	.LCFI37:
 3489              		.cfi_def_cfa_offset 16
 3490              		.cfi_offset 3, -16
 3491              		.cfi_offset 4, -12
 3492              		.cfi_offset 5, -8
 3493              		.cfi_offset 14, -4
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3494              		.loc 1 3112 0
 3495 0002 C368     		ldr	r3, [r0, #12]
 3496 0004 DC68     		ldr	r4, [r3, #12]
 3497              	.LVL296:
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3498              		.loc 1 3113 0
 3499 0006 54B9     		cbnz	r4, .L313
 3500              	.LBB186:
 3501              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3502              		.loc 2 195 0
 3503              		.syntax unified
 3504              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3505 0008 4FF05003 			mov r3, #80												
 3506 000c 72B6     		cpsid i													
 3507 000e 83F31188 		msr basepri, r3											
 3508 0012 BFF36F8F 		isb														
 3509 0016 BFF34F8F 		dsb														
 3510 001a 62B6     		cpsie i													
 3511              	
 3512              	@ 0 "" 2
 3513              	.LVL297:
 3514              		.thumb
 3515              		.syntax unified
 3516              	.L314:
 3517 001c FEE7     		b	.L314
 3518              	.L313:
 3519              	.LBE187:
 3520              	.LBE186:
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3521              		.loc 1 3114 0
 3522 001e 04F11805 		add	r5, r4, #24
 3523 0022 2846     		mov	r0, r5
 3524              	.LVL298:
 3525 0024 FFF7FEFF 		bl	uxListRemove
 3526              	.LVL299:
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccaGl0eL.s 			page 164


 3527              		.loc 1 3116 0
 3528 0028 134B     		ldr	r3, .L320
 3529 002a 1B68     		ldr	r3, [r3]
 3530 002c E3B9     		cbnz	r3, .L315
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3531              		.loc 1 3118 0
 3532 002e 251D     		adds	r5, r4, #4
 3533 0030 2846     		mov	r0, r5
 3534 0032 FFF7FEFF 		bl	uxListRemove
 3535              	.LVL300:
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3536              		.loc 1 3119 0
 3537 0036 E36A     		ldr	r3, [r4, #44]
 3538 0038 0122     		movs	r2, #1
 3539 003a 9A40     		lsls	r2, r2, r3
 3540 003c 0F49     		ldr	r1, .L320+4
 3541 003e 0868     		ldr	r0, [r1]
 3542 0040 0243     		orrs	r2, r2, r0
 3543 0042 0A60     		str	r2, [r1]
 3544 0044 03EB8303 		add	r3, r3, r3, lsl #2
 3545 0048 9A00     		lsls	r2, r3, #2
 3546 004a 2946     		mov	r1, r5
 3547 004c 0C48     		ldr	r0, .L320+8
 3548 004e 1044     		add	r0, r0, r2
 3549 0050 FFF7FEFF 		bl	vListInsertEnd
 3550              	.LVL301:
 3551              	.L316:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3552              		.loc 1 3142 0
 3553 0054 E26A     		ldr	r2, [r4, #44]
 3554 0056 0B4B     		ldr	r3, .L320+12
 3555 0058 1B68     		ldr	r3, [r3]
 3556 005a DB6A     		ldr	r3, [r3, #44]
 3557 005c 9A42     		cmp	r2, r3
 3558 005e 08D9     		bls	.L318
 3559              	.LVL302:
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3560              		.loc 1 3151 0
 3561 0060 0120     		movs	r0, #1
 3562 0062 094B     		ldr	r3, .L320+16
 3563 0064 1860     		str	r0, [r3]
 3564              	.LVL303:
 3565              	.L312:
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3566              		.loc 1 3159 0
 3567 0066 38BD     		pop	{r3, r4, r5, pc}
 3568              	.LVL304:
 3569              	.L315:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3570              		.loc 1 3139 0
 3571 0068 2946     		mov	r1, r5
 3572 006a 0848     		ldr	r0, .L320+20
 3573 006c FFF7FEFF 		bl	vListInsertEnd
 3574              	.LVL305:
 3575 0070 F0E7     		b	.L316
 3576              	.L318:
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccaGl0eL.s 			page 165


 3577              		.loc 1 3155 0
 3578 0072 0020     		movs	r0, #0
 3579              	.LVL306:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3580              		.loc 1 3158 0
 3581 0074 F7E7     		b	.L312
 3582              	.L321:
 3583 0076 00BF     		.align	2
 3584              	.L320:
 3585 0078 00000000 		.word	.LANCHOR16
 3586 007c 00000000 		.word	.LANCHOR13
 3587 0080 00000000 		.word	.LANCHOR4
 3588 0084 00000000 		.word	.LANCHOR10
 3589 0088 00000000 		.word	.LANCHOR19
 3590 008c 00000000 		.word	.LANCHOR1
 3591              		.cfi_endproc
 3592              	.LFE34:
 3594              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3595              		.align	1
 3596              		.global	vTaskRemoveFromUnorderedEventList
 3597              		.syntax unified
 3598              		.thumb
 3599              		.thumb_func
 3600              		.fpu fpv5-sp-d16
 3602              	vTaskRemoveFromUnorderedEventList:
 3603              	.LFB35:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3604              		.loc 1 3163 0
 3605              		.cfi_startproc
 3606              		@ args = 0, pretend = 0, frame = 0
 3607              		@ frame_needed = 0, uses_anonymous_args = 0
 3608              	.LVL307:
 3609 0000 38B5     		push	{r3, r4, r5, lr}
 3610              	.LCFI38:
 3611              		.cfi_def_cfa_offset 16
 3612              		.cfi_offset 3, -16
 3613              		.cfi_offset 4, -12
 3614              		.cfi_offset 5, -8
 3615              		.cfi_offset 14, -4
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3616              		.loc 1 3168 0
 3617 0002 1E4B     		ldr	r3, .L330
 3618 0004 1B68     		ldr	r3, [r3]
 3619 0006 53B9     		cbnz	r3, .L323
 3620              	.LBB188:
 3621              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3622              		.loc 2 195 0
 3623              		.syntax unified
 3624              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3625 0008 4FF05003 			mov r3, #80												
 3626 000c 72B6     		cpsid i													
 3627 000e 83F31188 		msr basepri, r3											
 3628 0012 BFF36F8F 		isb														
 3629 0016 BFF34F8F 		dsb														
 3630 001a 62B6     		cpsie i													
 3631              	
ARM GAS  /tmp/ccaGl0eL.s 			page 166


 3632              	@ 0 "" 2
 3633              	.LVL308:
 3634              		.thumb
 3635              		.syntax unified
 3636              	.L324:
 3637 001c FEE7     		b	.L324
 3638              	.L323:
 3639              	.LBE189:
 3640              	.LBE188:
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3641              		.loc 1 3171 0
 3642 001e 41F00041 		orr	r1, r1, #-2147483648
 3643              	.LVL309:
 3644 0022 0160     		str	r1, [r0]
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3645              		.loc 1 3175 0
 3646 0024 C468     		ldr	r4, [r0, #12]
 3647              	.LVL310:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3648              		.loc 1 3176 0
 3649 0026 F4B1     		cbz	r4, .L329
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3650              		.loc 1 3177 0
 3651 0028 FFF7FEFF 		bl	uxListRemove
 3652              	.LVL311:
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3653              		.loc 1 3182 0
 3654 002c 251D     		adds	r5, r4, #4
 3655 002e 2846     		mov	r0, r5
 3656 0030 FFF7FEFF 		bl	uxListRemove
 3657              	.LVL312:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3658              		.loc 1 3183 0
 3659 0034 E36A     		ldr	r3, [r4, #44]
 3660 0036 0122     		movs	r2, #1
 3661 0038 9A40     		lsls	r2, r2, r3
 3662 003a 1149     		ldr	r1, .L330+4
 3663 003c 0868     		ldr	r0, [r1]
 3664 003e 0243     		orrs	r2, r2, r0
 3665 0040 0A60     		str	r2, [r1]
 3666 0042 03EB8303 		add	r3, r3, r3, lsl #2
 3667 0046 9A00     		lsls	r2, r3, #2
 3668 0048 2946     		mov	r1, r5
 3669 004a 0E48     		ldr	r0, .L330+8
 3670 004c 1044     		add	r0, r0, r2
 3671 004e FFF7FEFF 		bl	vListInsertEnd
 3672              	.LVL313:
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3673              		.loc 1 3185 0
 3674 0052 E26A     		ldr	r2, [r4, #44]
 3675 0054 0C4B     		ldr	r3, .L330+12
 3676 0056 1B68     		ldr	r3, [r3]
 3677 0058 DB6A     		ldr	r3, [r3, #44]
 3678 005a 9A42     		cmp	r2, r3
 3679 005c 02D9     		bls	.L322
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3680              		.loc 1 3191 0
ARM GAS  /tmp/ccaGl0eL.s 			page 167


 3681 005e 0B4B     		ldr	r3, .L330+16
 3682 0060 0122     		movs	r2, #1
 3683 0062 1A60     		str	r2, [r3]
 3684              	.L322:
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3685              		.loc 1 3193 0
 3686 0064 38BD     		pop	{r3, r4, r5, pc}
 3687              	.LVL314:
 3688              	.L329:
 3689              	.LBB190:
 3690              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3691              		.loc 2 195 0
 3692              		.syntax unified
 3693              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3694 0066 4FF05003 			mov r3, #80												
 3695 006a 72B6     		cpsid i													
 3696 006c 83F31188 		msr basepri, r3											
 3697 0070 BFF36F8F 		isb														
 3698 0074 BFF34F8F 		dsb														
 3699 0078 62B6     		cpsie i													
 3700              	
 3701              	@ 0 "" 2
 3702              	.LVL315:
 3703              		.thumb
 3704              		.syntax unified
 3705              	.L326:
 3706 007a FEE7     		b	.L326
 3707              	.L331:
 3708              		.align	2
 3709              	.L330:
 3710 007c 00000000 		.word	.LANCHOR16
 3711 0080 00000000 		.word	.LANCHOR13
 3712 0084 00000000 		.word	.LANCHOR4
 3713 0088 00000000 		.word	.LANCHOR10
 3714 008c 00000000 		.word	.LANCHOR19
 3715              	.LBE191:
 3716              	.LBE190:
 3717              		.cfi_endproc
 3718              	.LFE35:
 3720              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3721              		.align	1
 3722              		.global	vTaskSetTimeOutState
 3723              		.syntax unified
 3724              		.thumb
 3725              		.thumb_func
 3726              		.fpu fpv5-sp-d16
 3728              	vTaskSetTimeOutState:
 3729              	.LFB36:
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3730              		.loc 1 3197 0
 3731              		.cfi_startproc
 3732              		@ args = 0, pretend = 0, frame = 0
 3733              		@ frame_needed = 0, uses_anonymous_args = 0
 3734              	.LVL316:
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3735              		.loc 1 3198 0
ARM GAS  /tmp/ccaGl0eL.s 			page 168


 3736 0000 50B9     		cbnz	r0, .L333
 3737              	.LBB192:
 3738              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3739              		.loc 2 195 0
 3740              		.syntax unified
 3741              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3742 0002 4FF05003 			mov r3, #80												
 3743 0006 72B6     		cpsid i													
 3744 0008 83F31188 		msr basepri, r3											
 3745 000c BFF36F8F 		isb														
 3746 0010 BFF34F8F 		dsb														
 3747 0014 62B6     		cpsie i													
 3748              	
 3749              	@ 0 "" 2
 3750              	.LVL317:
 3751              		.thumb
 3752              		.syntax unified
 3753              	.L334:
 3754 0016 FEE7     		b	.L334
 3755              	.L333:
 3756              	.LBE193:
 3757              	.LBE192:
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3758              		.loc 1 3197 0
 3759 0018 10B5     		push	{r4, lr}
 3760              	.LCFI39:
 3761              		.cfi_def_cfa_offset 8
 3762              		.cfi_offset 4, -8
 3763              		.cfi_offset 14, -4
 3764 001a 0446     		mov	r4, r0
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3765              		.loc 1 3199 0
 3766 001c FFF7FEFF 		bl	vPortEnterCritical
 3767              	.LVL318:
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3768              		.loc 1 3201 0
 3769 0020 044B     		ldr	r3, .L337
 3770 0022 1B68     		ldr	r3, [r3]
 3771 0024 2360     		str	r3, [r4]
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3772              		.loc 1 3202 0
 3773 0026 044B     		ldr	r3, .L337+4
 3774 0028 1B68     		ldr	r3, [r3]
 3775 002a 6360     		str	r3, [r4, #4]
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3776              		.loc 1 3204 0
 3777 002c FFF7FEFF 		bl	vPortExitCritical
 3778              	.LVL319:
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3779              		.loc 1 3205 0
 3780 0030 10BD     		pop	{r4, pc}
 3781              	.LVL320:
 3782              	.L338:
 3783 0032 00BF     		.align	2
 3784              	.L337:
 3785 0034 00000000 		.word	.LANCHOR17
ARM GAS  /tmp/ccaGl0eL.s 			page 169


 3786 0038 00000000 		.word	.LANCHOR15
 3787              		.cfi_endproc
 3788              	.LFE36:
 3790              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3791              		.align	1
 3792              		.global	vTaskInternalSetTimeOutState
 3793              		.syntax unified
 3794              		.thumb
 3795              		.thumb_func
 3796              		.fpu fpv5-sp-d16
 3798              	vTaskInternalSetTimeOutState:
 3799              	.LFB37:
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3800              		.loc 1 3209 0
 3801              		.cfi_startproc
 3802              		@ args = 0, pretend = 0, frame = 0
 3803              		@ frame_needed = 0, uses_anonymous_args = 0
 3804              		@ link register save eliminated.
 3805              	.LVL321:
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3806              		.loc 1 3211 0
 3807 0000 034B     		ldr	r3, .L340
 3808 0002 1B68     		ldr	r3, [r3]
 3809 0004 0360     		str	r3, [r0]
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3810              		.loc 1 3212 0
 3811 0006 034B     		ldr	r3, .L340+4
 3812 0008 1B68     		ldr	r3, [r3]
 3813 000a 4360     		str	r3, [r0, #4]
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3814              		.loc 1 3213 0
 3815 000c 7047     		bx	lr
 3816              	.L341:
 3817 000e 00BF     		.align	2
 3818              	.L340:
 3819 0010 00000000 		.word	.LANCHOR17
 3820 0014 00000000 		.word	.LANCHOR15
 3821              		.cfi_endproc
 3822              	.LFE37:
 3824              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3825              		.align	1
 3826              		.global	xTaskCheckForTimeOut
 3827              		.syntax unified
 3828              		.thumb
 3829              		.thumb_func
 3830              		.fpu fpv5-sp-d16
 3832              	xTaskCheckForTimeOut:
 3833              	.LFB38:
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3834              		.loc 1 3217 0
 3835              		.cfi_startproc
 3836              		@ args = 0, pretend = 0, frame = 0
 3837              		@ frame_needed = 0, uses_anonymous_args = 0
 3838              	.LVL322:
 3839 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3840              	.LCFI40:
 3841              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccaGl0eL.s 			page 170


 3842              		.cfi_offset 3, -24
 3843              		.cfi_offset 4, -20
 3844              		.cfi_offset 5, -16
 3845              		.cfi_offset 6, -12
 3846              		.cfi_offset 7, -8
 3847              		.cfi_offset 14, -4
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3848              		.loc 1 3220 0
 3849 0002 60B1     		cbz	r0, .L353
 3850 0004 0546     		mov	r5, r0
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3851              		.loc 1 3221 0
 3852 0006 A9B9     		cbnz	r1, .L345
 3853              	.LBB194:
 3854              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3855              		.loc 2 195 0
 3856              		.syntax unified
 3857              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3858 0008 4FF05003 			mov r3, #80												
 3859 000c 72B6     		cpsid i													
 3860 000e 83F31188 		msr basepri, r3											
 3861 0012 BFF36F8F 		isb														
 3862 0016 BFF34F8F 		dsb														
 3863 001a 62B6     		cpsie i													
 3864              	
 3865              	@ 0 "" 2
 3866              	.LVL323:
 3867              		.thumb
 3868              		.syntax unified
 3869              	.L346:
 3870 001c FEE7     		b	.L346
 3871              	.L353:
 3872              	.LBE195:
 3873              	.LBE194:
 3874              	.LBB196:
 3875              	.LBB197:
 3876              		.syntax unified
 3877              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3878 001e 4FF05003 			mov r3, #80												
 3879 0022 72B6     		cpsid i													
 3880 0024 83F31188 		msr basepri, r3											
 3881 0028 BFF36F8F 		isb														
 3882 002c BFF34F8F 		dsb														
 3883 0030 62B6     		cpsie i													
 3884              	
 3885              	@ 0 "" 2
 3886              	.LVL324:
 3887              		.thumb
 3888              		.syntax unified
 3889              	.L344:
 3890 0032 FEE7     		b	.L344
 3891              	.L345:
 3892 0034 0C46     		mov	r4, r1
 3893              	.LBE197:
 3894              	.LBE196:
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccaGl0eL.s 			page 171


 3895              		.loc 1 3223 0
 3896 0036 FFF7FEFF 		bl	vPortEnterCritical
 3897              	.LVL325:
 3898              	.LBB198:
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3899              		.loc 1 3226 0
 3900 003a 114B     		ldr	r3, .L355
 3901 003c 1968     		ldr	r1, [r3]
 3902              	.LVL326:
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3903              		.loc 1 3227 0
 3904 003e 6868     		ldr	r0, [r5, #4]
 3905 0040 0A1A     		subs	r2, r1, r0
 3906              	.LVL327:
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3907              		.loc 1 3241 0
 3908 0042 2368     		ldr	r3, [r4]
 3909 0044 B3F1FF3F 		cmp	r3, #-1
 3910 0048 16D0     		beq	.L350
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3911              		.loc 1 3251 0
 3912 004a 2F68     		ldr	r7, [r5]
 3913 004c 0D4E     		ldr	r6, .L355+4
 3914 004e 3668     		ldr	r6, [r6]
 3915 0050 B742     		cmp	r7, r6
 3916 0052 01D0     		beq	.L348
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3917              		.loc 1 3251 0 is_stmt 0 discriminator 1
 3918 0054 8842     		cmp	r0, r1
 3919 0056 11D9     		bls	.L351
 3920              	.L348:
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3921              		.loc 1 3260 0 is_stmt 1
 3922 0058 9342     		cmp	r3, r2
 3923 005a 03D8     		bhi	.L354
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3924              		.loc 1 3269 0
 3925 005c 0023     		movs	r3, #0
 3926 005e 2360     		str	r3, [r4]
 3927              	.LVL328:
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3928              		.loc 1 3270 0
 3929 0060 0124     		movs	r4, #1
 3930              	.LVL329:
 3931 0062 05E0     		b	.L347
 3932              	.LVL330:
 3933              	.L354:
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3934              		.loc 1 3263 0
 3935 0064 9B1A     		subs	r3, r3, r2
 3936 0066 2360     		str	r3, [r4]
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3937              		.loc 1 3264 0
 3938 0068 2846     		mov	r0, r5
 3939 006a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3940              	.LVL331:
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccaGl0eL.s 			page 172


 3941              		.loc 1 3265 0
 3942 006e 0024     		movs	r4, #0
 3943              	.LVL332:
 3944              	.L347:
 3945              	.LBE198:
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3946              		.loc 1 3273 0
 3947 0070 FFF7FEFF 		bl	vPortExitCritical
 3948              	.LVL333:
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3949              		.loc 1 3276 0
 3950 0074 2046     		mov	r0, r4
 3951 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3952              	.LVL334:
 3953              	.L350:
 3954              	.LBB199:
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3955              		.loc 1 3246 0
 3956 0078 0024     		movs	r4, #0
 3957              	.LVL335:
 3958 007a F9E7     		b	.L347
 3959              	.LVL336:
 3960              	.L351:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3961              		.loc 1 3258 0
 3962 007c 0124     		movs	r4, #1
 3963              	.LVL337:
 3964 007e F7E7     		b	.L347
 3965              	.L356:
 3966              		.align	2
 3967              	.L355:
 3968 0080 00000000 		.word	.LANCHOR15
 3969 0084 00000000 		.word	.LANCHOR17
 3970              	.LBE199:
 3971              		.cfi_endproc
 3972              	.LFE38:
 3974              		.section	.text.vTaskMissedYield,"ax",%progbits
 3975              		.align	1
 3976              		.global	vTaskMissedYield
 3977              		.syntax unified
 3978              		.thumb
 3979              		.thumb_func
 3980              		.fpu fpv5-sp-d16
 3982              	vTaskMissedYield:
 3983              	.LFB39:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3984              		.loc 1 3280 0
 3985              		.cfi_startproc
 3986              		@ args = 0, pretend = 0, frame = 0
 3987              		@ frame_needed = 0, uses_anonymous_args = 0
 3988              		@ link register save eliminated.
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3989              		.loc 1 3281 0
 3990 0000 014B     		ldr	r3, .L358
 3991 0002 0122     		movs	r2, #1
 3992 0004 1A60     		str	r2, [r3]
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccaGl0eL.s 			page 173


 3993              		.loc 1 3282 0
 3994 0006 7047     		bx	lr
 3995              	.L359:
 3996              		.align	2
 3997              	.L358:
 3998 0008 00000000 		.word	.LANCHOR19
 3999              		.cfi_endproc
 4000              	.LFE39:
 4002              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4003              		.align	1
 4004              		.global	xTaskGetCurrentTaskHandle
 4005              		.syntax unified
 4006              		.thumb
 4007              		.thumb_func
 4008              		.fpu fpv5-sp-d16
 4010              	xTaskGetCurrentTaskHandle:
 4011              	.LFB45:
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4012              		.loc 1 3907 0
 4013              		.cfi_startproc
 4014              		@ args = 0, pretend = 0, frame = 0
 4015              		@ frame_needed = 0, uses_anonymous_args = 0
 4016              		@ link register save eliminated.
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4017              		.loc 1 3913 0
 4018 0000 014B     		ldr	r3, .L361
 4019 0002 1868     		ldr	r0, [r3]
 4020              	.LVL338:
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4021              		.loc 1 3916 0
 4022 0004 7047     		bx	lr
 4023              	.L362:
 4024 0006 00BF     		.align	2
 4025              	.L361:
 4026 0008 00000000 		.word	.LANCHOR10
 4027              		.cfi_endproc
 4028              	.LFE45:
 4030              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4031              		.align	1
 4032              		.global	xTaskGetSchedulerState
 4033              		.syntax unified
 4034              		.thumb
 4035              		.thumb_func
 4036              		.fpu fpv5-sp-d16
 4038              	xTaskGetSchedulerState:
 4039              	.LFB46:
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4040              		.loc 1 3924 0
 4041              		.cfi_startproc
 4042              		@ args = 0, pretend = 0, frame = 0
 4043              		@ frame_needed = 0, uses_anonymous_args = 0
 4044              		@ link register save eliminated.
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4045              		.loc 1 3927 0
 4046 0000 054B     		ldr	r3, .L368
 4047 0002 1B68     		ldr	r3, [r3]
 4048 0004 33B1     		cbz	r3, .L365
ARM GAS  /tmp/ccaGl0eL.s 			page 174


3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4049              		.loc 1 3933 0
 4050 0006 054B     		ldr	r3, .L368+4
 4051 0008 1B68     		ldr	r3, [r3]
 4052 000a 0BB1     		cbz	r3, .L367
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4053              		.loc 1 3939 0
 4054 000c 0020     		movs	r0, #0
 4055              	.LVL339:
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4056              		.loc 1 3944 0
 4057 000e 7047     		bx	lr
 4058              	.LVL340:
 4059              	.L367:
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4060              		.loc 1 3935 0
 4061 0010 0220     		movs	r0, #2
 4062 0012 7047     		bx	lr
 4063              	.L365:
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4064              		.loc 1 3929 0
 4065 0014 0120     		movs	r0, #1
 4066 0016 7047     		bx	lr
 4067              	.L369:
 4068              		.align	2
 4069              	.L368:
 4070 0018 00000000 		.word	.LANCHOR11
 4071 001c 00000000 		.word	.LANCHOR16
 4072              		.cfi_endproc
 4073              	.LFE46:
 4075              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4076              		.align	1
 4077              		.global	xTaskPriorityInherit
 4078              		.syntax unified
 4079              		.thumb
 4080              		.thumb_func
 4081              		.fpu fpv5-sp-d16
 4083              	xTaskPriorityInherit:
 4084              	.LFB47:
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4085              		.loc 1 3952 0
 4086              		.cfi_startproc
 4087              		@ args = 0, pretend = 0, frame = 0
 4088              		@ frame_needed = 0, uses_anonymous_args = 0
 4089              	.LVL341:
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4090              		.loc 1 3959 0
 4091 0000 0028     		cmp	r0, #0
 4092 0002 50D0     		beq	.L376
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4093              		.loc 1 3952 0
 4094 0004 38B5     		push	{r3, r4, r5, lr}
 4095              	.LCFI41:
 4096              		.cfi_def_cfa_offset 16
 4097              		.cfi_offset 3, -16
 4098              		.cfi_offset 4, -12
 4099              		.cfi_offset 5, -8
ARM GAS  /tmp/ccaGl0eL.s 			page 175


 4100              		.cfi_offset 14, -4
 4101 0006 0446     		mov	r4, r0
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4102              		.loc 1 3964 0
 4103 0008 C26A     		ldr	r2, [r0, #44]
 4104 000a 2849     		ldr	r1, .L384
 4105 000c 0968     		ldr	r1, [r1]
 4106 000e C96A     		ldr	r1, [r1, #44]
 4107 0010 8A42     		cmp	r2, r1
 4108 0012 3ED2     		bcs	.L372
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4109              		.loc 1 3969 0
 4110 0014 8169     		ldr	r1, [r0, #24]
 4111 0016 0029     		cmp	r1, #0
 4112 0018 05DB     		blt	.L373
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4113              		.loc 1 3971 0
 4114 001a 2449     		ldr	r1, .L384
 4115 001c 0968     		ldr	r1, [r1]
 4116 001e C96A     		ldr	r1, [r1, #44]
 4117 0020 C1F10701 		rsb	r1, r1, #7
 4118 0024 8161     		str	r1, [r0, #24]
 4119              	.L373:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4120              		.loc 1 3980 0
 4121 0026 6069     		ldr	r0, [r4, #20]
 4122              	.LVL342:
 4123 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4124 002c 9100     		lsls	r1, r2, #2
 4125 002e 204A     		ldr	r2, .L384+4
 4126 0030 0A44     		add	r2, r2, r1
 4127 0032 9042     		cmp	r0, r2
 4128 0034 05D0     		beq	.L382
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4129              		.loc 1 3998 0
 4130 0036 1D4A     		ldr	r2, .L384
 4131 0038 1268     		ldr	r2, [r2]
 4132 003a D26A     		ldr	r2, [r2, #44]
 4133 003c E262     		str	r2, [r4, #44]
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4134              		.loc 1 4004 0
 4135 003e 0120     		movs	r0, #1
 4136              	.LVL343:
 4137              	.L370:
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4138              		.loc 1 4031 0
 4139 0040 38BD     		pop	{r3, r4, r5, pc}
 4140              	.LVL344:
 4141              	.L382:
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4142              		.loc 1 3982 0
 4143 0042 251D     		adds	r5, r4, #4
 4144 0044 2846     		mov	r0, r5
 4145 0046 FFF7FEFF 		bl	uxListRemove
 4146              	.LVL345:
 4147 004a 68B9     		cbnz	r0, .L375
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccaGl0eL.s 			page 176


 4148              		.loc 1 3984 0
 4149 004c E36A     		ldr	r3, [r4, #44]
 4150 004e 03EB8301 		add	r1, r3, r3, lsl #2
 4151 0052 8A00     		lsls	r2, r1, #2
 4152 0054 1649     		ldr	r1, .L384+4
 4153 0056 8A58     		ldr	r2, [r1, r2]
 4154 0058 32B9     		cbnz	r2, .L375
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4155              		.loc 1 3984 0 is_stmt 0 discriminator 1
 4156 005a 0122     		movs	r2, #1
 4157 005c 9A40     		lsls	r2, r2, r3
 4158 005e 1549     		ldr	r1, .L384+8
 4159 0060 0B68     		ldr	r3, [r1]
 4160 0062 23EA0203 		bic	r3, r3, r2
 4161 0066 0B60     		str	r3, [r1]
 4162              	.L375:
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4163              		.loc 1 3992 0 is_stmt 1
 4164 0068 104B     		ldr	r3, .L384
 4165 006a 1B68     		ldr	r3, [r3]
 4166 006c DB6A     		ldr	r3, [r3, #44]
 4167 006e E362     		str	r3, [r4, #44]
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4168              		.loc 1 3993 0
 4169 0070 0124     		movs	r4, #1
 4170              	.LVL346:
 4171 0072 04FA03F2 		lsl	r2, r4, r3
 4172 0076 0F49     		ldr	r1, .L384+8
 4173 0078 0868     		ldr	r0, [r1]
 4174 007a 0243     		orrs	r2, r2, r0
 4175 007c 0A60     		str	r2, [r1]
 4176 007e 03EB8303 		add	r3, r3, r3, lsl #2
 4177 0082 9A00     		lsls	r2, r3, #2
 4178 0084 2946     		mov	r1, r5
 4179 0086 0A48     		ldr	r0, .L384+4
 4180 0088 1044     		add	r0, r0, r2
 4181 008a FFF7FEFF 		bl	vListInsertEnd
 4182              	.LVL347:
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4183              		.loc 1 4004 0
 4184 008e 2046     		mov	r0, r4
 4185 0090 D6E7     		b	.L370
 4186              	.LVL348:
 4187              	.L372:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4188              		.loc 1 4008 0
 4189 0092 426C     		ldr	r2, [r0, #68]
 4190 0094 054B     		ldr	r3, .L384
 4191 0096 1B68     		ldr	r3, [r3]
 4192 0098 DB6A     		ldr	r3, [r3, #44]
 4193 009a 9A42     		cmp	r2, r3
 4194 009c 01D2     		bcs	.L383
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4195              		.loc 1 4017 0
 4196 009e 0120     		movs	r0, #1
 4197              	.LVL349:
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccaGl0eL.s 			page 177


 4198              		.loc 1 4030 0
 4199 00a0 CEE7     		b	.L370
 4200              	.LVL350:
 4201              	.L383:
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4202              		.loc 1 3954 0
 4203 00a2 0020     		movs	r0, #0
 4204              	.LVL351:
 4205 00a4 CCE7     		b	.L370
 4206              	.LVL352:
 4207              	.L376:
 4208              	.LCFI42:
 4209              		.cfi_def_cfa_offset 0
 4210              		.cfi_restore 3
 4211              		.cfi_restore 4
 4212              		.cfi_restore 5
 4213              		.cfi_restore 14
 4214 00a6 0020     		movs	r0, #0
 4215              	.LVL353:
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4216              		.loc 1 4031 0
 4217 00a8 7047     		bx	lr
 4218              	.L385:
 4219 00aa 00BF     		.align	2
 4220              	.L384:
 4221 00ac 00000000 		.word	.LANCHOR10
 4222 00b0 00000000 		.word	.LANCHOR4
 4223 00b4 00000000 		.word	.LANCHOR13
 4224              		.cfi_endproc
 4225              	.LFE47:
 4227              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4228              		.align	1
 4229              		.global	xTaskPriorityDisinherit
 4230              		.syntax unified
 4231              		.thumb
 4232              		.thumb_func
 4233              		.fpu fpv5-sp-d16
 4235              	xTaskPriorityDisinherit:
 4236              	.LFB48:
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4237              		.loc 1 4039 0
 4238              		.cfi_startproc
 4239              		@ args = 0, pretend = 0, frame = 0
 4240              		@ frame_needed = 0, uses_anonymous_args = 0
 4241              	.LVL354:
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4242              		.loc 1 4043 0
 4243 0000 0028     		cmp	r0, #0
 4244 0002 4DD0     		beq	.L393
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4245              		.loc 1 4039 0
 4246 0004 38B5     		push	{r3, r4, r5, lr}
 4247              	.LCFI43:
 4248              		.cfi_def_cfa_offset 16
 4249              		.cfi_offset 3, -16
 4250              		.cfi_offset 4, -12
 4251              		.cfi_offset 5, -8
ARM GAS  /tmp/ccaGl0eL.s 			page 178


 4252              		.cfi_offset 14, -4
 4253 0006 0446     		mov	r4, r0
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4254              		.loc 1 4049 0
 4255 0008 284A     		ldr	r2, .L400
 4256 000a 1268     		ldr	r2, [r2]
 4257 000c 8242     		cmp	r2, r0
 4258 000e 0AD0     		beq	.L388
 4259              	.LBB200:
 4260              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4261              		.loc 2 195 0
 4262              		.syntax unified
 4263              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4264 0010 4FF05003 			mov r3, #80												
 4265 0014 72B6     		cpsid i													
 4266 0016 83F31188 		msr basepri, r3											
 4267 001a BFF36F8F 		isb														
 4268 001e BFF34F8F 		dsb														
 4269 0022 62B6     		cpsie i													
 4270              	
 4271              	@ 0 "" 2
 4272              	.LVL355:
 4273              		.thumb
 4274              		.syntax unified
 4275              	.L389:
 4276 0024 FEE7     		b	.L389
 4277              	.L388:
 4278              	.LBE201:
 4279              	.LBE200:
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4280              		.loc 1 4050 0
 4281 0026 826C     		ldr	r2, [r0, #72]
 4282 0028 52B9     		cbnz	r2, .L390
 4283              	.LBB202:
 4284              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4285              		.loc 2 195 0
 4286              		.syntax unified
 4287              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4288 002a 4FF05003 			mov r3, #80												
 4289 002e 72B6     		cpsid i													
 4290 0030 83F31188 		msr basepri, r3											
 4291 0034 BFF36F8F 		isb														
 4292 0038 BFF34F8F 		dsb														
 4293 003c 62B6     		cpsie i													
 4294              	
 4295              	@ 0 "" 2
 4296              	.LVL356:
 4297              		.thumb
 4298              		.syntax unified
 4299              	.L391:
 4300 003e FEE7     		b	.L391
 4301              	.L390:
 4302              	.LBE203:
 4303              	.LBE202:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 179


 4304              		.loc 1 4051 0
 4305 0040 013A     		subs	r2, r2, #1
 4306 0042 8264     		str	r2, [r0, #72]
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4307              		.loc 1 4055 0
 4308 0044 C06A     		ldr	r0, [r0, #44]
 4309              	.LVL357:
 4310 0046 616C     		ldr	r1, [r4, #68]
 4311 0048 8842     		cmp	r0, r1
 4312 004a 2BD0     		beq	.L394
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4313              		.loc 1 4058 0
 4314 004c 62BB     		cbnz	r2, .L395
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4315              		.loc 1 4065 0
 4316 004e 251D     		adds	r5, r4, #4
 4317 0050 2846     		mov	r0, r5
 4318 0052 FFF7FEFF 		bl	uxListRemove
 4319              	.LVL358:
 4320 0056 70B9     		cbnz	r0, .L392
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4321              		.loc 1 4067 0
 4322 0058 E26A     		ldr	r2, [r4, #44]
 4323 005a 1423     		movs	r3, #20
 4324 005c 03FB02F3 		mul	r3, r3, r2
 4325 0060 1349     		ldr	r1, .L400+4
 4326 0062 CB58     		ldr	r3, [r1, r3]
 4327 0064 3BB9     		cbnz	r3, .L392
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4328              		.loc 1 4067 0 is_stmt 0 discriminator 1
 4329 0066 0123     		movs	r3, #1
 4330 0068 03FA02F2 		lsl	r2, r3, r2
 4331 006c 1149     		ldr	r1, .L400+8
 4332 006e 0B68     		ldr	r3, [r1]
 4333 0070 23EA0203 		bic	r3, r3, r2
 4334 0074 0B60     		str	r3, [r1]
 4335              	.L392:
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4336              		.loc 1 4077 0 is_stmt 1
 4337 0076 636C     		ldr	r3, [r4, #68]
 4338 0078 E362     		str	r3, [r4, #44]
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4339              		.loc 1 4082 0
 4340 007a C3F10702 		rsb	r2, r3, #7
 4341 007e A261     		str	r2, [r4, #24]
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4342              		.loc 1 4083 0
 4343 0080 0124     		movs	r4, #1
 4344              	.LVL359:
 4345 0082 04FA03F2 		lsl	r2, r4, r3
 4346 0086 0B49     		ldr	r1, .L400+8
 4347 0088 0868     		ldr	r0, [r1]
 4348 008a 0243     		orrs	r2, r2, r0
 4349 008c 0A60     		str	r2, [r1]
 4350 008e 2946     		mov	r1, r5
 4351 0090 074A     		ldr	r2, .L400+4
 4352 0092 1420     		movs	r0, #20
ARM GAS  /tmp/ccaGl0eL.s 			page 180


 4353 0094 00FB0320 		mla	r0, r0, r3, r2
 4354 0098 FFF7FEFF 		bl	vListInsertEnd
 4355              	.LVL360:
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4356              		.loc 1 4093 0
 4357 009c 2046     		mov	r0, r4
 4358              	.LVL361:
 4359              	.L386:
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4360              		.loc 1 4111 0
 4361 009e 38BD     		pop	{r3, r4, r5, pc}
 4362              	.LVL362:
 4363              	.L393:
 4364              	.LCFI44:
 4365              		.cfi_def_cfa_offset 0
 4366              		.cfi_restore 3
 4367              		.cfi_restore 4
 4368              		.cfi_restore 5
 4369              		.cfi_restore 14
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4370              		.loc 1 4041 0
 4371 00a0 0020     		movs	r0, #0
 4372              	.LVL363:
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4373              		.loc 1 4111 0
 4374 00a2 7047     		bx	lr
 4375              	.LVL364:
 4376              	.L394:
 4377              	.LCFI45:
 4378              		.cfi_def_cfa_offset 16
 4379              		.cfi_offset 3, -16
 4380              		.cfi_offset 4, -12
 4381              		.cfi_offset 5, -8
 4382              		.cfi_offset 14, -4
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4383              		.loc 1 4041 0
 4384 00a4 0020     		movs	r0, #0
 4385 00a6 FAE7     		b	.L386
 4386              	.L395:
 4387 00a8 0020     		movs	r0, #0
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4388              		.loc 1 4110 0
 4389 00aa F8E7     		b	.L386
 4390              	.L401:
 4391              		.align	2
 4392              	.L400:
 4393 00ac 00000000 		.word	.LANCHOR10
 4394 00b0 00000000 		.word	.LANCHOR4
 4395 00b4 00000000 		.word	.LANCHOR13
 4396              		.cfi_endproc
 4397              	.LFE48:
 4399              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4400              		.align	1
 4401              		.global	vTaskPriorityDisinheritAfterTimeout
 4402              		.syntax unified
 4403              		.thumb
 4404              		.thumb_func
ARM GAS  /tmp/ccaGl0eL.s 			page 181


 4405              		.fpu fpv5-sp-d16
 4407              	vTaskPriorityDisinheritAfterTimeout:
 4408              	.LFB49:
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4409              		.loc 1 4119 0
 4410              		.cfi_startproc
 4411              		@ args = 0, pretend = 0, frame = 0
 4412              		@ frame_needed = 0, uses_anonymous_args = 0
 4413              	.LVL365:
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4414              		.loc 1 4124 0
 4415 0000 0028     		cmp	r0, #0
 4416 0002 59D0     		beq	.L412
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4417              		.loc 1 4119 0
 4418 0004 38B5     		push	{r3, r4, r5, lr}
 4419              	.LCFI46:
 4420              		.cfi_def_cfa_offset 16
 4421              		.cfi_offset 3, -16
 4422              		.cfi_offset 4, -12
 4423              		.cfi_offset 5, -8
 4424              		.cfi_offset 14, -4
 4425 0006 0346     		mov	r3, r0
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4426              		.loc 1 4128 0
 4427 0008 806C     		ldr	r0, [r0, #72]
 4428              	.LVL366:
 4429 000a 50B9     		cbnz	r0, .L404
 4430              	.LBB204:
 4431              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4432              		.loc 2 195 0
 4433              		.syntax unified
 4434              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4435 000c 4FF05003 			mov r3, #80												
 4436 0010 72B6     		cpsid i													
 4437 0012 83F31188 		msr basepri, r3											
 4438 0016 BFF36F8F 		isb														
 4439 001a BFF34F8F 		dsb														
 4440 001e 62B6     		cpsie i													
 4441              	
 4442              	@ 0 "" 2
 4443              	.LVL367:
 4444              		.thumb
 4445              		.syntax unified
 4446              	.L405:
 4447 0020 FEE7     		b	.L405
 4448              	.LVL368:
 4449              	.L404:
 4450              	.LBE205:
 4451              	.LBE204:
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4452              		.loc 1 4134 0
 4453 0022 5A6C     		ldr	r2, [r3, #68]
 4454 0024 8A42     		cmp	r2, r1
 4455 0026 00D2     		bcs	.L406
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccaGl0eL.s 			page 182


 4456              		.loc 1 4136 0
 4457 0028 0A46     		mov	r2, r1
 4458              	.L406:
 4459              	.LVL369:
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4460              		.loc 1 4144 0
 4461 002a D96A     		ldr	r1, [r3, #44]
 4462              	.LVL370:
 4463 002c 9142     		cmp	r1, r2
 4464 002e 01D0     		beq	.L402
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4465              		.loc 1 4150 0
 4466 0030 0128     		cmp	r0, #1
 4467 0032 00D0     		beq	.L415
 4468              	.LVL371:
 4469              	.L402:
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4470              		.loc 1 4213 0
 4471 0034 38BD     		pop	{r3, r4, r5, pc}
 4472              	.LVL372:
 4473              	.L415:
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4474              		.loc 1 4155 0
 4475 0036 2148     		ldr	r0, .L416
 4476 0038 0068     		ldr	r0, [r0]
 4477 003a 9842     		cmp	r0, r3
 4478 003c 0AD1     		bne	.L407
 4479              	.LBB206:
 4480              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4481              		.loc 2 195 0
 4482              		.syntax unified
 4483              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4484 003e 4FF05003 			mov r3, #80												
 4485 0042 72B6     		cpsid i													
 4486 0044 83F31188 		msr basepri, r3											
 4487 0048 BFF36F8F 		isb														
 4488 004c BFF34F8F 		dsb														
 4489 0050 62B6     		cpsie i													
 4490              	
 4491              	@ 0 "" 2
 4492              	.LVL373:
 4493              		.thumb
 4494              		.syntax unified
 4495              	.L408:
 4496 0052 FEE7     		b	.L408
 4497              	.LVL374:
 4498              	.L407:
 4499              	.LBE207:
 4500              	.LBE206:
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4501              		.loc 1 4162 0
 4502 0054 DA62     		str	r2, [r3, #44]
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4503              		.loc 1 4166 0
 4504 0056 9869     		ldr	r0, [r3, #24]
 4505 0058 0028     		cmp	r0, #0
ARM GAS  /tmp/ccaGl0eL.s 			page 183


 4506 005a 02DB     		blt	.L409
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4507              		.loc 1 4168 0
 4508 005c C2F10702 		rsb	r2, r2, #7
 4509              	.LVL375:
 4510 0060 9A61     		str	r2, [r3, #24]
 4511              	.L409:
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4512              		.loc 1 4181 0
 4513 0062 5A69     		ldr	r2, [r3, #20]
 4514 0064 1648     		ldr	r0, .L416+4
 4515 0066 1424     		movs	r4, #20
 4516 0068 04FB0101 		mla	r1, r4, r1, r0
 4517              	.LVL376:
 4518 006c 8A42     		cmp	r2, r1
 4519 006e E1D1     		bne	.L402
 4520 0070 1C46     		mov	r4, r3
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4521              		.loc 1 4183 0
 4522 0072 1D1D     		adds	r5, r3, #4
 4523 0074 2846     		mov	r0, r5
 4524 0076 FFF7FEFF 		bl	uxListRemove
 4525              	.LVL377:
 4526 007a 70B9     		cbnz	r0, .L410
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4527              		.loc 1 4185 0
 4528 007c E26A     		ldr	r2, [r4, #44]
 4529 007e 1423     		movs	r3, #20
 4530 0080 03FB02F3 		mul	r3, r3, r2
 4531 0084 0E49     		ldr	r1, .L416+4
 4532 0086 CB58     		ldr	r3, [r1, r3]
 4533 0088 3BB9     		cbnz	r3, .L410
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4534              		.loc 1 4185 0 is_stmt 0 discriminator 1
 4535 008a 0123     		movs	r3, #1
 4536 008c 03FA02F2 		lsl	r2, r3, r2
 4537 0090 0C49     		ldr	r1, .L416+8
 4538 0092 0B68     		ldr	r3, [r1]
 4539 0094 23EA0203 		bic	r3, r3, r2
 4540 0098 0B60     		str	r3, [r1]
 4541              	.L410:
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4542              		.loc 1 4192 0 is_stmt 1
 4543 009a E26A     		ldr	r2, [r4, #44]
 4544 009c 0123     		movs	r3, #1
 4545 009e 9340     		lsls	r3, r3, r2
 4546 00a0 0849     		ldr	r1, .L416+8
 4547 00a2 0868     		ldr	r0, [r1]
 4548 00a4 0343     		orrs	r3, r3, r0
 4549 00a6 0B60     		str	r3, [r1]
 4550 00a8 2946     		mov	r1, r5
 4551 00aa 054B     		ldr	r3, .L416+4
 4552 00ac 1420     		movs	r0, #20
 4553 00ae 00FB0230 		mla	r0, r0, r2, r3
 4554 00b2 FFF7FEFF 		bl	vListInsertEnd
 4555              	.LVL378:
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccaGl0eL.s 			page 184


 4556              		.loc 1 4213 0
 4557 00b6 BDE7     		b	.L402
 4558              	.LVL379:
 4559              	.L412:
 4560              	.LCFI47:
 4561              		.cfi_def_cfa_offset 0
 4562              		.cfi_restore 3
 4563              		.cfi_restore 4
 4564              		.cfi_restore 5
 4565              		.cfi_restore 14
 4566 00b8 7047     		bx	lr
 4567              	.L417:
 4568 00ba 00BF     		.align	2
 4569              	.L416:
 4570 00bc 00000000 		.word	.LANCHOR10
 4571 00c0 00000000 		.word	.LANCHOR4
 4572 00c4 00000000 		.word	.LANCHOR13
 4573              		.cfi_endproc
 4574              	.LFE49:
 4576              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4577              		.align	1
 4578              		.global	uxTaskResetEventItemValue
 4579              		.syntax unified
 4580              		.thumb
 4581              		.thumb_func
 4582              		.fpu fpv5-sp-d16
 4584              	uxTaskResetEventItemValue:
 4585              	.LFB50:
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4586              		.loc 1 4534 0
 4587              		.cfi_startproc
 4588              		@ args = 0, pretend = 0, frame = 0
 4589              		@ frame_needed = 0, uses_anonymous_args = 0
 4590              		@ link register save eliminated.
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4591              		.loc 1 4537 0
 4592 0000 044A     		ldr	r2, .L419
 4593 0002 1368     		ldr	r3, [r2]
 4594 0004 9869     		ldr	r0, [r3, #24]
 4595              	.LVL380:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4596              		.loc 1 4541 0
 4597 0006 1368     		ldr	r3, [r2]
 4598 0008 DB6A     		ldr	r3, [r3, #44]
 4599 000a 1268     		ldr	r2, [r2]
 4600 000c C3F10703 		rsb	r3, r3, #7
 4601 0010 9361     		str	r3, [r2, #24]
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4602              		.loc 1 4544 0
 4603 0012 7047     		bx	lr
 4604              	.L420:
 4605              		.align	2
 4606              	.L419:
 4607 0014 00000000 		.word	.LANCHOR10
 4608              		.cfi_endproc
 4609              	.LFE50:
 4611              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
ARM GAS  /tmp/ccaGl0eL.s 			page 185


 4612              		.align	1
 4613              		.global	pvTaskIncrementMutexHeldCount
 4614              		.syntax unified
 4615              		.thumb
 4616              		.thumb_func
 4617              		.fpu fpv5-sp-d16
 4619              	pvTaskIncrementMutexHeldCount:
 4620              	.LFB51:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4621              		.loc 1 4550 0
 4622              		.cfi_startproc
 4623              		@ args = 0, pretend = 0, frame = 0
 4624              		@ frame_needed = 0, uses_anonymous_args = 0
 4625              		@ link register save eliminated.
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4626              		.loc 1 4553 0
 4627 0000 054B     		ldr	r3, .L423
 4628 0002 1B68     		ldr	r3, [r3]
 4629 0004 23B1     		cbz	r3, .L422
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4630              		.loc 1 4555 0
 4631 0006 044B     		ldr	r3, .L423
 4632 0008 1A68     		ldr	r2, [r3]
 4633 000a 936C     		ldr	r3, [r2, #72]
 4634 000c 0133     		adds	r3, r3, #1
 4635 000e 9364     		str	r3, [r2, #72]
 4636              	.L422:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4637              		.loc 1 4558 0
 4638 0010 014B     		ldr	r3, .L423
 4639 0012 1868     		ldr	r0, [r3]
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4640              		.loc 1 4559 0
 4641 0014 7047     		bx	lr
 4642              	.L424:
 4643 0016 00BF     		.align	2
 4644              	.L423:
 4645 0018 00000000 		.word	.LANCHOR10
 4646              		.cfi_endproc
 4647              	.LFE51:
 4649              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4650              		.align	1
 4651              		.global	ulTaskNotifyTake
 4652              		.syntax unified
 4653              		.thumb
 4654              		.thumb_func
 4655              		.fpu fpv5-sp-d16
 4657              	ulTaskNotifyTake:
 4658              	.LFB52:
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4659              		.loc 1 4567 0
 4660              		.cfi_startproc
 4661              		@ args = 0, pretend = 0, frame = 0
 4662              		@ frame_needed = 0, uses_anonymous_args = 0
 4663              	.LVL381:
 4664 0000 38B5     		push	{r3, r4, r5, lr}
 4665              	.LCFI48:
ARM GAS  /tmp/ccaGl0eL.s 			page 186


 4666              		.cfi_def_cfa_offset 16
 4667              		.cfi_offset 3, -16
 4668              		.cfi_offset 4, -12
 4669              		.cfi_offset 5, -8
 4670              		.cfi_offset 14, -4
 4671 0002 0546     		mov	r5, r0
 4672 0004 0C46     		mov	r4, r1
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4673              		.loc 1 4570 0
 4674 0006 FFF7FEFF 		bl	vPortEnterCritical
 4675              	.LVL382:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4676              		.loc 1 4573 0
 4677 000a 194B     		ldr	r3, .L432
 4678 000c 1B68     		ldr	r3, [r3]
 4679 000e 1B6D     		ldr	r3, [r3, #80]
 4680 0010 2BB9     		cbnz	r3, .L426
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4681              		.loc 1 4576 0
 4682 0012 174B     		ldr	r3, .L432
 4683 0014 1B68     		ldr	r3, [r3]
 4684 0016 0122     		movs	r2, #1
 4685 0018 83F85420 		strb	r2, [r3, #84]
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4686              		.loc 1 4578 0
 4687 001c ACB9     		cbnz	r4, .L430
 4688              	.L426:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4689              		.loc 1 4599 0
 4690 001e FFF7FEFF 		bl	vPortExitCritical
 4691              	.LVL383:
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4692              		.loc 1 4601 0
 4693 0022 FFF7FEFF 		bl	vPortEnterCritical
 4694              	.LVL384:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4695              		.loc 1 4604 0
 4696 0026 124B     		ldr	r3, .L432
 4697 0028 1B68     		ldr	r3, [r3]
 4698 002a 1C6D     		ldr	r4, [r3, #80]
 4699              	.LVL385:
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4700              		.loc 1 4606 0
 4701 002c 24B1     		cbz	r4, .L427
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4702              		.loc 1 4608 0
 4703 002e CDB9     		cbnz	r5, .L431
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4704              		.loc 1 4614 0
 4705 0030 0F4B     		ldr	r3, .L432
 4706 0032 1B68     		ldr	r3, [r3]
 4707 0034 621E     		subs	r2, r4, #1
 4708 0036 1A65     		str	r2, [r3, #80]
 4709              	.L427:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4710              		.loc 1 4622 0
 4711 0038 0D4B     		ldr	r3, .L432
ARM GAS  /tmp/ccaGl0eL.s 			page 187


 4712 003a 1B68     		ldr	r3, [r3]
 4713 003c 0022     		movs	r2, #0
 4714 003e 83F85420 		strb	r2, [r3, #84]
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4715              		.loc 1 4624 0
 4716 0042 FFF7FEFF 		bl	vPortExitCritical
 4717              	.LVL386:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4718              		.loc 1 4627 0
 4719 0046 2046     		mov	r0, r4
 4720 0048 38BD     		pop	{r3, r4, r5, pc}
 4721              	.LVL387:
 4722              	.L430:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4723              		.loc 1 4580 0
 4724 004a 1146     		mov	r1, r2
 4725 004c 2046     		mov	r0, r4
 4726 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4727              	.LVL388:
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4728              		.loc 1 4587 0
 4729 0052 084B     		ldr	r3, .L432+4
 4730 0054 4FF08052 		mov	r2, #268435456
 4731 0058 1A60     		str	r2, [r3]
 4732              		.syntax unified
 4733              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4734 005a BFF34F8F 		dsb
 4735              	@ 0 "" 2
 4736              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4737 005e BFF36F8F 		isb
 4738              	@ 0 "" 2
 4739              		.thumb
 4740              		.syntax unified
 4741 0062 DCE7     		b	.L426
 4742              	.LVL389:
 4743              	.L431:
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4744              		.loc 1 4610 0
 4745 0064 024B     		ldr	r3, .L432
 4746 0066 1B68     		ldr	r3, [r3]
 4747 0068 0022     		movs	r2, #0
 4748 006a 1A65     		str	r2, [r3, #80]
 4749 006c E4E7     		b	.L427
 4750              	.L433:
 4751 006e 00BF     		.align	2
 4752              	.L432:
 4753 0070 00000000 		.word	.LANCHOR10
 4754 0074 04ED00E0 		.word	-536810236
 4755              		.cfi_endproc
 4756              	.LFE52:
 4758              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4759              		.align	1
 4760              		.global	xTaskNotifyWait
 4761              		.syntax unified
 4762              		.thumb
 4763              		.thumb_func
 4764              		.fpu fpv5-sp-d16
ARM GAS  /tmp/ccaGl0eL.s 			page 188


 4766              	xTaskNotifyWait:
 4767              	.LFB53:
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4768              		.loc 1 4635 0
 4769              		.cfi_startproc
 4770              		@ args = 0, pretend = 0, frame = 0
 4771              		@ frame_needed = 0, uses_anonymous_args = 0
 4772              	.LVL390:
 4773 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4774              	.LCFI49:
 4775              		.cfi_def_cfa_offset 24
 4776              		.cfi_offset 3, -24
 4777              		.cfi_offset 4, -20
 4778              		.cfi_offset 5, -16
 4779              		.cfi_offset 6, -12
 4780              		.cfi_offset 7, -8
 4781              		.cfi_offset 14, -4
 4782 0002 0746     		mov	r7, r0
 4783 0004 0D46     		mov	r5, r1
 4784 0006 1446     		mov	r4, r2
 4785 0008 1E46     		mov	r6, r3
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4786              		.loc 1 4638 0
 4787 000a FFF7FEFF 		bl	vPortEnterCritical
 4788              	.LVL391:
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4789              		.loc 1 4641 0
 4790 000e 204B     		ldr	r3, .L442
 4791 0010 1B68     		ldr	r3, [r3]
 4792 0012 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 4793 0016 DBB2     		uxtb	r3, r3
 4794 0018 022B     		cmp	r3, #2
 4795 001a 0AD0     		beq	.L435
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4796              		.loc 1 4646 0
 4797 001c 1C4B     		ldr	r3, .L442
 4798 001e 1A68     		ldr	r2, [r3]
 4799 0020 106D     		ldr	r0, [r2, #80]
 4800 0022 20EA0700 		bic	r0, r0, r7
 4801 0026 1065     		str	r0, [r2, #80]
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4802              		.loc 1 4649 0
 4803 0028 1B68     		ldr	r3, [r3]
 4804 002a 0122     		movs	r2, #1
 4805 002c 83F85420 		strb	r2, [r3, #84]
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4806              		.loc 1 4651 0
 4807 0030 CEB9     		cbnz	r6, .L440
 4808              	.L435:
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4809              		.loc 1 4672 0
 4810 0032 FFF7FEFF 		bl	vPortExitCritical
 4811              	.LVL392:
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4812              		.loc 1 4674 0
 4813 0036 FFF7FEFF 		bl	vPortEnterCritical
 4814              	.LVL393:
ARM GAS  /tmp/ccaGl0eL.s 			page 189


4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4815              		.loc 1 4678 0
 4816 003a 1CB1     		cbz	r4, .L436
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4817              		.loc 1 4682 0
 4818 003c 144B     		ldr	r3, .L442
 4819 003e 1B68     		ldr	r3, [r3]
 4820 0040 1B6D     		ldr	r3, [r3, #80]
 4821 0042 2360     		str	r3, [r4]
 4822              	.L436:
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4823              		.loc 1 4689 0
 4824 0044 124B     		ldr	r3, .L442
 4825 0046 1B68     		ldr	r3, [r3]
 4826 0048 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 4827 004c DBB2     		uxtb	r3, r3
 4828 004e 022B     		cmp	r3, #2
 4829 0050 16D0     		beq	.L441
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4830              		.loc 1 4692 0
 4831 0052 0024     		movs	r4, #0
 4832              	.LVL394:
 4833              	.L437:
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4834              		.loc 1 4702 0
 4835 0054 0E4B     		ldr	r3, .L442
 4836 0056 1B68     		ldr	r3, [r3]
 4837 0058 0022     		movs	r2, #0
 4838 005a 83F85420 		strb	r2, [r3, #84]
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4839              		.loc 1 4704 0
 4840 005e FFF7FEFF 		bl	vPortExitCritical
 4841              	.LVL395:
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4842              		.loc 1 4707 0
 4843 0062 2046     		mov	r0, r4
 4844 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4845              	.LVL396:
 4846              	.L440:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4847              		.loc 1 4653 0
 4848 0066 1146     		mov	r1, r2
 4849 0068 3046     		mov	r0, r6
 4850 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4851              	.LVL397:
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4852              		.loc 1 4660 0
 4853 006e 094B     		ldr	r3, .L442+4
 4854 0070 4FF08052 		mov	r2, #268435456
 4855 0074 1A60     		str	r2, [r3]
 4856              		.syntax unified
 4857              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4858 0076 BFF34F8F 		dsb
 4859              	@ 0 "" 2
 4860              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4861 007a BFF36F8F 		isb
 4862              	@ 0 "" 2
ARM GAS  /tmp/ccaGl0eL.s 			page 190


 4863              		.thumb
 4864              		.syntax unified
 4865 007e D8E7     		b	.L435
 4866              	.L441:
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4867              		.loc 1 4698 0
 4868 0080 034B     		ldr	r3, .L442
 4869 0082 1A68     		ldr	r2, [r3]
 4870 0084 136D     		ldr	r3, [r2, #80]
 4871 0086 23EA0505 		bic	r5, r3, r5
 4872              	.LVL398:
 4873 008a 1565     		str	r5, [r2, #80]
 4874              	.LVL399:
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4875              		.loc 1 4699 0
 4876 008c 0124     		movs	r4, #1
 4877              	.LVL400:
 4878 008e E1E7     		b	.L437
 4879              	.L443:
 4880              		.align	2
 4881              	.L442:
 4882 0090 00000000 		.word	.LANCHOR10
 4883 0094 04ED00E0 		.word	-536810236
 4884              		.cfi_endproc
 4885              	.LFE53:
 4887              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4888              		.align	1
 4889              		.global	xTaskGenericNotify
 4890              		.syntax unified
 4891              		.thumb
 4892              		.thumb_func
 4893              		.fpu fpv5-sp-d16
 4895              	xTaskGenericNotify:
 4896              	.LFB54:
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4897              		.loc 1 4715 0
 4898              		.cfi_startproc
 4899              		@ args = 0, pretend = 0, frame = 0
 4900              		@ frame_needed = 0, uses_anonymous_args = 0
 4901              	.LVL401:
 4902 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4903              	.LCFI50:
 4904              		.cfi_def_cfa_offset 24
 4905              		.cfi_offset 3, -24
 4906              		.cfi_offset 4, -20
 4907              		.cfi_offset 5, -16
 4908              		.cfi_offset 6, -12
 4909              		.cfi_offset 7, -8
 4910              		.cfi_offset 14, -4
 4911              	.LVL402:
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 4912              		.loc 1 4720 0
 4913 0002 50B9     		cbnz	r0, .L445
 4914              	.LBB208:
 4915              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4916              		.loc 2 195 0
ARM GAS  /tmp/ccaGl0eL.s 			page 191


 4917              		.syntax unified
 4918              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4919 0004 4FF05003 			mov r3, #80												
 4920 0008 72B6     		cpsid i													
 4921 000a 83F31188 		msr basepri, r3											
 4922 000e BFF36F8F 		isb														
 4923 0012 BFF34F8F 		dsb														
 4924 0016 62B6     		cpsie i													
 4925              	
 4926              	@ 0 "" 2
 4927              	.LVL403:
 4928              		.thumb
 4929              		.syntax unified
 4930              	.L446:
 4931 0018 FEE7     		b	.L446
 4932              	.LVL404:
 4933              	.L445:
 4934 001a 0446     		mov	r4, r0
 4935 001c 1F46     		mov	r7, r3
 4936 001e 1646     		mov	r6, r2
 4937 0020 0D46     		mov	r5, r1
 4938              	.LVL405:
 4939              	.LBE209:
 4940              	.LBE208:
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4941              		.loc 1 4723 0
 4942 0022 FFF7FEFF 		bl	vPortEnterCritical
 4943              	.LVL406:
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4944              		.loc 1 4725 0
 4945 0026 0FB1     		cbz	r7, .L447
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4946              		.loc 1 4727 0
 4947 0028 236D     		ldr	r3, [r4, #80]
 4948 002a 3B60     		str	r3, [r7]
 4949              	.L447:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4950              		.loc 1 4730 0
 4951 002c 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 4952 0030 DBB2     		uxtb	r3, r3
 4953              	.LVL407:
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4954              		.loc 1 4732 0
 4955 0032 0222     		movs	r2, #2
 4956 0034 84F85420 		strb	r2, [r4, #84]
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4957              		.loc 1 4734 0
 4958 0038 042E     		cmp	r6, #4
 4959 003a 1BD8     		bhi	.L448
 4960 003c DFE806F0 		tbb	[pc, r6]
 4961              	.L450:
 4962 0040 29       		.byte	(.L459-.L450)/2
 4963 0041 03       		.byte	(.L451-.L450)/2
 4964 0042 0D       		.byte	(.L452-.L450)/2
 4965 0043 12       		.byte	(.L453-.L450)/2
 4966 0044 15       		.byte	(.L454-.L450)/2
 4967 0045 00       		.p2align 1
ARM GAS  /tmp/ccaGl0eL.s 			page 192


 4968              	.L451:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4969              		.loc 1 4737 0
 4970 0046 226D     		ldr	r2, [r4, #80]
 4971 0048 1543     		orrs	r5, r5, r2
 4972              	.LVL408:
 4973 004a 2565     		str	r5, [r4, #80]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4974              		.loc 1 4717 0
 4975 004c 0125     		movs	r5, #1
 4976              	.L449:
 4977              	.LVL409:
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4978              		.loc 1 4778 0
 4979 004e 012B     		cmp	r3, #1
 4980 0050 25D0     		beq	.L463
 4981              	.LVL410:
 4982              	.L456:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4983              		.loc 1 4818 0
 4984 0052 FFF7FEFF 		bl	vPortExitCritical
 4985              	.LVL411:
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4986              		.loc 1 4821 0
 4987 0056 2846     		mov	r0, r5
 4988 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4989              	.LVL412:
 4990              	.L452:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4991              		.loc 1 4741 0
 4992 005a 226D     		ldr	r2, [r4, #80]
 4993 005c 0132     		adds	r2, r2, #1
 4994 005e 2265     		str	r2, [r4, #80]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4995              		.loc 1 4717 0
 4996 0060 0125     		movs	r5, #1
 4997              	.LVL413:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4998              		.loc 1 4742 0
 4999 0062 F4E7     		b	.L449
 5000              	.LVL414:
 5001              	.L453:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5002              		.loc 1 4745 0
 5003 0064 2565     		str	r5, [r4, #80]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5004              		.loc 1 4717 0
 5005 0066 0125     		movs	r5, #1
 5006              	.LVL415:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5007              		.loc 1 4746 0
 5008 0068 F1E7     		b	.L449
 5009              	.LVL416:
 5010              	.L454:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5011              		.loc 1 4749 0
 5012 006a 022B     		cmp	r3, #2
ARM GAS  /tmp/ccaGl0eL.s 			page 193


 5013 006c 13D0     		beq	.L460
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5014              		.loc 1 4751 0
 5015 006e 2565     		str	r5, [r4, #80]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5016              		.loc 1 4717 0
 5017 0070 0125     		movs	r5, #1
 5018              	.LVL417:
 5019 0072 ECE7     		b	.L449
 5020              	.LVL418:
 5021              	.L448:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5022              		.loc 1 4769 0
 5023 0074 226D     		ldr	r2, [r4, #80]
 5024 0076 B2F1FF3F 		cmp	r2, #-1
 5025 007a 0ED0     		beq	.L461
 5026              	.LBB210:
 5027              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5028              		.loc 2 195 0
 5029              		.syntax unified
 5030              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5031 007c 4FF05003 			mov r3, #80												
 5032 0080 72B6     		cpsid i													
 5033 0082 83F31188 		msr basepri, r3											
 5034 0086 BFF36F8F 		isb														
 5035 008a BFF34F8F 		dsb														
 5036 008e 62B6     		cpsie i													
 5037              	
 5038              	@ 0 "" 2
 5039              	.LVL419:
 5040              		.thumb
 5041              		.syntax unified
 5042              	.L455:
 5043 0090 FEE7     		b	.L455
 5044              	.LVL420:
 5045              	.L459:
 5046              	.LBE211:
 5047              	.LBE210:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5048              		.loc 1 4717 0
 5049 0092 0125     		movs	r5, #1
 5050              	.LVL421:
 5051 0094 DBE7     		b	.L449
 5052              	.LVL422:
 5053              	.L460:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5054              		.loc 1 4756 0
 5055 0096 0025     		movs	r5, #0
 5056              	.LVL423:
 5057 0098 D9E7     		b	.L449
 5058              	.LVL424:
 5059              	.L461:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5060              		.loc 1 4717 0
 5061 009a 0125     		movs	r5, #1
 5062              	.LVL425:
ARM GAS  /tmp/ccaGl0eL.s 			page 194


 5063 009c D7E7     		b	.L449
 5064              	.LVL426:
 5065              	.L463:
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5066              		.loc 1 4780 0
 5067 009e 261D     		adds	r6, r4, #4
 5068 00a0 3046     		mov	r0, r6
 5069 00a2 FFF7FEFF 		bl	uxListRemove
 5070              	.LVL427:
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5071              		.loc 1 4781 0
 5072 00a6 E26A     		ldr	r2, [r4, #44]
 5073 00a8 0123     		movs	r3, #1
 5074 00aa 9340     		lsls	r3, r3, r2
 5075 00ac 1349     		ldr	r1, .L464
 5076 00ae 0868     		ldr	r0, [r1]
 5077 00b0 0343     		orrs	r3, r3, r0
 5078 00b2 0B60     		str	r3, [r1]
 5079 00b4 3146     		mov	r1, r6
 5080 00b6 124B     		ldr	r3, .L464+4
 5081 00b8 1420     		movs	r0, #20
 5082 00ba 00FB0230 		mla	r0, r0, r2, r3
 5083 00be FFF7FEFF 		bl	vListInsertEnd
 5084              	.LVL428:
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5085              		.loc 1 4784 0
 5086 00c2 A36A     		ldr	r3, [r4, #40]
 5087 00c4 53B1     		cbz	r3, .L457
 5088              	.LBB212:
 5089              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5090              		.loc 2 195 0
 5091              		.syntax unified
 5092              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5093 00c6 4FF05003 			mov r3, #80												
 5094 00ca 72B6     		cpsid i													
 5095 00cc 83F31188 		msr basepri, r3											
 5096 00d0 BFF36F8F 		isb														
 5097 00d4 BFF34F8F 		dsb														
 5098 00d8 62B6     		cpsie i													
 5099              	
 5100              	@ 0 "" 2
 5101              	.LVL429:
 5102              		.thumb
 5103              		.syntax unified
 5104              	.L458:
 5105 00da FEE7     		b	.L458
 5106              	.L457:
 5107              	.LBE213:
 5108              	.LBE212:
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5109              		.loc 1 4802 0
 5110 00dc E26A     		ldr	r2, [r4, #44]
 5111 00de 094B     		ldr	r3, .L464+8
 5112 00e0 1B68     		ldr	r3, [r3]
 5113 00e2 DB6A     		ldr	r3, [r3, #44]
 5114 00e4 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccaGl0eL.s 			page 195


 5115 00e6 B4D9     		bls	.L456
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5116              		.loc 1 4806 0
 5117 00e8 074B     		ldr	r3, .L464+12
 5118 00ea 4FF08052 		mov	r2, #268435456
 5119 00ee 1A60     		str	r2, [r3]
 5120              		.syntax unified
 5121              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5122 00f0 BFF34F8F 		dsb
 5123              	@ 0 "" 2
 5124              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5125 00f4 BFF36F8F 		isb
 5126              	@ 0 "" 2
 5127              		.thumb
 5128              		.syntax unified
 5129 00f8 ABE7     		b	.L456
 5130              	.L465:
 5131 00fa 00BF     		.align	2
 5132              	.L464:
 5133 00fc 00000000 		.word	.LANCHOR13
 5134 0100 00000000 		.word	.LANCHOR4
 5135 0104 00000000 		.word	.LANCHOR10
 5136 0108 04ED00E0 		.word	-536810236
 5137              		.cfi_endproc
 5138              	.LFE54:
 5140              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5141              		.align	1
 5142              		.global	xTaskGenericNotifyFromISR
 5143              		.syntax unified
 5144              		.thumb
 5145              		.thumb_func
 5146              		.fpu fpv5-sp-d16
 5148              	xTaskGenericNotifyFromISR:
 5149              	.LFB55:
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5150              		.loc 1 4829 0
 5151              		.cfi_startproc
 5152              		@ args = 4, pretend = 0, frame = 0
 5153              		@ frame_needed = 0, uses_anonymous_args = 0
 5154              	.LVL430:
 5155 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5156              	.LCFI51:
 5157              		.cfi_def_cfa_offset 32
 5158              		.cfi_offset 3, -32
 5159              		.cfi_offset 4, -28
 5160              		.cfi_offset 5, -24
 5161              		.cfi_offset 6, -20
 5162              		.cfi_offset 7, -16
 5163              		.cfi_offset 8, -12
 5164              		.cfi_offset 9, -8
 5165              		.cfi_offset 14, -4
 5166 0004 089E     		ldr	r6, [sp, #32]
 5167              	.LVL431:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5168              		.loc 1 4835 0
 5169 0006 50B9     		cbnz	r0, .L467
 5170              	.LBB214:
ARM GAS  /tmp/ccaGl0eL.s 			page 196


 5171              	.LBB215:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5172              		.loc 2 195 0
 5173              		.syntax unified
 5174              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5175 0008 4FF05003 			mov r3, #80												
 5176 000c 72B6     		cpsid i													
 5177 000e 83F31188 		msr basepri, r3											
 5178 0012 BFF36F8F 		isb														
 5179 0016 BFF34F8F 		dsb														
 5180 001a 62B6     		cpsie i													
 5181              	
 5182              	@ 0 "" 2
 5183              	.LVL432:
 5184              		.thumb
 5185              		.syntax unified
 5186              	.L468:
 5187 001c FEE7     		b	.L468
 5188              	.LVL433:
 5189              	.L467:
 5190 001e 0446     		mov	r4, r0
 5191 0020 9946     		mov	r9, r3
 5192 0022 9046     		mov	r8, r2
 5193 0024 0D46     		mov	r5, r1
 5194              	.LBE215:
 5195              	.LBE214:
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5196              		.loc 1 4853 0
 5197 0026 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5198              	.LVL434:
 5199              	.LBB216:
 5200              	.LBB217:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5201              		.loc 2 213 0
 5202              		.syntax unified
 5203              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5204 002a EFF31187 			mrs r7, basepri											
 5205 002e 4FF05003 		mov r3, #80												
 5206 0032 72B6     		cpsid i													
 5207 0034 83F31188 		msr basepri, r3											
 5208 0038 BFF36F8F 		isb														
 5209 003c BFF34F8F 		dsb														
 5210 0040 62B6     		cpsie i													
 5211              	
 5212              	@ 0 "" 2
 5213              		.thumb
 5214              		.syntax unified
 5215              	.LBE217:
 5216              	.LBE216:
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5217              		.loc 1 4859 0
 5218 0042 B9F1000F 		cmp	r9, #0
 5219 0046 02D0     		beq	.L469
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5220              		.loc 1 4861 0
 5221 0048 236D     		ldr	r3, [r4, #80]
 5222 004a C9F80030 		str	r3, [r9]
ARM GAS  /tmp/ccaGl0eL.s 			page 197


 5223              	.L469:
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5224              		.loc 1 4864 0
 5225 004e 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 5226 0052 DBB2     		uxtb	r3, r3
 5227              	.LVL435:
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5228              		.loc 1 4865 0
 5229 0054 0222     		movs	r2, #2
 5230 0056 84F85420 		strb	r2, [r4, #84]
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5231              		.loc 1 4867 0
 5232 005a B8F1040F 		cmp	r8, #4
 5233 005e 1CD8     		bhi	.L470
 5234 0060 DFE808F0 		tbb	[pc, r8]
 5235              	.L472:
 5236 0064 2A       		.byte	(.L484-.L472)/2
 5237 0065 03       		.byte	(.L473-.L472)/2
 5238 0066 0E       		.byte	(.L474-.L472)/2
 5239 0067 13       		.byte	(.L475-.L472)/2
 5240 0068 16       		.byte	(.L476-.L472)/2
 5241 0069 00       		.p2align 1
 5242              	.L473:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5243              		.loc 1 4870 0
 5244 006a 226D     		ldr	r2, [r4, #80]
 5245 006c 1543     		orrs	r5, r5, r2
 5246              	.LVL436:
 5247 006e 2565     		str	r5, [r4, #80]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5248              		.loc 1 4832 0
 5249 0070 0125     		movs	r5, #1
 5250              	.L471:
 5251              	.LVL437:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5252              		.loc 1 4910 0
 5253 0072 012B     		cmp	r3, #1
 5254 0074 26D0     		beq	.L488
 5255              	.LVL438:
 5256              	.L478:
 5257              	.LBB218:
 5258              	.LBB219:
 5259              		.loc 2 233 0
 5260              		.syntax unified
 5261              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5262 0076 87F31188 			msr basepri, r7	
 5263              	@ 0 "" 2
 5264              	.LVL439:
 5265              		.thumb
 5266              		.syntax unified
 5267              	.LBE219:
 5268              	.LBE218:
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5269              		.loc 1 4950 0
 5270 007a 2846     		mov	r0, r5
 5271 007c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5272              	.LVL440:
ARM GAS  /tmp/ccaGl0eL.s 			page 198


 5273              	.L474:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5274              		.loc 1 4874 0
 5275 0080 226D     		ldr	r2, [r4, #80]
 5276 0082 0132     		adds	r2, r2, #1
 5277 0084 2265     		str	r2, [r4, #80]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5278              		.loc 1 4832 0
 5279 0086 0125     		movs	r5, #1
 5280              	.LVL441:
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5281              		.loc 1 4875 0
 5282 0088 F3E7     		b	.L471
 5283              	.LVL442:
 5284              	.L475:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5285              		.loc 1 4878 0
 5286 008a 2565     		str	r5, [r4, #80]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5287              		.loc 1 4832 0
 5288 008c 0125     		movs	r5, #1
 5289              	.LVL443:
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5290              		.loc 1 4879 0
 5291 008e F0E7     		b	.L471
 5292              	.LVL444:
 5293              	.L476:
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5294              		.loc 1 4882 0
 5295 0090 022B     		cmp	r3, #2
 5296 0092 13D0     		beq	.L485
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5297              		.loc 1 4884 0
 5298 0094 2565     		str	r5, [r4, #80]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5299              		.loc 1 4832 0
 5300 0096 0125     		movs	r5, #1
 5301              	.LVL445:
 5302 0098 EBE7     		b	.L471
 5303              	.LVL446:
 5304              	.L470:
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5305              		.loc 1 4902 0
 5306 009a 226D     		ldr	r2, [r4, #80]
 5307 009c B2F1FF3F 		cmp	r2, #-1
 5308 00a0 0ED0     		beq	.L486
 5309              	.LBB220:
 5310              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5311              		.loc 2 195 0
 5312              		.syntax unified
 5313              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5314 00a2 4FF05003 			mov r3, #80												
 5315 00a6 72B6     		cpsid i													
 5316 00a8 83F31188 		msr basepri, r3											
 5317 00ac BFF36F8F 		isb														
 5318 00b0 BFF34F8F 		dsb														
ARM GAS  /tmp/ccaGl0eL.s 			page 199


 5319 00b4 62B6     		cpsie i													
 5320              	
 5321              	@ 0 "" 2
 5322              	.LVL447:
 5323              		.thumb
 5324              		.syntax unified
 5325              	.L477:
 5326 00b6 FEE7     		b	.L477
 5327              	.LVL448:
 5328              	.L484:
 5329              	.LBE221:
 5330              	.LBE220:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5331              		.loc 1 4832 0
 5332 00b8 0125     		movs	r5, #1
 5333              	.LVL449:
 5334 00ba DAE7     		b	.L471
 5335              	.LVL450:
 5336              	.L485:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5337              		.loc 1 4889 0
 5338 00bc 0025     		movs	r5, #0
 5339              	.LVL451:
 5340 00be D8E7     		b	.L471
 5341              	.LVL452:
 5342              	.L486:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5343              		.loc 1 4832 0
 5344 00c0 0125     		movs	r5, #1
 5345              	.LVL453:
 5346 00c2 D6E7     		b	.L471
 5347              	.LVL454:
 5348              	.L488:
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5349              		.loc 1 4913 0
 5350 00c4 A36A     		ldr	r3, [r4, #40]
 5351              	.LVL455:
 5352 00c6 53B1     		cbz	r3, .L479
 5353              	.LBB222:
 5354              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5355              		.loc 2 195 0
 5356              		.syntax unified
 5357              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5358 00c8 4FF05003 			mov r3, #80												
 5359 00cc 72B6     		cpsid i													
 5360 00ce 83F31188 		msr basepri, r3											
 5361 00d2 BFF36F8F 		isb														
 5362 00d6 BFF34F8F 		dsb														
 5363 00da 62B6     		cpsie i													
 5364              	
 5365              	@ 0 "" 2
 5366              	.LVL456:
 5367              		.thumb
 5368              		.syntax unified
 5369              	.L480:
 5370 00dc FEE7     		b	.L480
ARM GAS  /tmp/ccaGl0eL.s 			page 200


 5371              	.L479:
 5372              	.LBE223:
 5373              	.LBE222:
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5374              		.loc 1 4915 0
 5375 00de 144B     		ldr	r3, .L489
 5376 00e0 1B68     		ldr	r3, [r3]
 5377 00e2 FBB9     		cbnz	r3, .L481
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5378              		.loc 1 4917 0
 5379 00e4 04F10408 		add	r8, r4, #4
 5380 00e8 4046     		mov	r0, r8
 5381 00ea FFF7FEFF 		bl	uxListRemove
 5382              	.LVL457:
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5383              		.loc 1 4918 0
 5384 00ee E26A     		ldr	r2, [r4, #44]
 5385 00f0 0123     		movs	r3, #1
 5386 00f2 9340     		lsls	r3, r3, r2
 5387 00f4 0F49     		ldr	r1, .L489+4
 5388 00f6 0868     		ldr	r0, [r1]
 5389 00f8 0343     		orrs	r3, r3, r0
 5390 00fa 0B60     		str	r3, [r1]
 5391 00fc 4146     		mov	r1, r8
 5392 00fe 0E4B     		ldr	r3, .L489+8
 5393 0100 1420     		movs	r0, #20
 5394 0102 00FB0230 		mla	r0, r0, r2, r3
 5395 0106 FFF7FEFF 		bl	vListInsertEnd
 5396              	.LVL458:
 5397              	.L482:
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5398              		.loc 1 4927 0
 5399 010a E26A     		ldr	r2, [r4, #44]
 5400 010c 0B4B     		ldr	r3, .L489+12
 5401 010e 1B68     		ldr	r3, [r3]
 5402 0110 DB6A     		ldr	r3, [r3, #44]
 5403 0112 9A42     		cmp	r2, r3
 5404 0114 AFD9     		bls	.L478
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5405              		.loc 1 4931 0
 5406 0116 0EB1     		cbz	r6, .L483
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5407              		.loc 1 4933 0
 5408 0118 0123     		movs	r3, #1
 5409 011a 3360     		str	r3, [r6]
 5410              	.L483:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5411              		.loc 1 4939 0
 5412 011c 084B     		ldr	r3, .L489+16
 5413 011e 0122     		movs	r2, #1
 5414 0120 1A60     		str	r2, [r3]
 5415 0122 A8E7     		b	.L478
 5416              	.L481:
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5417              		.loc 1 4924 0
 5418 0124 04F11801 		add	r1, r4, #24
 5419 0128 0648     		ldr	r0, .L489+20
ARM GAS  /tmp/ccaGl0eL.s 			page 201


 5420 012a FFF7FEFF 		bl	vListInsertEnd
 5421              	.LVL459:
 5422 012e ECE7     		b	.L482
 5423              	.L490:
 5424              		.align	2
 5425              	.L489:
 5426 0130 00000000 		.word	.LANCHOR16
 5427 0134 00000000 		.word	.LANCHOR13
 5428 0138 00000000 		.word	.LANCHOR4
 5429 013c 00000000 		.word	.LANCHOR10
 5430 0140 00000000 		.word	.LANCHOR19
 5431 0144 00000000 		.word	.LANCHOR1
 5432              		.cfi_endproc
 5433              	.LFE55:
 5435              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5436              		.align	1
 5437              		.global	vTaskNotifyGiveFromISR
 5438              		.syntax unified
 5439              		.thumb
 5440              		.thumb_func
 5441              		.fpu fpv5-sp-d16
 5443              	vTaskNotifyGiveFromISR:
 5444              	.LFB56:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5445              		.loc 1 4958 0
 5446              		.cfi_startproc
 5447              		@ args = 0, pretend = 0, frame = 0
 5448              		@ frame_needed = 0, uses_anonymous_args = 0
 5449              	.LVL460:
 5450 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5451              	.LCFI52:
 5452              		.cfi_def_cfa_offset 24
 5453              		.cfi_offset 3, -24
 5454              		.cfi_offset 4, -20
 5455              		.cfi_offset 5, -16
 5456              		.cfi_offset 6, -12
 5457              		.cfi_offset 7, -8
 5458              		.cfi_offset 14, -4
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5459              		.loc 1 4963 0
 5460 0002 50B9     		cbnz	r0, .L492
 5461              	.LBB224:
 5462              	.LBB225:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5463              		.loc 2 195 0
 5464              		.syntax unified
 5465              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5466 0004 4FF05003 			mov r3, #80												
 5467 0008 72B6     		cpsid i													
 5468 000a 83F31188 		msr basepri, r3											
 5469 000e BFF36F8F 		isb														
 5470 0012 BFF34F8F 		dsb														
 5471 0016 62B6     		cpsie i													
 5472              	
 5473              	@ 0 "" 2
 5474              	.LVL461:
 5475              		.thumb
ARM GAS  /tmp/ccaGl0eL.s 			page 202


 5476              		.syntax unified
 5477              	.L493:
 5478 0018 FEE7     		b	.L493
 5479              	.L492:
 5480 001a 0446     		mov	r4, r0
 5481 001c 0D46     		mov	r5, r1
 5482              	.LBE225:
 5483              	.LBE224:
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5484              		.loc 1 4981 0
 5485 001e FFF7FEFF 		bl	vPortValidateInterruptPriority
 5486              	.LVL462:
 5487              	.LBB226:
 5488              	.LBB227:
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5489              		.loc 2 213 0
 5490              		.syntax unified
 5491              	@ 213 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5492 0022 EFF31186 			mrs r6, basepri											
 5493 0026 4FF05003 		mov r3, #80												
 5494 002a 72B6     		cpsid i													
 5495 002c 83F31188 		msr basepri, r3											
 5496 0030 BFF36F8F 		isb														
 5497 0034 BFF34F8F 		dsb														
 5498 0038 62B6     		cpsie i													
 5499              	
 5500              	@ 0 "" 2
 5501              		.thumb
 5502              		.syntax unified
 5503              	.LBE227:
 5504              	.LBE226:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5505              		.loc 1 4987 0
 5506 003a 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 5507 003e DBB2     		uxtb	r3, r3
 5508              	.LVL463:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5509              		.loc 1 4988 0
 5510 0040 0222     		movs	r2, #2
 5511 0042 84F85420 		strb	r2, [r4, #84]
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5512              		.loc 1 4992 0
 5513 0046 226D     		ldr	r2, [r4, #80]
 5514 0048 0132     		adds	r2, r2, #1
 5515 004a 2265     		str	r2, [r4, #80]
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5516              		.loc 1 4998 0
 5517 004c 012B     		cmp	r3, #1
 5518 004e 02D0     		beq	.L501
 5519              	.LVL464:
 5520              	.L494:
 5521              	.LBB228:
 5522              	.LBB229:
 5523              		.loc 2 233 0
 5524              		.syntax unified
 5525              	@ 233 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5526 0050 86F31188 			msr basepri, r6	
ARM GAS  /tmp/ccaGl0eL.s 			page 203


 5527              	@ 0 "" 2
 5528              	.LVL465:
 5529              		.thumb
 5530              		.syntax unified
 5531              	.LBE229:
 5532              	.LBE228:
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5533              		.loc 1 5036 0
 5534 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5535              	.LVL466:
 5536              	.L501:
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5537              		.loc 1 5001 0
 5538 0056 A36A     		ldr	r3, [r4, #40]
 5539              	.LVL467:
 5540 0058 53B1     		cbz	r3, .L495
 5541              	.LBB230:
 5542              	.LBB231:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 5543              		.loc 2 195 0
 5544              		.syntax unified
 5545              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5546 005a 4FF05003 			mov r3, #80												
 5547 005e 72B6     		cpsid i													
 5548 0060 83F31188 		msr basepri, r3											
 5549 0064 BFF36F8F 		isb														
 5550 0068 BFF34F8F 		dsb														
 5551 006c 62B6     		cpsie i													
 5552              	
 5553              	@ 0 "" 2
 5554              	.LVL468:
 5555              		.thumb
 5556              		.syntax unified
 5557              	.L496:
 5558 006e FEE7     		b	.L496
 5559              	.L495:
 5560              	.LBE231:
 5561              	.LBE230:
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5562              		.loc 1 5003 0
 5563 0070 134B     		ldr	r3, .L502
 5564 0072 1B68     		ldr	r3, [r3]
 5565 0074 F3B9     		cbnz	r3, .L497
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5566              		.loc 1 5005 0
 5567 0076 271D     		adds	r7, r4, #4
 5568 0078 3846     		mov	r0, r7
 5569 007a FFF7FEFF 		bl	uxListRemove
 5570              	.LVL469:
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5571              		.loc 1 5006 0
 5572 007e E26A     		ldr	r2, [r4, #44]
 5573 0080 0123     		movs	r3, #1
 5574 0082 9340     		lsls	r3, r3, r2
 5575 0084 0F49     		ldr	r1, .L502+4
 5576 0086 0868     		ldr	r0, [r1]
 5577 0088 0343     		orrs	r3, r3, r0
ARM GAS  /tmp/ccaGl0eL.s 			page 204


 5578 008a 0B60     		str	r3, [r1]
 5579 008c 3946     		mov	r1, r7
 5580 008e 0E4B     		ldr	r3, .L502+8
 5581 0090 1420     		movs	r0, #20
 5582 0092 00FB0230 		mla	r0, r0, r2, r3
 5583 0096 FFF7FEFF 		bl	vListInsertEnd
 5584              	.LVL470:
 5585              	.L498:
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5586              		.loc 1 5015 0
 5587 009a E26A     		ldr	r2, [r4, #44]
 5588 009c 0B4B     		ldr	r3, .L502+12
 5589 009e 1B68     		ldr	r3, [r3]
 5590 00a0 DB6A     		ldr	r3, [r3, #44]
 5591 00a2 9A42     		cmp	r2, r3
 5592 00a4 D4D9     		bls	.L494
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5593              		.loc 1 5019 0
 5594 00a6 0DB1     		cbz	r5, .L499
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5595              		.loc 1 5021 0
 5596 00a8 0123     		movs	r3, #1
 5597 00aa 2B60     		str	r3, [r5]
 5598              	.L499:
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5599              		.loc 1 5027 0
 5600 00ac 084B     		ldr	r3, .L502+16
 5601 00ae 0122     		movs	r2, #1
 5602 00b0 1A60     		str	r2, [r3]
 5603 00b2 CDE7     		b	.L494
 5604              	.L497:
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5605              		.loc 1 5012 0
 5606 00b4 04F11801 		add	r1, r4, #24
 5607 00b8 0648     		ldr	r0, .L502+20
 5608 00ba FFF7FEFF 		bl	vListInsertEnd
 5609              	.LVL471:
 5610 00be ECE7     		b	.L498
 5611              	.L503:
 5612              		.align	2
 5613              	.L502:
 5614 00c0 00000000 		.word	.LANCHOR16
 5615 00c4 00000000 		.word	.LANCHOR13
 5616 00c8 00000000 		.word	.LANCHOR4
 5617 00cc 00000000 		.word	.LANCHOR10
 5618 00d0 00000000 		.word	.LANCHOR19
 5619 00d4 00000000 		.word	.LANCHOR1
 5620              		.cfi_endproc
 5621              	.LFE56:
 5623              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5624              		.align	1
 5625              		.global	xTaskNotifyStateClear
 5626              		.syntax unified
 5627              		.thumb
 5628              		.thumb_func
 5629              		.fpu fpv5-sp-d16
 5631              	xTaskNotifyStateClear:
ARM GAS  /tmp/ccaGl0eL.s 			page 205


 5632              	.LFB57:
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5633              		.loc 1 5045 0
 5634              		.cfi_startproc
 5635              		@ args = 0, pretend = 0, frame = 0
 5636              		@ frame_needed = 0, uses_anonymous_args = 0
 5637              	.LVL472:
 5638 0000 10B5     		push	{r4, lr}
 5639              	.LCFI53:
 5640              		.cfi_def_cfa_offset 8
 5641              		.cfi_offset 4, -8
 5642              		.cfi_offset 14, -4
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5643              		.loc 1 5051 0
 5644 0002 0446     		mov	r4, r0
 5645 0004 58B1     		cbz	r0, .L509
 5646              	.LVL473:
 5647              	.L505:
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5648              		.loc 1 5053 0 discriminator 4
 5649 0006 FFF7FEFF 		bl	vPortEnterCritical
 5650              	.LVL474:
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5651              		.loc 1 5055 0 discriminator 4
 5652 000a 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 5653 000e DBB2     		uxtb	r3, r3
 5654 0010 022B     		cmp	r3, #2
 5655 0012 07D0     		beq	.L510
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5656              		.loc 1 5062 0
 5657 0014 0024     		movs	r4, #0
 5658              	.LVL475:
 5659              	.L506:
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5660              		.loc 1 5065 0
 5661 0016 FFF7FEFF 		bl	vPortExitCritical
 5662              	.LVL476:
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5663              		.loc 1 5068 0
 5664 001a 2046     		mov	r0, r4
 5665 001c 10BD     		pop	{r4, pc}
 5666              	.LVL477:
 5667              	.L509:
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5668              		.loc 1 5051 0 discriminator 1
 5669 001e 044B     		ldr	r3, .L511
 5670 0020 1C68     		ldr	r4, [r3]
 5671              	.LVL478:
 5672 0022 F0E7     		b	.L505
 5673              	.LVL479:
 5674              	.L510:
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5675              		.loc 1 5057 0
 5676 0024 0023     		movs	r3, #0
 5677 0026 84F85430 		strb	r3, [r4, #84]
 5678              	.LVL480:
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccaGl0eL.s 			page 206


 5679              		.loc 1 5058 0
 5680 002a 0124     		movs	r4, #1
 5681              	.LVL481:
 5682 002c F3E7     		b	.L506
 5683              	.L512:
 5684 002e 00BF     		.align	2
 5685              	.L511:
 5686 0030 00000000 		.word	.LANCHOR10
 5687              		.cfi_endproc
 5688              	.LFE57:
 5690              		.global	pxCurrentTCB
 5691              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5692              		.align	2
 5693              		.set	.LANCHOR10,. + 0
 5696              	pxCurrentTCB:
 5697 0000 00000000 		.space	4
 5698              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5699              		.align	2
 5700              		.set	.LANCHOR2,. + 0
 5703              	pxDelayedTaskList:
 5704 0000 00000000 		.space	4
 5705              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5706              		.align	2
 5707              		.set	.LANCHOR8,. + 0
 5710              	pxOverflowDelayedTaskList:
 5711 0000 00000000 		.space	4
 5712              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5713              		.align	2
 5714              		.set	.LANCHOR4,. + 0
 5717              	pxReadyTasksLists:
 5718 0000 00000000 		.space	140
 5718      00000000 
 5718      00000000 
 5718      00000000 
 5718      00000000 
 5719              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5720              		.align	2
 5721              		.set	.LANCHOR9,. + 0
 5724              	uxCurrentNumberOfTasks:
 5725 0000 00000000 		.space	4
 5726              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5727              		.align	2
 5728              		.set	.LANCHOR14,. + 0
 5731              	uxDeletedTasksWaitingCleanUp:
 5732 0000 00000000 		.space	4
 5733              		.section	.bss.uxPendedTicks,"aw",%nobits
 5734              		.align	2
 5735              		.set	.LANCHOR18,. + 0
 5738              	uxPendedTicks:
 5739 0000 00000000 		.space	4
 5740              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5741              		.align	2
 5742              		.set	.LANCHOR16,. + 0
 5745              	uxSchedulerSuspended:
 5746 0000 00000000 		.space	4
 5747              		.section	.bss.uxTaskNumber,"aw",%nobits
 5748              		.align	2
ARM GAS  /tmp/ccaGl0eL.s 			page 207


 5749              		.set	.LANCHOR12,. + 0
 5752              	uxTaskNumber:
 5753 0000 00000000 		.space	4
 5754              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5755              		.align	2
 5756              		.set	.LANCHOR13,. + 0
 5759              	uxTopReadyPriority:
 5760 0000 00000000 		.space	4
 5761              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5762              		.align	2
 5763              		.set	.LANCHOR5,. + 0
 5766              	xDelayedTaskList1:
 5767 0000 00000000 		.space	20
 5767      00000000 
 5767      00000000 
 5767      00000000 
 5767      00000000 
 5768              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5769              		.align	2
 5770              		.set	.LANCHOR6,. + 0
 5773              	xDelayedTaskList2:
 5774 0000 00000000 		.space	20
 5774      00000000 
 5774      00000000 
 5774      00000000 
 5774      00000000 
 5775              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5776              		.align	2
 5777              		.set	.LANCHOR3,. + 0
 5780              	xNextTaskUnblockTime:
 5781 0000 00000000 		.space	4
 5782              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5783              		.align	2
 5784              		.set	.LANCHOR17,. + 0
 5787              	xNumOfOverflows:
 5788 0000 00000000 		.space	4
 5789              		.section	.bss.xPendingReadyList,"aw",%nobits
 5790              		.align	2
 5791              		.set	.LANCHOR1,. + 0
 5794              	xPendingReadyList:
 5795 0000 00000000 		.space	20
 5795      00000000 
 5795      00000000 
 5795      00000000 
 5795      00000000 
 5796              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5797              		.align	2
 5798              		.set	.LANCHOR11,. + 0
 5801              	xSchedulerRunning:
 5802 0000 00000000 		.space	4
 5803              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5804              		.align	2
 5805              		.set	.LANCHOR0,. + 0
 5808              	xSuspendedTaskList:
 5809 0000 00000000 		.space	20
 5809      00000000 
 5809      00000000 
ARM GAS  /tmp/ccaGl0eL.s 			page 208


 5809      00000000 
 5809      00000000 
 5810              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5811              		.align	2
 5812              		.set	.LANCHOR7,. + 0
 5815              	xTasksWaitingTermination:
 5816 0000 00000000 		.space	20
 5816      00000000 
 5816      00000000 
 5816      00000000 
 5816      00000000 
 5817              		.section	.bss.xTickCount,"aw",%nobits
 5818              		.align	2
 5819              		.set	.LANCHOR15,. + 0
 5822              	xTickCount:
 5823 0000 00000000 		.space	4
 5824              		.section	.bss.xYieldPending,"aw",%nobits
 5825              		.align	2
 5826              		.set	.LANCHOR19,. + 0
 5829              	xYieldPending:
 5830 0000 00000000 		.space	4
 5831              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 5832              		.align	2
 5833              	.LC0:
 5834 0000 49444C45 		.ascii	"IDLE\000"
 5834      00
 5835              		.text
 5836              	.Letext0:
 5837              		.file 3 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 5838              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 5839              		.file 5 "/usr/include/newlib/sys/lock.h"
 5840              		.file 6 "/usr/include/newlib/sys/_types.h"
 5841              		.file 7 "/usr/include/newlib/sys/reent.h"
 5842              		.file 8 "/usr/include/newlib/stdlib.h"
 5843              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 5844              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 5845              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5846              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 5847              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5848              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5849              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 5850              		.file 16 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccaGl0eL.s 			page 209


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccaGl0eL.s:18     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccaGl0eL.s:24     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccaGl0eL.s:94     .text.prvTaskIsTaskSuspended:000000000000003c $d
     /tmp/ccaGl0eL.s:100    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccaGl0eL.s:106    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccaGl0eL.s:140    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/ccaGl0eL.s:146    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccaGl0eL.s:152    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccaGl0eL.s:285    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccaGl0eL.s:291    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccaGl0eL.s:358    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccaGl0eL.s:370    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccaGl0eL.s:376    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccaGl0eL.s:484    .text.prvAddNewTaskToReadyList:000000000000008c $d
     /tmp/ccaGl0eL.s:495    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccaGl0eL.s:501    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccaGl0eL.s:566    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccaGl0eL.s:572    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccaGl0eL.s:639    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/ccaGl0eL.s:646    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccaGl0eL.s:652    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccaGl0eL.s:755    .text.prvAddCurrentTaskToDelayedList:0000000000000084 $d
     /tmp/ccaGl0eL.s:766    .text.prvIdleTask:0000000000000000 $t
     /tmp/ccaGl0eL.s:772    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccaGl0eL.s:819    .text.prvIdleTask:0000000000000028 $d
     /tmp/ccaGl0eL.s:825    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccaGl0eL.s:832    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccaGl0eL.s:963    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccaGl0eL.s:970    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccaGl0eL.s:1077   .text.vTaskDelete:0000000000000000 $t
     /tmp/ccaGl0eL.s:1084   .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccaGl0eL.s:1238   .text.vTaskDelete:00000000000000bc $d
     /tmp/ccaGl0eL.s:1252   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccaGl0eL.s:1259   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccaGl0eL.s:1298   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/ccaGl0eL.s:1303   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccaGl0eL.s:1310   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccaGl0eL.s:1375   .text.uxTaskPriorityGetFromISR:0000000000000030 $d
     /tmp/ccaGl0eL.s:1380   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccaGl0eL.s:1387   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccaGl0eL.s:1567   .text.vTaskPrioritySet:00000000000000d0 $d
     /tmp/ccaGl0eL.s:1575   .text.vTaskResume:0000000000000000 $t
     /tmp/ccaGl0eL.s:1582   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccaGl0eL.s:1687   .text.vTaskResume:0000000000000078 $d
     /tmp/ccaGl0eL.s:1695   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccaGl0eL.s:1702   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccaGl0eL.s:1839   .text.xTaskResumeFromISR:0000000000000098 $d
     /tmp/ccaGl0eL.s:1848   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccaGl0eL.s:1855   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccaGl0eL.s:1943   .text.vTaskStartScheduler:000000000000005c $d
     /tmp/ccaGl0eL.s:1952   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccaGl0eL.s:1959   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccaGl0eL.s:1999   .text.vTaskEndScheduler:0000000000000024 $d
     /tmp/ccaGl0eL.s:2004   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccaGl0eL.s:2011   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
ARM GAS  /tmp/ccaGl0eL.s 			page 210


     /tmp/ccaGl0eL.s:2029   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccaGl0eL.s:2034   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccaGl0eL.s:2041   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccaGl0eL.s:2057   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccaGl0eL.s:2062   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccaGl0eL.s:2069   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccaGl0eL.s:2092   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccaGl0eL.s:2097   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccaGl0eL.s:2104   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccaGl0eL.s:2119   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccaGl0eL.s:2124   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccaGl0eL.s:2131   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccaGl0eL.s:2179   .text.pcTaskGetName:0000000000000028 $d
     /tmp/ccaGl0eL.s:2186   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccaGl0eL.s:2193   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccaGl0eL.s:2399   .text.xTaskIncrementTick:00000000000000f0 $d
     /tmp/ccaGl0eL.s:2414   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccaGl0eL.s:2421   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccaGl0eL.s:2607   .text.xTaskResumeAll:00000000000000d4 $d
     /tmp/ccaGl0eL.s:2620   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccaGl0eL.s:2627   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccaGl0eL.s:2702   .text.vTaskDelay:0000000000000048 $d
     /tmp/ccaGl0eL.s:2708   .text.vTaskSetApplicationTaskTag:0000000000000000 $t
     /tmp/ccaGl0eL.s:2715   .text.vTaskSetApplicationTaskTag:0000000000000000 vTaskSetApplicationTaskTag
     /tmp/ccaGl0eL.s:2755   .text.vTaskSetApplicationTaskTag:000000000000001c $d
     /tmp/ccaGl0eL.s:2760   .text.xTaskGetApplicationTaskTag:0000000000000000 $t
     /tmp/ccaGl0eL.s:2767   .text.xTaskGetApplicationTaskTag:0000000000000000 xTaskGetApplicationTaskTag
     /tmp/ccaGl0eL.s:2806   .text.xTaskGetApplicationTaskTag:000000000000001c $d
     /tmp/ccaGl0eL.s:2811   .text.xTaskGetApplicationTaskTagFromISR:0000000000000000 $t
     /tmp/ccaGl0eL.s:2818   .text.xTaskGetApplicationTaskTagFromISR:0000000000000000 xTaskGetApplicationTaskTagFromISR
     /tmp/ccaGl0eL.s:2875   .text.xTaskGetApplicationTaskTagFromISR:000000000000002c $d
     /tmp/ccaGl0eL.s:2880   .text.xTaskCallApplicationTaskHook:0000000000000000 $t
     /tmp/ccaGl0eL.s:2887   .text.xTaskCallApplicationTaskHook:0000000000000000 xTaskCallApplicationTaskHook
     /tmp/ccaGl0eL.s:2932   .text.xTaskCallApplicationTaskHook:000000000000001c $d
     /tmp/ccaGl0eL.s:2937   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccaGl0eL.s:2944   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccaGl0eL.s:3103   .text.vTaskSwitchContext:00000000000000b8 $d
     /tmp/ccaGl0eL.s:3114   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccaGl0eL.s:3121   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccaGl0eL.s:3289   .text.vTaskSuspend:00000000000000d0 $d
     /tmp/ccaGl0eL.s:3301   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccaGl0eL.s:3308   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccaGl0eL.s:3363   .text.vTaskPlaceOnEventList:0000000000000030 $d
     /tmp/ccaGl0eL.s:3368   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccaGl0eL.s:3375   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccaGl0eL.s:3467   .text.vTaskPlaceOnUnorderedEventList:000000000000005c $d
     /tmp/ccaGl0eL.s:3473   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccaGl0eL.s:3480   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccaGl0eL.s:3585   .text.xTaskRemoveFromEventList:0000000000000078 $d
     /tmp/ccaGl0eL.s:3595   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccaGl0eL.s:3602   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccaGl0eL.s:3710   .text.vTaskRemoveFromUnorderedEventList:000000000000007c $d
     /tmp/ccaGl0eL.s:3721   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccaGl0eL.s:3728   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccaGl0eL.s:3785   .text.vTaskSetTimeOutState:0000000000000034 $d
     /tmp/ccaGl0eL.s:3791   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccaGl0eL.s:3798   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
ARM GAS  /tmp/ccaGl0eL.s 			page 211


     /tmp/ccaGl0eL.s:3819   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
     /tmp/ccaGl0eL.s:3825   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccaGl0eL.s:3832   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccaGl0eL.s:3968   .text.xTaskCheckForTimeOut:0000000000000080 $d
     /tmp/ccaGl0eL.s:3975   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccaGl0eL.s:3982   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccaGl0eL.s:3998   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccaGl0eL.s:4003   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccaGl0eL.s:4010   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccaGl0eL.s:4026   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccaGl0eL.s:4031   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccaGl0eL.s:4038   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccaGl0eL.s:4070   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccaGl0eL.s:4076   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccaGl0eL.s:4083   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccaGl0eL.s:4221   .text.xTaskPriorityInherit:00000000000000ac $d
     /tmp/ccaGl0eL.s:4228   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccaGl0eL.s:4235   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccaGl0eL.s:4393   .text.xTaskPriorityDisinherit:00000000000000ac $d
     /tmp/ccaGl0eL.s:4400   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccaGl0eL.s:4407   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccaGl0eL.s:4570   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000bc $d
     /tmp/ccaGl0eL.s:4577   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccaGl0eL.s:4584   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccaGl0eL.s:4607   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccaGl0eL.s:4612   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccaGl0eL.s:4619   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccaGl0eL.s:4645   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/ccaGl0eL.s:4650   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccaGl0eL.s:4657   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccaGl0eL.s:4753   .text.ulTaskNotifyTake:0000000000000070 $d
     /tmp/ccaGl0eL.s:4759   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccaGl0eL.s:4766   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccaGl0eL.s:4882   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/ccaGl0eL.s:4888   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccaGl0eL.s:4895   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccaGl0eL.s:4962   .text.xTaskGenericNotify:0000000000000040 $d
     /tmp/ccaGl0eL.s:5133   .text.xTaskGenericNotify:00000000000000fc $d
     /tmp/ccaGl0eL.s:5141   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccaGl0eL.s:5148   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccaGl0eL.s:5236   .text.xTaskGenericNotifyFromISR:0000000000000064 $d
     /tmp/ccaGl0eL.s:5426   .text.xTaskGenericNotifyFromISR:0000000000000130 $d
     /tmp/ccaGl0eL.s:5436   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccaGl0eL.s:5443   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccaGl0eL.s:5614   .text.vTaskNotifyGiveFromISR:00000000000000c0 $d
     /tmp/ccaGl0eL.s:5624   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccaGl0eL.s:5631   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccaGl0eL.s:5686   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/ccaGl0eL.s:5696   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccaGl0eL.s:5692   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccaGl0eL.s:5699   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccaGl0eL.s:5703   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccaGl0eL.s:5706   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccaGl0eL.s:5710   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccaGl0eL.s:5713   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccaGl0eL.s:5717   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccaGl0eL.s:5720   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
ARM GAS  /tmp/ccaGl0eL.s 			page 212


     /tmp/ccaGl0eL.s:5724   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccaGl0eL.s:5727   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccaGl0eL.s:5731   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccaGl0eL.s:5734   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccaGl0eL.s:5738   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccaGl0eL.s:5741   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccaGl0eL.s:5745   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccaGl0eL.s:5748   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccaGl0eL.s:5752   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccaGl0eL.s:5755   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccaGl0eL.s:5759   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccaGl0eL.s:5762   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccaGl0eL.s:5766   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccaGl0eL.s:5769   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccaGl0eL.s:5773   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccaGl0eL.s:5776   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccaGl0eL.s:5780   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccaGl0eL.s:5783   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccaGl0eL.s:5787   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccaGl0eL.s:5790   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccaGl0eL.s:5794   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccaGl0eL.s:5797   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccaGl0eL.s:5801   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccaGl0eL.s:5804   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccaGl0eL.s:5808   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccaGl0eL.s:5811   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccaGl0eL.s:5815   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccaGl0eL.s:5818   .bss.xTickCount:0000000000000000 $d
     /tmp/ccaGl0eL.s:5822   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccaGl0eL.s:5825   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccaGl0eL.s:5829   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccaGl0eL.s:5832   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
     /tmp/ccaGl0eL.s:4967   .text.xTaskGenericNotify:0000000000000045 $d
     /tmp/ccaGl0eL.s:4967   .text.xTaskGenericNotify:0000000000000046 $t
     /tmp/ccaGl0eL.s:5241   .text.xTaskGenericNotifyFromISR:0000000000000069 $d
     /tmp/ccaGl0eL.s:5241   .text.xTaskGenericNotifyFromISR:000000000000006a $t

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
vApplicationIdleHook
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xPortStartScheduler
vPortEndScheduler
vApplicationStackOverflowHook
