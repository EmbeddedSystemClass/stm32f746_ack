ARM GAS  /tmp/ccvLOER3.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_SDMMC1_SD_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	MX_SDMMC1_SD_Init:
  25              	.LFB159:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** 
  21:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/main.c **** #include "main.h"
  23:Core/Src/main.c **** #include "cmsis_os.h"
  24:Core/Src/main.c **** #include "fatfs.h"
  25:Core/Src/main.c **** #include "usb_host.h"
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END Includes */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccvLOER3.s 			page 2


  33:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PD */
  39:Core/Src/main.c **** /* USER CODE END PD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE END PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/main.c **** ADC_HandleTypeDef hadc3;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** CRC_HandleTypeDef hcrc;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** DCMI_HandleTypeDef hdcmi;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** DMA2D_HandleTypeDef hdma2d;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** ETH_HandleTypeDef heth;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  58:Core/Src/main.c **** I2C_HandleTypeDef hi2c3;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** LTDC_HandleTypeDef hltdc;
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** QSPI_HandleTypeDef hqspi;
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** RTC_HandleTypeDef hrtc;
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** SAI_HandleTypeDef hsai_BlockA2;
  67:Core/Src/main.c **** SAI_HandleTypeDef hsai_BlockB2;
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** SD_HandleTypeDef hsd1;
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** SPDIFRX_HandleTypeDef hspdif;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** SPI_HandleTypeDef hspi2;
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  76:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  77:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  78:Core/Src/main.c **** TIM_HandleTypeDef htim5;
  79:Core/Src/main.c **** TIM_HandleTypeDef htim8;
  80:Core/Src/main.c **** TIM_HandleTypeDef htim12;
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** UART_HandleTypeDef huart1;
  83:Core/Src/main.c **** UART_HandleTypeDef huart6;
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** SDRAM_HandleTypeDef hsdram1;
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** osThreadId defaultTaskHandle;
  88:Core/Src/main.c **** /* USER CODE BEGIN PV */
  89:Core/Src/main.c **** 
ARM GAS  /tmp/ccvLOER3.s 			page 3


  90:Core/Src/main.c **** /* USER CODE END PV */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  93:Core/Src/main.c **** void SystemClock_Config(void);
  94:Core/Src/main.c **** static void MX_GPIO_Init(void);
  95:Core/Src/main.c **** static void MX_ADC3_Init(void);
  96:Core/Src/main.c **** static void MX_CRC_Init(void);
  97:Core/Src/main.c **** static void MX_DCMI_Init(void);
  98:Core/Src/main.c **** static void MX_ETH_Init(void);
  99:Core/Src/main.c **** static void MX_I2C1_Init(void);
 100:Core/Src/main.c **** static void MX_I2C3_Init(void);
 101:Core/Src/main.c **** static void MX_QUADSPI_Init(void);
 102:Core/Src/main.c **** static void MX_RTC_Init(void);
 103:Core/Src/main.c **** static void MX_SAI2_Init(void);
 104:Core/Src/main.c **** static void MX_SDMMC1_SD_Init(void);
 105:Core/Src/main.c **** static void MX_SPDIFRX_Init(void);
 106:Core/Src/main.c **** static void MX_SPI2_Init(void);
 107:Core/Src/main.c **** static void MX_TIM1_Init(void);
 108:Core/Src/main.c **** static void MX_TIM2_Init(void);
 109:Core/Src/main.c **** static void MX_TIM3_Init(void);
 110:Core/Src/main.c **** static void MX_TIM5_Init(void);
 111:Core/Src/main.c **** static void MX_TIM8_Init(void);
 112:Core/Src/main.c **** static void MX_TIM12_Init(void);
 113:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
 114:Core/Src/main.c **** static void MX_USART6_UART_Init(void);
 115:Core/Src/main.c **** static void MX_DMA2D_Init(void);
 116:Core/Src/main.c **** static void MX_FMC_Init(void);
 117:Core/Src/main.c **** static void MX_LTDC_Init(void);
 118:Core/Src/main.c **** void StartDefaultTask(void const * argument);
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** /* USER CODE END PFP */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 125:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /* USER CODE END 0 */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** /**
 130:Core/Src/main.c ****   * @brief  The application entry point.
 131:Core/Src/main.c ****   * @retval int
 132:Core/Src/main.c ****   */
 133:Core/Src/main.c **** int main(void)
 134:Core/Src/main.c **** {
 135:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****   /* USER CODE END 1 */
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 142:Core/Src/main.c ****   HAL_Init();
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****   /* USER CODE END Init */
ARM GAS  /tmp/ccvLOER3.s 			page 4


 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /* Configure the system clock */
 149:Core/Src/main.c ****   SystemClock_Config();
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   /* USER CODE END SysInit */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   /* Initialize all configured peripherals */
 156:Core/Src/main.c ****   MX_GPIO_Init();
 157:Core/Src/main.c ****   MX_ADC3_Init();
 158:Core/Src/main.c ****   MX_CRC_Init();
 159:Core/Src/main.c ****   MX_DCMI_Init();
 160:Core/Src/main.c ****   MX_ETH_Init();
 161:Core/Src/main.c ****   MX_I2C1_Init();
 162:Core/Src/main.c ****   MX_I2C3_Init();
 163:Core/Src/main.c ****   MX_QUADSPI_Init();
 164:Core/Src/main.c ****   MX_RTC_Init();
 165:Core/Src/main.c ****   MX_SAI2_Init();
 166:Core/Src/main.c ****   MX_SDMMC1_SD_Init();
 167:Core/Src/main.c ****   MX_SPDIFRX_Init();
 168:Core/Src/main.c ****   MX_SPI2_Init();
 169:Core/Src/main.c ****   MX_TIM1_Init();
 170:Core/Src/main.c ****   MX_TIM2_Init();
 171:Core/Src/main.c ****   MX_TIM3_Init();
 172:Core/Src/main.c ****   MX_TIM5_Init();
 173:Core/Src/main.c ****   MX_TIM8_Init();
 174:Core/Src/main.c ****   MX_TIM12_Init();
 175:Core/Src/main.c ****   MX_USART1_UART_Init();
 176:Core/Src/main.c ****   MX_USART6_UART_Init();
 177:Core/Src/main.c ****   MX_FATFS_Init();
 178:Core/Src/main.c ****   MX_DMA2D_Init();
 179:Core/Src/main.c ****   MX_FMC_Init();
 180:Core/Src/main.c ****   MX_LTDC_Init();
 181:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /* USER CODE END 2 */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 186:Core/Src/main.c ****   /* add mutexes, ... */
 187:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 190:Core/Src/main.c ****   /* add semaphores, ... */
 191:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 194:Core/Src/main.c ****   /* start timers, add new ones, ... */
 195:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 198:Core/Src/main.c ****   /* add queues, ... */
 199:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* Create the thread(s) */
 202:Core/Src/main.c ****   /* definition and creation of defaultTask */
 203:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
ARM GAS  /tmp/ccvLOER3.s 			page 5


 204:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 207:Core/Src/main.c ****   /* add threads, ... */
 208:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* Start scheduler */
 211:Core/Src/main.c ****   osKernelStart();
 212:Core/Src/main.c ****  
 213:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 214:Core/Src/main.c ****   /* Infinite loop */
 215:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 216:Core/Src/main.c ****   while (1)
 217:Core/Src/main.c ****   {
 218:Core/Src/main.c ****     /* USER CODE END WHILE */
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 221:Core/Src/main.c ****   }
 222:Core/Src/main.c ****   /* USER CODE END 3 */
 223:Core/Src/main.c **** }
 224:Core/Src/main.c **** 
 225:Core/Src/main.c **** /**
 226:Core/Src/main.c ****   * @brief System Clock Configuration
 227:Core/Src/main.c ****   * @retval None
 228:Core/Src/main.c ****   */
 229:Core/Src/main.c **** void SystemClock_Config(void)
 230:Core/Src/main.c **** {
 231:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 232:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 233:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   /** Configure LSE Drive Capability 
 236:Core/Src/main.c ****   */
 237:Core/Src/main.c ****   HAL_PWR_EnableBkUpAccess();
 238:Core/Src/main.c ****   /** Configure the main internal regulator output voltage 
 239:Core/Src/main.c ****   */
 240:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 241:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 242:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB busses clocks 
 243:Core/Src/main.c ****   */
 244:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 245:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 246:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 247:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 248:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 249:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 250:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 400;
 251:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 252:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 253:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 254:Core/Src/main.c ****   {
 255:Core/Src/main.c ****     Error_Handler();
 256:Core/Src/main.c ****   }
 257:Core/Src/main.c ****   /** Activate the Over-Drive mode 
 258:Core/Src/main.c ****   */
 259:Core/Src/main.c ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 260:Core/Src/main.c ****   {
ARM GAS  /tmp/ccvLOER3.s 			page 6


 261:Core/Src/main.c ****     Error_Handler();
 262:Core/Src/main.c ****   }
 263:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB busses clocks 
 264:Core/Src/main.c ****   */
 265:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 266:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 267:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 268:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 269:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 270:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 273:Core/Src/main.c ****   {
 274:Core/Src/main.c ****     Error_Handler();
 275:Core/Src/main.c ****   }
 276:Core/Src/main.c ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 277:Core/Src/main.c ****                               |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 278:Core/Src/main.c ****                               |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
 279:Core/Src/main.c ****                               |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
 280:Core/Src/main.c ****                               |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 281:Core/Src/main.c ****   PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 282:Core/Src/main.c ****   PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 283:Core/Src/main.c ****   PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 284:Core/Src/main.c ****   PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 285:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 286:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 287:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 288:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 289:Core/Src/main.c ****   PeriphClkInitStruct.PLLI2SDivQ = 1;
 290:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAIDivQ = 1;
 291:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 292:Core/Src/main.c ****   PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 293:Core/Src/main.c ****   PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 294:Core/Src/main.c ****   PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 295:Core/Src/main.c ****   PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 296:Core/Src/main.c ****   PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 297:Core/Src/main.c ****   PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 298:Core/Src/main.c ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 299:Core/Src/main.c ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 300:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 301:Core/Src/main.c ****   {
 302:Core/Src/main.c ****     Error_Handler();
 303:Core/Src/main.c ****   }
 304:Core/Src/main.c **** }
 305:Core/Src/main.c **** 
 306:Core/Src/main.c **** /**
 307:Core/Src/main.c ****   * @brief ADC3 Initialization Function
 308:Core/Src/main.c ****   * @param None
 309:Core/Src/main.c ****   * @retval None
 310:Core/Src/main.c ****   */
 311:Core/Src/main.c **** static void MX_ADC3_Init(void)
 312:Core/Src/main.c **** {
 313:Core/Src/main.c **** 
 314:Core/Src/main.c ****   /* USER CODE BEGIN ADC3_Init 0 */
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   /* USER CODE END ADC3_Init 0 */
 317:Core/Src/main.c **** 
ARM GAS  /tmp/ccvLOER3.s 			page 7


 318:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE BEGIN ADC3_Init 1 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE END ADC3_Init 1 */
 323:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 324:Core/Src/main.c ****   */
 325:Core/Src/main.c ****   hadc3.Instance = ADC3;
 326:Core/Src/main.c ****   hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 327:Core/Src/main.c ****   hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 328:Core/Src/main.c ****   hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 329:Core/Src/main.c ****   hadc3.Init.ContinuousConvMode = DISABLE;
 330:Core/Src/main.c ****   hadc3.Init.DiscontinuousConvMode = DISABLE;
 331:Core/Src/main.c ****   hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 332:Core/Src/main.c ****   hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 333:Core/Src/main.c ****   hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 334:Core/Src/main.c ****   hadc3.Init.NbrOfConversion = 1;
 335:Core/Src/main.c ****   hadc3.Init.DMAContinuousRequests = DISABLE;
 336:Core/Src/main.c ****   hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 337:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc3) != HAL_OK)
 338:Core/Src/main.c ****   {
 339:Core/Src/main.c ****     Error_Handler();
 340:Core/Src/main.c ****   }
 341:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 342:Core/Src/main.c ****   */
 343:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 344:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 345:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 346:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 347:Core/Src/main.c ****   {
 348:Core/Src/main.c ****     Error_Handler();
 349:Core/Src/main.c ****   }
 350:Core/Src/main.c ****   /* USER CODE BEGIN ADC3_Init 2 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /* USER CODE END ADC3_Init 2 */
 353:Core/Src/main.c **** 
 354:Core/Src/main.c **** }
 355:Core/Src/main.c **** 
 356:Core/Src/main.c **** /**
 357:Core/Src/main.c ****   * @brief CRC Initialization Function
 358:Core/Src/main.c ****   * @param None
 359:Core/Src/main.c ****   * @retval None
 360:Core/Src/main.c ****   */
 361:Core/Src/main.c **** static void MX_CRC_Init(void)
 362:Core/Src/main.c **** {
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 0 */
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****   /* USER CODE END CRC_Init 0 */
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 1 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* USER CODE END CRC_Init 1 */
 371:Core/Src/main.c ****   hcrc.Instance = CRC;
 372:Core/Src/main.c ****   hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 373:Core/Src/main.c ****   hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 374:Core/Src/main.c ****   hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
ARM GAS  /tmp/ccvLOER3.s 			page 8


 375:Core/Src/main.c ****   hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 376:Core/Src/main.c ****   hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 377:Core/Src/main.c ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 378:Core/Src/main.c ****   {
 379:Core/Src/main.c ****     Error_Handler();
 380:Core/Src/main.c ****   }
 381:Core/Src/main.c ****   /* USER CODE BEGIN CRC_Init 2 */
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /* USER CODE END CRC_Init 2 */
 384:Core/Src/main.c **** 
 385:Core/Src/main.c **** }
 386:Core/Src/main.c **** 
 387:Core/Src/main.c **** /**
 388:Core/Src/main.c ****   * @brief DCMI Initialization Function
 389:Core/Src/main.c ****   * @param None
 390:Core/Src/main.c ****   * @retval None
 391:Core/Src/main.c ****   */
 392:Core/Src/main.c **** static void MX_DCMI_Init(void)
 393:Core/Src/main.c **** {
 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   /* USER CODE BEGIN DCMI_Init 0 */
 396:Core/Src/main.c **** 
 397:Core/Src/main.c ****   /* USER CODE END DCMI_Init 0 */
 398:Core/Src/main.c **** 
 399:Core/Src/main.c ****   /* USER CODE BEGIN DCMI_Init 1 */
 400:Core/Src/main.c **** 
 401:Core/Src/main.c ****   /* USER CODE END DCMI_Init 1 */
 402:Core/Src/main.c ****   hdcmi.Instance = DCMI;
 403:Core/Src/main.c ****   hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 404:Core/Src/main.c ****   hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 405:Core/Src/main.c ****   hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 406:Core/Src/main.c ****   hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 407:Core/Src/main.c ****   hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 408:Core/Src/main.c ****   hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 409:Core/Src/main.c ****   hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 410:Core/Src/main.c ****   hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 411:Core/Src/main.c ****   hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 412:Core/Src/main.c ****   hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 413:Core/Src/main.c ****   hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 414:Core/Src/main.c ****   if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 415:Core/Src/main.c ****   {
 416:Core/Src/main.c ****     Error_Handler();
 417:Core/Src/main.c ****   }
 418:Core/Src/main.c ****   /* USER CODE BEGIN DCMI_Init 2 */
 419:Core/Src/main.c **** 
 420:Core/Src/main.c ****   /* USER CODE END DCMI_Init 2 */
 421:Core/Src/main.c **** 
 422:Core/Src/main.c **** }
 423:Core/Src/main.c **** 
 424:Core/Src/main.c **** /**
 425:Core/Src/main.c ****   * @brief DMA2D Initialization Function
 426:Core/Src/main.c ****   * @param None
 427:Core/Src/main.c ****   * @retval None
 428:Core/Src/main.c ****   */
 429:Core/Src/main.c **** static void MX_DMA2D_Init(void)
 430:Core/Src/main.c **** {
 431:Core/Src/main.c **** 
ARM GAS  /tmp/ccvLOER3.s 			page 9


 432:Core/Src/main.c ****   /* USER CODE BEGIN DMA2D_Init 0 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE END DMA2D_Init 0 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c ****   /* USER CODE BEGIN DMA2D_Init 1 */
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****   /* USER CODE END DMA2D_Init 1 */
 439:Core/Src/main.c ****   hdma2d.Instance = DMA2D;
 440:Core/Src/main.c ****   hdma2d.Init.Mode = DMA2D_M2M;
 441:Core/Src/main.c ****   hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 442:Core/Src/main.c ****   hdma2d.Init.OutputOffset = 0;
 443:Core/Src/main.c ****   hdma2d.LayerCfg[1].InputOffset = 0;
 444:Core/Src/main.c ****   hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 445:Core/Src/main.c ****   hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 446:Core/Src/main.c ****   hdma2d.LayerCfg[1].InputAlpha = 0;
 447:Core/Src/main.c ****   if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 448:Core/Src/main.c ****   {
 449:Core/Src/main.c ****     Error_Handler();
 450:Core/Src/main.c ****   }
 451:Core/Src/main.c ****   if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 452:Core/Src/main.c ****   {
 453:Core/Src/main.c ****     Error_Handler();
 454:Core/Src/main.c ****   }
 455:Core/Src/main.c ****   /* USER CODE BEGIN DMA2D_Init 2 */
 456:Core/Src/main.c **** 
 457:Core/Src/main.c ****   /* USER CODE END DMA2D_Init 2 */
 458:Core/Src/main.c **** 
 459:Core/Src/main.c **** }
 460:Core/Src/main.c **** 
 461:Core/Src/main.c **** /**
 462:Core/Src/main.c ****   * @brief ETH Initialization Function
 463:Core/Src/main.c ****   * @param None
 464:Core/Src/main.c ****   * @retval None
 465:Core/Src/main.c ****   */
 466:Core/Src/main.c **** static void MX_ETH_Init(void)
 467:Core/Src/main.c **** {
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /* USER CODE BEGIN ETH_Init 0 */
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /* USER CODE END ETH_Init 0 */
 472:Core/Src/main.c **** 
 473:Core/Src/main.c ****   /* USER CODE BEGIN ETH_Init 1 */
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   /* USER CODE END ETH_Init 1 */
 476:Core/Src/main.c ****   heth.Instance = ETH;
 477:Core/Src/main.c ****   heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 478:Core/Src/main.c ****   heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 479:Core/Src/main.c ****   heth.Init.MACAddr[0] =   0x00;
 480:Core/Src/main.c ****   heth.Init.MACAddr[1] =   0x80;
 481:Core/Src/main.c ****   heth.Init.MACAddr[2] =   0xE1;
 482:Core/Src/main.c ****   heth.Init.MACAddr[3] =   0x00;
 483:Core/Src/main.c ****   heth.Init.MACAddr[4] =   0x00;
 484:Core/Src/main.c ****   heth.Init.MACAddr[5] =   0x00;
 485:Core/Src/main.c ****   heth.Init.RxMode = ETH_RXPOLLING_MODE;
 486:Core/Src/main.c ****   heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 487:Core/Src/main.c ****   heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 488:Core/Src/main.c **** 
ARM GAS  /tmp/ccvLOER3.s 			page 10


 489:Core/Src/main.c ****   /* USER CODE BEGIN MACADDRESS */
 490:Core/Src/main.c ****     
 491:Core/Src/main.c ****   /* USER CODE END MACADDRESS */
 492:Core/Src/main.c **** 
 493:Core/Src/main.c ****   if (HAL_ETH_Init(&heth) != HAL_OK)
 494:Core/Src/main.c ****   {
 495:Core/Src/main.c ****     Error_Handler();
 496:Core/Src/main.c ****   }
 497:Core/Src/main.c ****   /* USER CODE BEGIN ETH_Init 2 */
 498:Core/Src/main.c **** 
 499:Core/Src/main.c ****   /* USER CODE END ETH_Init 2 */
 500:Core/Src/main.c **** 
 501:Core/Src/main.c **** }
 502:Core/Src/main.c **** 
 503:Core/Src/main.c **** /**
 504:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 505:Core/Src/main.c ****   * @param None
 506:Core/Src/main.c ****   * @retval None
 507:Core/Src/main.c ****   */
 508:Core/Src/main.c **** static void MX_I2C1_Init(void)
 509:Core/Src/main.c **** {
 510:Core/Src/main.c **** 
 511:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 516:Core/Src/main.c **** 
 517:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 518:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 519:Core/Src/main.c ****   hi2c1.Init.Timing = 0x00C0EAFF;
 520:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 521:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 522:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 523:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 524:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 525:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 526:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 527:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 528:Core/Src/main.c ****   {
 529:Core/Src/main.c ****     Error_Handler();
 530:Core/Src/main.c ****   }
 531:Core/Src/main.c ****   /** Configure Analogue filter 
 532:Core/Src/main.c ****   */
 533:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 534:Core/Src/main.c ****   {
 535:Core/Src/main.c ****     Error_Handler();
 536:Core/Src/main.c ****   }
 537:Core/Src/main.c ****   /** Configure Digital filter 
 538:Core/Src/main.c ****   */
 539:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 540:Core/Src/main.c ****   {
 541:Core/Src/main.c ****     Error_Handler();
 542:Core/Src/main.c ****   }
 543:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 544:Core/Src/main.c **** 
 545:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
ARM GAS  /tmp/ccvLOER3.s 			page 11


 546:Core/Src/main.c **** 
 547:Core/Src/main.c **** }
 548:Core/Src/main.c **** 
 549:Core/Src/main.c **** /**
 550:Core/Src/main.c ****   * @brief I2C3 Initialization Function
 551:Core/Src/main.c ****   * @param None
 552:Core/Src/main.c ****   * @retval None
 553:Core/Src/main.c ****   */
 554:Core/Src/main.c **** static void MX_I2C3_Init(void)
 555:Core/Src/main.c **** {
 556:Core/Src/main.c **** 
 557:Core/Src/main.c ****   /* USER CODE BEGIN I2C3_Init 0 */
 558:Core/Src/main.c **** 
 559:Core/Src/main.c ****   /* USER CODE END I2C3_Init 0 */
 560:Core/Src/main.c **** 
 561:Core/Src/main.c ****   /* USER CODE BEGIN I2C3_Init 1 */
 562:Core/Src/main.c **** 
 563:Core/Src/main.c ****   /* USER CODE END I2C3_Init 1 */
 564:Core/Src/main.c ****   hi2c3.Instance = I2C3;
 565:Core/Src/main.c ****   hi2c3.Init.Timing = 0x00C0EAFF;
 566:Core/Src/main.c ****   hi2c3.Init.OwnAddress1 = 0;
 567:Core/Src/main.c ****   hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 568:Core/Src/main.c ****   hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 569:Core/Src/main.c ****   hi2c3.Init.OwnAddress2 = 0;
 570:Core/Src/main.c ****   hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 571:Core/Src/main.c ****   hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 572:Core/Src/main.c ****   hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 573:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 574:Core/Src/main.c ****   {
 575:Core/Src/main.c ****     Error_Handler();
 576:Core/Src/main.c ****   }
 577:Core/Src/main.c ****   /** Configure Analogue filter 
 578:Core/Src/main.c ****   */
 579:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 580:Core/Src/main.c ****   {
 581:Core/Src/main.c ****     Error_Handler();
 582:Core/Src/main.c ****   }
 583:Core/Src/main.c ****   /** Configure Digital filter 
 584:Core/Src/main.c ****   */
 585:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 586:Core/Src/main.c ****   {
 587:Core/Src/main.c ****     Error_Handler();
 588:Core/Src/main.c ****   }
 589:Core/Src/main.c ****   /* USER CODE BEGIN I2C3_Init 2 */
 590:Core/Src/main.c **** 
 591:Core/Src/main.c ****   /* USER CODE END I2C3_Init 2 */
 592:Core/Src/main.c **** 
 593:Core/Src/main.c **** }
 594:Core/Src/main.c **** 
 595:Core/Src/main.c **** /**
 596:Core/Src/main.c ****   * @brief LTDC Initialization Function
 597:Core/Src/main.c ****   * @param None
 598:Core/Src/main.c ****   * @retval None
 599:Core/Src/main.c ****   */
 600:Core/Src/main.c **** static void MX_LTDC_Init(void)
 601:Core/Src/main.c **** {
 602:Core/Src/main.c **** 
ARM GAS  /tmp/ccvLOER3.s 			page 12


 603:Core/Src/main.c ****   /* USER CODE BEGIN LTDC_Init 0 */
 604:Core/Src/main.c **** 
 605:Core/Src/main.c ****   /* USER CODE END LTDC_Init 0 */
 606:Core/Src/main.c **** 
 607:Core/Src/main.c ****   LTDC_LayerCfgTypeDef pLayerCfg = {0};
 608:Core/Src/main.c **** 
 609:Core/Src/main.c ****   /* USER CODE BEGIN LTDC_Init 1 */
 610:Core/Src/main.c **** 
 611:Core/Src/main.c ****   /* USER CODE END LTDC_Init 1 */
 612:Core/Src/main.c ****   hltdc.Instance = LTDC;
 613:Core/Src/main.c ****   hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 614:Core/Src/main.c ****   hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 615:Core/Src/main.c ****   hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 616:Core/Src/main.c ****   hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 617:Core/Src/main.c ****   hltdc.Init.HorizontalSync = 40;
 618:Core/Src/main.c ****   hltdc.Init.VerticalSync = 9;
 619:Core/Src/main.c ****   hltdc.Init.AccumulatedHBP = 53;
 620:Core/Src/main.c ****   hltdc.Init.AccumulatedVBP = 11;
 621:Core/Src/main.c ****   hltdc.Init.AccumulatedActiveW = 533;
 622:Core/Src/main.c ****   hltdc.Init.AccumulatedActiveH = 283;
 623:Core/Src/main.c ****   hltdc.Init.TotalWidth = 565;
 624:Core/Src/main.c ****   hltdc.Init.TotalHeigh = 285;
 625:Core/Src/main.c ****   hltdc.Init.Backcolor.Blue = 0;
 626:Core/Src/main.c ****   hltdc.Init.Backcolor.Green = 0;
 627:Core/Src/main.c ****   hltdc.Init.Backcolor.Red = 0;
 628:Core/Src/main.c ****   if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 629:Core/Src/main.c ****   {
 630:Core/Src/main.c ****     Error_Handler();
 631:Core/Src/main.c ****   }
 632:Core/Src/main.c ****   pLayerCfg.WindowX0 = 0;
 633:Core/Src/main.c ****   pLayerCfg.WindowX1 = 480;
 634:Core/Src/main.c ****   pLayerCfg.WindowY0 = 0;
 635:Core/Src/main.c ****   pLayerCfg.WindowY1 = 272;
 636:Core/Src/main.c ****   pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 637:Core/Src/main.c ****   pLayerCfg.Alpha = 255;
 638:Core/Src/main.c ****   pLayerCfg.Alpha0 = 0;
 639:Core/Src/main.c ****   pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 640:Core/Src/main.c ****   pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 641:Core/Src/main.c ****   pLayerCfg.FBStartAdress = 0xC0000000;
 642:Core/Src/main.c ****   pLayerCfg.ImageWidth = 480;
 643:Core/Src/main.c ****   pLayerCfg.ImageHeight = 272;
 644:Core/Src/main.c ****   pLayerCfg.Backcolor.Blue = 0;
 645:Core/Src/main.c ****   pLayerCfg.Backcolor.Green = 0;
 646:Core/Src/main.c ****   pLayerCfg.Backcolor.Red = 0;
 647:Core/Src/main.c ****   if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 648:Core/Src/main.c ****   {
 649:Core/Src/main.c ****     Error_Handler();
 650:Core/Src/main.c ****   }
 651:Core/Src/main.c ****   /* USER CODE BEGIN LTDC_Init 2 */
 652:Core/Src/main.c **** 
 653:Core/Src/main.c ****   /* USER CODE END LTDC_Init 2 */
 654:Core/Src/main.c **** 
 655:Core/Src/main.c **** }
 656:Core/Src/main.c **** 
 657:Core/Src/main.c **** /**
 658:Core/Src/main.c ****   * @brief QUADSPI Initialization Function
 659:Core/Src/main.c ****   * @param None
ARM GAS  /tmp/ccvLOER3.s 			page 13


 660:Core/Src/main.c ****   * @retval None
 661:Core/Src/main.c ****   */
 662:Core/Src/main.c **** static void MX_QUADSPI_Init(void)
 663:Core/Src/main.c **** {
 664:Core/Src/main.c **** 
 665:Core/Src/main.c ****   /* USER CODE BEGIN QUADSPI_Init 0 */
 666:Core/Src/main.c **** 
 667:Core/Src/main.c ****   /* USER CODE END QUADSPI_Init 0 */
 668:Core/Src/main.c **** 
 669:Core/Src/main.c ****   /* USER CODE BEGIN QUADSPI_Init 1 */
 670:Core/Src/main.c **** 
 671:Core/Src/main.c ****   /* USER CODE END QUADSPI_Init 1 */
 672:Core/Src/main.c ****   /* QUADSPI parameter configuration*/
 673:Core/Src/main.c ****   hqspi.Instance = QUADSPI;
 674:Core/Src/main.c ****   hqspi.Init.ClockPrescaler = 255;
 675:Core/Src/main.c ****   hqspi.Init.FifoThreshold = 1;
 676:Core/Src/main.c ****   hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 677:Core/Src/main.c ****   hqspi.Init.FlashSize = 1;
 678:Core/Src/main.c ****   hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 679:Core/Src/main.c ****   hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 680:Core/Src/main.c ****   hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 681:Core/Src/main.c ****   hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 682:Core/Src/main.c ****   if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 683:Core/Src/main.c ****   {
 684:Core/Src/main.c ****     Error_Handler();
 685:Core/Src/main.c ****   }
 686:Core/Src/main.c ****   /* USER CODE BEGIN QUADSPI_Init 2 */
 687:Core/Src/main.c **** 
 688:Core/Src/main.c ****   /* USER CODE END QUADSPI_Init 2 */
 689:Core/Src/main.c **** 
 690:Core/Src/main.c **** }
 691:Core/Src/main.c **** 
 692:Core/Src/main.c **** /**
 693:Core/Src/main.c ****   * @brief RTC Initialization Function
 694:Core/Src/main.c ****   * @param None
 695:Core/Src/main.c ****   * @retval None
 696:Core/Src/main.c ****   */
 697:Core/Src/main.c **** static void MX_RTC_Init(void)
 698:Core/Src/main.c **** {
 699:Core/Src/main.c **** 
 700:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 0 */
 701:Core/Src/main.c **** 
 702:Core/Src/main.c ****   /* USER CODE END RTC_Init 0 */
 703:Core/Src/main.c **** 
 704:Core/Src/main.c ****   RTC_TimeTypeDef sTime = {0};
 705:Core/Src/main.c ****   RTC_DateTypeDef sDate = {0};
 706:Core/Src/main.c ****   RTC_AlarmTypeDef sAlarm = {0};
 707:Core/Src/main.c **** 
 708:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 1 */
 709:Core/Src/main.c **** 
 710:Core/Src/main.c ****   /* USER CODE END RTC_Init 1 */
 711:Core/Src/main.c ****   /** Initialize RTC Only 
 712:Core/Src/main.c ****   */
 713:Core/Src/main.c ****   hrtc.Instance = RTC;
 714:Core/Src/main.c ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 715:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = 127;
 716:Core/Src/main.c ****   hrtc.Init.SynchPrediv = 255;
ARM GAS  /tmp/ccvLOER3.s 			page 14


 717:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 718:Core/Src/main.c ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 719:Core/Src/main.c ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 720:Core/Src/main.c ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 721:Core/Src/main.c ****   {
 722:Core/Src/main.c ****     Error_Handler();
 723:Core/Src/main.c ****   }
 724:Core/Src/main.c **** 
 725:Core/Src/main.c ****   /* USER CODE BEGIN Check_RTC_BKUP */
 726:Core/Src/main.c ****     
 727:Core/Src/main.c ****   /* USER CODE END Check_RTC_BKUP */
 728:Core/Src/main.c **** 
 729:Core/Src/main.c ****   /** Initialize RTC and set the Time and Date 
 730:Core/Src/main.c ****   */
 731:Core/Src/main.c ****   sTime.Hours = 0x0;
 732:Core/Src/main.c ****   sTime.Minutes = 0x0;
 733:Core/Src/main.c ****   sTime.Seconds = 0x0;
 734:Core/Src/main.c ****   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 735:Core/Src/main.c ****   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 736:Core/Src/main.c ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 737:Core/Src/main.c ****   {
 738:Core/Src/main.c ****     Error_Handler();
 739:Core/Src/main.c ****   }
 740:Core/Src/main.c ****   sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 741:Core/Src/main.c ****   sDate.Month = RTC_MONTH_JANUARY;
 742:Core/Src/main.c ****   sDate.Date = 0x1;
 743:Core/Src/main.c ****   sDate.Year = 0x0;
 744:Core/Src/main.c ****   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 745:Core/Src/main.c ****   {
 746:Core/Src/main.c ****     Error_Handler();
 747:Core/Src/main.c ****   }
 748:Core/Src/main.c ****   /** Enable the Alarm A 
 749:Core/Src/main.c ****   */
 750:Core/Src/main.c ****   sAlarm.AlarmTime.Hours = 0x0;
 751:Core/Src/main.c ****   sAlarm.AlarmTime.Minutes = 0x0;
 752:Core/Src/main.c ****   sAlarm.AlarmTime.Seconds = 0x0;
 753:Core/Src/main.c ****   sAlarm.AlarmTime.SubSeconds = 0x0;
 754:Core/Src/main.c ****   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 755:Core/Src/main.c ****   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 756:Core/Src/main.c ****   sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 757:Core/Src/main.c ****   sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 758:Core/Src/main.c ****   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 759:Core/Src/main.c ****   sAlarm.AlarmDateWeekDay = 0x1;
 760:Core/Src/main.c ****   sAlarm.Alarm = RTC_ALARM_A;
 761:Core/Src/main.c ****   if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 762:Core/Src/main.c ****   {
 763:Core/Src/main.c ****     Error_Handler();
 764:Core/Src/main.c ****   }
 765:Core/Src/main.c ****   /** Enable the Alarm B 
 766:Core/Src/main.c ****   */
 767:Core/Src/main.c ****   sAlarm.AlarmDateWeekDay = 0x1;
 768:Core/Src/main.c ****   sAlarm.Alarm = RTC_ALARM_B;
 769:Core/Src/main.c ****   if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 770:Core/Src/main.c ****   {
 771:Core/Src/main.c ****     Error_Handler();
 772:Core/Src/main.c ****   }
 773:Core/Src/main.c ****   /** Enable the TimeStamp 
ARM GAS  /tmp/ccvLOER3.s 			page 15


 774:Core/Src/main.c ****   */
 775:Core/Src/main.c ****   if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 776:Core/Src/main.c ****   {
 777:Core/Src/main.c ****     Error_Handler();
 778:Core/Src/main.c ****   }
 779:Core/Src/main.c ****   /* USER CODE BEGIN RTC_Init 2 */
 780:Core/Src/main.c **** 
 781:Core/Src/main.c ****   /* USER CODE END RTC_Init 2 */
 782:Core/Src/main.c **** 
 783:Core/Src/main.c **** }
 784:Core/Src/main.c **** 
 785:Core/Src/main.c **** /**
 786:Core/Src/main.c ****   * @brief SAI2 Initialization Function
 787:Core/Src/main.c ****   * @param None
 788:Core/Src/main.c ****   * @retval None
 789:Core/Src/main.c ****   */
 790:Core/Src/main.c **** static void MX_SAI2_Init(void)
 791:Core/Src/main.c **** {
 792:Core/Src/main.c **** 
 793:Core/Src/main.c ****   /* USER CODE BEGIN SAI2_Init 0 */
 794:Core/Src/main.c **** 
 795:Core/Src/main.c ****   /* USER CODE END SAI2_Init 0 */
 796:Core/Src/main.c **** 
 797:Core/Src/main.c ****   /* USER CODE BEGIN SAI2_Init 1 */
 798:Core/Src/main.c **** 
 799:Core/Src/main.c ****   /* USER CODE END SAI2_Init 1 */
 800:Core/Src/main.c ****   hsai_BlockA2.Instance = SAI2_Block_A;
 801:Core/Src/main.c ****   hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 802:Core/Src/main.c ****   hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 803:Core/Src/main.c ****   hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 804:Core/Src/main.c ****   hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 805:Core/Src/main.c ****   hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 806:Core/Src/main.c ****   hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 807:Core/Src/main.c ****   hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 808:Core/Src/main.c ****   hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 809:Core/Src/main.c ****   hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 810:Core/Src/main.c ****   hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 811:Core/Src/main.c ****   hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 812:Core/Src/main.c ****   hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 813:Core/Src/main.c ****   hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 814:Core/Src/main.c ****   hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 815:Core/Src/main.c ****   hsai_BlockA2.FrameInit.FrameLength = 8;
 816:Core/Src/main.c ****   hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 817:Core/Src/main.c ****   hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 818:Core/Src/main.c ****   hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 819:Core/Src/main.c ****   hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 820:Core/Src/main.c ****   hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 821:Core/Src/main.c ****   hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 822:Core/Src/main.c ****   hsai_BlockA2.SlotInit.SlotNumber = 1;
 823:Core/Src/main.c ****   hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 824:Core/Src/main.c ****   if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 825:Core/Src/main.c ****   {
 826:Core/Src/main.c ****     Error_Handler();
 827:Core/Src/main.c ****   }
 828:Core/Src/main.c ****   hsai_BlockB2.Instance = SAI2_Block_B;
 829:Core/Src/main.c ****   hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 830:Core/Src/main.c ****   hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
ARM GAS  /tmp/ccvLOER3.s 			page 16


 831:Core/Src/main.c ****   hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 832:Core/Src/main.c ****   hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 833:Core/Src/main.c ****   hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 834:Core/Src/main.c ****   hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 835:Core/Src/main.c ****   hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 836:Core/Src/main.c ****   hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 837:Core/Src/main.c ****   hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 838:Core/Src/main.c ****   hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 839:Core/Src/main.c ****   hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 840:Core/Src/main.c ****   hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 841:Core/Src/main.c ****   hsai_BlockB2.FrameInit.FrameLength = 8;
 842:Core/Src/main.c ****   hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 843:Core/Src/main.c ****   hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 844:Core/Src/main.c ****   hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 845:Core/Src/main.c ****   hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 846:Core/Src/main.c ****   hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 847:Core/Src/main.c ****   hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 848:Core/Src/main.c ****   hsai_BlockB2.SlotInit.SlotNumber = 1;
 849:Core/Src/main.c ****   hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 850:Core/Src/main.c ****   if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 851:Core/Src/main.c ****   {
 852:Core/Src/main.c ****     Error_Handler();
 853:Core/Src/main.c ****   }
 854:Core/Src/main.c ****   /* USER CODE BEGIN SAI2_Init 2 */
 855:Core/Src/main.c **** 
 856:Core/Src/main.c ****   /* USER CODE END SAI2_Init 2 */
 857:Core/Src/main.c **** 
 858:Core/Src/main.c **** }
 859:Core/Src/main.c **** 
 860:Core/Src/main.c **** /**
 861:Core/Src/main.c ****   * @brief SDMMC1 Initialization Function
 862:Core/Src/main.c ****   * @param None
 863:Core/Src/main.c ****   * @retval None
 864:Core/Src/main.c ****   */
 865:Core/Src/main.c **** static void MX_SDMMC1_SD_Init(void)
 866:Core/Src/main.c **** {
  27              		.loc 1 866 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 867:Core/Src/main.c **** 
 868:Core/Src/main.c ****   /* USER CODE BEGIN SDMMC1_Init 0 */
 869:Core/Src/main.c **** 
 870:Core/Src/main.c ****   /* USER CODE END SDMMC1_Init 0 */
 871:Core/Src/main.c **** 
 872:Core/Src/main.c ****   /* USER CODE BEGIN SDMMC1_Init 1 */
 873:Core/Src/main.c **** 
 874:Core/Src/main.c ****   /* USER CODE END SDMMC1_Init 1 */
 875:Core/Src/main.c ****   hsd1.Instance = SDMMC1;
  32              		.loc 1 875 0
  33 0000 054B     		ldr	r3, .L2
  34 0002 064A     		ldr	r2, .L2+4
  35 0004 1A60     		str	r2, [r3]
 876:Core/Src/main.c ****   hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  36              		.loc 1 876 0
  37 0006 0022     		movs	r2, #0
ARM GAS  /tmp/ccvLOER3.s 			page 17


  38 0008 5A60     		str	r2, [r3, #4]
 877:Core/Src/main.c ****   hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  39              		.loc 1 877 0
  40 000a 9A60     		str	r2, [r3, #8]
 878:Core/Src/main.c ****   hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  41              		.loc 1 878 0
  42 000c DA60     		str	r2, [r3, #12]
 879:Core/Src/main.c ****   hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  43              		.loc 1 879 0
  44 000e 1A61     		str	r2, [r3, #16]
 880:Core/Src/main.c ****   hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  45              		.loc 1 880 0
  46 0010 5A61     		str	r2, [r3, #20]
 881:Core/Src/main.c ****   hsd1.Init.ClockDiv = 0;
  47              		.loc 1 881 0
  48 0012 9A61     		str	r2, [r3, #24]
 882:Core/Src/main.c ****   /* USER CODE BEGIN SDMMC1_Init 2 */
 883:Core/Src/main.c **** 
 884:Core/Src/main.c ****   /* USER CODE END SDMMC1_Init 2 */
 885:Core/Src/main.c **** 
 886:Core/Src/main.c **** }
  49              		.loc 1 886 0
  50 0014 7047     		bx	lr
  51              	.L3:
  52 0016 00BF     		.align	2
  53              	.L2:
  54 0018 00000000 		.word	hsd1
  55 001c 002C0140 		.word	1073818624
  56              		.cfi_endproc
  57              	.LFE159:
  59              		.section	.text.MX_GPIO_Init,"ax",%progbits
  60              		.align	1
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu fpv5-sp-d16
  66              	MX_GPIO_Init:
  67              	.LFB171:
 887:Core/Src/main.c **** 
 888:Core/Src/main.c **** /**
 889:Core/Src/main.c ****   * @brief SPDIFRX Initialization Function
 890:Core/Src/main.c ****   * @param None
 891:Core/Src/main.c ****   * @retval None
 892:Core/Src/main.c ****   */
 893:Core/Src/main.c **** static void MX_SPDIFRX_Init(void)
 894:Core/Src/main.c **** {
 895:Core/Src/main.c **** 
 896:Core/Src/main.c ****   /* USER CODE BEGIN SPDIFRX_Init 0 */
 897:Core/Src/main.c **** 
 898:Core/Src/main.c ****   /* USER CODE END SPDIFRX_Init 0 */
 899:Core/Src/main.c **** 
 900:Core/Src/main.c ****   /* USER CODE BEGIN SPDIFRX_Init 1 */
 901:Core/Src/main.c **** 
 902:Core/Src/main.c ****   /* USER CODE END SPDIFRX_Init 1 */
 903:Core/Src/main.c ****   hspdif.Instance = SPDIFRX;
 904:Core/Src/main.c ****   hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 905:Core/Src/main.c ****   hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
ARM GAS  /tmp/ccvLOER3.s 			page 18


 906:Core/Src/main.c ****   hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 907:Core/Src/main.c ****   hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 908:Core/Src/main.c ****   hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 909:Core/Src/main.c ****   hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 910:Core/Src/main.c ****   hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 911:Core/Src/main.c ****   hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 912:Core/Src/main.c ****   hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 913:Core/Src/main.c ****   hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 914:Core/Src/main.c ****   if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 915:Core/Src/main.c ****   {
 916:Core/Src/main.c ****     Error_Handler();
 917:Core/Src/main.c ****   }
 918:Core/Src/main.c ****   /* USER CODE BEGIN SPDIFRX_Init 2 */
 919:Core/Src/main.c **** 
 920:Core/Src/main.c ****   /* USER CODE END SPDIFRX_Init 2 */
 921:Core/Src/main.c **** 
 922:Core/Src/main.c **** }
 923:Core/Src/main.c **** 
 924:Core/Src/main.c **** /**
 925:Core/Src/main.c ****   * @brief SPI2 Initialization Function
 926:Core/Src/main.c ****   * @param None
 927:Core/Src/main.c ****   * @retval None
 928:Core/Src/main.c ****   */
 929:Core/Src/main.c **** static void MX_SPI2_Init(void)
 930:Core/Src/main.c **** {
 931:Core/Src/main.c **** 
 932:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 0 */
 933:Core/Src/main.c **** 
 934:Core/Src/main.c ****   /* USER CODE END SPI2_Init 0 */
 935:Core/Src/main.c **** 
 936:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 1 */
 937:Core/Src/main.c **** 
 938:Core/Src/main.c ****   /* USER CODE END SPI2_Init 1 */
 939:Core/Src/main.c ****   /* SPI2 parameter configuration*/
 940:Core/Src/main.c ****   hspi2.Instance = SPI2;
 941:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 942:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 943:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 944:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 945:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 946:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 947:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 948:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 949:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 950:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 951:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 7;
 952:Core/Src/main.c ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 953:Core/Src/main.c ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 954:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 955:Core/Src/main.c ****   {
 956:Core/Src/main.c ****     Error_Handler();
 957:Core/Src/main.c ****   }
 958:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 2 */
 959:Core/Src/main.c **** 
 960:Core/Src/main.c ****   /* USER CODE END SPI2_Init 2 */
 961:Core/Src/main.c **** 
 962:Core/Src/main.c **** }
ARM GAS  /tmp/ccvLOER3.s 			page 19


 963:Core/Src/main.c **** 
 964:Core/Src/main.c **** /**
 965:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 966:Core/Src/main.c ****   * @param None
 967:Core/Src/main.c ****   * @retval None
 968:Core/Src/main.c ****   */
 969:Core/Src/main.c **** static void MX_TIM1_Init(void)
 970:Core/Src/main.c **** {
 971:Core/Src/main.c **** 
 972:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 973:Core/Src/main.c **** 
 974:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 975:Core/Src/main.c **** 
 976:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 977:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 978:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 979:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 980:Core/Src/main.c **** 
 981:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 982:Core/Src/main.c **** 
 983:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 984:Core/Src/main.c ****   htim1.Instance = TIM1;
 985:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 986:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 987:Core/Src/main.c ****   htim1.Init.Period = 0;
 988:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 989:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 990:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 991:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 992:Core/Src/main.c ****   {
 993:Core/Src/main.c ****     Error_Handler();
 994:Core/Src/main.c ****   }
 995:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 996:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 997:Core/Src/main.c ****   {
 998:Core/Src/main.c ****     Error_Handler();
 999:Core/Src/main.c ****   }
1000:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
1001:Core/Src/main.c ****   {
1002:Core/Src/main.c ****     Error_Handler();
1003:Core/Src/main.c ****   }
1004:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1005:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
1006:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1007:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
1008:Core/Src/main.c ****   {
1009:Core/Src/main.c ****     Error_Handler();
1010:Core/Src/main.c ****   }
1011:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
1012:Core/Src/main.c ****   sConfigOC.Pulse = 0;
1013:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1014:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
1015:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1016:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
1017:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
1018:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
1019:Core/Src/main.c ****   {
ARM GAS  /tmp/ccvLOER3.s 			page 20


1020:Core/Src/main.c ****     Error_Handler();
1021:Core/Src/main.c ****   }
1022:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
1023:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
1024:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
1025:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
1026:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
1027:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
1028:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
1029:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
1030:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
1031:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
1032:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
1033:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
1034:Core/Src/main.c ****   {
1035:Core/Src/main.c ****     Error_Handler();
1036:Core/Src/main.c ****   }
1037:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
1038:Core/Src/main.c **** 
1039:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
1040:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
1041:Core/Src/main.c **** 
1042:Core/Src/main.c **** }
1043:Core/Src/main.c **** 
1044:Core/Src/main.c **** /**
1045:Core/Src/main.c ****   * @brief TIM2 Initialization Function
1046:Core/Src/main.c ****   * @param None
1047:Core/Src/main.c ****   * @retval None
1048:Core/Src/main.c ****   */
1049:Core/Src/main.c **** static void MX_TIM2_Init(void)
1050:Core/Src/main.c **** {
1051:Core/Src/main.c **** 
1052:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
1053:Core/Src/main.c **** 
1054:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
1055:Core/Src/main.c **** 
1056:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
1057:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
1058:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
1059:Core/Src/main.c **** 
1060:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
1061:Core/Src/main.c **** 
1062:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
1063:Core/Src/main.c ****   htim2.Instance = TIM2;
1064:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
1065:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
1066:Core/Src/main.c ****   htim2.Init.Period = 0;
1067:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1068:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1069:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
1070:Core/Src/main.c ****   {
1071:Core/Src/main.c ****     Error_Handler();
1072:Core/Src/main.c ****   }
1073:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
1074:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
1075:Core/Src/main.c ****   {
1076:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccvLOER3.s 			page 21


1077:Core/Src/main.c ****   }
1078:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
1079:Core/Src/main.c ****   {
1080:Core/Src/main.c ****     Error_Handler();
1081:Core/Src/main.c ****   }
1082:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1083:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1084:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
1085:Core/Src/main.c ****   {
1086:Core/Src/main.c ****     Error_Handler();
1087:Core/Src/main.c ****   }
1088:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
1089:Core/Src/main.c ****   sConfigOC.Pulse = 0;
1090:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1091:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1092:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
1093:Core/Src/main.c ****   {
1094:Core/Src/main.c ****     Error_Handler();
1095:Core/Src/main.c ****   }
1096:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
1097:Core/Src/main.c **** 
1098:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
1099:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim2);
1100:Core/Src/main.c **** 
1101:Core/Src/main.c **** }
1102:Core/Src/main.c **** 
1103:Core/Src/main.c **** /**
1104:Core/Src/main.c ****   * @brief TIM3 Initialization Function
1105:Core/Src/main.c ****   * @param None
1106:Core/Src/main.c ****   * @retval None
1107:Core/Src/main.c ****   */
1108:Core/Src/main.c **** static void MX_TIM3_Init(void)
1109:Core/Src/main.c **** {
1110:Core/Src/main.c **** 
1111:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
1112:Core/Src/main.c **** 
1113:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
1114:Core/Src/main.c **** 
1115:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
1116:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
1117:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
1118:Core/Src/main.c **** 
1119:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
1120:Core/Src/main.c **** 
1121:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
1122:Core/Src/main.c ****   htim3.Instance = TIM3;
1123:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
1124:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
1125:Core/Src/main.c ****   htim3.Init.Period = 0;
1126:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1127:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1128:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
1129:Core/Src/main.c ****   {
1130:Core/Src/main.c ****     Error_Handler();
1131:Core/Src/main.c ****   }
1132:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
1133:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
ARM GAS  /tmp/ccvLOER3.s 			page 22


1134:Core/Src/main.c ****   {
1135:Core/Src/main.c ****     Error_Handler();
1136:Core/Src/main.c ****   }
1137:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
1138:Core/Src/main.c ****   {
1139:Core/Src/main.c ****     Error_Handler();
1140:Core/Src/main.c ****   }
1141:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1142:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1143:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
1144:Core/Src/main.c ****   {
1145:Core/Src/main.c ****     Error_Handler();
1146:Core/Src/main.c ****   }
1147:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
1148:Core/Src/main.c ****   sConfigOC.Pulse = 0;
1149:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1150:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1151:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
1152:Core/Src/main.c ****   {
1153:Core/Src/main.c ****     Error_Handler();
1154:Core/Src/main.c ****   }
1155:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
1156:Core/Src/main.c **** 
1157:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
1158:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
1159:Core/Src/main.c **** 
1160:Core/Src/main.c **** }
1161:Core/Src/main.c **** 
1162:Core/Src/main.c **** /**
1163:Core/Src/main.c ****   * @brief TIM5 Initialization Function
1164:Core/Src/main.c ****   * @param None
1165:Core/Src/main.c ****   * @retval None
1166:Core/Src/main.c ****   */
1167:Core/Src/main.c **** static void MX_TIM5_Init(void)
1168:Core/Src/main.c **** {
1169:Core/Src/main.c **** 
1170:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 0 */
1171:Core/Src/main.c **** 
1172:Core/Src/main.c ****   /* USER CODE END TIM5_Init 0 */
1173:Core/Src/main.c **** 
1174:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
1175:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
1176:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
1177:Core/Src/main.c **** 
1178:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 1 */
1179:Core/Src/main.c **** 
1180:Core/Src/main.c ****   /* USER CODE END TIM5_Init 1 */
1181:Core/Src/main.c ****   htim5.Instance = TIM5;
1182:Core/Src/main.c ****   htim5.Init.Prescaler = 0;
1183:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
1184:Core/Src/main.c ****   htim5.Init.Period = 0;
1185:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1186:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1187:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
1188:Core/Src/main.c ****   {
1189:Core/Src/main.c ****     Error_Handler();
1190:Core/Src/main.c ****   }
ARM GAS  /tmp/ccvLOER3.s 			page 23


1191:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
1192:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
1193:Core/Src/main.c ****   {
1194:Core/Src/main.c ****     Error_Handler();
1195:Core/Src/main.c ****   }
1196:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
1197:Core/Src/main.c ****   {
1198:Core/Src/main.c ****     Error_Handler();
1199:Core/Src/main.c ****   }
1200:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1201:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1202:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
1203:Core/Src/main.c ****   {
1204:Core/Src/main.c ****     Error_Handler();
1205:Core/Src/main.c ****   }
1206:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
1207:Core/Src/main.c ****   sConfigOC.Pulse = 0;
1208:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1209:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1210:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
1211:Core/Src/main.c ****   {
1212:Core/Src/main.c ****     Error_Handler();
1213:Core/Src/main.c ****   }
1214:Core/Src/main.c ****   /* USER CODE BEGIN TIM5_Init 2 */
1215:Core/Src/main.c **** 
1216:Core/Src/main.c ****   /* USER CODE END TIM5_Init 2 */
1217:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim5);
1218:Core/Src/main.c **** 
1219:Core/Src/main.c **** }
1220:Core/Src/main.c **** 
1221:Core/Src/main.c **** /**
1222:Core/Src/main.c ****   * @brief TIM8 Initialization Function
1223:Core/Src/main.c ****   * @param None
1224:Core/Src/main.c ****   * @retval None
1225:Core/Src/main.c ****   */
1226:Core/Src/main.c **** static void MX_TIM8_Init(void)
1227:Core/Src/main.c **** {
1228:Core/Src/main.c **** 
1229:Core/Src/main.c ****   /* USER CODE BEGIN TIM8_Init 0 */
1230:Core/Src/main.c **** 
1231:Core/Src/main.c ****   /* USER CODE END TIM8_Init 0 */
1232:Core/Src/main.c **** 
1233:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
1234:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
1235:Core/Src/main.c **** 
1236:Core/Src/main.c ****   /* USER CODE BEGIN TIM8_Init 1 */
1237:Core/Src/main.c **** 
1238:Core/Src/main.c ****   /* USER CODE END TIM8_Init 1 */
1239:Core/Src/main.c ****   htim8.Instance = TIM8;
1240:Core/Src/main.c ****   htim8.Init.Prescaler = 0;
1241:Core/Src/main.c ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
1242:Core/Src/main.c ****   htim8.Init.Period = 0;
1243:Core/Src/main.c ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1244:Core/Src/main.c ****   htim8.Init.RepetitionCounter = 0;
1245:Core/Src/main.c ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1246:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
1247:Core/Src/main.c ****   {
ARM GAS  /tmp/ccvLOER3.s 			page 24


1248:Core/Src/main.c ****     Error_Handler();
1249:Core/Src/main.c ****   }
1250:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
1251:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
1252:Core/Src/main.c ****   {
1253:Core/Src/main.c ****     Error_Handler();
1254:Core/Src/main.c ****   }
1255:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
1256:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
1257:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
1258:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
1259:Core/Src/main.c ****   {
1260:Core/Src/main.c ****     Error_Handler();
1261:Core/Src/main.c ****   }
1262:Core/Src/main.c ****   /* USER CODE BEGIN TIM8_Init 2 */
1263:Core/Src/main.c **** 
1264:Core/Src/main.c ****   /* USER CODE END TIM8_Init 2 */
1265:Core/Src/main.c **** 
1266:Core/Src/main.c **** }
1267:Core/Src/main.c **** 
1268:Core/Src/main.c **** /**
1269:Core/Src/main.c ****   * @brief TIM12 Initialization Function
1270:Core/Src/main.c ****   * @param None
1271:Core/Src/main.c ****   * @retval None
1272:Core/Src/main.c ****   */
1273:Core/Src/main.c **** static void MX_TIM12_Init(void)
1274:Core/Src/main.c **** {
1275:Core/Src/main.c **** 
1276:Core/Src/main.c ****   /* USER CODE BEGIN TIM12_Init 0 */
1277:Core/Src/main.c **** 
1278:Core/Src/main.c ****   /* USER CODE END TIM12_Init 0 */
1279:Core/Src/main.c **** 
1280:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
1281:Core/Src/main.c **** 
1282:Core/Src/main.c ****   /* USER CODE BEGIN TIM12_Init 1 */
1283:Core/Src/main.c **** 
1284:Core/Src/main.c ****   /* USER CODE END TIM12_Init 1 */
1285:Core/Src/main.c ****   htim12.Instance = TIM12;
1286:Core/Src/main.c ****   htim12.Init.Prescaler = 0;
1287:Core/Src/main.c ****   htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
1288:Core/Src/main.c ****   htim12.Init.Period = 0;
1289:Core/Src/main.c ****   htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
1290:Core/Src/main.c ****   htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1291:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
1292:Core/Src/main.c ****   {
1293:Core/Src/main.c ****     Error_Handler();
1294:Core/Src/main.c ****   }
1295:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
1296:Core/Src/main.c ****   sConfigOC.Pulse = 0;
1297:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
1298:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
1299:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
1300:Core/Src/main.c ****   {
1301:Core/Src/main.c ****     Error_Handler();
1302:Core/Src/main.c ****   }
1303:Core/Src/main.c ****   /* USER CODE BEGIN TIM12_Init 2 */
1304:Core/Src/main.c **** 
ARM GAS  /tmp/ccvLOER3.s 			page 25


1305:Core/Src/main.c ****   /* USER CODE END TIM12_Init 2 */
1306:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim12);
1307:Core/Src/main.c **** 
1308:Core/Src/main.c **** }
1309:Core/Src/main.c **** 
1310:Core/Src/main.c **** /**
1311:Core/Src/main.c ****   * @brief USART1 Initialization Function
1312:Core/Src/main.c ****   * @param None
1313:Core/Src/main.c ****   * @retval None
1314:Core/Src/main.c ****   */
1315:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
1316:Core/Src/main.c **** {
1317:Core/Src/main.c **** 
1318:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
1319:Core/Src/main.c **** 
1320:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
1321:Core/Src/main.c **** 
1322:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
1323:Core/Src/main.c **** 
1324:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
1325:Core/Src/main.c ****   huart1.Instance = USART1;
1326:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
1327:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
1328:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
1329:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
1330:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
1331:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1332:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
1333:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1334:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
1335:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
1336:Core/Src/main.c ****   {
1337:Core/Src/main.c ****     Error_Handler();
1338:Core/Src/main.c ****   }
1339:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
1340:Core/Src/main.c **** 
1341:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
1342:Core/Src/main.c **** 
1343:Core/Src/main.c **** }
1344:Core/Src/main.c **** 
1345:Core/Src/main.c **** /**
1346:Core/Src/main.c ****   * @brief USART6 Initialization Function
1347:Core/Src/main.c ****   * @param None
1348:Core/Src/main.c ****   * @retval None
1349:Core/Src/main.c ****   */
1350:Core/Src/main.c **** static void MX_USART6_UART_Init(void)
1351:Core/Src/main.c **** {
1352:Core/Src/main.c **** 
1353:Core/Src/main.c ****   /* USER CODE BEGIN USART6_Init 0 */
1354:Core/Src/main.c **** 
1355:Core/Src/main.c ****   /* USER CODE END USART6_Init 0 */
1356:Core/Src/main.c **** 
1357:Core/Src/main.c ****   /* USER CODE BEGIN USART6_Init 1 */
1358:Core/Src/main.c **** 
1359:Core/Src/main.c ****   /* USER CODE END USART6_Init 1 */
1360:Core/Src/main.c ****   huart6.Instance = USART6;
1361:Core/Src/main.c ****   huart6.Init.BaudRate = 115200;
ARM GAS  /tmp/ccvLOER3.s 			page 26


1362:Core/Src/main.c ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
1363:Core/Src/main.c ****   huart6.Init.StopBits = UART_STOPBITS_1;
1364:Core/Src/main.c ****   huart6.Init.Parity = UART_PARITY_NONE;
1365:Core/Src/main.c ****   huart6.Init.Mode = UART_MODE_TX_RX;
1366:Core/Src/main.c ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
1367:Core/Src/main.c ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
1368:Core/Src/main.c ****   huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1369:Core/Src/main.c ****   huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
1370:Core/Src/main.c ****   if (HAL_UART_Init(&huart6) != HAL_OK)
1371:Core/Src/main.c ****   {
1372:Core/Src/main.c ****     Error_Handler();
1373:Core/Src/main.c ****   }
1374:Core/Src/main.c ****   /* USER CODE BEGIN USART6_Init 2 */
1375:Core/Src/main.c **** 
1376:Core/Src/main.c ****   /* USER CODE END USART6_Init 2 */
1377:Core/Src/main.c **** 
1378:Core/Src/main.c **** }
1379:Core/Src/main.c **** 
1380:Core/Src/main.c **** /* FMC initialization function */
1381:Core/Src/main.c **** static void MX_FMC_Init(void)
1382:Core/Src/main.c **** {
1383:Core/Src/main.c **** 
1384:Core/Src/main.c ****   /* USER CODE BEGIN FMC_Init 0 */
1385:Core/Src/main.c **** 
1386:Core/Src/main.c ****   /* USER CODE END FMC_Init 0 */
1387:Core/Src/main.c **** 
1388:Core/Src/main.c ****   FMC_SDRAM_TimingTypeDef SdramTiming = {0};
1389:Core/Src/main.c **** 
1390:Core/Src/main.c ****   /* USER CODE BEGIN FMC_Init 1 */
1391:Core/Src/main.c **** 
1392:Core/Src/main.c ****   /* USER CODE END FMC_Init 1 */
1393:Core/Src/main.c **** 
1394:Core/Src/main.c ****   /** Perform the SDRAM1 memory initialization sequence
1395:Core/Src/main.c ****   */
1396:Core/Src/main.c ****   hsdram1.Instance = FMC_SDRAM_DEVICE;
1397:Core/Src/main.c ****   /* hsdram1.Init */
1398:Core/Src/main.c ****   hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
1399:Core/Src/main.c ****   hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
1400:Core/Src/main.c ****   hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
1401:Core/Src/main.c ****   hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
1402:Core/Src/main.c ****   hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
1403:Core/Src/main.c ****   hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
1404:Core/Src/main.c ****   hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
1405:Core/Src/main.c ****   hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
1406:Core/Src/main.c ****   hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
1407:Core/Src/main.c ****   hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
1408:Core/Src/main.c ****   /* SdramTiming */
1409:Core/Src/main.c ****   SdramTiming.LoadToActiveDelay = 2;
1410:Core/Src/main.c ****   SdramTiming.ExitSelfRefreshDelay = 7;
1411:Core/Src/main.c ****   SdramTiming.SelfRefreshTime = 4;
1412:Core/Src/main.c ****   SdramTiming.RowCycleDelay = 7;
1413:Core/Src/main.c ****   SdramTiming.WriteRecoveryTime = 3;
1414:Core/Src/main.c ****   SdramTiming.RPDelay = 2;
1415:Core/Src/main.c ****   SdramTiming.RCDDelay = 2;
1416:Core/Src/main.c **** 
1417:Core/Src/main.c ****   if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
1418:Core/Src/main.c ****   {
ARM GAS  /tmp/ccvLOER3.s 			page 27


1419:Core/Src/main.c ****     Error_Handler( );
1420:Core/Src/main.c ****   }
1421:Core/Src/main.c **** 
1422:Core/Src/main.c ****   /* USER CODE BEGIN FMC_Init 2 */
1423:Core/Src/main.c **** 
1424:Core/Src/main.c ****   /* USER CODE END FMC_Init 2 */
1425:Core/Src/main.c **** }
1426:Core/Src/main.c **** 
1427:Core/Src/main.c **** /**
1428:Core/Src/main.c ****   * @brief GPIO Initialization Function
1429:Core/Src/main.c ****   * @param None
1430:Core/Src/main.c ****   * @retval None
1431:Core/Src/main.c ****   */
1432:Core/Src/main.c **** static void MX_GPIO_Init(void)
1433:Core/Src/main.c **** {
  68              		.loc 1 1433 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 64
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  73              	.LCFI0:
  74              		.cfi_def_cfa_offset 36
  75              		.cfi_offset 4, -36
  76              		.cfi_offset 5, -32
  77              		.cfi_offset 6, -28
  78              		.cfi_offset 7, -24
  79              		.cfi_offset 8, -20
  80              		.cfi_offset 9, -16
  81              		.cfi_offset 10, -12
  82              		.cfi_offset 11, -8
  83              		.cfi_offset 14, -4
  84 0004 91B0     		sub	sp, sp, #68
  85              	.LCFI1:
  86              		.cfi_def_cfa_offset 104
1434:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  87              		.loc 1 1434 0
  88 0006 0024     		movs	r4, #0
  89 0008 0B94     		str	r4, [sp, #44]
  90 000a 0C94     		str	r4, [sp, #48]
  91 000c 0D94     		str	r4, [sp, #52]
  92 000e 0E94     		str	r4, [sp, #56]
  93 0010 0F94     		str	r4, [sp, #60]
  94              	.LBB2:
1435:Core/Src/main.c **** 
1436:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
1437:Core/Src/main.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
  95              		.loc 1 1437 0
  96 0012 994B     		ldr	r3, .L6
  97 0014 1A6B     		ldr	r2, [r3, #48]
  98 0016 42F01002 		orr	r2, r2, #16
  99 001a 1A63     		str	r2, [r3, #48]
 100 001c 1A6B     		ldr	r2, [r3, #48]
 101 001e 02F01002 		and	r2, r2, #16
 102 0022 0092     		str	r2, [sp]
 103 0024 009A     		ldr	r2, [sp]
 104              	.LBE2:
 105              	.LBB3:
ARM GAS  /tmp/ccvLOER3.s 			page 28


1438:Core/Src/main.c ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 106              		.loc 1 1438 0
 107 0026 1A6B     		ldr	r2, [r3, #48]
 108 0028 42F04002 		orr	r2, r2, #64
 109 002c 1A63     		str	r2, [r3, #48]
 110 002e 1A6B     		ldr	r2, [r3, #48]
 111 0030 02F04002 		and	r2, r2, #64
 112 0034 0192     		str	r2, [sp, #4]
 113 0036 019A     		ldr	r2, [sp, #4]
 114              	.LBE3:
 115              	.LBB4:
1439:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 116              		.loc 1 1439 0
 117 0038 1A6B     		ldr	r2, [r3, #48]
 118 003a 42F00202 		orr	r2, r2, #2
 119 003e 1A63     		str	r2, [r3, #48]
 120 0040 1A6B     		ldr	r2, [r3, #48]
 121 0042 02F00202 		and	r2, r2, #2
 122 0046 0292     		str	r2, [sp, #8]
 123 0048 029A     		ldr	r2, [sp, #8]
 124              	.LBE4:
 125              	.LBB5:
1440:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 126              		.loc 1 1440 0
 127 004a 1A6B     		ldr	r2, [r3, #48]
 128 004c 42F00802 		orr	r2, r2, #8
 129 0050 1A63     		str	r2, [r3, #48]
 130 0052 1A6B     		ldr	r2, [r3, #48]
 131 0054 02F00802 		and	r2, r2, #8
 132 0058 0392     		str	r2, [sp, #12]
 133 005a 039A     		ldr	r2, [sp, #12]
 134              	.LBE5:
 135              	.LBB6:
1441:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 136              		.loc 1 1441 0
 137 005c 1A6B     		ldr	r2, [r3, #48]
 138 005e 42F00402 		orr	r2, r2, #4
 139 0062 1A63     		str	r2, [r3, #48]
 140 0064 1A6B     		ldr	r2, [r3, #48]
 141 0066 02F00402 		and	r2, r2, #4
 142 006a 0492     		str	r2, [sp, #16]
 143 006c 049A     		ldr	r2, [sp, #16]
 144              	.LBE6:
 145              	.LBB7:
1442:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 146              		.loc 1 1442 0
 147 006e 1A6B     		ldr	r2, [r3, #48]
 148 0070 42F00102 		orr	r2, r2, #1
 149 0074 1A63     		str	r2, [r3, #48]
 150 0076 1A6B     		ldr	r2, [r3, #48]
 151 0078 02F00102 		and	r2, r2, #1
 152 007c 0592     		str	r2, [sp, #20]
 153 007e 059A     		ldr	r2, [sp, #20]
 154              	.LBE7:
 155              	.LBB8:
1443:Core/Src/main.c ****   __HAL_RCC_GPIOJ_CLK_ENABLE();
 156              		.loc 1 1443 0
ARM GAS  /tmp/ccvLOER3.s 			page 29


 157 0080 1A6B     		ldr	r2, [r3, #48]
 158 0082 42F40072 		orr	r2, r2, #512
 159 0086 1A63     		str	r2, [r3, #48]
 160 0088 1A6B     		ldr	r2, [r3, #48]
 161 008a 02F40072 		and	r2, r2, #512
 162 008e 0692     		str	r2, [sp, #24]
 163 0090 069A     		ldr	r2, [sp, #24]
 164              	.LBE8:
 165              	.LBB9:
1444:Core/Src/main.c ****   __HAL_RCC_GPIOI_CLK_ENABLE();
 166              		.loc 1 1444 0
 167 0092 1A6B     		ldr	r2, [r3, #48]
 168 0094 42F48072 		orr	r2, r2, #256
 169 0098 1A63     		str	r2, [r3, #48]
 170 009a 1A6B     		ldr	r2, [r3, #48]
 171 009c 02F48072 		and	r2, r2, #256
 172 00a0 0792     		str	r2, [sp, #28]
 173 00a2 079A     		ldr	r2, [sp, #28]
 174              	.LBE9:
 175              	.LBB10:
1445:Core/Src/main.c ****   __HAL_RCC_GPIOK_CLK_ENABLE();
 176              		.loc 1 1445 0
 177 00a4 1A6B     		ldr	r2, [r3, #48]
 178 00a6 42F48062 		orr	r2, r2, #1024
 179 00aa 1A63     		str	r2, [r3, #48]
 180 00ac 1A6B     		ldr	r2, [r3, #48]
 181 00ae 02F48062 		and	r2, r2, #1024
 182 00b2 0892     		str	r2, [sp, #32]
 183 00b4 089A     		ldr	r2, [sp, #32]
 184              	.LBE10:
 185              	.LBB11:
1446:Core/Src/main.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 186              		.loc 1 1446 0
 187 00b6 1A6B     		ldr	r2, [r3, #48]
 188 00b8 42F02002 		orr	r2, r2, #32
 189 00bc 1A63     		str	r2, [r3, #48]
 190 00be 1A6B     		ldr	r2, [r3, #48]
 191 00c0 02F02002 		and	r2, r2, #32
 192 00c4 0992     		str	r2, [sp, #36]
 193 00c6 099A     		ldr	r2, [sp, #36]
 194              	.LBE11:
 195              	.LBB12:
1447:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 196              		.loc 1 1447 0
 197 00c8 1A6B     		ldr	r2, [r3, #48]
 198 00ca 42F08002 		orr	r2, r2, #128
 199 00ce 1A63     		str	r2, [r3, #48]
 200 00d0 1B6B     		ldr	r3, [r3, #48]
 201 00d2 03F08003 		and	r3, r3, #128
 202 00d6 0A93     		str	r3, [sp, #40]
 203 00d8 0A9B     		ldr	r3, [sp, #40]
 204              	.LBE12:
1448:Core/Src/main.c **** 
1449:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1450:Core/Src/main.c ****   HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 205              		.loc 1 1450 0
 206 00da 0122     		movs	r2, #1
ARM GAS  /tmp/ccvLOER3.s 			page 30


 207 00dc 2021     		movs	r1, #32
 208 00de 6748     		ldr	r0, .L6+4
 209 00e0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 210              	.LVL0:
1451:Core/Src/main.c **** 
1452:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1453:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 211              		.loc 1 1453 0
 212 00e4 2246     		mov	r2, r4
 213 00e6 0C21     		movs	r1, #12
 214 00e8 6548     		ldr	r0, .L6+8
 215 00ea FFF7FEFF 		bl	HAL_GPIO_WritePin
 216              	.LVL1:
1454:Core/Src/main.c **** 
1455:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1456:Core/Src/main.c ****   HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 217              		.loc 1 1456 0
 218 00ee 0122     		movs	r2, #1
 219 00f0 0821     		movs	r1, #8
 220 00f2 6448     		ldr	r0, .L6+12
 221 00f4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 222              	.LVL2:
1457:Core/Src/main.c **** 
1458:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1459:Core/Src/main.c ****   HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 223              		.loc 1 1459 0
 224 00f8 0122     		movs	r2, #1
 225 00fa 4FF48051 		mov	r1, #4096
 226 00fe 6048     		ldr	r0, .L6+8
 227 0100 FFF7FEFF 		bl	HAL_GPIO_WritePin
 228              	.LVL3:
1460:Core/Src/main.c **** 
1461:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1462:Core/Src/main.c ****   HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 229              		.loc 1 1462 0
 230 0104 2246     		mov	r2, r4
 231 0106 4FF40051 		mov	r1, #8192
 232 010a 5F48     		ldr	r0, .L6+16
 233 010c FFF7FEFF 		bl	HAL_GPIO_WritePin
 234              	.LVL4:
1463:Core/Src/main.c **** 
1464:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
1465:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 235              		.loc 1 1465 0
 236 0110 2246     		mov	r2, r4
 237 0112 C821     		movs	r1, #200
 238 0114 5D48     		ldr	r0, .L6+20
 239 0116 FFF7FEFF 		bl	HAL_GPIO_WritePin
 240              	.LVL5:
1466:Core/Src/main.c **** 
1467:Core/Src/main.c ****   /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
1468:Core/Src/main.c ****   GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 241              		.loc 1 1468 0
 242 011a 4FF0080A 		mov	r10, #8
 243 011e CDF82CA0 		str	r10, [sp, #44]
1469:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 244              		.loc 1 1469 0
ARM GAS  /tmp/ccvLOER3.s 			page 31


 245 0122 0C94     		str	r4, [sp, #48]
1470:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 246              		.loc 1 1470 0
 247 0124 0D94     		str	r4, [sp, #52]
1471:Core/Src/main.c ****   HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 248              		.loc 1 1471 0
 249 0126 0BA9     		add	r1, sp, #44
 250 0128 5948     		ldr	r0, .L6+24
 251 012a FFF7FEFF 		bl	HAL_GPIO_Init
 252              	.LVL6:
1472:Core/Src/main.c **** 
1473:Core/Src/main.c ****   /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
1474:Core/Src/main.c ****                            ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
1475:Core/Src/main.c ****   GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 253              		.loc 1 1475 0
 254 012e 43F62343 		movw	r3, #15395
 255 0132 0B93     		str	r3, [sp, #44]
1476:Core/Src/main.c ****                           |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
1477:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 256              		.loc 1 1477 0
 257 0134 4FF00208 		mov	r8, #2
 258 0138 CDF83080 		str	r8, [sp, #48]
1478:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 259              		.loc 1 1478 0
 260 013c 0D94     		str	r4, [sp, #52]
1479:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 261              		.loc 1 1479 0
 262 013e 0327     		movs	r7, #3
 263 0140 0E97     		str	r7, [sp, #56]
1480:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 264              		.loc 1 1480 0
 265 0142 0A26     		movs	r6, #10
 266 0144 0F96     		str	r6, [sp, #60]
1481:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 267              		.loc 1 1481 0
 268 0146 0BA9     		add	r1, sp, #44
 269 0148 5248     		ldr	r0, .L6+28
 270 014a FFF7FEFF 		bl	HAL_GPIO_Init
 271              	.LVL7:
1482:Core/Src/main.c **** 
1483:Core/Src/main.c ****   /*Configure GPIO pin : OTG_FS_VBUS_Pin */
1484:Core/Src/main.c ****   GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 272              		.loc 1 1484 0
 273 014e 4FF48053 		mov	r3, #4096
 274 0152 0B93     		str	r3, [sp, #44]
1485:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 275              		.loc 1 1485 0
 276 0154 0C94     		str	r4, [sp, #48]
1486:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 277              		.loc 1 1486 0
 278 0156 0D94     		str	r4, [sp, #52]
1487:Core/Src/main.c ****   HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 279              		.loc 1 1487 0
 280 0158 0BA9     		add	r1, sp, #44
 281 015a 4F48     		ldr	r0, .L6+32
 282 015c FFF7FEFF 		bl	HAL_GPIO_Init
 283              	.LVL8:
ARM GAS  /tmp/ccvLOER3.s 			page 32


1488:Core/Src/main.c **** 
1489:Core/Src/main.c ****   /*Configure GPIO pin : Audio_INT_Pin */
1490:Core/Src/main.c ****   GPIO_InitStruct.Pin = Audio_INT_Pin;
 284              		.loc 1 1490 0
 285 0160 4023     		movs	r3, #64
 286 0162 0B93     		str	r3, [sp, #44]
1491:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 287              		.loc 1 1491 0
 288 0164 DFF83CB1 		ldr	fp, .L6+44
 289 0168 CDF830B0 		str	fp, [sp, #48]
1492:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 290              		.loc 1 1492 0
 291 016c 0D94     		str	r4, [sp, #52]
1493:Core/Src/main.c ****   HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 292              		.loc 1 1493 0
 293 016e 0BA9     		add	r1, sp, #44
 294 0170 4248     		ldr	r0, .L6+4
 295 0172 FFF7FEFF 		bl	HAL_GPIO_Init
 296              	.LVL9:
1494:Core/Src/main.c **** 
1495:Core/Src/main.c ****   /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
1496:Core/Src/main.c ****   GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 297              		.loc 1 1496 0
 298 0176 2023     		movs	r3, #32
 299 0178 0B93     		str	r3, [sp, #44]
1497:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 300              		.loc 1 1497 0
 301 017a 0125     		movs	r5, #1
 302 017c 0C95     		str	r5, [sp, #48]
1498:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 303              		.loc 1 1498 0
 304 017e 0D94     		str	r4, [sp, #52]
1499:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 305              		.loc 1 1499 0
 306 0180 0E94     		str	r4, [sp, #56]
1500:Core/Src/main.c ****   HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 307              		.loc 1 1500 0
 308 0182 0BA9     		add	r1, sp, #44
 309 0184 3D48     		ldr	r0, .L6+4
 310 0186 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL10:
1501:Core/Src/main.c **** 
1502:Core/Src/main.c ****   /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
1503:Core/Src/main.c ****   GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 312              		.loc 1 1503 0
 313 018a 41F20C03 		movw	r3, #4108
 314 018e 0B93     		str	r3, [sp, #44]
1504:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 315              		.loc 1 1504 0
 316 0190 0C95     		str	r5, [sp, #48]
1505:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 317              		.loc 1 1505 0
 318 0192 0D94     		str	r4, [sp, #52]
1506:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 319              		.loc 1 1506 0
 320 0194 0E94     		str	r4, [sp, #56]
1507:Core/Src/main.c ****   HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
ARM GAS  /tmp/ccvLOER3.s 			page 33


 321              		.loc 1 1507 0
 322 0196 0BA9     		add	r1, sp, #44
 323 0198 3948     		ldr	r0, .L6+8
 324 019a FFF7FEFF 		bl	HAL_GPIO_Init
 325              	.LVL11:
1508:Core/Src/main.c **** 
1509:Core/Src/main.c ****   /*Configure GPIO pin : uSD_Detect_Pin */
1510:Core/Src/main.c ****   GPIO_InitStruct.Pin = uSD_Detect_Pin;
 326              		.loc 1 1510 0
 327 019e 4FF40059 		mov	r9, #8192
 328 01a2 CDF82C90 		str	r9, [sp, #44]
1511:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 329              		.loc 1 1511 0
 330 01a6 0C94     		str	r4, [sp, #48]
1512:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 331              		.loc 1 1512 0
 332 01a8 0D94     		str	r4, [sp, #52]
1513:Core/Src/main.c ****   HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 333              		.loc 1 1513 0
 334 01aa 0BA9     		add	r1, sp, #44
 335 01ac 3B48     		ldr	r0, .L6+36
 336 01ae FFF7FEFF 		bl	HAL_GPIO_Init
 337              	.LVL12:
1514:Core/Src/main.c **** 
1515:Core/Src/main.c ****   /*Configure GPIO pin : LCD_BL_CTRL_Pin */
1516:Core/Src/main.c ****   GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 338              		.loc 1 1516 0
 339 01b2 CDF82CA0 		str	r10, [sp, #44]
1517:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 340              		.loc 1 1517 0
 341 01b6 0C95     		str	r5, [sp, #48]
1518:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 342              		.loc 1 1518 0
 343 01b8 0D94     		str	r4, [sp, #52]
1519:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 344              		.loc 1 1519 0
 345 01ba 0E94     		str	r4, [sp, #56]
1520:Core/Src/main.c ****   HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 346              		.loc 1 1520 0
 347 01bc 0BA9     		add	r1, sp, #44
 348 01be 3148     		ldr	r0, .L6+12
 349 01c0 FFF7FEFF 		bl	HAL_GPIO_Init
 350              	.LVL13:
1521:Core/Src/main.c **** 
1522:Core/Src/main.c ****   /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
1523:Core/Src/main.c ****   GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 351              		.loc 1 1523 0
 352 01c4 4FF0100A 		mov	r10, #16
 353 01c8 CDF82CA0 		str	r10, [sp, #44]
1524:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 354              		.loc 1 1524 0
 355 01cc 0C94     		str	r4, [sp, #48]
1525:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 356              		.loc 1 1525 0
 357 01ce 0D94     		str	r4, [sp, #52]
1526:Core/Src/main.c ****   HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 358              		.loc 1 1526 0
ARM GAS  /tmp/ccvLOER3.s 			page 34


 359 01d0 0BA9     		add	r1, sp, #44
 360 01d2 2A48     		ldr	r0, .L6+4
 361 01d4 FFF7FEFF 		bl	HAL_GPIO_Init
 362              	.LVL14:
1527:Core/Src/main.c **** 
1528:Core/Src/main.c ****   /*Configure GPIO pins : TP3_Pin NC2_Pin */
1529:Core/Src/main.c ****   GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 363              		.loc 1 1529 0
 364 01d8 48F20403 		movw	r3, #32772
 365 01dc 0B93     		str	r3, [sp, #44]
1530:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 366              		.loc 1 1530 0
 367 01de 0C94     		str	r4, [sp, #48]
1531:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 368              		.loc 1 1531 0
 369 01e0 0D94     		str	r4, [sp, #52]
1532:Core/Src/main.c ****   HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 370              		.loc 1 1532 0
 371 01e2 0BA9     		add	r1, sp, #44
 372 01e4 2848     		ldr	r0, .L6+16
 373 01e6 FFF7FEFF 		bl	HAL_GPIO_Init
 374              	.LVL15:
1533:Core/Src/main.c **** 
1534:Core/Src/main.c ****   /*Configure GPIO pin : DCMI_PWR_EN_Pin */
1535:Core/Src/main.c ****   GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 375              		.loc 1 1535 0
 376 01ea CDF82C90 		str	r9, [sp, #44]
1536:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 377              		.loc 1 1536 0
 378 01ee 0C95     		str	r5, [sp, #48]
1537:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 379              		.loc 1 1537 0
 380 01f0 0D94     		str	r4, [sp, #52]
1538:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 381              		.loc 1 1538 0
 382 01f2 0E94     		str	r4, [sp, #56]
1539:Core/Src/main.c ****   HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 383              		.loc 1 1539 0
 384 01f4 0BA9     		add	r1, sp, #44
 385 01f6 2448     		ldr	r0, .L6+16
 386 01f8 FFF7FEFF 		bl	HAL_GPIO_Init
 387              	.LVL16:
1540:Core/Src/main.c **** 
1541:Core/Src/main.c ****   /*Configure GPIO pin : LCD_INT_Pin */
1542:Core/Src/main.c ****   GPIO_InitStruct.Pin = LCD_INT_Pin;
 388              		.loc 1 1542 0
 389 01fc CDF82C90 		str	r9, [sp, #44]
1543:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 390              		.loc 1 1543 0
 391 0200 CDF830B0 		str	fp, [sp, #48]
1544:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 392              		.loc 1 1544 0
 393 0204 0D94     		str	r4, [sp, #52]
1545:Core/Src/main.c ****   HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 394              		.loc 1 1545 0
 395 0206 0BA9     		add	r1, sp, #44
 396 0208 1D48     		ldr	r0, .L6+8
ARM GAS  /tmp/ccvLOER3.s 			page 35


 397 020a FFF7FEFF 		bl	HAL_GPIO_Init
 398              	.LVL17:
1546:Core/Src/main.c **** 
1547:Core/Src/main.c ****   /*Configure GPIO pin : ULPI_NXT_Pin */
1548:Core/Src/main.c ****   GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 399              		.loc 1 1548 0
 400 020e CDF82CA0 		str	r10, [sp, #44]
1549:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 401              		.loc 1 1549 0
 402 0212 CDF83080 		str	r8, [sp, #48]
1550:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 403              		.loc 1 1550 0
 404 0216 0D94     		str	r4, [sp, #52]
1551:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 405              		.loc 1 1551 0
 406 0218 0E97     		str	r7, [sp, #56]
1552:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 407              		.loc 1 1552 0
 408 021a 0F96     		str	r6, [sp, #60]
1553:Core/Src/main.c ****   HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 409              		.loc 1 1553 0
 410 021c 0BA9     		add	r1, sp, #44
 411 021e 1A48     		ldr	r0, .L6+16
 412 0220 FFF7FEFF 		bl	HAL_GPIO_Init
 413              	.LVL18:
1554:Core/Src/main.c **** 
1555:Core/Src/main.c ****   /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
1556:Core/Src/main.c ****   GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 414              		.loc 1 1556 0
 415 0224 C823     		movs	r3, #200
 416 0226 0B93     		str	r3, [sp, #44]
1557:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 417              		.loc 1 1557 0
 418 0228 0C95     		str	r5, [sp, #48]
1558:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 419              		.loc 1 1558 0
 420 022a 0D94     		str	r4, [sp, #52]
1559:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 421              		.loc 1 1559 0
 422 022c 0E94     		str	r4, [sp, #56]
1560:Core/Src/main.c ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 423              		.loc 1 1560 0
 424 022e 0BA9     		add	r1, sp, #44
 425 0230 1648     		ldr	r0, .L6+20
 426 0232 FFF7FEFF 		bl	HAL_GPIO_Init
 427              	.LVL19:
1561:Core/Src/main.c **** 
1562:Core/Src/main.c ****   /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
1563:Core/Src/main.c ****   GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 428              		.loc 1 1563 0
 429 0236 0523     		movs	r3, #5
 430 0238 0B93     		str	r3, [sp, #44]
1564:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 431              		.loc 1 1564 0
 432 023a CDF83080 		str	r8, [sp, #48]
1565:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 433              		.loc 1 1565 0
ARM GAS  /tmp/ccvLOER3.s 			page 36


 434 023e 0D94     		str	r4, [sp, #52]
1566:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 435              		.loc 1 1566 0
 436 0240 0E97     		str	r7, [sp, #56]
1567:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 437              		.loc 1 1567 0
 438 0242 0F96     		str	r6, [sp, #60]
1568:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 439              		.loc 1 1568 0
 440 0244 0BA9     		add	r1, sp, #44
 441 0246 1548     		ldr	r0, .L6+36
 442 0248 FFF7FEFF 		bl	HAL_GPIO_Init
 443              	.LVL20:
1569:Core/Src/main.c **** 
1570:Core/Src/main.c ****   /*Configure GPIO pin : RMII_RXER_Pin */
1571:Core/Src/main.c ****   GPIO_InitStruct.Pin = RMII_RXER_Pin;
 444              		.loc 1 1571 0
 445 024c 0423     		movs	r3, #4
 446 024e 0B93     		str	r3, [sp, #44]
1572:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 447              		.loc 1 1572 0
 448 0250 0C94     		str	r4, [sp, #48]
1573:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 449              		.loc 1 1573 0
 450 0252 0D94     		str	r4, [sp, #52]
1574:Core/Src/main.c ****   HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 451              		.loc 1 1574 0
 452 0254 0BA9     		add	r1, sp, #44
 453 0256 0D48     		ldr	r0, .L6+20
 454 0258 FFF7FEFF 		bl	HAL_GPIO_Init
 455              	.LVL21:
1575:Core/Src/main.c **** 
1576:Core/Src/main.c ****   /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
1577:Core/Src/main.c ****   GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 456              		.loc 1 1577 0
 457 025c 2823     		movs	r3, #40
 458 025e 0B93     		str	r3, [sp, #44]
1578:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 459              		.loc 1 1578 0
 460 0260 CDF83080 		str	r8, [sp, #48]
1579:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 461              		.loc 1 1579 0
 462 0264 0D94     		str	r4, [sp, #52]
1580:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 463              		.loc 1 1580 0
 464 0266 0E97     		str	r7, [sp, #56]
1581:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 465              		.loc 1 1581 0
 466 0268 0F96     		str	r6, [sp, #60]
1582:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 467              		.loc 1 1582 0
 468 026a 0BA9     		add	r1, sp, #44
 469 026c 0C48     		ldr	r0, .L6+40
 470 026e FFF7FEFF 		bl	HAL_GPIO_Init
 471              	.LVL22:
1583:Core/Src/main.c **** 
1584:Core/Src/main.c **** }
ARM GAS  /tmp/ccvLOER3.s 			page 37


 472              		.loc 1 1584 0
 473 0272 11B0     		add	sp, sp, #68
 474              	.LCFI2:
 475              		.cfi_def_cfa_offset 36
 476              		@ sp needed
 477 0274 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 478              	.L7:
 479              		.align	2
 480              	.L6:
 481 0278 00380240 		.word	1073887232
 482 027c 000C0240 		.word	1073875968
 483 0280 00200240 		.word	1073881088
 484 0284 00280240 		.word	1073883136
 485 0288 001C0240 		.word	1073880064
 486 028c 00180240 		.word	1073879040
 487 0290 00100240 		.word	1073876992
 488 0294 00040240 		.word	1073873920
 489 0298 00240240 		.word	1073882112
 490 029c 00080240 		.word	1073874944
 491 02a0 00000240 		.word	1073872896
 492 02a4 00001210 		.word	269615104
 493              		.cfi_endproc
 494              	.LFE171:
 496              		.section	.text.MX_ADC3_Init,"ax",%progbits
 497              		.align	1
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 501              		.fpu fpv5-sp-d16
 503              	MX_ADC3_Init:
 504              	.LFB148:
 312:Core/Src/main.c **** 
 505              		.loc 1 312 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 16
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509 0000 70B5     		push	{r4, r5, r6, lr}
 510              	.LCFI3:
 511              		.cfi_def_cfa_offset 16
 512              		.cfi_offset 4, -16
 513              		.cfi_offset 5, -12
 514              		.cfi_offset 6, -8
 515              		.cfi_offset 14, -4
 516 0002 84B0     		sub	sp, sp, #16
 517              	.LCFI4:
 518              		.cfi_def_cfa_offset 32
 318:Core/Src/main.c **** 
 519              		.loc 1 318 0
 520 0004 0025     		movs	r5, #0
 521 0006 0095     		str	r5, [sp]
 522 0008 0195     		str	r5, [sp, #4]
 523 000a 0295     		str	r5, [sp, #8]
 524 000c 0395     		str	r5, [sp, #12]
 325:Core/Src/main.c ****   hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 525              		.loc 1 325 0
 526 000e 104C     		ldr	r4, .L10
 527 0010 104B     		ldr	r3, .L10+4
ARM GAS  /tmp/ccvLOER3.s 			page 38


 528 0012 2360     		str	r3, [r4]
 326:Core/Src/main.c ****   hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 529              		.loc 1 326 0
 530 0014 4FF48033 		mov	r3, #65536
 531 0018 6360     		str	r3, [r4, #4]
 327:Core/Src/main.c ****   hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 532              		.loc 1 327 0
 533 001a A560     		str	r5, [r4, #8]
 328:Core/Src/main.c ****   hadc3.Init.ContinuousConvMode = DISABLE;
 534              		.loc 1 328 0
 535 001c 2561     		str	r5, [r4, #16]
 329:Core/Src/main.c ****   hadc3.Init.DiscontinuousConvMode = DISABLE;
 536              		.loc 1 329 0
 537 001e A561     		str	r5, [r4, #24]
 330:Core/Src/main.c ****   hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 538              		.loc 1 330 0
 539 0020 84F82050 		strb	r5, [r4, #32]
 331:Core/Src/main.c ****   hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 540              		.loc 1 331 0
 541 0024 E562     		str	r5, [r4, #44]
 332:Core/Src/main.c ****   hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 542              		.loc 1 332 0
 543 0026 0C4B     		ldr	r3, .L10+8
 544 0028 A362     		str	r3, [r4, #40]
 333:Core/Src/main.c ****   hadc3.Init.NbrOfConversion = 1;
 545              		.loc 1 333 0
 546 002a E560     		str	r5, [r4, #12]
 334:Core/Src/main.c ****   hadc3.Init.DMAContinuousRequests = DISABLE;
 547              		.loc 1 334 0
 548 002c 0126     		movs	r6, #1
 549 002e E661     		str	r6, [r4, #28]
 335:Core/Src/main.c ****   hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 550              		.loc 1 335 0
 551 0030 84F83050 		strb	r5, [r4, #48]
 336:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc3) != HAL_OK)
 552              		.loc 1 336 0
 553 0034 6661     		str	r6, [r4, #20]
 337:Core/Src/main.c ****   {
 554              		.loc 1 337 0
 555 0036 2046     		mov	r0, r4
 556 0038 FFF7FEFF 		bl	HAL_ADC_Init
 557              	.LVL23:
 343:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 558              		.loc 1 343 0
 559 003c 0423     		movs	r3, #4
 560 003e 0093     		str	r3, [sp]
 344:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 561              		.loc 1 344 0
 562 0040 0196     		str	r6, [sp, #4]
 345:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 563              		.loc 1 345 0
 564 0042 0295     		str	r5, [sp, #8]
 346:Core/Src/main.c ****   {
 565              		.loc 1 346 0
 566 0044 6946     		mov	r1, sp
 567 0046 2046     		mov	r0, r4
 568 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
ARM GAS  /tmp/ccvLOER3.s 			page 39


 569              	.LVL24:
 354:Core/Src/main.c **** 
 570              		.loc 1 354 0
 571 004c 04B0     		add	sp, sp, #16
 572              	.LCFI5:
 573              		.cfi_def_cfa_offset 16
 574              		@ sp needed
 575 004e 70BD     		pop	{r4, r5, r6, pc}
 576              	.L11:
 577              		.align	2
 578              	.L10:
 579 0050 00000000 		.word	hadc3
 580 0054 00220140 		.word	1073816064
 581 0058 0100000F 		.word	251658241
 582              		.cfi_endproc
 583              	.LFE148:
 585              		.section	.text.MX_CRC_Init,"ax",%progbits
 586              		.align	1
 587              		.syntax unified
 588              		.thumb
 589              		.thumb_func
 590              		.fpu fpv5-sp-d16
 592              	MX_CRC_Init:
 593              	.LFB149:
 362:Core/Src/main.c **** 
 594              		.loc 1 362 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598 0000 08B5     		push	{r3, lr}
 599              	.LCFI6:
 600              		.cfi_def_cfa_offset 8
 601              		.cfi_offset 3, -8
 602              		.cfi_offset 14, -4
 371:Core/Src/main.c ****   hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 603              		.loc 1 371 0
 604 0002 0648     		ldr	r0, .L14
 605 0004 064B     		ldr	r3, .L14+4
 606 0006 0360     		str	r3, [r0]
 372:Core/Src/main.c ****   hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 607              		.loc 1 372 0
 608 0008 0023     		movs	r3, #0
 609 000a 0371     		strb	r3, [r0, #4]
 373:Core/Src/main.c ****   hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 610              		.loc 1 373 0
 611 000c 4371     		strb	r3, [r0, #5]
 374:Core/Src/main.c ****   hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 612              		.loc 1 374 0
 613 000e 4361     		str	r3, [r0, #20]
 375:Core/Src/main.c ****   hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 614              		.loc 1 375 0
 615 0010 8361     		str	r3, [r0, #24]
 376:Core/Src/main.c ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 616              		.loc 1 376 0
 617 0012 0123     		movs	r3, #1
 618 0014 0362     		str	r3, [r0, #32]
 377:Core/Src/main.c ****   {
ARM GAS  /tmp/ccvLOER3.s 			page 40


 619              		.loc 1 377 0
 620 0016 FFF7FEFF 		bl	HAL_CRC_Init
 621              	.LVL25:
 385:Core/Src/main.c **** 
 622              		.loc 1 385 0
 623 001a 08BD     		pop	{r3, pc}
 624              	.L15:
 625              		.align	2
 626              	.L14:
 627 001c 00000000 		.word	hcrc
 628 0020 00300240 		.word	1073885184
 629              		.cfi_endproc
 630              	.LFE149:
 632              		.section	.text.MX_DCMI_Init,"ax",%progbits
 633              		.align	1
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu fpv5-sp-d16
 639              	MX_DCMI_Init:
 640              	.LFB150:
 393:Core/Src/main.c **** 
 641              		.loc 1 393 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645 0000 08B5     		push	{r3, lr}
 646              	.LCFI7:
 647              		.cfi_def_cfa_offset 8
 648              		.cfi_offset 3, -8
 649              		.cfi_offset 14, -4
 402:Core/Src/main.c ****   hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 650              		.loc 1 402 0
 651 0002 0948     		ldr	r0, .L18
 652 0004 094B     		ldr	r3, .L18+4
 653 0006 0360     		str	r3, [r0]
 403:Core/Src/main.c ****   hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 654              		.loc 1 403 0
 655 0008 0023     		movs	r3, #0
 656 000a 4360     		str	r3, [r0, #4]
 404:Core/Src/main.c ****   hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 657              		.loc 1 404 0
 658 000c 8360     		str	r3, [r0, #8]
 405:Core/Src/main.c ****   hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 659              		.loc 1 405 0
 660 000e C360     		str	r3, [r0, #12]
 406:Core/Src/main.c ****   hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 661              		.loc 1 406 0
 662 0010 0361     		str	r3, [r0, #16]
 407:Core/Src/main.c ****   hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 663              		.loc 1 407 0
 664 0012 4361     		str	r3, [r0, #20]
 408:Core/Src/main.c ****   hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 665              		.loc 1 408 0
 666 0014 8361     		str	r3, [r0, #24]
 409:Core/Src/main.c ****   hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 667              		.loc 1 409 0
ARM GAS  /tmp/ccvLOER3.s 			page 41


 668 0016 0362     		str	r3, [r0, #32]
 410:Core/Src/main.c ****   hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 669              		.loc 1 410 0
 670 0018 4362     		str	r3, [r0, #36]
 411:Core/Src/main.c ****   hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 671              		.loc 1 411 0
 672 001a 8362     		str	r3, [r0, #40]
 412:Core/Src/main.c ****   hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 673              		.loc 1 412 0
 674 001c C362     		str	r3, [r0, #44]
 413:Core/Src/main.c ****   if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 675              		.loc 1 413 0
 676 001e 0363     		str	r3, [r0, #48]
 414:Core/Src/main.c ****   {
 677              		.loc 1 414 0
 678 0020 FFF7FEFF 		bl	HAL_DCMI_Init
 679              	.LVL26:
 422:Core/Src/main.c **** 
 680              		.loc 1 422 0
 681 0024 08BD     		pop	{r3, pc}
 682              	.L19:
 683 0026 00BF     		.align	2
 684              	.L18:
 685 0028 00000000 		.word	hdcmi
 686 002c 00000550 		.word	1342504960
 687              		.cfi_endproc
 688              	.LFE150:
 690              		.section	.text.MX_ETH_Init,"ax",%progbits
 691              		.align	1
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 695              		.fpu fpv5-sp-d16
 697              	MX_ETH_Init:
 698              	.LFB152:
 467:Core/Src/main.c **** 
 699              		.loc 1 467 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703 0000 08B5     		push	{r3, lr}
 704              	.LCFI8:
 705              		.cfi_def_cfa_offset 8
 706              		.cfi_offset 3, -8
 707              		.cfi_offset 14, -4
 476:Core/Src/main.c ****   heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 708              		.loc 1 476 0
 709 0002 0E48     		ldr	r0, .L22
 710 0004 0E4B     		ldr	r3, .L22+4
 711 0006 0360     		str	r3, [r0]
 477:Core/Src/main.c ****   heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 712              		.loc 1 477 0
 713 0008 0123     		movs	r3, #1
 714 000a 4360     		str	r3, [r0, #4]
 478:Core/Src/main.c ****   heth.Init.MACAddr[0] =   0x00;
 715              		.loc 1 478 0
 716 000c 0023     		movs	r3, #0
ARM GAS  /tmp/ccvLOER3.s 			page 42


 717 000e 0382     		strh	r3, [r0, #16]	@ movhi
 479:Core/Src/main.c ****   heth.Init.MACAddr[1] =   0x80;
 718              		.loc 1 479 0
 719 0010 4269     		ldr	r2, [r0, #20]
 720 0012 1370     		strb	r3, [r2]
 480:Core/Src/main.c ****   heth.Init.MACAddr[2] =   0xE1;
 721              		.loc 1 480 0
 722 0014 4269     		ldr	r2, [r0, #20]
 723 0016 8021     		movs	r1, #128
 724 0018 5170     		strb	r1, [r2, #1]
 481:Core/Src/main.c ****   heth.Init.MACAddr[3] =   0x00;
 725              		.loc 1 481 0
 726 001a 4269     		ldr	r2, [r0, #20]
 727 001c E121     		movs	r1, #225
 728 001e 9170     		strb	r1, [r2, #2]
 482:Core/Src/main.c ****   heth.Init.MACAddr[4] =   0x00;
 729              		.loc 1 482 0
 730 0020 4269     		ldr	r2, [r0, #20]
 731 0022 D370     		strb	r3, [r2, #3]
 483:Core/Src/main.c ****   heth.Init.MACAddr[5] =   0x00;
 732              		.loc 1 483 0
 733 0024 4269     		ldr	r2, [r0, #20]
 734 0026 1371     		strb	r3, [r2, #4]
 484:Core/Src/main.c ****   heth.Init.RxMode = ETH_RXPOLLING_MODE;
 735              		.loc 1 484 0
 736 0028 4269     		ldr	r2, [r0, #20]
 737 002a 5371     		strb	r3, [r2, #5]
 485:Core/Src/main.c ****   heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 738              		.loc 1 485 0
 739 002c 8361     		str	r3, [r0, #24]
 486:Core/Src/main.c ****   heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 740              		.loc 1 486 0
 741 002e C361     		str	r3, [r0, #28]
 487:Core/Src/main.c **** 
 742              		.loc 1 487 0
 743 0030 4FF40003 		mov	r3, #8388608
 744 0034 0362     		str	r3, [r0, #32]
 493:Core/Src/main.c ****   {
 745              		.loc 1 493 0
 746 0036 FFF7FEFF 		bl	HAL_ETH_Init
 747              	.LVL27:
 501:Core/Src/main.c **** 
 748              		.loc 1 501 0
 749 003a 08BD     		pop	{r3, pc}
 750              	.L23:
 751              		.align	2
 752              	.L22:
 753 003c 00000000 		.word	heth
 754 0040 00800240 		.word	1073905664
 755              		.cfi_endproc
 756              	.LFE152:
 758              		.section	.text.MX_I2C1_Init,"ax",%progbits
 759              		.align	1
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu fpv5-sp-d16
ARM GAS  /tmp/ccvLOER3.s 			page 43


 765              	MX_I2C1_Init:
 766              	.LFB153:
 509:Core/Src/main.c **** 
 767              		.loc 1 509 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771 0000 38B5     		push	{r3, r4, r5, lr}
 772              	.LCFI9:
 773              		.cfi_def_cfa_offset 16
 774              		.cfi_offset 3, -16
 775              		.cfi_offset 4, -12
 776              		.cfi_offset 5, -8
 777              		.cfi_offset 14, -4
 518:Core/Src/main.c ****   hi2c1.Init.Timing = 0x00C0EAFF;
 778              		.loc 1 518 0
 779 0002 0D4C     		ldr	r4, .L26
 780 0004 0D4B     		ldr	r3, .L26+4
 781 0006 2360     		str	r3, [r4]
 519:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 782              		.loc 1 519 0
 783 0008 0D4B     		ldr	r3, .L26+8
 784 000a 6360     		str	r3, [r4, #4]
 520:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 785              		.loc 1 520 0
 786 000c 0025     		movs	r5, #0
 787 000e A560     		str	r5, [r4, #8]
 521:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 788              		.loc 1 521 0
 789 0010 0123     		movs	r3, #1
 790 0012 E360     		str	r3, [r4, #12]
 522:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 791              		.loc 1 522 0
 792 0014 2561     		str	r5, [r4, #16]
 523:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 793              		.loc 1 523 0
 794 0016 6561     		str	r5, [r4, #20]
 524:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 795              		.loc 1 524 0
 796 0018 A561     		str	r5, [r4, #24]
 525:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 797              		.loc 1 525 0
 798 001a E561     		str	r5, [r4, #28]
 526:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 799              		.loc 1 526 0
 800 001c 2562     		str	r5, [r4, #32]
 527:Core/Src/main.c ****   {
 801              		.loc 1 527 0
 802 001e 2046     		mov	r0, r4
 803 0020 FFF7FEFF 		bl	HAL_I2C_Init
 804              	.LVL28:
 533:Core/Src/main.c ****   {
 805              		.loc 1 533 0
 806 0024 2946     		mov	r1, r5
 807 0026 2046     		mov	r0, r4
 808 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 809              	.LVL29:
ARM GAS  /tmp/ccvLOER3.s 			page 44


 539:Core/Src/main.c ****   {
 810              		.loc 1 539 0
 811 002c 2946     		mov	r1, r5
 812 002e 2046     		mov	r0, r4
 813 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 814              	.LVL30:
 547:Core/Src/main.c **** 
 815              		.loc 1 547 0
 816 0034 38BD     		pop	{r3, r4, r5, pc}
 817              	.L27:
 818 0036 00BF     		.align	2
 819              	.L26:
 820 0038 00000000 		.word	hi2c1
 821 003c 00540040 		.word	1073763328
 822 0040 FFEAC000 		.word	12643071
 823              		.cfi_endproc
 824              	.LFE153:
 826              		.section	.text.MX_I2C3_Init,"ax",%progbits
 827              		.align	1
 828              		.syntax unified
 829              		.thumb
 830              		.thumb_func
 831              		.fpu fpv5-sp-d16
 833              	MX_I2C3_Init:
 834              	.LFB154:
 555:Core/Src/main.c **** 
 835              		.loc 1 555 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839 0000 38B5     		push	{r3, r4, r5, lr}
 840              	.LCFI10:
 841              		.cfi_def_cfa_offset 16
 842              		.cfi_offset 3, -16
 843              		.cfi_offset 4, -12
 844              		.cfi_offset 5, -8
 845              		.cfi_offset 14, -4
 564:Core/Src/main.c ****   hi2c3.Init.Timing = 0x00C0EAFF;
 846              		.loc 1 564 0
 847 0002 0D4C     		ldr	r4, .L30
 848 0004 0D4B     		ldr	r3, .L30+4
 849 0006 2360     		str	r3, [r4]
 565:Core/Src/main.c ****   hi2c3.Init.OwnAddress1 = 0;
 850              		.loc 1 565 0
 851 0008 0D4B     		ldr	r3, .L30+8
 852 000a 6360     		str	r3, [r4, #4]
 566:Core/Src/main.c ****   hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 853              		.loc 1 566 0
 854 000c 0025     		movs	r5, #0
 855 000e A560     		str	r5, [r4, #8]
 567:Core/Src/main.c ****   hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 856              		.loc 1 567 0
 857 0010 0123     		movs	r3, #1
 858 0012 E360     		str	r3, [r4, #12]
 568:Core/Src/main.c ****   hi2c3.Init.OwnAddress2 = 0;
 859              		.loc 1 568 0
 860 0014 2561     		str	r5, [r4, #16]
ARM GAS  /tmp/ccvLOER3.s 			page 45


 569:Core/Src/main.c ****   hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 861              		.loc 1 569 0
 862 0016 6561     		str	r5, [r4, #20]
 570:Core/Src/main.c ****   hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 863              		.loc 1 570 0
 864 0018 A561     		str	r5, [r4, #24]
 571:Core/Src/main.c ****   hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 865              		.loc 1 571 0
 866 001a E561     		str	r5, [r4, #28]
 572:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 867              		.loc 1 572 0
 868 001c 2562     		str	r5, [r4, #32]
 573:Core/Src/main.c ****   {
 869              		.loc 1 573 0
 870 001e 2046     		mov	r0, r4
 871 0020 FFF7FEFF 		bl	HAL_I2C_Init
 872              	.LVL31:
 579:Core/Src/main.c ****   {
 873              		.loc 1 579 0
 874 0024 2946     		mov	r1, r5
 875 0026 2046     		mov	r0, r4
 876 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 877              	.LVL32:
 585:Core/Src/main.c ****   {
 878              		.loc 1 585 0
 879 002c 2946     		mov	r1, r5
 880 002e 2046     		mov	r0, r4
 881 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 882              	.LVL33:
 593:Core/Src/main.c **** 
 883              		.loc 1 593 0
 884 0034 38BD     		pop	{r3, r4, r5, pc}
 885              	.L31:
 886 0036 00BF     		.align	2
 887              	.L30:
 888 0038 00000000 		.word	hi2c3
 889 003c 005C0040 		.word	1073765376
 890 0040 FFEAC000 		.word	12643071
 891              		.cfi_endproc
 892              	.LFE154:
 894              		.section	.text.MX_QUADSPI_Init,"ax",%progbits
 895              		.align	1
 896              		.syntax unified
 897              		.thumb
 898              		.thumb_func
 899              		.fpu fpv5-sp-d16
 901              	MX_QUADSPI_Init:
 902              	.LFB156:
 663:Core/Src/main.c **** 
 903              		.loc 1 663 0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 0
 906              		@ frame_needed = 0, uses_anonymous_args = 0
 907 0000 08B5     		push	{r3, lr}
 908              	.LCFI11:
 909              		.cfi_def_cfa_offset 8
 910              		.cfi_offset 3, -8
ARM GAS  /tmp/ccvLOER3.s 			page 46


 911              		.cfi_offset 14, -4
 673:Core/Src/main.c ****   hqspi.Init.ClockPrescaler = 255;
 912              		.loc 1 673 0
 913 0002 0848     		ldr	r0, .L34
 914 0004 084B     		ldr	r3, .L34+4
 915 0006 0360     		str	r3, [r0]
 674:Core/Src/main.c ****   hqspi.Init.FifoThreshold = 1;
 916              		.loc 1 674 0
 917 0008 FF23     		movs	r3, #255
 918 000a 4360     		str	r3, [r0, #4]
 675:Core/Src/main.c ****   hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 919              		.loc 1 675 0
 920 000c 0122     		movs	r2, #1
 921 000e 8260     		str	r2, [r0, #8]
 676:Core/Src/main.c ****   hqspi.Init.FlashSize = 1;
 922              		.loc 1 676 0
 923 0010 0023     		movs	r3, #0
 924 0012 C360     		str	r3, [r0, #12]
 677:Core/Src/main.c ****   hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 925              		.loc 1 677 0
 926 0014 0261     		str	r2, [r0, #16]
 678:Core/Src/main.c ****   hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 927              		.loc 1 678 0
 928 0016 4361     		str	r3, [r0, #20]
 679:Core/Src/main.c ****   hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 929              		.loc 1 679 0
 930 0018 8361     		str	r3, [r0, #24]
 680:Core/Src/main.c ****   hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 931              		.loc 1 680 0
 932 001a C361     		str	r3, [r0, #28]
 681:Core/Src/main.c ****   if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 933              		.loc 1 681 0
 934 001c 0362     		str	r3, [r0, #32]
 682:Core/Src/main.c ****   {
 935              		.loc 1 682 0
 936 001e FFF7FEFF 		bl	HAL_QSPI_Init
 937              	.LVL34:
 690:Core/Src/main.c **** 
 938              		.loc 1 690 0
 939 0022 08BD     		pop	{r3, pc}
 940              	.L35:
 941              		.align	2
 942              	.L34:
 943 0024 00000000 		.word	hqspi
 944 0028 001000A0 		.word	-1610608640
 945              		.cfi_endproc
 946              	.LFE156:
 948              		.section	.text.MX_RTC_Init,"ax",%progbits
 949              		.align	1
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 953              		.fpu fpv5-sp-d16
 955              	MX_RTC_Init:
 956              	.LFB157:
 698:Core/Src/main.c **** 
 957              		.loc 1 698 0
ARM GAS  /tmp/ccvLOER3.s 			page 47


 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 72
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 961 0000 70B5     		push	{r4, r5, r6, lr}
 962              	.LCFI12:
 963              		.cfi_def_cfa_offset 16
 964              		.cfi_offset 4, -16
 965              		.cfi_offset 5, -12
 966              		.cfi_offset 6, -8
 967              		.cfi_offset 14, -4
 968 0002 92B0     		sub	sp, sp, #72
 969              	.LCFI13:
 970              		.cfi_def_cfa_offset 88
 704:Core/Src/main.c ****   RTC_DateTypeDef sDate = {0};
 971              		.loc 1 704 0
 972 0004 0024     		movs	r4, #0
 973 0006 0C94     		str	r4, [sp, #48]
 974 0008 0D94     		str	r4, [sp, #52]
 975 000a 0E94     		str	r4, [sp, #56]
 976 000c 0F94     		str	r4, [sp, #60]
 977 000e 1094     		str	r4, [sp, #64]
 978 0010 1194     		str	r4, [sp, #68]
 705:Core/Src/main.c ****   RTC_AlarmTypeDef sAlarm = {0};
 979              		.loc 1 705 0
 980 0012 0B94     		str	r4, [sp, #44]
 706:Core/Src/main.c **** 
 981              		.loc 1 706 0
 982 0014 2C22     		movs	r2, #44
 983 0016 2146     		mov	r1, r4
 984 0018 6846     		mov	r0, sp
 985 001a FFF7FEFF 		bl	memset
 986              	.LVL35:
 713:Core/Src/main.c ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 987              		.loc 1 713 0
 988 001e 284D     		ldr	r5, .L38
 989 0020 284B     		ldr	r3, .L38+4
 990 0022 2B60     		str	r3, [r5]
 714:Core/Src/main.c ****   hrtc.Init.AsynchPrediv = 127;
 991              		.loc 1 714 0
 992 0024 6C60     		str	r4, [r5, #4]
 715:Core/Src/main.c ****   hrtc.Init.SynchPrediv = 255;
 993              		.loc 1 715 0
 994 0026 7F23     		movs	r3, #127
 995 0028 AB60     		str	r3, [r5, #8]
 716:Core/Src/main.c ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 996              		.loc 1 716 0
 997 002a FF23     		movs	r3, #255
 998 002c EB60     		str	r3, [r5, #12]
 717:Core/Src/main.c ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 999              		.loc 1 717 0
 1000 002e 2C61     		str	r4, [r5, #16]
 718:Core/Src/main.c ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 1001              		.loc 1 718 0
 1002 0030 6C61     		str	r4, [r5, #20]
 719:Core/Src/main.c ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 1003              		.loc 1 719 0
 1004 0032 AC61     		str	r4, [r5, #24]
ARM GAS  /tmp/ccvLOER3.s 			page 48


 720:Core/Src/main.c ****   {
 1005              		.loc 1 720 0
 1006 0034 2846     		mov	r0, r5
 1007 0036 FFF7FEFF 		bl	HAL_RTC_Init
 1008              	.LVL36:
 731:Core/Src/main.c ****   sTime.Minutes = 0x0;
 1009              		.loc 1 731 0
 1010 003a 8DF83040 		strb	r4, [sp, #48]
 732:Core/Src/main.c ****   sTime.Seconds = 0x0;
 1011              		.loc 1 732 0
 1012 003e 8DF83140 		strb	r4, [sp, #49]
 733:Core/Src/main.c ****   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 1013              		.loc 1 733 0
 1014 0042 8DF83240 		strb	r4, [sp, #50]
 734:Core/Src/main.c ****   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 1015              		.loc 1 734 0
 1016 0046 1094     		str	r4, [sp, #64]
 735:Core/Src/main.c ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 1017              		.loc 1 735 0
 1018 0048 1194     		str	r4, [sp, #68]
 736:Core/Src/main.c ****   {
 1019              		.loc 1 736 0
 1020 004a 0122     		movs	r2, #1
 1021 004c 0CA9     		add	r1, sp, #48
 1022 004e 2846     		mov	r0, r5
 1023 0050 FFF7FEFF 		bl	HAL_RTC_SetTime
 1024              	.LVL37:
 740:Core/Src/main.c ****   sDate.Month = RTC_MONTH_JANUARY;
 1025              		.loc 1 740 0
 1026 0054 0126     		movs	r6, #1
 1027 0056 8DF82C60 		strb	r6, [sp, #44]
 741:Core/Src/main.c ****   sDate.Date = 0x1;
 1028              		.loc 1 741 0
 1029 005a 8DF82D60 		strb	r6, [sp, #45]
 742:Core/Src/main.c ****   sDate.Year = 0x0;
 1030              		.loc 1 742 0
 1031 005e 8DF82E60 		strb	r6, [sp, #46]
 743:Core/Src/main.c ****   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 1032              		.loc 1 743 0
 1033 0062 8DF82F40 		strb	r4, [sp, #47]
 744:Core/Src/main.c ****   {
 1034              		.loc 1 744 0
 1035 0066 3246     		mov	r2, r6
 1036 0068 0BA9     		add	r1, sp, #44
 1037 006a 2846     		mov	r0, r5
 1038 006c FFF7FEFF 		bl	HAL_RTC_SetDate
 1039              	.LVL38:
 750:Core/Src/main.c ****   sAlarm.AlarmTime.Minutes = 0x0;
 1040              		.loc 1 750 0
 1041 0070 8DF80040 		strb	r4, [sp]
 751:Core/Src/main.c ****   sAlarm.AlarmTime.Seconds = 0x0;
 1042              		.loc 1 751 0
 1043 0074 8DF80140 		strb	r4, [sp, #1]
 752:Core/Src/main.c ****   sAlarm.AlarmTime.SubSeconds = 0x0;
 1044              		.loc 1 752 0
 1045 0078 8DF80240 		strb	r4, [sp, #2]
 753:Core/Src/main.c ****   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
ARM GAS  /tmp/ccvLOER3.s 			page 49


 1046              		.loc 1 753 0
 1047 007c 0194     		str	r4, [sp, #4]
 754:Core/Src/main.c ****   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 1048              		.loc 1 754 0
 1049 007e 0494     		str	r4, [sp, #16]
 755:Core/Src/main.c ****   sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 1050              		.loc 1 755 0
 1051 0080 0594     		str	r4, [sp, #20]
 756:Core/Src/main.c ****   sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 1052              		.loc 1 756 0
 1053 0082 0694     		str	r4, [sp, #24]
 757:Core/Src/main.c ****   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 1054              		.loc 1 757 0
 1055 0084 0794     		str	r4, [sp, #28]
 758:Core/Src/main.c ****   sAlarm.AlarmDateWeekDay = 0x1;
 1056              		.loc 1 758 0
 1057 0086 0894     		str	r4, [sp, #32]
 759:Core/Src/main.c ****   sAlarm.Alarm = RTC_ALARM_A;
 1058              		.loc 1 759 0
 1059 0088 8DF82460 		strb	r6, [sp, #36]
 760:Core/Src/main.c ****   if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 1060              		.loc 1 760 0
 1061 008c 4FF48073 		mov	r3, #256
 1062 0090 0A93     		str	r3, [sp, #40]
 761:Core/Src/main.c ****   {
 1063              		.loc 1 761 0
 1064 0092 3246     		mov	r2, r6
 1065 0094 6946     		mov	r1, sp
 1066 0096 2846     		mov	r0, r5
 1067 0098 FFF7FEFF 		bl	HAL_RTC_SetAlarm
 1068              	.LVL39:
 767:Core/Src/main.c ****   sAlarm.Alarm = RTC_ALARM_B;
 1069              		.loc 1 767 0
 1070 009c 8DF82460 		strb	r6, [sp, #36]
 768:Core/Src/main.c ****   if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 1071              		.loc 1 768 0
 1072 00a0 4FF40073 		mov	r3, #512
 1073 00a4 0A93     		str	r3, [sp, #40]
 769:Core/Src/main.c ****   {
 1074              		.loc 1 769 0
 1075 00a6 3246     		mov	r2, r6
 1076 00a8 6946     		mov	r1, sp
 1077 00aa 2846     		mov	r0, r5
 1078 00ac FFF7FEFF 		bl	HAL_RTC_SetAlarm
 1079              	.LVL40:
 775:Core/Src/main.c ****   {
 1080              		.loc 1 775 0
 1081 00b0 0222     		movs	r2, #2
 1082 00b2 2146     		mov	r1, r4
 1083 00b4 2846     		mov	r0, r5
 1084 00b6 FFF7FEFF 		bl	HAL_RTCEx_SetTimeStamp
 1085              	.LVL41:
 783:Core/Src/main.c **** 
 1086              		.loc 1 783 0
 1087 00ba 12B0     		add	sp, sp, #72
 1088              	.LCFI14:
 1089              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccvLOER3.s 			page 50


 1090              		@ sp needed
 1091 00bc 70BD     		pop	{r4, r5, r6, pc}
 1092              	.L39:
 1093 00be 00BF     		.align	2
 1094              	.L38:
 1095 00c0 00000000 		.word	hrtc
 1096 00c4 00280040 		.word	1073752064
 1097              		.cfi_endproc
 1098              	.LFE157:
 1100              		.section	.text.MX_SAI2_Init,"ax",%progbits
 1101              		.align	1
 1102              		.syntax unified
 1103              		.thumb
 1104              		.thumb_func
 1105              		.fpu fpv5-sp-d16
 1107              	MX_SAI2_Init:
 1108              	.LFB158:
 791:Core/Src/main.c **** 
 1109              		.loc 1 791 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 1113 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1114              	.LCFI15:
 1115              		.cfi_def_cfa_offset 24
 1116              		.cfi_offset 3, -24
 1117              		.cfi_offset 4, -20
 1118              		.cfi_offset 5, -16
 1119              		.cfi_offset 6, -12
 1120              		.cfi_offset 7, -8
 1121              		.cfi_offset 14, -4
 800:Core/Src/main.c ****   hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 1122              		.loc 1 800 0
 1123 0002 1E48     		ldr	r0, .L42
 1124 0004 1E4B     		ldr	r3, .L42+4
 1125 0006 0360     		str	r3, [r0]
 801:Core/Src/main.c ****   hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 1126              		.loc 1 801 0
 1127 0008 0024     		movs	r4, #0
 1128 000a 0463     		str	r4, [r0, #48]
 802:Core/Src/main.c ****   hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 1129              		.loc 1 802 0
 1130 000c 4460     		str	r4, [r0, #4]
 803:Core/Src/main.c ****   hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 1131              		.loc 1 803 0
 1132 000e 4027     		movs	r7, #64
 1133 0010 4763     		str	r7, [r0, #52]
 804:Core/Src/main.c ****   hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 1134              		.loc 1 804 0
 1135 0012 8463     		str	r4, [r0, #56]
 805:Core/Src/main.c ****   hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 1136              		.loc 1 805 0
 1137 0014 C463     		str	r4, [r0, #60]
 806:Core/Src/main.c ****   hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 1138              		.loc 1 806 0
 1139 0016 8460     		str	r4, [r0, #8]
 807:Core/Src/main.c ****   hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
ARM GAS  /tmp/ccvLOER3.s 			page 51


 1140              		.loc 1 807 0
 1141 0018 0461     		str	r4, [r0, #16]
 808:Core/Src/main.c ****   hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 1142              		.loc 1 808 0
 1143 001a 4461     		str	r4, [r0, #20]
 809:Core/Src/main.c ****   hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 1144              		.loc 1 809 0
 1145 001c 8461     		str	r4, [r0, #24]
 810:Core/Src/main.c ****   hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 1146              		.loc 1 810 0
 1147 001e 194B     		ldr	r3, .L42+8
 1148 0020 C361     		str	r3, [r0, #28]
 811:Core/Src/main.c ****   hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 1149              		.loc 1 811 0
 1150 0022 C460     		str	r4, [r0, #12]
 812:Core/Src/main.c ****   hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 1151              		.loc 1 812 0
 1152 0024 4462     		str	r4, [r0, #36]
 813:Core/Src/main.c ****   hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 1153              		.loc 1 813 0
 1154 0026 8462     		str	r4, [r0, #40]
 814:Core/Src/main.c ****   hsai_BlockA2.FrameInit.FrameLength = 8;
 1155              		.loc 1 814 0
 1156 0028 C462     		str	r4, [r0, #44]
 815:Core/Src/main.c ****   hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 1157              		.loc 1 815 0
 1158 002a 0826     		movs	r6, #8
 1159 002c 0664     		str	r6, [r0, #64]
 816:Core/Src/main.c ****   hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 1160              		.loc 1 816 0
 1161 002e 0125     		movs	r5, #1
 1162 0030 4564     		str	r5, [r0, #68]
 817:Core/Src/main.c ****   hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 1163              		.loc 1 817 0
 1164 0032 8464     		str	r4, [r0, #72]
 818:Core/Src/main.c ****   hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 1165              		.loc 1 818 0
 1166 0034 C464     		str	r4, [r0, #76]
 819:Core/Src/main.c ****   hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 1167              		.loc 1 819 0
 1168 0036 0465     		str	r4, [r0, #80]
 820:Core/Src/main.c ****   hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 1169              		.loc 1 820 0
 1170 0038 4465     		str	r4, [r0, #84]
 821:Core/Src/main.c ****   hsai_BlockA2.SlotInit.SlotNumber = 1;
 1171              		.loc 1 821 0
 1172 003a 8465     		str	r4, [r0, #88]
 822:Core/Src/main.c ****   hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 1173              		.loc 1 822 0
 1174 003c C565     		str	r5, [r0, #92]
 823:Core/Src/main.c ****   if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 1175              		.loc 1 823 0
 1176 003e 0466     		str	r4, [r0, #96]
 824:Core/Src/main.c ****   {
 1177              		.loc 1 824 0
 1178 0040 FFF7FEFF 		bl	HAL_SAI_Init
 1179              	.LVL42:
ARM GAS  /tmp/ccvLOER3.s 			page 52


 828:Core/Src/main.c ****   hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 1180              		.loc 1 828 0
 1181 0044 1048     		ldr	r0, .L42+12
 1182 0046 114B     		ldr	r3, .L42+16
 1183 0048 0360     		str	r3, [r0]
 829:Core/Src/main.c ****   hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 1184              		.loc 1 829 0
 1185 004a 0463     		str	r4, [r0, #48]
 830:Core/Src/main.c ****   hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 1186              		.loc 1 830 0
 1187 004c 0323     		movs	r3, #3
 1188 004e 4360     		str	r3, [r0, #4]
 831:Core/Src/main.c ****   hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 1189              		.loc 1 831 0
 1190 0050 4763     		str	r7, [r0, #52]
 832:Core/Src/main.c ****   hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 1191              		.loc 1 832 0
 1192 0052 8463     		str	r4, [r0, #56]
 833:Core/Src/main.c ****   hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 1193              		.loc 1 833 0
 1194 0054 C463     		str	r4, [r0, #60]
 834:Core/Src/main.c ****   hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 1195              		.loc 1 834 0
 1196 0056 8560     		str	r5, [r0, #8]
 835:Core/Src/main.c ****   hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 1197              		.loc 1 835 0
 1198 0058 0461     		str	r4, [r0, #16]
 836:Core/Src/main.c ****   hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 1199              		.loc 1 836 0
 1200 005a 8461     		str	r4, [r0, #24]
 837:Core/Src/main.c ****   hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 1201              		.loc 1 837 0
 1202 005c C460     		str	r4, [r0, #12]
 838:Core/Src/main.c ****   hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 1203              		.loc 1 838 0
 1204 005e 4462     		str	r4, [r0, #36]
 839:Core/Src/main.c ****   hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 1205              		.loc 1 839 0
 1206 0060 8462     		str	r4, [r0, #40]
 840:Core/Src/main.c ****   hsai_BlockB2.FrameInit.FrameLength = 8;
 1207              		.loc 1 840 0
 1208 0062 C462     		str	r4, [r0, #44]
 841:Core/Src/main.c ****   hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 1209              		.loc 1 841 0
 1210 0064 0664     		str	r6, [r0, #64]
 842:Core/Src/main.c ****   hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 1211              		.loc 1 842 0
 1212 0066 4564     		str	r5, [r0, #68]
 843:Core/Src/main.c ****   hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 1213              		.loc 1 843 0
 1214 0068 8464     		str	r4, [r0, #72]
 844:Core/Src/main.c ****   hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 1215              		.loc 1 844 0
 1216 006a C464     		str	r4, [r0, #76]
 845:Core/Src/main.c ****   hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 1217              		.loc 1 845 0
 1218 006c 0465     		str	r4, [r0, #80]
ARM GAS  /tmp/ccvLOER3.s 			page 53


 846:Core/Src/main.c ****   hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 1219              		.loc 1 846 0
 1220 006e 4465     		str	r4, [r0, #84]
 847:Core/Src/main.c ****   hsai_BlockB2.SlotInit.SlotNumber = 1;
 1221              		.loc 1 847 0
 1222 0070 8465     		str	r4, [r0, #88]
 848:Core/Src/main.c ****   hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 1223              		.loc 1 848 0
 1224 0072 C565     		str	r5, [r0, #92]
 849:Core/Src/main.c ****   if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 1225              		.loc 1 849 0
 1226 0074 0466     		str	r4, [r0, #96]
 850:Core/Src/main.c ****   {
 1227              		.loc 1 850 0
 1228 0076 FFF7FEFF 		bl	HAL_SAI_Init
 1229              	.LVL43:
 858:Core/Src/main.c **** 
 1230              		.loc 1 858 0
 1231 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1232              	.L43:
 1233              		.align	2
 1234              	.L42:
 1235 007c 00000000 		.word	hsai_BlockA2
 1236 0080 045C0140 		.word	1073830916
 1237 0084 00EE0200 		.word	192000
 1238 0088 00000000 		.word	hsai_BlockB2
 1239 008c 245C0140 		.word	1073830948
 1240              		.cfi_endproc
 1241              	.LFE158:
 1243              		.section	.text.MX_SPDIFRX_Init,"ax",%progbits
 1244              		.align	1
 1245              		.syntax unified
 1246              		.thumb
 1247              		.thumb_func
 1248              		.fpu fpv5-sp-d16
 1250              	MX_SPDIFRX_Init:
 1251              	.LFB160:
 894:Core/Src/main.c **** 
 1252              		.loc 1 894 0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 0
 1255              		@ frame_needed = 0, uses_anonymous_args = 0
 1256 0000 08B5     		push	{r3, lr}
 1257              	.LCFI16:
 1258              		.cfi_def_cfa_offset 8
 1259              		.cfi_offset 3, -8
 1260              		.cfi_offset 14, -4
 903:Core/Src/main.c ****   hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 1261              		.loc 1 903 0
 1262 0002 0948     		ldr	r0, .L46
 1263 0004 4FF04023 		mov	r3, #1073758208
 1264 0008 0360     		str	r3, [r0]
 904:Core/Src/main.c ****   hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 1265              		.loc 1 904 0
 1266 000a 0023     		movs	r3, #0
 1267 000c 4360     		str	r3, [r0, #4]
 905:Core/Src/main.c ****   hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
ARM GAS  /tmp/ccvLOER3.s 			page 54


 1268              		.loc 1 905 0
 1269 000e 8360     		str	r3, [r0, #8]
 906:Core/Src/main.c ****   hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 1270              		.loc 1 906 0
 1271 0010 C360     		str	r3, [r0, #12]
 907:Core/Src/main.c ****   hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 1272              		.loc 1 907 0
 1273 0012 0361     		str	r3, [r0, #16]
 908:Core/Src/main.c ****   hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 1274              		.loc 1 908 0
 1275 0014 4361     		str	r3, [r0, #20]
 909:Core/Src/main.c ****   hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 1276              		.loc 1 909 0
 1277 0016 8361     		str	r3, [r0, #24]
 910:Core/Src/main.c ****   hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 1278              		.loc 1 910 0
 1279 0018 C361     		str	r3, [r0, #28]
 911:Core/Src/main.c ****   hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 1280              		.loc 1 911 0
 1281 001a 0362     		str	r3, [r0, #32]
 912:Core/Src/main.c ****   hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 1282              		.loc 1 912 0
 1283 001c 4362     		str	r3, [r0, #36]
 913:Core/Src/main.c ****   if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 1284              		.loc 1 913 0
 1285 001e 8362     		str	r3, [r0, #40]
 914:Core/Src/main.c ****   {
 1286              		.loc 1 914 0
 1287 0020 FFF7FEFF 		bl	HAL_SPDIFRX_Init
 1288              	.LVL44:
 922:Core/Src/main.c **** 
 1289              		.loc 1 922 0
 1290 0024 08BD     		pop	{r3, pc}
 1291              	.L47:
 1292 0026 00BF     		.align	2
 1293              	.L46:
 1294 0028 00000000 		.word	hspdif
 1295              		.cfi_endproc
 1296              	.LFE160:
 1298              		.section	.text.MX_SPI2_Init,"ax",%progbits
 1299              		.align	1
 1300              		.syntax unified
 1301              		.thumb
 1302              		.thumb_func
 1303              		.fpu fpv5-sp-d16
 1305              	MX_SPI2_Init:
 1306              	.LFB161:
 930:Core/Src/main.c **** 
 1307              		.loc 1 930 0
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 0
 1310              		@ frame_needed = 0, uses_anonymous_args = 0
 1311 0000 08B5     		push	{r3, lr}
 1312              	.LCFI17:
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 3, -8
 1315              		.cfi_offset 14, -4
ARM GAS  /tmp/ccvLOER3.s 			page 55


 940:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 1316              		.loc 1 940 0
 1317 0002 0E48     		ldr	r0, .L50
 1318 0004 0E4B     		ldr	r3, .L50+4
 1319 0006 0360     		str	r3, [r0]
 941:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 1320              		.loc 1 941 0
 1321 0008 4FF48273 		mov	r3, #260
 1322 000c 4360     		str	r3, [r0, #4]
 942:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 1323              		.loc 1 942 0
 1324 000e 0023     		movs	r3, #0
 1325 0010 8360     		str	r3, [r0, #8]
 943:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 1326              		.loc 1 943 0
 1327 0012 4FF44072 		mov	r2, #768
 1328 0016 C260     		str	r2, [r0, #12]
 944:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 1329              		.loc 1 944 0
 1330 0018 0361     		str	r3, [r0, #16]
 945:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 1331              		.loc 1 945 0
 1332 001a 4361     		str	r3, [r0, #20]
 946:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1333              		.loc 1 946 0
 1334 001c 4FF40072 		mov	r2, #512
 1335 0020 8261     		str	r2, [r0, #24]
 947:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1336              		.loc 1 947 0
 1337 0022 C361     		str	r3, [r0, #28]
 948:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 1338              		.loc 1 948 0
 1339 0024 0362     		str	r3, [r0, #32]
 949:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1340              		.loc 1 949 0
 1341 0026 4362     		str	r3, [r0, #36]
 950:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 7;
 1342              		.loc 1 950 0
 1343 0028 8362     		str	r3, [r0, #40]
 951:Core/Src/main.c ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 1344              		.loc 1 951 0
 1345 002a 0722     		movs	r2, #7
 1346 002c C262     		str	r2, [r0, #44]
 952:Core/Src/main.c ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 1347              		.loc 1 952 0
 1348 002e 0363     		str	r3, [r0, #48]
 953:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 1349              		.loc 1 953 0
 1350 0030 0823     		movs	r3, #8
 1351 0032 4363     		str	r3, [r0, #52]
 954:Core/Src/main.c ****   {
 1352              		.loc 1 954 0
 1353 0034 FFF7FEFF 		bl	HAL_SPI_Init
 1354              	.LVL45:
 962:Core/Src/main.c **** 
 1355              		.loc 1 962 0
 1356 0038 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccvLOER3.s 			page 56


 1357              	.L51:
 1358 003a 00BF     		.align	2
 1359              	.L50:
 1360 003c 00000000 		.word	hspi2
 1361 0040 00380040 		.word	1073756160
 1362              		.cfi_endproc
 1363              	.LFE161:
 1365              		.section	.text.MX_TIM8_Init,"ax",%progbits
 1366              		.align	1
 1367              		.syntax unified
 1368              		.thumb
 1369              		.thumb_func
 1370              		.fpu fpv5-sp-d16
 1372              	MX_TIM8_Init:
 1373              	.LFB166:
1227:Core/Src/main.c **** 
 1374              		.loc 1 1227 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 32
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378 0000 30B5     		push	{r4, r5, lr}
 1379              	.LCFI18:
 1380              		.cfi_def_cfa_offset 12
 1381              		.cfi_offset 4, -12
 1382              		.cfi_offset 5, -8
 1383              		.cfi_offset 14, -4
 1384 0002 89B0     		sub	sp, sp, #36
 1385              	.LCFI19:
 1386              		.cfi_def_cfa_offset 48
1233:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1387              		.loc 1 1233 0
 1388 0004 0024     		movs	r4, #0
 1389 0006 0494     		str	r4, [sp, #16]
 1390 0008 0594     		str	r4, [sp, #20]
 1391 000a 0694     		str	r4, [sp, #24]
 1392 000c 0794     		str	r4, [sp, #28]
1234:Core/Src/main.c **** 
 1393              		.loc 1 1234 0
 1394 000e 0194     		str	r4, [sp, #4]
 1395 0010 0294     		str	r4, [sp, #8]
 1396 0012 0394     		str	r4, [sp, #12]
1239:Core/Src/main.c ****   htim8.Init.Prescaler = 0;
 1397              		.loc 1 1239 0
 1398 0014 0D4D     		ldr	r5, .L54
 1399 0016 0E4B     		ldr	r3, .L54+4
 1400 0018 2B60     		str	r3, [r5]
1240:Core/Src/main.c ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 1401              		.loc 1 1240 0
 1402 001a 6C60     		str	r4, [r5, #4]
1241:Core/Src/main.c ****   htim8.Init.Period = 0;
 1403              		.loc 1 1241 0
 1404 001c AC60     		str	r4, [r5, #8]
1242:Core/Src/main.c ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1405              		.loc 1 1242 0
 1406 001e EC60     		str	r4, [r5, #12]
1243:Core/Src/main.c ****   htim8.Init.RepetitionCounter = 0;
 1407              		.loc 1 1243 0
ARM GAS  /tmp/ccvLOER3.s 			page 57


 1408 0020 2C61     		str	r4, [r5, #16]
1244:Core/Src/main.c ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1409              		.loc 1 1244 0
 1410 0022 6C61     		str	r4, [r5, #20]
1245:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 1411              		.loc 1 1245 0
 1412 0024 AC61     		str	r4, [r5, #24]
1246:Core/Src/main.c ****   {
 1413              		.loc 1 1246 0
 1414 0026 2846     		mov	r0, r5
 1415 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1416              	.LVL46:
1250:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 1417              		.loc 1 1250 0
 1418 002c 4FF48053 		mov	r3, #4096
 1419 0030 0493     		str	r3, [sp, #16]
1251:Core/Src/main.c ****   {
 1420              		.loc 1 1251 0
 1421 0032 04A9     		add	r1, sp, #16
 1422 0034 2846     		mov	r0, r5
 1423 0036 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1424              	.LVL47:
1255:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 1425              		.loc 1 1255 0
 1426 003a 0194     		str	r4, [sp, #4]
1256:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1427              		.loc 1 1256 0
 1428 003c 0294     		str	r4, [sp, #8]
1257:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 1429              		.loc 1 1257 0
 1430 003e 0394     		str	r4, [sp, #12]
1258:Core/Src/main.c ****   {
 1431              		.loc 1 1258 0
 1432 0040 01A9     		add	r1, sp, #4
 1433 0042 2846     		mov	r0, r5
 1434 0044 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1435              	.LVL48:
1266:Core/Src/main.c **** 
 1436              		.loc 1 1266 0
 1437 0048 09B0     		add	sp, sp, #36
 1438              	.LCFI20:
 1439              		.cfi_def_cfa_offset 12
 1440              		@ sp needed
 1441 004a 30BD     		pop	{r4, r5, pc}
 1442              	.L55:
 1443              		.align	2
 1444              	.L54:
 1445 004c 00000000 		.word	htim8
 1446 0050 00040140 		.word	1073808384
 1447              		.cfi_endproc
 1448              	.LFE166:
 1450              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1451              		.align	1
 1452              		.syntax unified
 1453              		.thumb
 1454              		.thumb_func
 1455              		.fpu fpv5-sp-d16
ARM GAS  /tmp/ccvLOER3.s 			page 58


 1457              	MX_TIM1_Init:
 1458              	.LFB162:
 970:Core/Src/main.c **** 
 1459              		.loc 1 970 0
 1460              		.cfi_startproc
 1461              		@ args = 0, pretend = 0, frame = 104
 1462              		@ frame_needed = 0, uses_anonymous_args = 0
 1463 0000 30B5     		push	{r4, r5, lr}
 1464              	.LCFI21:
 1465              		.cfi_def_cfa_offset 12
 1466              		.cfi_offset 4, -12
 1467              		.cfi_offset 5, -8
 1468              		.cfi_offset 14, -4
 1469 0002 9BB0     		sub	sp, sp, #108
 1470              	.LCFI22:
 1471              		.cfi_def_cfa_offset 120
 976:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1472              		.loc 1 976 0
 1473 0004 0024     		movs	r4, #0
 1474 0006 1694     		str	r4, [sp, #88]
 1475 0008 1794     		str	r4, [sp, #92]
 1476 000a 1894     		str	r4, [sp, #96]
 1477 000c 1994     		str	r4, [sp, #100]
 977:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1478              		.loc 1 977 0
 1479 000e 1394     		str	r4, [sp, #76]
 1480 0010 1494     		str	r4, [sp, #80]
 1481 0012 1594     		str	r4, [sp, #84]
 978:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1482              		.loc 1 978 0
 1483 0014 0C94     		str	r4, [sp, #48]
 1484 0016 0D94     		str	r4, [sp, #52]
 1485 0018 0E94     		str	r4, [sp, #56]
 1486 001a 0F94     		str	r4, [sp, #60]
 1487 001c 1094     		str	r4, [sp, #64]
 1488 001e 1194     		str	r4, [sp, #68]
 1489 0020 1294     		str	r4, [sp, #72]
 979:Core/Src/main.c **** 
 1490              		.loc 1 979 0
 1491 0022 2C22     		movs	r2, #44
 1492 0024 2146     		mov	r1, r4
 1493 0026 01A8     		add	r0, sp, #4
 1494 0028 FFF7FEFF 		bl	memset
 1495              	.LVL49:
 984:Core/Src/main.c ****   htim1.Init.Prescaler = 0;
 1496              		.loc 1 984 0
 1497 002c 204D     		ldr	r5, .L58
 1498 002e 214B     		ldr	r3, .L58+4
 1499 0030 2B60     		str	r3, [r5]
 985:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1500              		.loc 1 985 0
 1501 0032 6C60     		str	r4, [r5, #4]
 986:Core/Src/main.c ****   htim1.Init.Period = 0;
 1502              		.loc 1 986 0
 1503 0034 AC60     		str	r4, [r5, #8]
 987:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1504              		.loc 1 987 0
ARM GAS  /tmp/ccvLOER3.s 			page 59


 1505 0036 EC60     		str	r4, [r5, #12]
 988:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1506              		.loc 1 988 0
 1507 0038 2C61     		str	r4, [r5, #16]
 989:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1508              		.loc 1 989 0
 1509 003a 6C61     		str	r4, [r5, #20]
 990:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1510              		.loc 1 990 0
 1511 003c AC61     		str	r4, [r5, #24]
 991:Core/Src/main.c ****   {
 1512              		.loc 1 991 0
 1513 003e 2846     		mov	r0, r5
 1514 0040 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1515              	.LVL50:
 995:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1516              		.loc 1 995 0
 1517 0044 4FF48053 		mov	r3, #4096
 1518 0048 1693     		str	r3, [sp, #88]
 996:Core/Src/main.c ****   {
 1519              		.loc 1 996 0
 1520 004a 16A9     		add	r1, sp, #88
 1521 004c 2846     		mov	r0, r5
 1522 004e FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1523              	.LVL51:
1000:Core/Src/main.c ****   {
 1524              		.loc 1 1000 0
 1525 0052 2846     		mov	r0, r5
 1526 0054 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1527              	.LVL52:
1004:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 1528              		.loc 1 1004 0
 1529 0058 1394     		str	r4, [sp, #76]
1005:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1530              		.loc 1 1005 0
 1531 005a 1494     		str	r4, [sp, #80]
1006:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1532              		.loc 1 1006 0
 1533 005c 1594     		str	r4, [sp, #84]
1007:Core/Src/main.c ****   {
 1534              		.loc 1 1007 0
 1535 005e 13A9     		add	r1, sp, #76
 1536 0060 2846     		mov	r0, r5
 1537 0062 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1538              	.LVL53:
1011:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1539              		.loc 1 1011 0
 1540 0066 6023     		movs	r3, #96
 1541 0068 0C93     		str	r3, [sp, #48]
1012:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1542              		.loc 1 1012 0
 1543 006a 0D94     		str	r4, [sp, #52]
1013:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1544              		.loc 1 1013 0
 1545 006c 0E94     		str	r4, [sp, #56]
1014:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1546              		.loc 1 1014 0
ARM GAS  /tmp/ccvLOER3.s 			page 60


 1547 006e 0F94     		str	r4, [sp, #60]
1015:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1548              		.loc 1 1015 0
 1549 0070 1094     		str	r4, [sp, #64]
1016:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1550              		.loc 1 1016 0
 1551 0072 1194     		str	r4, [sp, #68]
1017:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1552              		.loc 1 1017 0
 1553 0074 1294     		str	r4, [sp, #72]
1018:Core/Src/main.c ****   {
 1554              		.loc 1 1018 0
 1555 0076 2246     		mov	r2, r4
 1556 0078 0CA9     		add	r1, sp, #48
 1557 007a 2846     		mov	r0, r5
 1558 007c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1559              	.LVL54:
1022:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1560              		.loc 1 1022 0
 1561 0080 0194     		str	r4, [sp, #4]
1023:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1562              		.loc 1 1023 0
 1563 0082 0294     		str	r4, [sp, #8]
1024:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 1564              		.loc 1 1024 0
 1565 0084 0394     		str	r4, [sp, #12]
1025:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1566              		.loc 1 1025 0
 1567 0086 0494     		str	r4, [sp, #16]
1026:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1568              		.loc 1 1026 0
 1569 0088 0594     		str	r4, [sp, #20]
1027:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1570              		.loc 1 1027 0
 1571 008a 4FF40053 		mov	r3, #8192
 1572 008e 0693     		str	r3, [sp, #24]
1028:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 1573              		.loc 1 1028 0
 1574 0090 0794     		str	r4, [sp, #28]
1029:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1575              		.loc 1 1029 0
 1576 0092 0894     		str	r4, [sp, #32]
1030:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 1577              		.loc 1 1030 0
 1578 0094 4FF00073 		mov	r3, #33554432
 1579 0098 0993     		str	r3, [sp, #36]
1031:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1580              		.loc 1 1031 0
 1581 009a 0A94     		str	r4, [sp, #40]
1032:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1582              		.loc 1 1032 0
 1583 009c 0B94     		str	r4, [sp, #44]
1033:Core/Src/main.c ****   {
 1584              		.loc 1 1033 0
 1585 009e 01A9     		add	r1, sp, #4
 1586 00a0 2846     		mov	r0, r5
 1587 00a2 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
ARM GAS  /tmp/ccvLOER3.s 			page 61


 1588              	.LVL55:
1040:Core/Src/main.c **** 
 1589              		.loc 1 1040 0
 1590 00a6 2846     		mov	r0, r5
 1591 00a8 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1592              	.LVL56:
1042:Core/Src/main.c **** 
 1593              		.loc 1 1042 0
 1594 00ac 1BB0     		add	sp, sp, #108
 1595              	.LCFI23:
 1596              		.cfi_def_cfa_offset 12
 1597              		@ sp needed
 1598 00ae 30BD     		pop	{r4, r5, pc}
 1599              	.L59:
 1600              		.align	2
 1601              	.L58:
 1602 00b0 00000000 		.word	htim1
 1603 00b4 00000140 		.word	1073807360
 1604              		.cfi_endproc
 1605              	.LFE162:
 1607              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1608              		.align	1
 1609              		.syntax unified
 1610              		.thumb
 1611              		.thumb_func
 1612              		.fpu fpv5-sp-d16
 1614              	MX_TIM2_Init:
 1615              	.LFB163:
1050:Core/Src/main.c **** 
 1616              		.loc 1 1050 0
 1617              		.cfi_startproc
 1618              		@ args = 0, pretend = 0, frame = 56
 1619              		@ frame_needed = 0, uses_anonymous_args = 0
 1620 0000 30B5     		push	{r4, r5, lr}
 1621              	.LCFI24:
 1622              		.cfi_def_cfa_offset 12
 1623              		.cfi_offset 4, -12
 1624              		.cfi_offset 5, -8
 1625              		.cfi_offset 14, -4
 1626 0002 8FB0     		sub	sp, sp, #60
 1627              	.LCFI25:
 1628              		.cfi_def_cfa_offset 72
1056:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1629              		.loc 1 1056 0
 1630 0004 0024     		movs	r4, #0
 1631 0006 0A94     		str	r4, [sp, #40]
 1632 0008 0B94     		str	r4, [sp, #44]
 1633 000a 0C94     		str	r4, [sp, #48]
 1634 000c 0D94     		str	r4, [sp, #52]
1057:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1635              		.loc 1 1057 0
 1636 000e 0794     		str	r4, [sp, #28]
 1637 0010 0894     		str	r4, [sp, #32]
 1638 0012 0994     		str	r4, [sp, #36]
1058:Core/Src/main.c **** 
 1639              		.loc 1 1058 0
 1640 0014 0094     		str	r4, [sp]
ARM GAS  /tmp/ccvLOER3.s 			page 62


 1641 0016 0194     		str	r4, [sp, #4]
 1642 0018 0294     		str	r4, [sp, #8]
 1643 001a 0394     		str	r4, [sp, #12]
 1644 001c 0494     		str	r4, [sp, #16]
 1645 001e 0594     		str	r4, [sp, #20]
 1646 0020 0694     		str	r4, [sp, #24]
1063:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 1647              		.loc 1 1063 0
 1648 0022 154D     		ldr	r5, .L62
 1649 0024 4FF08043 		mov	r3, #1073741824
 1650 0028 2B60     		str	r3, [r5]
1064:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1651              		.loc 1 1064 0
 1652 002a 6C60     		str	r4, [r5, #4]
1065:Core/Src/main.c ****   htim2.Init.Period = 0;
 1653              		.loc 1 1065 0
 1654 002c AC60     		str	r4, [r5, #8]
1066:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1655              		.loc 1 1066 0
 1656 002e EC60     		str	r4, [r5, #12]
1067:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1657              		.loc 1 1067 0
 1658 0030 2C61     		str	r4, [r5, #16]
1068:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1659              		.loc 1 1068 0
 1660 0032 AC61     		str	r4, [r5, #24]
1069:Core/Src/main.c ****   {
 1661              		.loc 1 1069 0
 1662 0034 2846     		mov	r0, r5
 1663 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1664              	.LVL57:
1073:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1665              		.loc 1 1073 0
 1666 003a 4FF48053 		mov	r3, #4096
 1667 003e 0A93     		str	r3, [sp, #40]
1074:Core/Src/main.c ****   {
 1668              		.loc 1 1074 0
 1669 0040 0AA9     		add	r1, sp, #40
 1670 0042 2846     		mov	r0, r5
 1671 0044 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1672              	.LVL58:
1078:Core/Src/main.c ****   {
 1673              		.loc 1 1078 0
 1674 0048 2846     		mov	r0, r5
 1675 004a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1676              	.LVL59:
1082:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1677              		.loc 1 1082 0
 1678 004e 0794     		str	r4, [sp, #28]
1083:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1679              		.loc 1 1083 0
 1680 0050 0994     		str	r4, [sp, #36]
1084:Core/Src/main.c ****   {
 1681              		.loc 1 1084 0
 1682 0052 07A9     		add	r1, sp, #28
 1683 0054 2846     		mov	r0, r5
 1684 0056 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/ccvLOER3.s 			page 63


 1685              	.LVL60:
1088:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1686              		.loc 1 1088 0
 1687 005a 6023     		movs	r3, #96
 1688 005c 0093     		str	r3, [sp]
1089:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1689              		.loc 1 1089 0
 1690 005e 0194     		str	r4, [sp, #4]
1090:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1691              		.loc 1 1090 0
 1692 0060 0294     		str	r4, [sp, #8]
1091:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1693              		.loc 1 1091 0
 1694 0062 0494     		str	r4, [sp, #16]
1092:Core/Src/main.c ****   {
 1695              		.loc 1 1092 0
 1696 0064 2246     		mov	r2, r4
 1697 0066 6946     		mov	r1, sp
 1698 0068 2846     		mov	r0, r5
 1699 006a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1700              	.LVL61:
1099:Core/Src/main.c **** 
 1701              		.loc 1 1099 0
 1702 006e 2846     		mov	r0, r5
 1703 0070 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1704              	.LVL62:
1101:Core/Src/main.c **** 
 1705              		.loc 1 1101 0
 1706 0074 0FB0     		add	sp, sp, #60
 1707              	.LCFI26:
 1708              		.cfi_def_cfa_offset 12
 1709              		@ sp needed
 1710 0076 30BD     		pop	{r4, r5, pc}
 1711              	.L63:
 1712              		.align	2
 1713              	.L62:
 1714 0078 00000000 		.word	htim2
 1715              		.cfi_endproc
 1716              	.LFE163:
 1718              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1719              		.align	1
 1720              		.syntax unified
 1721              		.thumb
 1722              		.thumb_func
 1723              		.fpu fpv5-sp-d16
 1725              	MX_TIM3_Init:
 1726              	.LFB164:
1109:Core/Src/main.c **** 
 1727              		.loc 1 1109 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 56
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731 0000 30B5     		push	{r4, r5, lr}
 1732              	.LCFI27:
 1733              		.cfi_def_cfa_offset 12
 1734              		.cfi_offset 4, -12
 1735              		.cfi_offset 5, -8
ARM GAS  /tmp/ccvLOER3.s 			page 64


 1736              		.cfi_offset 14, -4
 1737 0002 8FB0     		sub	sp, sp, #60
 1738              	.LCFI28:
 1739              		.cfi_def_cfa_offset 72
1115:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1740              		.loc 1 1115 0
 1741 0004 0024     		movs	r4, #0
 1742 0006 0A94     		str	r4, [sp, #40]
 1743 0008 0B94     		str	r4, [sp, #44]
 1744 000a 0C94     		str	r4, [sp, #48]
 1745 000c 0D94     		str	r4, [sp, #52]
1116:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1746              		.loc 1 1116 0
 1747 000e 0794     		str	r4, [sp, #28]
 1748 0010 0894     		str	r4, [sp, #32]
 1749 0012 0994     		str	r4, [sp, #36]
1117:Core/Src/main.c **** 
 1750              		.loc 1 1117 0
 1751 0014 0094     		str	r4, [sp]
 1752 0016 0194     		str	r4, [sp, #4]
 1753 0018 0294     		str	r4, [sp, #8]
 1754 001a 0394     		str	r4, [sp, #12]
 1755 001c 0494     		str	r4, [sp, #16]
 1756 001e 0594     		str	r4, [sp, #20]
 1757 0020 0694     		str	r4, [sp, #24]
1122:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 1758              		.loc 1 1122 0
 1759 0022 154D     		ldr	r5, .L66
 1760 0024 154B     		ldr	r3, .L66+4
 1761 0026 2B60     		str	r3, [r5]
1123:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1762              		.loc 1 1123 0
 1763 0028 6C60     		str	r4, [r5, #4]
1124:Core/Src/main.c ****   htim3.Init.Period = 0;
 1764              		.loc 1 1124 0
 1765 002a AC60     		str	r4, [r5, #8]
1125:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1766              		.loc 1 1125 0
 1767 002c EC60     		str	r4, [r5, #12]
1126:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1768              		.loc 1 1126 0
 1769 002e 2C61     		str	r4, [r5, #16]
1127:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1770              		.loc 1 1127 0
 1771 0030 AC61     		str	r4, [r5, #24]
1128:Core/Src/main.c ****   {
 1772              		.loc 1 1128 0
 1773 0032 2846     		mov	r0, r5
 1774 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1775              	.LVL63:
1132:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1776              		.loc 1 1132 0
 1777 0038 4FF48053 		mov	r3, #4096
 1778 003c 0A93     		str	r3, [sp, #40]
1133:Core/Src/main.c ****   {
 1779              		.loc 1 1133 0
 1780 003e 0AA9     		add	r1, sp, #40
ARM GAS  /tmp/ccvLOER3.s 			page 65


 1781 0040 2846     		mov	r0, r5
 1782 0042 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1783              	.LVL64:
1137:Core/Src/main.c ****   {
 1784              		.loc 1 1137 0
 1785 0046 2846     		mov	r0, r5
 1786 0048 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1787              	.LVL65:
1141:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1788              		.loc 1 1141 0
 1789 004c 0794     		str	r4, [sp, #28]
1142:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1790              		.loc 1 1142 0
 1791 004e 0994     		str	r4, [sp, #36]
1143:Core/Src/main.c ****   {
 1792              		.loc 1 1143 0
 1793 0050 07A9     		add	r1, sp, #28
 1794 0052 2846     		mov	r0, r5
 1795 0054 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1796              	.LVL66:
1147:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1797              		.loc 1 1147 0
 1798 0058 6023     		movs	r3, #96
 1799 005a 0093     		str	r3, [sp]
1148:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1800              		.loc 1 1148 0
 1801 005c 0194     		str	r4, [sp, #4]
1149:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1802              		.loc 1 1149 0
 1803 005e 0294     		str	r4, [sp, #8]
1150:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1804              		.loc 1 1150 0
 1805 0060 0494     		str	r4, [sp, #16]
1151:Core/Src/main.c ****   {
 1806              		.loc 1 1151 0
 1807 0062 2246     		mov	r2, r4
 1808 0064 6946     		mov	r1, sp
 1809 0066 2846     		mov	r0, r5
 1810 0068 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1811              	.LVL67:
1158:Core/Src/main.c **** 
 1812              		.loc 1 1158 0
 1813 006c 2846     		mov	r0, r5
 1814 006e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1815              	.LVL68:
1160:Core/Src/main.c **** 
 1816              		.loc 1 1160 0
 1817 0072 0FB0     		add	sp, sp, #60
 1818              	.LCFI29:
 1819              		.cfi_def_cfa_offset 12
 1820              		@ sp needed
 1821 0074 30BD     		pop	{r4, r5, pc}
 1822              	.L67:
 1823 0076 00BF     		.align	2
 1824              	.L66:
 1825 0078 00000000 		.word	htim3
 1826 007c 00040040 		.word	1073742848
ARM GAS  /tmp/ccvLOER3.s 			page 66


 1827              		.cfi_endproc
 1828              	.LFE164:
 1830              		.section	.text.MX_TIM5_Init,"ax",%progbits
 1831              		.align	1
 1832              		.syntax unified
 1833              		.thumb
 1834              		.thumb_func
 1835              		.fpu fpv5-sp-d16
 1837              	MX_TIM5_Init:
 1838              	.LFB165:
1168:Core/Src/main.c **** 
 1839              		.loc 1 1168 0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 56
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 1843 0000 30B5     		push	{r4, r5, lr}
 1844              	.LCFI30:
 1845              		.cfi_def_cfa_offset 12
 1846              		.cfi_offset 4, -12
 1847              		.cfi_offset 5, -8
 1848              		.cfi_offset 14, -4
 1849 0002 8FB0     		sub	sp, sp, #60
 1850              	.LCFI31:
 1851              		.cfi_def_cfa_offset 72
1174:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1852              		.loc 1 1174 0
 1853 0004 0024     		movs	r4, #0
 1854 0006 0A94     		str	r4, [sp, #40]
 1855 0008 0B94     		str	r4, [sp, #44]
 1856 000a 0C94     		str	r4, [sp, #48]
 1857 000c 0D94     		str	r4, [sp, #52]
1175:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1858              		.loc 1 1175 0
 1859 000e 0794     		str	r4, [sp, #28]
 1860 0010 0894     		str	r4, [sp, #32]
 1861 0012 0994     		str	r4, [sp, #36]
1176:Core/Src/main.c **** 
 1862              		.loc 1 1176 0
 1863 0014 0094     		str	r4, [sp]
 1864 0016 0194     		str	r4, [sp, #4]
 1865 0018 0294     		str	r4, [sp, #8]
 1866 001a 0394     		str	r4, [sp, #12]
 1867 001c 0494     		str	r4, [sp, #16]
 1868 001e 0594     		str	r4, [sp, #20]
 1869 0020 0694     		str	r4, [sp, #24]
1181:Core/Src/main.c ****   htim5.Init.Prescaler = 0;
 1870              		.loc 1 1181 0
 1871 0022 154D     		ldr	r5, .L70
 1872 0024 154B     		ldr	r3, .L70+4
 1873 0026 2B60     		str	r3, [r5]
1182:Core/Src/main.c ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 1874              		.loc 1 1182 0
 1875 0028 6C60     		str	r4, [r5, #4]
1183:Core/Src/main.c ****   htim5.Init.Period = 0;
 1876              		.loc 1 1183 0
 1877 002a AC60     		str	r4, [r5, #8]
1184:Core/Src/main.c ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/ccvLOER3.s 			page 67


 1878              		.loc 1 1184 0
 1879 002c EC60     		str	r4, [r5, #12]
1185:Core/Src/main.c ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1880              		.loc 1 1185 0
 1881 002e 2C61     		str	r4, [r5, #16]
1186:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 1882              		.loc 1 1186 0
 1883 0030 AC61     		str	r4, [r5, #24]
1187:Core/Src/main.c ****   {
 1884              		.loc 1 1187 0
 1885 0032 2846     		mov	r0, r5
 1886 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1887              	.LVL69:
1191:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 1888              		.loc 1 1191 0
 1889 0038 4FF48053 		mov	r3, #4096
 1890 003c 0A93     		str	r3, [sp, #40]
1192:Core/Src/main.c ****   {
 1891              		.loc 1 1192 0
 1892 003e 0AA9     		add	r1, sp, #40
 1893 0040 2846     		mov	r0, r5
 1894 0042 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1895              	.LVL70:
1196:Core/Src/main.c ****   {
 1896              		.loc 1 1196 0
 1897 0046 2846     		mov	r0, r5
 1898 0048 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1899              	.LVL71:
1200:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1900              		.loc 1 1200 0
 1901 004c 0794     		str	r4, [sp, #28]
1201:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1902              		.loc 1 1201 0
 1903 004e 0994     		str	r4, [sp, #36]
1202:Core/Src/main.c ****   {
 1904              		.loc 1 1202 0
 1905 0050 07A9     		add	r1, sp, #28
 1906 0052 2846     		mov	r0, r5
 1907 0054 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1908              	.LVL72:
1206:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1909              		.loc 1 1206 0
 1910 0058 6023     		movs	r3, #96
 1911 005a 0093     		str	r3, [sp]
1207:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1912              		.loc 1 1207 0
 1913 005c 0194     		str	r4, [sp, #4]
1208:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1914              		.loc 1 1208 0
 1915 005e 0294     		str	r4, [sp, #8]
1209:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 1916              		.loc 1 1209 0
 1917 0060 0494     		str	r4, [sp, #16]
1210:Core/Src/main.c ****   {
 1918              		.loc 1 1210 0
 1919 0062 0C22     		movs	r2, #12
 1920 0064 6946     		mov	r1, sp
ARM GAS  /tmp/ccvLOER3.s 			page 68


 1921 0066 2846     		mov	r0, r5
 1922 0068 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1923              	.LVL73:
1217:Core/Src/main.c **** 
 1924              		.loc 1 1217 0
 1925 006c 2846     		mov	r0, r5
 1926 006e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1927              	.LVL74:
1219:Core/Src/main.c **** 
 1928              		.loc 1 1219 0
 1929 0072 0FB0     		add	sp, sp, #60
 1930              	.LCFI32:
 1931              		.cfi_def_cfa_offset 12
 1932              		@ sp needed
 1933 0074 30BD     		pop	{r4, r5, pc}
 1934              	.L71:
 1935 0076 00BF     		.align	2
 1936              	.L70:
 1937 0078 00000000 		.word	htim5
 1938 007c 000C0040 		.word	1073744896
 1939              		.cfi_endproc
 1940              	.LFE165:
 1942              		.section	.text.MX_TIM12_Init,"ax",%progbits
 1943              		.align	1
 1944              		.syntax unified
 1945              		.thumb
 1946              		.thumb_func
 1947              		.fpu fpv5-sp-d16
 1949              	MX_TIM12_Init:
 1950              	.LFB167:
1274:Core/Src/main.c **** 
 1951              		.loc 1 1274 0
 1952              		.cfi_startproc
 1953              		@ args = 0, pretend = 0, frame = 32
 1954              		@ frame_needed = 0, uses_anonymous_args = 0
 1955 0000 30B5     		push	{r4, r5, lr}
 1956              	.LCFI33:
 1957              		.cfi_def_cfa_offset 12
 1958              		.cfi_offset 4, -12
 1959              		.cfi_offset 5, -8
 1960              		.cfi_offset 14, -4
 1961 0002 89B0     		sub	sp, sp, #36
 1962              	.LCFI34:
 1963              		.cfi_def_cfa_offset 48
1280:Core/Src/main.c **** 
 1964              		.loc 1 1280 0
 1965 0004 0024     		movs	r4, #0
 1966 0006 0194     		str	r4, [sp, #4]
 1967 0008 0294     		str	r4, [sp, #8]
 1968 000a 0394     		str	r4, [sp, #12]
 1969 000c 0494     		str	r4, [sp, #16]
 1970 000e 0594     		str	r4, [sp, #20]
 1971 0010 0694     		str	r4, [sp, #24]
 1972 0012 0794     		str	r4, [sp, #28]
1285:Core/Src/main.c ****   htim12.Init.Prescaler = 0;
 1973              		.loc 1 1285 0
 1974 0014 0C4D     		ldr	r5, .L74
ARM GAS  /tmp/ccvLOER3.s 			page 69


 1975 0016 0D4B     		ldr	r3, .L74+4
 1976 0018 2B60     		str	r3, [r5]
1286:Core/Src/main.c ****   htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 1977              		.loc 1 1286 0
 1978 001a 6C60     		str	r4, [r5, #4]
1287:Core/Src/main.c ****   htim12.Init.Period = 0;
 1979              		.loc 1 1287 0
 1980 001c AC60     		str	r4, [r5, #8]
1288:Core/Src/main.c ****   htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1981              		.loc 1 1288 0
 1982 001e EC60     		str	r4, [r5, #12]
1289:Core/Src/main.c ****   htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1983              		.loc 1 1289 0
 1984 0020 2C61     		str	r4, [r5, #16]
1290:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 1985              		.loc 1 1290 0
 1986 0022 AC61     		str	r4, [r5, #24]
1291:Core/Src/main.c ****   {
 1987              		.loc 1 1291 0
 1988 0024 2846     		mov	r0, r5
 1989 0026 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1990              	.LVL75:
1295:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1991              		.loc 1 1295 0
 1992 002a 6023     		movs	r3, #96
 1993 002c 0193     		str	r3, [sp, #4]
1296:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1994              		.loc 1 1296 0
 1995 002e 0294     		str	r4, [sp, #8]
1297:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1996              		.loc 1 1297 0
 1997 0030 0394     		str	r4, [sp, #12]
1298:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1998              		.loc 1 1298 0
 1999 0032 0594     		str	r4, [sp, #20]
1299:Core/Src/main.c ****   {
 2000              		.loc 1 1299 0
 2001 0034 2246     		mov	r2, r4
 2002 0036 01A9     		add	r1, sp, #4
 2003 0038 2846     		mov	r0, r5
 2004 003a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 2005              	.LVL76:
1306:Core/Src/main.c **** 
 2006              		.loc 1 1306 0
 2007 003e 2846     		mov	r0, r5
 2008 0040 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 2009              	.LVL77:
1308:Core/Src/main.c **** 
 2010              		.loc 1 1308 0
 2011 0044 09B0     		add	sp, sp, #36
 2012              	.LCFI35:
 2013              		.cfi_def_cfa_offset 12
 2014              		@ sp needed
 2015 0046 30BD     		pop	{r4, r5, pc}
 2016              	.L75:
 2017              		.align	2
 2018              	.L74:
ARM GAS  /tmp/ccvLOER3.s 			page 70


 2019 0048 00000000 		.word	htim12
 2020 004c 00180040 		.word	1073747968
 2021              		.cfi_endproc
 2022              	.LFE167:
 2024              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 2025              		.align	1
 2026              		.syntax unified
 2027              		.thumb
 2028              		.thumb_func
 2029              		.fpu fpv5-sp-d16
 2031              	MX_USART1_UART_Init:
 2032              	.LFB168:
1316:Core/Src/main.c **** 
 2033              		.loc 1 1316 0
 2034              		.cfi_startproc
 2035              		@ args = 0, pretend = 0, frame = 0
 2036              		@ frame_needed = 0, uses_anonymous_args = 0
 2037 0000 08B5     		push	{r3, lr}
 2038              	.LCFI36:
 2039              		.cfi_def_cfa_offset 8
 2040              		.cfi_offset 3, -8
 2041              		.cfi_offset 14, -4
1325:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 2042              		.loc 1 1325 0
 2043 0002 0948     		ldr	r0, .L78
 2044 0004 094B     		ldr	r3, .L78+4
 2045 0006 0360     		str	r3, [r0]
1326:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 2046              		.loc 1 1326 0
 2047 0008 4FF4E133 		mov	r3, #115200
 2048 000c 4360     		str	r3, [r0, #4]
1327:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 2049              		.loc 1 1327 0
 2050 000e 0023     		movs	r3, #0
 2051 0010 8360     		str	r3, [r0, #8]
1328:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 2052              		.loc 1 1328 0
 2053 0012 C360     		str	r3, [r0, #12]
1329:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 2054              		.loc 1 1329 0
 2055 0014 0361     		str	r3, [r0, #16]
1330:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 2056              		.loc 1 1330 0
 2057 0016 0C22     		movs	r2, #12
 2058 0018 4261     		str	r2, [r0, #20]
1331:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 2059              		.loc 1 1331 0
 2060 001a 8361     		str	r3, [r0, #24]
1332:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 2061              		.loc 1 1332 0
 2062 001c C361     		str	r3, [r0, #28]
1333:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 2063              		.loc 1 1333 0
 2064 001e 0362     		str	r3, [r0, #32]
1334:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 2065              		.loc 1 1334 0
 2066 0020 4362     		str	r3, [r0, #36]
ARM GAS  /tmp/ccvLOER3.s 			page 71


1335:Core/Src/main.c ****   {
 2067              		.loc 1 1335 0
 2068 0022 FFF7FEFF 		bl	HAL_UART_Init
 2069              	.LVL78:
1343:Core/Src/main.c **** 
 2070              		.loc 1 1343 0
 2071 0026 08BD     		pop	{r3, pc}
 2072              	.L79:
 2073              		.align	2
 2074              	.L78:
 2075 0028 00000000 		.word	huart1
 2076 002c 00100140 		.word	1073811456
 2077              		.cfi_endproc
 2078              	.LFE168:
 2080              		.section	.text.MX_USART6_UART_Init,"ax",%progbits
 2081              		.align	1
 2082              		.syntax unified
 2083              		.thumb
 2084              		.thumb_func
 2085              		.fpu fpv5-sp-d16
 2087              	MX_USART6_UART_Init:
 2088              	.LFB169:
1351:Core/Src/main.c **** 
 2089              		.loc 1 1351 0
 2090              		.cfi_startproc
 2091              		@ args = 0, pretend = 0, frame = 0
 2092              		@ frame_needed = 0, uses_anonymous_args = 0
 2093 0000 08B5     		push	{r3, lr}
 2094              	.LCFI37:
 2095              		.cfi_def_cfa_offset 8
 2096              		.cfi_offset 3, -8
 2097              		.cfi_offset 14, -4
1360:Core/Src/main.c ****   huart6.Init.BaudRate = 115200;
 2098              		.loc 1 1360 0
 2099 0002 0948     		ldr	r0, .L82
 2100 0004 094B     		ldr	r3, .L82+4
 2101 0006 0360     		str	r3, [r0]
1361:Core/Src/main.c ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 2102              		.loc 1 1361 0
 2103 0008 4FF4E133 		mov	r3, #115200
 2104 000c 4360     		str	r3, [r0, #4]
1362:Core/Src/main.c ****   huart6.Init.StopBits = UART_STOPBITS_1;
 2105              		.loc 1 1362 0
 2106 000e 0023     		movs	r3, #0
 2107 0010 8360     		str	r3, [r0, #8]
1363:Core/Src/main.c ****   huart6.Init.Parity = UART_PARITY_NONE;
 2108              		.loc 1 1363 0
 2109 0012 C360     		str	r3, [r0, #12]
1364:Core/Src/main.c ****   huart6.Init.Mode = UART_MODE_TX_RX;
 2110              		.loc 1 1364 0
 2111 0014 0361     		str	r3, [r0, #16]
1365:Core/Src/main.c ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 2112              		.loc 1 1365 0
 2113 0016 0C22     		movs	r2, #12
 2114 0018 4261     		str	r2, [r0, #20]
1366:Core/Src/main.c ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 2115              		.loc 1 1366 0
ARM GAS  /tmp/ccvLOER3.s 			page 72


 2116 001a 8361     		str	r3, [r0, #24]
1367:Core/Src/main.c ****   huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 2117              		.loc 1 1367 0
 2118 001c C361     		str	r3, [r0, #28]
1368:Core/Src/main.c ****   huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 2119              		.loc 1 1368 0
 2120 001e 0362     		str	r3, [r0, #32]
1369:Core/Src/main.c ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 2121              		.loc 1 1369 0
 2122 0020 4362     		str	r3, [r0, #36]
1370:Core/Src/main.c ****   {
 2123              		.loc 1 1370 0
 2124 0022 FFF7FEFF 		bl	HAL_UART_Init
 2125              	.LVL79:
1378:Core/Src/main.c **** 
 2126              		.loc 1 1378 0
 2127 0026 08BD     		pop	{r3, pc}
 2128              	.L83:
 2129              		.align	2
 2130              	.L82:
 2131 0028 00000000 		.word	huart6
 2132 002c 00140140 		.word	1073812480
 2133              		.cfi_endproc
 2134              	.LFE169:
 2136              		.section	.text.MX_DMA2D_Init,"ax",%progbits
 2137              		.align	1
 2138              		.syntax unified
 2139              		.thumb
 2140              		.thumb_func
 2141              		.fpu fpv5-sp-d16
 2143              	MX_DMA2D_Init:
 2144              	.LFB151:
 430:Core/Src/main.c **** 
 2145              		.loc 1 430 0
 2146              		.cfi_startproc
 2147              		@ args = 0, pretend = 0, frame = 0
 2148              		@ frame_needed = 0, uses_anonymous_args = 0
 2149 0000 10B5     		push	{r4, lr}
 2150              	.LCFI38:
 2151              		.cfi_def_cfa_offset 8
 2152              		.cfi_offset 4, -8
 2153              		.cfi_offset 14, -4
 439:Core/Src/main.c ****   hdma2d.Init.Mode = DMA2D_M2M;
 2154              		.loc 1 439 0
 2155 0002 094C     		ldr	r4, .L86
 2156 0004 094B     		ldr	r3, .L86+4
 2157 0006 2360     		str	r3, [r4]
 440:Core/Src/main.c ****   hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 2158              		.loc 1 440 0
 2159 0008 0023     		movs	r3, #0
 2160 000a 6360     		str	r3, [r4, #4]
 441:Core/Src/main.c ****   hdma2d.Init.OutputOffset = 0;
 2161              		.loc 1 441 0
 2162 000c A360     		str	r3, [r4, #8]
 442:Core/Src/main.c ****   hdma2d.LayerCfg[1].InputOffset = 0;
 2163              		.loc 1 442 0
 2164 000e E360     		str	r3, [r4, #12]
ARM GAS  /tmp/ccvLOER3.s 			page 73


 443:Core/Src/main.c ****   hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 2165              		.loc 1 443 0
 2166 0010 A362     		str	r3, [r4, #40]
 444:Core/Src/main.c ****   hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 2167              		.loc 1 444 0
 2168 0012 E362     		str	r3, [r4, #44]
 445:Core/Src/main.c ****   hdma2d.LayerCfg[1].InputAlpha = 0;
 2169              		.loc 1 445 0
 2170 0014 2363     		str	r3, [r4, #48]
 446:Core/Src/main.c ****   if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 2171              		.loc 1 446 0
 2172 0016 6363     		str	r3, [r4, #52]
 447:Core/Src/main.c ****   {
 2173              		.loc 1 447 0
 2174 0018 2046     		mov	r0, r4
 2175 001a FFF7FEFF 		bl	HAL_DMA2D_Init
 2176              	.LVL80:
 451:Core/Src/main.c ****   {
 2177              		.loc 1 451 0
 2178 001e 0121     		movs	r1, #1
 2179 0020 2046     		mov	r0, r4
 2180 0022 FFF7FEFF 		bl	HAL_DMA2D_ConfigLayer
 2181              	.LVL81:
 459:Core/Src/main.c **** 
 2182              		.loc 1 459 0
 2183 0026 10BD     		pop	{r4, pc}
 2184              	.L87:
 2185              		.align	2
 2186              	.L86:
 2187 0028 00000000 		.word	hdma2d
 2188 002c 00B00240 		.word	1073917952
 2189              		.cfi_endproc
 2190              	.LFE151:
 2192              		.section	.text.MX_FMC_Init,"ax",%progbits
 2193              		.align	1
 2194              		.syntax unified
 2195              		.thumb
 2196              		.thumb_func
 2197              		.fpu fpv5-sp-d16
 2199              	MX_FMC_Init:
 2200              	.LFB170:
1382:Core/Src/main.c **** 
 2201              		.loc 1 1382 0
 2202              		.cfi_startproc
 2203              		@ args = 0, pretend = 0, frame = 32
 2204              		@ frame_needed = 0, uses_anonymous_args = 0
 2205 0000 00B5     		push	{lr}
 2206              	.LCFI39:
 2207              		.cfi_def_cfa_offset 4
 2208              		.cfi_offset 14, -4
 2209 0002 89B0     		sub	sp, sp, #36
 2210              	.LCFI40:
 2211              		.cfi_def_cfa_offset 40
1396:Core/Src/main.c ****   /* hsdram1.Init */
 2212              		.loc 1 1396 0
 2213 0004 1348     		ldr	r0, .L90
 2214 0006 144B     		ldr	r3, .L90+4
ARM GAS  /tmp/ccvLOER3.s 			page 74


 2215 0008 0360     		str	r3, [r0]
1398:Core/Src/main.c ****   hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 2216              		.loc 1 1398 0
 2217 000a 0023     		movs	r3, #0
 2218 000c 4360     		str	r3, [r0, #4]
1399:Core/Src/main.c ****   hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 2219              		.loc 1 1399 0
 2220 000e 8360     		str	r3, [r0, #8]
1400:Core/Src/main.c ****   hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 2221              		.loc 1 1400 0
 2222 0010 0421     		movs	r1, #4
 2223 0012 C160     		str	r1, [r0, #12]
1401:Core/Src/main.c ****   hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 2224              		.loc 1 1401 0
 2225 0014 1022     		movs	r2, #16
 2226 0016 0261     		str	r2, [r0, #16]
1402:Core/Src/main.c ****   hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 2227              		.loc 1 1402 0
 2228 0018 4022     		movs	r2, #64
 2229 001a 4261     		str	r2, [r0, #20]
1403:Core/Src/main.c ****   hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 2230              		.loc 1 1403 0
 2231 001c 4FF4C072 		mov	r2, #384
 2232 0020 8261     		str	r2, [r0, #24]
1404:Core/Src/main.c ****   hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 2233              		.loc 1 1404 0
 2234 0022 C361     		str	r3, [r0, #28]
1405:Core/Src/main.c ****   hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 2235              		.loc 1 1405 0
 2236 0024 4FF40062 		mov	r2, #2048
 2237 0028 0262     		str	r2, [r0, #32]
1406:Core/Src/main.c ****   hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 2238              		.loc 1 1406 0
 2239 002a 4FF48052 		mov	r2, #4096
 2240 002e 4262     		str	r2, [r0, #36]
1407:Core/Src/main.c ****   /* SdramTiming */
 2241              		.loc 1 1407 0
 2242 0030 8362     		str	r3, [r0, #40]
1409:Core/Src/main.c ****   SdramTiming.ExitSelfRefreshDelay = 7;
 2243              		.loc 1 1409 0
 2244 0032 0223     		movs	r3, #2
 2245 0034 0193     		str	r3, [sp, #4]
1410:Core/Src/main.c ****   SdramTiming.SelfRefreshTime = 4;
 2246              		.loc 1 1410 0
 2247 0036 0722     		movs	r2, #7
 2248 0038 0292     		str	r2, [sp, #8]
1411:Core/Src/main.c ****   SdramTiming.RowCycleDelay = 7;
 2249              		.loc 1 1411 0
 2250 003a 0391     		str	r1, [sp, #12]
1412:Core/Src/main.c ****   SdramTiming.WriteRecoveryTime = 3;
 2251              		.loc 1 1412 0
 2252 003c 0492     		str	r2, [sp, #16]
1413:Core/Src/main.c ****   SdramTiming.RPDelay = 2;
 2253              		.loc 1 1413 0
 2254 003e 0322     		movs	r2, #3
 2255 0040 0592     		str	r2, [sp, #20]
1414:Core/Src/main.c ****   SdramTiming.RCDDelay = 2;
ARM GAS  /tmp/ccvLOER3.s 			page 75


 2256              		.loc 1 1414 0
 2257 0042 0693     		str	r3, [sp, #24]
1415:Core/Src/main.c **** 
 2258              		.loc 1 1415 0
 2259 0044 0793     		str	r3, [sp, #28]
1417:Core/Src/main.c ****   {
 2260              		.loc 1 1417 0
 2261 0046 6944     		add	r1, sp, r1
 2262 0048 FFF7FEFF 		bl	HAL_SDRAM_Init
 2263              	.LVL82:
1425:Core/Src/main.c **** 
 2264              		.loc 1 1425 0
 2265 004c 09B0     		add	sp, sp, #36
 2266              	.LCFI41:
 2267              		.cfi_def_cfa_offset 4
 2268              		@ sp needed
 2269 004e 5DF804FB 		ldr	pc, [sp], #4
 2270              	.L91:
 2271 0052 00BF     		.align	2
 2272              	.L90:
 2273 0054 00000000 		.word	hsdram1
 2274 0058 400100A0 		.word	-1610612416
 2275              		.cfi_endproc
 2276              	.LFE170:
 2278              		.section	.text.MX_LTDC_Init,"ax",%progbits
 2279              		.align	1
 2280              		.syntax unified
 2281              		.thumb
 2282              		.thumb_func
 2283              		.fpu fpv5-sp-d16
 2285              	MX_LTDC_Init:
 2286              	.LFB155:
 601:Core/Src/main.c **** 
 2287              		.loc 1 601 0
 2288              		.cfi_startproc
 2289              		@ args = 0, pretend = 0, frame = 56
 2290              		@ frame_needed = 0, uses_anonymous_args = 0
 2291 0000 30B5     		push	{r4, r5, lr}
 2292              	.LCFI42:
 2293              		.cfi_def_cfa_offset 12
 2294              		.cfi_offset 4, -12
 2295              		.cfi_offset 5, -8
 2296              		.cfi_offset 14, -4
 2297 0002 8FB0     		sub	sp, sp, #60
 2298              	.LCFI43:
 2299              		.cfi_def_cfa_offset 72
 607:Core/Src/main.c **** 
 2300              		.loc 1 607 0
 2301 0004 3422     		movs	r2, #52
 2302 0006 0021     		movs	r1, #0
 2303 0008 01A8     		add	r0, sp, #4
 2304 000a FFF7FEFF 		bl	memset
 2305              	.LVL83:
 612:Core/Src/main.c ****   hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 2306              		.loc 1 612 0
 2307 000e 244C     		ldr	r4, .L94
 2308 0010 244B     		ldr	r3, .L94+4
ARM GAS  /tmp/ccvLOER3.s 			page 76


 2309 0012 2360     		str	r3, [r4]
 613:Core/Src/main.c ****   hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 2310              		.loc 1 613 0
 2311 0014 0025     		movs	r5, #0
 2312 0016 6560     		str	r5, [r4, #4]
 614:Core/Src/main.c ****   hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 2313              		.loc 1 614 0
 2314 0018 A560     		str	r5, [r4, #8]
 615:Core/Src/main.c ****   hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 2315              		.loc 1 615 0
 2316 001a E560     		str	r5, [r4, #12]
 616:Core/Src/main.c ****   hltdc.Init.HorizontalSync = 40;
 2317              		.loc 1 616 0
 2318 001c 2561     		str	r5, [r4, #16]
 617:Core/Src/main.c ****   hltdc.Init.VerticalSync = 9;
 2319              		.loc 1 617 0
 2320 001e 2823     		movs	r3, #40
 2321 0020 6361     		str	r3, [r4, #20]
 618:Core/Src/main.c ****   hltdc.Init.AccumulatedHBP = 53;
 2322              		.loc 1 618 0
 2323 0022 0923     		movs	r3, #9
 2324 0024 A361     		str	r3, [r4, #24]
 619:Core/Src/main.c ****   hltdc.Init.AccumulatedVBP = 11;
 2325              		.loc 1 619 0
 2326 0026 3523     		movs	r3, #53
 2327 0028 E361     		str	r3, [r4, #28]
 620:Core/Src/main.c ****   hltdc.Init.AccumulatedActiveW = 533;
 2328              		.loc 1 620 0
 2329 002a 0B23     		movs	r3, #11
 2330 002c 2362     		str	r3, [r4, #32]
 621:Core/Src/main.c ****   hltdc.Init.AccumulatedActiveH = 283;
 2331              		.loc 1 621 0
 2332 002e 40F21523 		movw	r3, #533
 2333 0032 6362     		str	r3, [r4, #36]
 622:Core/Src/main.c ****   hltdc.Init.TotalWidth = 565;
 2334              		.loc 1 622 0
 2335 0034 40F21B13 		movw	r3, #283
 2336 0038 A362     		str	r3, [r4, #40]
 623:Core/Src/main.c ****   hltdc.Init.TotalHeigh = 285;
 2337              		.loc 1 623 0
 2338 003a 40F23523 		movw	r3, #565
 2339 003e E362     		str	r3, [r4, #44]
 624:Core/Src/main.c ****   hltdc.Init.Backcolor.Blue = 0;
 2340              		.loc 1 624 0
 2341 0040 40F21D13 		movw	r3, #285
 2342 0044 2363     		str	r3, [r4, #48]
 625:Core/Src/main.c ****   hltdc.Init.Backcolor.Green = 0;
 2343              		.loc 1 625 0
 2344 0046 84F83450 		strb	r5, [r4, #52]
 626:Core/Src/main.c ****   hltdc.Init.Backcolor.Red = 0;
 2345              		.loc 1 626 0
 2346 004a 84F83550 		strb	r5, [r4, #53]
 627:Core/Src/main.c ****   if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 2347              		.loc 1 627 0
 2348 004e 84F83650 		strb	r5, [r4, #54]
 628:Core/Src/main.c ****   {
 2349              		.loc 1 628 0
ARM GAS  /tmp/ccvLOER3.s 			page 77


 2350 0052 2046     		mov	r0, r4
 2351 0054 FFF7FEFF 		bl	HAL_LTDC_Init
 2352              	.LVL84:
 632:Core/Src/main.c ****   pLayerCfg.WindowX1 = 480;
 2353              		.loc 1 632 0
 2354 0058 0195     		str	r5, [sp, #4]
 633:Core/Src/main.c ****   pLayerCfg.WindowY0 = 0;
 2355              		.loc 1 633 0
 2356 005a 4FF4F072 		mov	r2, #480
 2357 005e 0292     		str	r2, [sp, #8]
 634:Core/Src/main.c ****   pLayerCfg.WindowY1 = 272;
 2358              		.loc 1 634 0
 2359 0060 0395     		str	r5, [sp, #12]
 635:Core/Src/main.c ****   pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 2360              		.loc 1 635 0
 2361 0062 4FF48873 		mov	r3, #272
 2362 0066 0493     		str	r3, [sp, #16]
 636:Core/Src/main.c ****   pLayerCfg.Alpha = 255;
 2363              		.loc 1 636 0
 2364 0068 0221     		movs	r1, #2
 2365 006a 0591     		str	r1, [sp, #20]
 637:Core/Src/main.c ****   pLayerCfg.Alpha0 = 0;
 2366              		.loc 1 637 0
 2367 006c FF21     		movs	r1, #255
 2368 006e 0691     		str	r1, [sp, #24]
 638:Core/Src/main.c ****   pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 2369              		.loc 1 638 0
 2370 0070 0795     		str	r5, [sp, #28]
 639:Core/Src/main.c ****   pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 2371              		.loc 1 639 0
 2372 0072 4FF4C061 		mov	r1, #1536
 2373 0076 0891     		str	r1, [sp, #32]
 640:Core/Src/main.c ****   pLayerCfg.FBStartAdress = 0xC0000000;
 2374              		.loc 1 640 0
 2375 0078 0721     		movs	r1, #7
 2376 007a 0991     		str	r1, [sp, #36]
 641:Core/Src/main.c ****   pLayerCfg.ImageWidth = 480;
 2377              		.loc 1 641 0
 2378 007c 4FF04041 		mov	r1, #-1073741824
 2379 0080 0A91     		str	r1, [sp, #40]
 642:Core/Src/main.c ****   pLayerCfg.ImageHeight = 272;
 2380              		.loc 1 642 0
 2381 0082 0B92     		str	r2, [sp, #44]
 643:Core/Src/main.c ****   pLayerCfg.Backcolor.Blue = 0;
 2382              		.loc 1 643 0
 2383 0084 0C93     		str	r3, [sp, #48]
 644:Core/Src/main.c ****   pLayerCfg.Backcolor.Green = 0;
 2384              		.loc 1 644 0
 2385 0086 8DF83450 		strb	r5, [sp, #52]
 645:Core/Src/main.c ****   pLayerCfg.Backcolor.Red = 0;
 2386              		.loc 1 645 0
 2387 008a 8DF83550 		strb	r5, [sp, #53]
 646:Core/Src/main.c ****   if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 2388              		.loc 1 646 0
 2389 008e 8DF83650 		strb	r5, [sp, #54]
 647:Core/Src/main.c ****   {
 2390              		.loc 1 647 0
ARM GAS  /tmp/ccvLOER3.s 			page 78


 2391 0092 2A46     		mov	r2, r5
 2392 0094 01A9     		add	r1, sp, #4
 2393 0096 2046     		mov	r0, r4
 2394 0098 FFF7FEFF 		bl	HAL_LTDC_ConfigLayer
 2395              	.LVL85:
 655:Core/Src/main.c **** 
 2396              		.loc 1 655 0
 2397 009c 0FB0     		add	sp, sp, #60
 2398              	.LCFI44:
 2399              		.cfi_def_cfa_offset 12
 2400              		@ sp needed
 2401 009e 30BD     		pop	{r4, r5, pc}
 2402              	.L95:
 2403              		.align	2
 2404              	.L94:
 2405 00a0 00000000 		.word	hltdc
 2406 00a4 00680140 		.word	1073833984
 2407              		.cfi_endproc
 2408              	.LFE155:
 2410              		.section	.text.StartDefaultTask,"ax",%progbits
 2411              		.align	1
 2412              		.global	StartDefaultTask
 2413              		.syntax unified
 2414              		.thumb
 2415              		.thumb_func
 2416              		.fpu fpv5-sp-d16
 2418              	StartDefaultTask:
 2419              	.LFB172:
1585:Core/Src/main.c **** 
1586:Core/Src/main.c **** /* USER CODE BEGIN 4 */
1587:Core/Src/main.c **** 
1588:Core/Src/main.c **** /* USER CODE END 4 */
1589:Core/Src/main.c **** 
1590:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
1591:Core/Src/main.c **** /**
1592:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
1593:Core/Src/main.c ****   * @param  argument: Not used 
1594:Core/Src/main.c ****   * @retval None
1595:Core/Src/main.c ****   */
1596:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
1597:Core/Src/main.c **** void StartDefaultTask(void const * argument)
1598:Core/Src/main.c **** {
 2420              		.loc 1 1598 0
 2421              		.cfi_startproc
 2422              		@ Volatile: function does not return.
 2423              		@ args = 0, pretend = 0, frame = 0
 2424              		@ frame_needed = 0, uses_anonymous_args = 0
 2425              	.LVL86:
 2426 0000 08B5     		push	{r3, lr}
 2427              	.LCFI45:
 2428              		.cfi_def_cfa_offset 8
 2429              		.cfi_offset 3, -8
 2430              		.cfi_offset 14, -4
1599:Core/Src/main.c ****   /* init code for USB_HOST */
1600:Core/Src/main.c ****   MX_USB_HOST_Init();
 2431              		.loc 1 1600 0
 2432 0002 FFF7FEFF 		bl	MX_USB_HOST_Init
ARM GAS  /tmp/ccvLOER3.s 			page 79


 2433              	.LVL87:
 2434              	.L97:
1601:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
1602:Core/Src/main.c ****   /* Infinite loop */
1603:Core/Src/main.c ****   for(;;)
1604:Core/Src/main.c ****   {
1605:Core/Src/main.c ****     osDelay(1);
 2435              		.loc 1 1605 0 discriminator 1
 2436 0006 0120     		movs	r0, #1
 2437 0008 FFF7FEFF 		bl	osDelay
 2438              	.LVL88:
 2439 000c FBE7     		b	.L97
 2440              		.cfi_endproc
 2441              	.LFE172:
 2443              		.section	.text.SystemClock_Config,"ax",%progbits
 2444              		.align	1
 2445              		.global	SystemClock_Config
 2446              		.syntax unified
 2447              		.thumb
 2448              		.thumb_func
 2449              		.fpu fpv5-sp-d16
 2451              	SystemClock_Config:
 2452              	.LFB147:
 230:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2453              		.loc 1 230 0
 2454              		.cfi_startproc
 2455              		@ args = 0, pretend = 0, frame = 208
 2456              		@ frame_needed = 0, uses_anonymous_args = 0
 2457 0000 70B5     		push	{r4, r5, r6, lr}
 2458              	.LCFI46:
 2459              		.cfi_def_cfa_offset 16
 2460              		.cfi_offset 4, -16
 2461              		.cfi_offset 5, -12
 2462              		.cfi_offset 6, -8
 2463              		.cfi_offset 14, -4
 2464 0002 B4B0     		sub	sp, sp, #208
 2465              	.LCFI47:
 2466              		.cfi_def_cfa_offset 224
 231:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2467              		.loc 1 231 0
 2468 0004 3022     		movs	r2, #48
 2469 0006 0021     		movs	r1, #0
 2470 0008 28A8     		add	r0, sp, #160
 2471 000a FFF7FEFF 		bl	memset
 2472              	.LVL89:
 232:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 2473              		.loc 1 232 0
 2474 000e 0024     		movs	r4, #0
 2475 0010 2394     		str	r4, [sp, #140]
 2476 0012 2494     		str	r4, [sp, #144]
 2477 0014 2594     		str	r4, [sp, #148]
 2478 0016 2694     		str	r4, [sp, #152]
 2479 0018 2794     		str	r4, [sp, #156]
 233:Core/Src/main.c **** 
 2480              		.loc 1 233 0
 2481 001a 8422     		movs	r2, #132
 2482 001c 2146     		mov	r1, r4
ARM GAS  /tmp/ccvLOER3.s 			page 80


 2483 001e 02A8     		add	r0, sp, #8
 2484 0020 FFF7FEFF 		bl	memset
 2485              	.LVL90:
 237:Core/Src/main.c ****   /** Configure the main internal regulator output voltage 
 2486              		.loc 1 237 0
 2487 0024 FFF7FEFF 		bl	HAL_PWR_EnableBkUpAccess
 2488              	.LVL91:
 2489              	.LBB13:
 240:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2490              		.loc 1 240 0
 2491 0028 2F4B     		ldr	r3, .L101
 2492 002a 1A6C     		ldr	r2, [r3, #64]
 2493 002c 42F08052 		orr	r2, r2, #268435456
 2494 0030 1A64     		str	r2, [r3, #64]
 2495 0032 1B6C     		ldr	r3, [r3, #64]
 2496 0034 03F08053 		and	r3, r3, #268435456
 2497 0038 0093     		str	r3, [sp]
 2498 003a 009B     		ldr	r3, [sp]
 2499              	.LBE13:
 2500              	.LBB14:
 241:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB busses clocks 
 2501              		.loc 1 241 0
 2502 003c 2B4B     		ldr	r3, .L101+4
 2503 003e 1A68     		ldr	r2, [r3]
 2504 0040 42F44042 		orr	r2, r2, #49152
 2505 0044 1A60     		str	r2, [r3]
 2506 0046 1B68     		ldr	r3, [r3]
 2507 0048 03F44043 		and	r3, r3, #49152
 2508 004c 0193     		str	r3, [sp, #4]
 2509 004e 019B     		ldr	r3, [sp, #4]
 2510              	.LBE14:
 244:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 2511              		.loc 1 244 0
 2512 0050 0923     		movs	r3, #9
 2513 0052 2893     		str	r3, [sp, #160]
 245:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 2514              		.loc 1 245 0
 2515 0054 4FF48032 		mov	r2, #65536
 2516 0058 2992     		str	r2, [sp, #164]
 246:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2517              		.loc 1 246 0
 2518 005a 0126     		movs	r6, #1
 2519 005c 2D96     		str	r6, [sp, #180]
 247:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2520              		.loc 1 247 0
 2521 005e 0225     		movs	r5, #2
 2522 0060 2E95     		str	r5, [sp, #184]
 248:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 2523              		.loc 1 248 0
 2524 0062 4FF48002 		mov	r2, #4194304
 2525 0066 2F92     		str	r2, [sp, #188]
 249:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 400;
 2526              		.loc 1 249 0
 2527 0068 1922     		movs	r2, #25
 2528 006a 3092     		str	r2, [sp, #192]
 250:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2529              		.loc 1 250 0
ARM GAS  /tmp/ccvLOER3.s 			page 81


 2530 006c 4FF4C872 		mov	r2, #400
 2531 0070 3192     		str	r2, [sp, #196]
 251:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 2532              		.loc 1 251 0
 2533 0072 3295     		str	r5, [sp, #200]
 252:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2534              		.loc 1 252 0
 2535 0074 3393     		str	r3, [sp, #204]
 253:Core/Src/main.c ****   {
 2536              		.loc 1 253 0
 2537 0076 28A8     		add	r0, sp, #160
 2538 0078 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2539              	.LVL92:
 259:Core/Src/main.c ****   {
 2540              		.loc 1 259 0
 2541 007c FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 2542              	.LVL93:
 265:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2543              		.loc 1 265 0
 2544 0080 0F23     		movs	r3, #15
 2545 0082 2393     		str	r3, [sp, #140]
 267:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2546              		.loc 1 267 0
 2547 0084 2495     		str	r5, [sp, #144]
 268:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 2548              		.loc 1 268 0
 2549 0086 2594     		str	r4, [sp, #148]
 269:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 2550              		.loc 1 269 0
 2551 0088 4FF4A053 		mov	r3, #5120
 2552 008c 2693     		str	r3, [sp, #152]
 270:Core/Src/main.c **** 
 2553              		.loc 1 270 0
 2554 008e 4FF48053 		mov	r3, #4096
 2555 0092 2793     		str	r3, [sp, #156]
 272:Core/Src/main.c ****   {
 2556              		.loc 1 272 0
 2557 0094 0621     		movs	r1, #6
 2558 0096 23A8     		add	r0, sp, #140
 2559 0098 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2560              	.LVL94:
 276:Core/Src/main.c ****                               |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 2561              		.loc 1 276 0
 2562 009c 144B     		ldr	r3, .L101+8
 2563 009e 0293     		str	r3, [sp, #8]
 281:Core/Src/main.c ****   PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 2564              		.loc 1 281 0
 2565 00a0 6423     		movs	r3, #100
 2566 00a2 0393     		str	r3, [sp, #12]
 282:Core/Src/main.c ****   PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 2567              		.loc 1 282 0
 2568 00a4 0695     		str	r5, [sp, #24]
 283:Core/Src/main.c ****   PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 2569              		.loc 1 283 0
 2570 00a6 0495     		str	r5, [sp, #16]
 284:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 2571              		.loc 1 284 0
ARM GAS  /tmp/ccvLOER3.s 			page 82


 2572 00a8 0595     		str	r5, [sp, #20]
 285:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 2573              		.loc 1 285 0
 2574 00aa 4FF4C073 		mov	r3, #384
 2575 00ae 0793     		str	r3, [sp, #28]
 286:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 2576              		.loc 1 286 0
 2577 00b0 0523     		movs	r3, #5
 2578 00b2 0993     		str	r3, [sp, #36]
 287:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 2579              		.loc 1 287 0
 2580 00b4 0895     		str	r5, [sp, #32]
 288:Core/Src/main.c ****   PeriphClkInitStruct.PLLI2SDivQ = 1;
 2581              		.loc 1 288 0
 2582 00b6 0323     		movs	r3, #3
 2583 00b8 0A93     		str	r3, [sp, #40]
 289:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAIDivQ = 1;
 2584              		.loc 1 289 0
 2585 00ba 0B96     		str	r6, [sp, #44]
 290:Core/Src/main.c ****   PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 2586              		.loc 1 290 0
 2587 00bc 0C96     		str	r6, [sp, #48]
 291:Core/Src/main.c ****   PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 2588              		.loc 1 291 0
 2589 00be 4FF40033 		mov	r3, #131072
 2590 00c2 0D93     		str	r3, [sp, #52]
 292:Core/Src/main.c ****   PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 2591              		.loc 1 292 0
 2592 00c4 4FF40073 		mov	r3, #512
 2593 00c8 0E93     		str	r3, [sp, #56]
 293:Core/Src/main.c ****   PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 2594              		.loc 1 293 0
 2595 00ca 1294     		str	r4, [sp, #72]
 294:Core/Src/main.c ****   PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 2596              		.loc 1 294 0
 2597 00cc 1394     		str	r4, [sp, #76]
 295:Core/Src/main.c ****   PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 2598              		.loc 1 295 0
 2599 00ce 1894     		str	r4, [sp, #96]
 296:Core/Src/main.c ****   PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 2600              		.loc 1 296 0
 2601 00d0 1B94     		str	r4, [sp, #108]
 297:Core/Src/main.c ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 2602              		.loc 1 297 0
 2603 00d2 1D94     		str	r4, [sp, #116]
 298:Core/Src/main.c ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 2604              		.loc 1 298 0
 2605 00d4 4FF00063 		mov	r3, #134217728
 2606 00d8 2193     		str	r3, [sp, #132]
 299:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 2607              		.loc 1 299 0
 2608 00da 2294     		str	r4, [sp, #136]
 300:Core/Src/main.c ****   {
 2609              		.loc 1 300 0
 2610 00dc 02A8     		add	r0, sp, #8
 2611 00de FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 2612              	.LVL95:
ARM GAS  /tmp/ccvLOER3.s 			page 83


 304:Core/Src/main.c **** 
 2613              		.loc 1 304 0
 2614 00e2 34B0     		add	sp, sp, #208
 2615              	.LCFI48:
 2616              		.cfi_def_cfa_offset 16
 2617              		@ sp needed
 2618 00e4 70BD     		pop	{r4, r5, r6, pc}
 2619              	.L102:
 2620 00e6 00BF     		.align	2
 2621              	.L101:
 2622 00e8 00380240 		.word	1073887232
 2623 00ec 00700040 		.word	1073770496
 2624 00f0 6848B101 		.word	28395624
 2625              		.cfi_endproc
 2626              	.LFE147:
 2628              		.section	.text.main,"ax",%progbits
 2629              		.align	1
 2630              		.global	main
 2631              		.syntax unified
 2632              		.thumb
 2633              		.thumb_func
 2634              		.fpu fpv5-sp-d16
 2636              	main:
 2637              	.LFB146:
 134:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 2638              		.loc 1 134 0
 2639              		.cfi_startproc
 2640              		@ Volatile: function does not return.
 2641              		@ args = 0, pretend = 0, frame = 32
 2642              		@ frame_needed = 0, uses_anonymous_args = 0
 2643 0000 00B5     		push	{lr}
 2644              	.LCFI49:
 2645              		.cfi_def_cfa_offset 4
 2646              		.cfi_offset 14, -4
 2647 0002 89B0     		sub	sp, sp, #36
 2648              	.LCFI50:
 2649              		.cfi_def_cfa_offset 40
 142:Core/Src/main.c **** 
 2650              		.loc 1 142 0
 2651 0004 FFF7FEFF 		bl	HAL_Init
 2652              	.LVL96:
 149:Core/Src/main.c **** 
 2653              		.loc 1 149 0
 2654 0008 FFF7FEFF 		bl	SystemClock_Config
 2655              	.LVL97:
 156:Core/Src/main.c ****   MX_ADC3_Init();
 2656              		.loc 1 156 0
 2657 000c FFF7FEFF 		bl	MX_GPIO_Init
 2658              	.LVL98:
 157:Core/Src/main.c ****   MX_CRC_Init();
 2659              		.loc 1 157 0
 2660 0010 FFF7FEFF 		bl	MX_ADC3_Init
 2661              	.LVL99:
 158:Core/Src/main.c ****   MX_DCMI_Init();
 2662              		.loc 1 158 0
 2663 0014 FFF7FEFF 		bl	MX_CRC_Init
 2664              	.LVL100:
ARM GAS  /tmp/ccvLOER3.s 			page 84


 159:Core/Src/main.c ****   MX_ETH_Init();
 2665              		.loc 1 159 0
 2666 0018 FFF7FEFF 		bl	MX_DCMI_Init
 2667              	.LVL101:
 160:Core/Src/main.c ****   MX_I2C1_Init();
 2668              		.loc 1 160 0
 2669 001c FFF7FEFF 		bl	MX_ETH_Init
 2670              	.LVL102:
 161:Core/Src/main.c ****   MX_I2C3_Init();
 2671              		.loc 1 161 0
 2672 0020 FFF7FEFF 		bl	MX_I2C1_Init
 2673              	.LVL103:
 162:Core/Src/main.c ****   MX_QUADSPI_Init();
 2674              		.loc 1 162 0
 2675 0024 FFF7FEFF 		bl	MX_I2C3_Init
 2676              	.LVL104:
 163:Core/Src/main.c ****   MX_RTC_Init();
 2677              		.loc 1 163 0
 2678 0028 FFF7FEFF 		bl	MX_QUADSPI_Init
 2679              	.LVL105:
 164:Core/Src/main.c ****   MX_SAI2_Init();
 2680              		.loc 1 164 0
 2681 002c FFF7FEFF 		bl	MX_RTC_Init
 2682              	.LVL106:
 165:Core/Src/main.c ****   MX_SDMMC1_SD_Init();
 2683              		.loc 1 165 0
 2684 0030 FFF7FEFF 		bl	MX_SAI2_Init
 2685              	.LVL107:
 166:Core/Src/main.c ****   MX_SPDIFRX_Init();
 2686              		.loc 1 166 0
 2687 0034 FFF7FEFF 		bl	MX_SDMMC1_SD_Init
 2688              	.LVL108:
 167:Core/Src/main.c ****   MX_SPI2_Init();
 2689              		.loc 1 167 0
 2690 0038 FFF7FEFF 		bl	MX_SPDIFRX_Init
 2691              	.LVL109:
 168:Core/Src/main.c ****   MX_TIM1_Init();
 2692              		.loc 1 168 0
 2693 003c FFF7FEFF 		bl	MX_SPI2_Init
 2694              	.LVL110:
 169:Core/Src/main.c ****   MX_TIM2_Init();
 2695              		.loc 1 169 0
 2696 0040 FFF7FEFF 		bl	MX_TIM1_Init
 2697              	.LVL111:
 170:Core/Src/main.c ****   MX_TIM3_Init();
 2698              		.loc 1 170 0
 2699 0044 FFF7FEFF 		bl	MX_TIM2_Init
 2700              	.LVL112:
 171:Core/Src/main.c ****   MX_TIM5_Init();
 2701              		.loc 1 171 0
 2702 0048 FFF7FEFF 		bl	MX_TIM3_Init
 2703              	.LVL113:
 172:Core/Src/main.c ****   MX_TIM8_Init();
 2704              		.loc 1 172 0
 2705 004c FFF7FEFF 		bl	MX_TIM5_Init
 2706              	.LVL114:
 173:Core/Src/main.c ****   MX_TIM12_Init();
ARM GAS  /tmp/ccvLOER3.s 			page 85


 2707              		.loc 1 173 0
 2708 0050 FFF7FEFF 		bl	MX_TIM8_Init
 2709              	.LVL115:
 174:Core/Src/main.c ****   MX_USART1_UART_Init();
 2710              		.loc 1 174 0
 2711 0054 FFF7FEFF 		bl	MX_TIM12_Init
 2712              	.LVL116:
 175:Core/Src/main.c ****   MX_USART6_UART_Init();
 2713              		.loc 1 175 0
 2714 0058 FFF7FEFF 		bl	MX_USART1_UART_Init
 2715              	.LVL117:
 176:Core/Src/main.c ****   MX_FATFS_Init();
 2716              		.loc 1 176 0
 2717 005c FFF7FEFF 		bl	MX_USART6_UART_Init
 2718              	.LVL118:
 177:Core/Src/main.c ****   MX_DMA2D_Init();
 2719              		.loc 1 177 0
 2720 0060 FFF7FEFF 		bl	MX_FATFS_Init
 2721              	.LVL119:
 178:Core/Src/main.c ****   MX_FMC_Init();
 2722              		.loc 1 178 0
 2723 0064 FFF7FEFF 		bl	MX_DMA2D_Init
 2724              	.LVL120:
 179:Core/Src/main.c ****   MX_LTDC_Init();
 2725              		.loc 1 179 0
 2726 0068 FFF7FEFF 		bl	MX_FMC_Init
 2727              	.LVL121:
 180:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2728              		.loc 1 180 0
 2729 006c FFF7FEFF 		bl	MX_LTDC_Init
 2730              	.LVL122:
 203:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 2731              		.loc 1 203 0
 2732 0070 01AC     		add	r4, sp, #4
 2733 0072 084D     		ldr	r5, .L106
 2734 0074 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2735 0076 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2736 0078 95E80700 		ldm	r5, {r0, r1, r2}
 2737 007c 84E80700 		stm	r4, {r0, r1, r2}
 204:Core/Src/main.c **** 
 2738              		.loc 1 204 0
 2739 0080 0021     		movs	r1, #0
 2740 0082 01A8     		add	r0, sp, #4
 2741 0084 FFF7FEFF 		bl	osThreadCreate
 2742              	.LVL123:
 2743 0088 034B     		ldr	r3, .L106+4
 2744 008a 1860     		str	r0, [r3]
 211:Core/Src/main.c ****  
 2745              		.loc 1 211 0
 2746 008c FFF7FEFF 		bl	osKernelStart
 2747              	.LVL124:
 2748              	.L104:
 2749 0090 FEE7     		b	.L104
 2750              	.L107:
 2751 0092 00BF     		.align	2
 2752              	.L106:
 2753 0094 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccvLOER3.s 			page 86


 2754 0098 00000000 		.word	defaultTaskHandle
 2755              		.cfi_endproc
 2756              	.LFE146:
 2758              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 2759              		.align	1
 2760              		.global	HAL_TIM_PeriodElapsedCallback
 2761              		.syntax unified
 2762              		.thumb
 2763              		.thumb_func
 2764              		.fpu fpv5-sp-d16
 2766              	HAL_TIM_PeriodElapsedCallback:
 2767              	.LFB173:
1606:Core/Src/main.c ****   }
1607:Core/Src/main.c ****   /* USER CODE END 5 */ 
1608:Core/Src/main.c **** }
1609:Core/Src/main.c **** 
1610:Core/Src/main.c ****  /**
1611:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
1612:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
1613:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
1614:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
1615:Core/Src/main.c ****   * @param  htim : TIM handle
1616:Core/Src/main.c ****   * @retval None
1617:Core/Src/main.c ****   */
1618:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
1619:Core/Src/main.c **** {
 2768              		.loc 1 1619 0
 2769              		.cfi_startproc
 2770              		@ args = 0, pretend = 0, frame = 0
 2771              		@ frame_needed = 0, uses_anonymous_args = 0
 2772              	.LVL125:
 2773 0000 08B5     		push	{r3, lr}
 2774              	.LCFI51:
 2775              		.cfi_def_cfa_offset 8
 2776              		.cfi_offset 3, -8
 2777              		.cfi_offset 14, -4
1620:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
1621:Core/Src/main.c **** 
1622:Core/Src/main.c ****   /* USER CODE END Callback 0 */
1623:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 2778              		.loc 1 1623 0
 2779 0002 0268     		ldr	r2, [r0]
 2780 0004 034B     		ldr	r3, .L112
 2781 0006 9A42     		cmp	r2, r3
 2782 0008 00D0     		beq	.L111
 2783              	.LVL126:
 2784              	.L108:
1624:Core/Src/main.c ****     HAL_IncTick();
1625:Core/Src/main.c ****   }
1626:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
1627:Core/Src/main.c **** 
1628:Core/Src/main.c ****   /* USER CODE END Callback 1 */
1629:Core/Src/main.c **** }
 2785              		.loc 1 1629 0
 2786 000a 08BD     		pop	{r3, pc}
 2787              	.LVL127:
 2788              	.L111:
ARM GAS  /tmp/ccvLOER3.s 			page 87


1624:Core/Src/main.c ****     HAL_IncTick();
 2789              		.loc 1 1624 0
 2790 000c FFF7FEFF 		bl	HAL_IncTick
 2791              	.LVL128:
 2792              		.loc 1 1629 0
 2793 0010 FBE7     		b	.L108
 2794              	.L113:
 2795 0012 00BF     		.align	2
 2796              	.L112:
 2797 0014 00100040 		.word	1073745920
 2798              		.cfi_endproc
 2799              	.LFE173:
 2801              		.section	.text.Error_Handler,"ax",%progbits
 2802              		.align	1
 2803              		.global	Error_Handler
 2804              		.syntax unified
 2805              		.thumb
 2806              		.thumb_func
 2807              		.fpu fpv5-sp-d16
 2809              	Error_Handler:
 2810              	.LFB174:
1630:Core/Src/main.c **** 
1631:Core/Src/main.c **** /**
1632:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
1633:Core/Src/main.c ****   * @retval None
1634:Core/Src/main.c ****   */
1635:Core/Src/main.c **** void Error_Handler(void)
1636:Core/Src/main.c **** {
 2811              		.loc 1 1636 0
 2812              		.cfi_startproc
 2813              		@ args = 0, pretend = 0, frame = 0
 2814              		@ frame_needed = 0, uses_anonymous_args = 0
 2815              		@ link register save eliminated.
1637:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
1638:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
1639:Core/Src/main.c **** 
1640:Core/Src/main.c ****   /* USER CODE END Error_Handler_Debug */
1641:Core/Src/main.c **** }
 2816              		.loc 1 1641 0
 2817 0000 7047     		bx	lr
 2818              		.cfi_endproc
 2819              	.LFE174:
 2821              		.comm	defaultTaskHandle,4,4
 2822              		.comm	hsdram1,52,4
 2823              		.comm	huart6,128,4
 2824              		.comm	huart1,128,4
 2825              		.comm	htim12,64,4
 2826              		.comm	htim8,64,4
 2827              		.comm	htim5,64,4
 2828              		.comm	htim3,64,4
 2829              		.comm	htim2,64,4
 2830              		.comm	htim1,64,4
 2831              		.comm	hspi2,100,4
 2832              		.comm	hspdif,76,4
 2833              		.comm	hsd1,132,4
 2834              		.comm	hsai_BlockB2,132,4
 2835              		.comm	hsai_BlockA2,132,4
ARM GAS  /tmp/ccvLOER3.s 			page 88


 2836              		.comm	hrtc,32,4
 2837              		.comm	hqspi,76,4
 2838              		.comm	hltdc,168,4
 2839              		.comm	hi2c3,76,4
 2840              		.comm	hi2c1,76,4
 2841              		.comm	heth,72,4
 2842              		.comm	hdma2d,64,4
 2843              		.comm	hdcmi,80,4
 2844              		.comm	hcrc,36,4
 2845              		.comm	hadc3,72,4
 2846              		.section	.rodata
 2847              		.align	2
 2848              		.set	.LANCHOR0,. + 0
 2849              	.LC2:
 2850 0000 00000000 		.word	.LC0
 2851 0004 00000000 		.word	StartDefaultTask
 2852 0008 0000     		.short	0
 2853 000a 0000     		.space	2
 2854 000c 00000000 		.word	0
 2855 0010 00100000 		.word	4096
 2856 0014 00000000 		.word	0
 2857 0018 00000000 		.word	0
 2858              		.section	.rodata.str1.4,"aMS",%progbits,1
 2859              		.align	2
 2860              	.LC0:
 2861 0000 64656661 		.ascii	"defaultTask\000"
 2861      756C7454 
 2861      61736B00 
 2862              		.text
 2863              	.Letext0:
 2864              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2865              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2866              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 2867              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 2868              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 2869              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 2870              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2871              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 2872              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 2873              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 2874              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 2875              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_adc.h"
 2876              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_crc.h"
 2877              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma2d.h"
 2878              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dcmi.h"
 2879              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_eth.h"
 2880              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_fmc.h"
 2881              		.file 19 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sdram.h"
 2882              		.file 20 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_i2c.h"
 2883              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_ltdc.h"
 2884              		.file 22 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_qspi.h"
 2885              		.file 23 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc.h"
 2886              		.file 24 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sai.h"
 2887              		.file 25 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 2888              		.file 26 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 2889              		.file 27 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spdifrx.h"
 2890              		.file 28 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_spi.h"
ARM GAS  /tmp/ccvLOER3.s 			page 89


 2891              		.file 29 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 2892              		.file 30 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 2893              		.file 31 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 2894              		.file 32 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 2895              		.file 33 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2896              		.file 34 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2897              		.file 35 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2898              		.file 36 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2899              		.file 37 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2900              		.file 38 "Middlewares/Third_Party/FatFs/src/integer.h"
 2901              		.file 39 "Middlewares/Third_Party/FatFs/src/ff.h"
 2902              		.file 40 "Middlewares/Third_Party/FatFs/src/diskio.h"
 2903              		.file 41 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 2904              		.file 42 "FATFS/Target/sd_diskio.h"
 2905              		.file 43 "FATFS/App/fatfs.h"
 2906              		.file 44 "USB_HOST/App/usb_host.h"
 2907              		.file 45 "Core/Inc/main.h"
 2908              		.file 46 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 2909              		.file 47 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc_ex.h"
 2910              		.file 48 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_i2c_ex.h"
 2911              		.file 49 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr.h"
 2912              		.file 50 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr_ex.h"
 2913              		.file 51 "<built-in>"
ARM GAS  /tmp/ccvLOER3.s 			page 90


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccvLOER3.s:18     .text.MX_SDMMC1_SD_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:24     .text.MX_SDMMC1_SD_Init:0000000000000000 MX_SDMMC1_SD_Init
     /tmp/ccvLOER3.s:54     .text.MX_SDMMC1_SD_Init:0000000000000018 $d
                            *COM*:0000000000000084 hsd1
     /tmp/ccvLOER3.s:60     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:66     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccvLOER3.s:481    .text.MX_GPIO_Init:0000000000000278 $d
     /tmp/ccvLOER3.s:497    .text.MX_ADC3_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:503    .text.MX_ADC3_Init:0000000000000000 MX_ADC3_Init
     /tmp/ccvLOER3.s:579    .text.MX_ADC3_Init:0000000000000050 $d
                            *COM*:0000000000000048 hadc3
     /tmp/ccvLOER3.s:586    .text.MX_CRC_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:592    .text.MX_CRC_Init:0000000000000000 MX_CRC_Init
     /tmp/ccvLOER3.s:627    .text.MX_CRC_Init:000000000000001c $d
                            *COM*:0000000000000024 hcrc
     /tmp/ccvLOER3.s:633    .text.MX_DCMI_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:639    .text.MX_DCMI_Init:0000000000000000 MX_DCMI_Init
     /tmp/ccvLOER3.s:685    .text.MX_DCMI_Init:0000000000000028 $d
                            *COM*:0000000000000050 hdcmi
     /tmp/ccvLOER3.s:691    .text.MX_ETH_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:697    .text.MX_ETH_Init:0000000000000000 MX_ETH_Init
     /tmp/ccvLOER3.s:753    .text.MX_ETH_Init:000000000000003c $d
                            *COM*:0000000000000048 heth
     /tmp/ccvLOER3.s:759    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:765    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccvLOER3.s:820    .text.MX_I2C1_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c1
     /tmp/ccvLOER3.s:827    .text.MX_I2C3_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:833    .text.MX_I2C3_Init:0000000000000000 MX_I2C3_Init
     /tmp/ccvLOER3.s:888    .text.MX_I2C3_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c3
     /tmp/ccvLOER3.s:895    .text.MX_QUADSPI_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:901    .text.MX_QUADSPI_Init:0000000000000000 MX_QUADSPI_Init
     /tmp/ccvLOER3.s:943    .text.MX_QUADSPI_Init:0000000000000024 $d
                            *COM*:000000000000004c hqspi
     /tmp/ccvLOER3.s:949    .text.MX_RTC_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:955    .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/ccvLOER3.s:1095   .text.MX_RTC_Init:00000000000000c0 $d
                            *COM*:0000000000000020 hrtc
     /tmp/ccvLOER3.s:1101   .text.MX_SAI2_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:1107   .text.MX_SAI2_Init:0000000000000000 MX_SAI2_Init
     /tmp/ccvLOER3.s:1235   .text.MX_SAI2_Init:000000000000007c $d
                            *COM*:0000000000000084 hsai_BlockA2
                            *COM*:0000000000000084 hsai_BlockB2
     /tmp/ccvLOER3.s:1244   .text.MX_SPDIFRX_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:1250   .text.MX_SPDIFRX_Init:0000000000000000 MX_SPDIFRX_Init
     /tmp/ccvLOER3.s:1294   .text.MX_SPDIFRX_Init:0000000000000028 $d
                            *COM*:000000000000004c hspdif
     /tmp/ccvLOER3.s:1299   .text.MX_SPI2_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:1305   .text.MX_SPI2_Init:0000000000000000 MX_SPI2_Init
     /tmp/ccvLOER3.s:1360   .text.MX_SPI2_Init:000000000000003c $d
                            *COM*:0000000000000064 hspi2
     /tmp/ccvLOER3.s:1366   .text.MX_TIM8_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:1372   .text.MX_TIM8_Init:0000000000000000 MX_TIM8_Init
     /tmp/ccvLOER3.s:1445   .text.MX_TIM8_Init:000000000000004c $d
ARM GAS  /tmp/ccvLOER3.s 			page 91


                            *COM*:0000000000000040 htim8
     /tmp/ccvLOER3.s:1451   .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:1457   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccvLOER3.s:1602   .text.MX_TIM1_Init:00000000000000b0 $d
                            *COM*:0000000000000040 htim1
     /tmp/ccvLOER3.s:1608   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:1614   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccvLOER3.s:1714   .text.MX_TIM2_Init:0000000000000078 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccvLOER3.s:1719   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:1725   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccvLOER3.s:1825   .text.MX_TIM3_Init:0000000000000078 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccvLOER3.s:1831   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:1837   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccvLOER3.s:1937   .text.MX_TIM5_Init:0000000000000078 $d
                            *COM*:0000000000000040 htim5
     /tmp/ccvLOER3.s:1943   .text.MX_TIM12_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:1949   .text.MX_TIM12_Init:0000000000000000 MX_TIM12_Init
     /tmp/ccvLOER3.s:2019   .text.MX_TIM12_Init:0000000000000048 $d
                            *COM*:0000000000000040 htim12
     /tmp/ccvLOER3.s:2025   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:2031   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccvLOER3.s:2075   .text.MX_USART1_UART_Init:0000000000000028 $d
                            *COM*:0000000000000080 huart1
     /tmp/ccvLOER3.s:2081   .text.MX_USART6_UART_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:2087   .text.MX_USART6_UART_Init:0000000000000000 MX_USART6_UART_Init
     /tmp/ccvLOER3.s:2131   .text.MX_USART6_UART_Init:0000000000000028 $d
                            *COM*:0000000000000080 huart6
     /tmp/ccvLOER3.s:2137   .text.MX_DMA2D_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:2143   .text.MX_DMA2D_Init:0000000000000000 MX_DMA2D_Init
     /tmp/ccvLOER3.s:2187   .text.MX_DMA2D_Init:0000000000000028 $d
                            *COM*:0000000000000040 hdma2d
     /tmp/ccvLOER3.s:2193   .text.MX_FMC_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:2199   .text.MX_FMC_Init:0000000000000000 MX_FMC_Init
     /tmp/ccvLOER3.s:2273   .text.MX_FMC_Init:0000000000000054 $d
                            *COM*:0000000000000034 hsdram1
     /tmp/ccvLOER3.s:2279   .text.MX_LTDC_Init:0000000000000000 $t
     /tmp/ccvLOER3.s:2285   .text.MX_LTDC_Init:0000000000000000 MX_LTDC_Init
     /tmp/ccvLOER3.s:2405   .text.MX_LTDC_Init:00000000000000a0 $d
                            *COM*:00000000000000a8 hltdc
     /tmp/ccvLOER3.s:2411   .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccvLOER3.s:2418   .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccvLOER3.s:2444   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccvLOER3.s:2451   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccvLOER3.s:2622   .text.SystemClock_Config:00000000000000e8 $d
     /tmp/ccvLOER3.s:2629   .text.main:0000000000000000 $t
     /tmp/ccvLOER3.s:2636   .text.main:0000000000000000 main
     /tmp/ccvLOER3.s:2753   .text.main:0000000000000094 $d
                            *COM*:0000000000000004 defaultTaskHandle
     /tmp/ccvLOER3.s:2759   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccvLOER3.s:2766   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccvLOER3.s:2797   .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccvLOER3.s:2802   .text.Error_Handler:0000000000000000 $t
     /tmp/ccvLOER3.s:2809   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccvLOER3.s:2847   .rodata:0000000000000000 $d
     /tmp/ccvLOER3.s:2859   .rodata.str1.4:0000000000000000 $d
ARM GAS  /tmp/ccvLOER3.s 			page 92



UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CRC_Init
HAL_DCMI_Init
HAL_ETH_Init
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_QSPI_Init
memset
HAL_RTC_Init
HAL_RTC_SetTime
HAL_RTC_SetDate
HAL_RTC_SetAlarm
HAL_RTCEx_SetTimeStamp
HAL_SAI_Init
HAL_SPDIFRX_Init
HAL_SPI_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_UART_Init
HAL_DMA2D_Init
HAL_DMA2D_ConfigLayer
HAL_SDRAM_Init
HAL_LTDC_Init
HAL_LTDC_ConfigLayer
MX_USB_HOST_Init
osDelay
HAL_PWR_EnableBkUpAccess
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_FATFS_Init
osThreadCreate
osKernelStart
HAL_IncTick
