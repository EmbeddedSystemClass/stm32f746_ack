ARM GAS  /tmp/ccrN7PzT.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"led.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ledGetAckIndex,"ax",%progbits
  18              		.align	1
  19              		.global	ledGetAckIndex
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-sp-d16
  25              	ledGetAckIndex:
  26              	.LFB8:
  27              		.file 1 "Src/led.c"
   1:Src/led.c     **** /*
   2:Src/led.c     ****  * To change this license header, choose License Headers in Project Properties.
   3:Src/led.c     ****  * To change this template file, choose Tools | Templates
   4:Src/led.c     ****  * and open the template in the editor.
   5:Src/led.c     ****  */
   6:Src/led.c     **** 
   7:Src/led.c     **** 
   8:Src/led.c     **** /* Simple LED Task for ack based implementation */
   9:Src/led.c     **** 
  10:Src/led.c     **** /****************************************************************************/
  11:Src/led.c     **** /** **/
  12:Src/led.c     **** /** MODULES USED **/
  13:Src/led.c     **** /** **/
  14:Src/led.c     **** /****************************************************************************/
  15:Src/led.c     **** #include <stdio.h>
  16:Src/led.c     **** #include <string.h>
  17:Src/led.c     **** #include "cmsis_os.h"
  18:Src/led.c     **** #include "led.h"
  19:Src/led.c     **** 
  20:Src/led.c     **** 
  21:Src/led.c     **** /****************************************************************************/
  22:Src/led.c     **** /** **/
  23:Src/led.c     **** /** DEFINITIONS AND MACROS **/
  24:Src/led.c     **** /** **/
  25:Src/led.c     **** /****************************************************************************/
  26:Src/led.c     **** 
  27:Src/led.c     **** /****************************************************************************/
  28:Src/led.c     **** /** **/
  29:Src/led.c     **** /** TYPEDEFS AND STRUCTURES **/
  30:Src/led.c     **** /** **/
  31:Src/led.c     **** /****************************************************************************/
ARM GAS  /tmp/ccrN7PzT.s 			page 2


  32:Src/led.c     **** 
  33:Src/led.c     **** /****************************************************************************/
  34:Src/led.c     **** /** **/
  35:Src/led.c     **** /** PROTOTYPES OF LOCAL FUNCTIONS **/
  36:Src/led.c     **** /** **/
  37:Src/led.c     **** /****************************************************************************/
  38:Src/led.c     **** 
  39:Src/led.c     **** /****************************************************************************/
  40:Src/led.c     **** /** **/
  41:Src/led.c     **** /** EXPORTED VARIABLES **/
  42:Src/led.c     **** /** **/
  43:Src/led.c     **** /****************************************************************************/
  44:Src/led.c     **** 
  45:Src/led.c     **** /****************************************************************************/
  46:Src/led.c     **** /** **/
  47:Src/led.c     **** /** GLOBAL VARIABLES **/
  48:Src/led.c     **** /** **/
  49:Src/led.c     **** /****************************************************************************/
  50:Src/led.c     **** 
  51:Src/led.c     **** 
  52:Src/led.c     **** /****************************************************************************/
  53:Src/led.c     **** /** **/
  54:Src/led.c     **** /** LOCAL VARIABLES **/
  55:Src/led.c     **** /** **/
  56:Src/led.c     **** /****************************************************************************/
  57:Src/led.c     **** static LED Led;
  58:Src/led.c     **** 
  59:Src/led.c     **** /****************************************************************************/
  60:Src/led.c     **** /** **/
  61:Src/led.c     **** /** EXPORTED FUNCTIONS **/
  62:Src/led.c     **** /** **/
  63:Src/led.c     **** /****************************************************************************/
  64:Src/led.c     **** 
  65:Src/led.c     **** /****************************************************************************/
  66:Src/led.c     **** /** **/
  67:Src/led.c     **** /** GLOBAL FUNCTIONS **/
  68:Src/led.c     **** /** **/
  69:Src/led.c     **** /****************************************************************************/
  70:Src/led.c     **** 
  71:Src/led.c     **** 
  72:Src/led.c     **** /****************************************************************************/
  73:Src/led.c     **** /** **/
  74:Src/led.c     **** /** LOCAL FUNCTIONS **/
  75:Src/led.c     **** /** **/
  76:Src/led.c     **** /****************************************************************************/
  77:Src/led.c     **** 
  78:Src/led.c     **** 
  79:Src/led.c     **** int ledGetAckIndex(LED_EVENT e) {
  28              		.loc 1 79 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  80:Src/led.c     ****     configASSERT (e > LED_EVT_NONE || e <= LED_EVT_OFF_RSP)
  81:Src/led.c     ****     return (e / 3) + 1;
  34              		.loc 1 81 0
ARM GAS  /tmp/ccrN7PzT.s 			page 3


  35 0000 024B     		ldr	r3, .L2
  36 0002 A3FB0030 		umull	r3, r0, r3, r0
  37              	.LVL1:
  38 0006 4008     		lsrs	r0, r0, #1
  82:Src/led.c     **** }
  39              		.loc 1 82 0
  40 0008 0130     		adds	r0, r0, #1
  41 000a 7047     		bx	lr
  42              	.L3:
  43              		.align	2
  44              	.L2:
  45 000c ABAAAAAA 		.word	-1431655765
  46              		.cfi_endproc
  47              	.LFE8:
  49              		.section	.text.ledSetAckInfo,"ax",%progbits
  50              		.align	1
  51              		.global	ledSetAckInfo
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  55              		.fpu fpv5-sp-d16
  57              	ledSetAckInfo:
  58              	.LFB9:
  83:Src/led.c     **** 
  84:Src/led.c     **** 
  85:Src/led.c     **** void ledSetAckInfo(osThreadId taskId, LED_EVENT e) {
  59              		.loc 1 85 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              	.LVL2:
  64 0000 38B5     		push	{r3, r4, r5, lr}
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 16
  67              		.cfi_offset 3, -16
  68              		.cfi_offset 4, -12
  69              		.cfi_offset 5, -8
  70              		.cfi_offset 14, -4
  86:Src/led.c     ****     configASSERT(taskId);
  71              		.loc 1 86 0
  72 0002 60B1     		cbz	r0, .L8
  73 0004 0546     		mov	r5, r0
  74 0006 0C46     		mov	r4, r1
  87:Src/led.c     ****     configASSERT (e > LED_EVT_NONE || e <= LED_EVT_OFF_RSP)
  88:Src/led.c     ****     
  89:Src/led.c     ****     Led.ack[ledGetAckIndex(e)].event = e;
  75              		.loc 1 89 0
  76 0008 0846     		mov	r0, r1
  77              	.LVL3:
  78 000a FFF7FEFF 		bl	ledGetAckIndex
  79              	.LVL4:
  80 000e 094B     		ldr	r3, .L9
  81 0010 03EBC000 		add	r0, r3, r0, lsl #3
  82 0014 0472     		strb	r4, [r0, #8]
  90:Src/led.c     ****     Led.ack[ledGetAckIndex(e)].ack = 1;
  83              		.loc 1 90 0
  84 0016 0123     		movs	r3, #1
ARM GAS  /tmp/ccrN7PzT.s 			page 4


  85 0018 4372     		strb	r3, [r0, #9]
  91:Src/led.c     ****     Led.ack[ledGetAckIndex(e)].taskId = taskId;
  86              		.loc 1 91 0
  87 001a 4560     		str	r5, [r0, #4]
  92:Src/led.c     **** }
  88              		.loc 1 92 0
  89 001c 38BD     		pop	{r3, r4, r5, pc}
  90              	.LVL5:
  91              	.L8:
  92              	.LBB4:
  93              	.LBB5:
  94              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/ccrN7PzT.s 			page 5


  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
ARM GAS  /tmp/ccrN7PzT.s 			page 6


 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  /tmp/ccrN7PzT.s 			page 7


 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
  95              		.loc 2 195 0
  96              		.syntax unified
  97              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  98 001e 4FF05003 			mov r3, #80												
  99 0022 72B6     		cpsid i													
 100 0024 83F31188 		msr basepri, r3											
 101 0028 BFF36F8F 		isb														
 102 002c BFF34F8F 		dsb														
 103 0030 62B6     		cpsie i													
 104              	
 105              	@ 0 "" 2
 106              	.LVL6:
 107              		.thumb
 108              		.syntax unified
 109              	.L6:
 110 0032 FEE7     		b	.L6
 111              	.L10:
 112              		.align	2
 113              	.L9:
 114 0034 00000000 		.word	.LANCHOR0
 115              	.LBE5:
ARM GAS  /tmp/ccrN7PzT.s 			page 8


 116              	.LBE4:
 117              		.cfi_endproc
 118              	.LFE9:
 120              		.section	.text.ledClearAckInfo,"ax",%progbits
 121              		.align	1
 122              		.global	ledClearAckInfo
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu fpv5-sp-d16
 128              	ledClearAckInfo:
 129              	.LFB10:
  93:Src/led.c     **** 
  94:Src/led.c     **** 
  95:Src/led.c     **** void ledClearAckInfo(LED_EVENT e) {
 130              		.loc 1 95 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              	.LVL7:
 135 0000 08B5     		push	{r3, lr}
 136              	.LCFI1:
 137              		.cfi_def_cfa_offset 8
 138              		.cfi_offset 3, -8
 139              		.cfi_offset 14, -4
  96:Src/led.c     ****     configASSERT (e > LED_EVT_NONE || e <= LED_EVT_OFF_RSP)
  97:Src/led.c     ****     
  98:Src/led.c     ****     Led.ack[ledGetAckIndex(e)].event = 0;
 140              		.loc 1 98 0
 141 0002 FFF7FEFF 		bl	ledGetAckIndex
 142              	.LVL8:
 143 0006 044B     		ldr	r3, .L13
 144 0008 03EBC000 		add	r0, r3, r0, lsl #3
 145 000c 0023     		movs	r3, #0
 146 000e 0372     		strb	r3, [r0, #8]
  99:Src/led.c     ****     Led.ack[ledGetAckIndex(e)].ack = 0;
 147              		.loc 1 99 0
 148 0010 4372     		strb	r3, [r0, #9]
 100:Src/led.c     ****     Led.ack[ledGetAckIndex(e)].taskId = NULL;
 149              		.loc 1 100 0
 150 0012 4360     		str	r3, [r0, #4]
 101:Src/led.c     **** }
 151              		.loc 1 101 0
 152 0014 08BD     		pop	{r3, pc}
 153              	.L14:
 154 0016 00BF     		.align	2
 155              	.L13:
 156 0018 00000000 		.word	.LANCHOR0
 157              		.cfi_endproc
 158              	.LFE10:
 160              		.section	.text.ledGetClientTaskId,"ax",%progbits
 161              		.align	1
 162              		.global	ledGetClientTaskId
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu fpv5-sp-d16
ARM GAS  /tmp/ccrN7PzT.s 			page 9


 168              	ledGetClientTaskId:
 169              	.LFB11:
 102:Src/led.c     **** 
 103:Src/led.c     **** osThreadId ledGetClientTaskId(LED_EVENT e) {
 170              		.loc 1 103 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              	.LVL9:
 175 0000 08B5     		push	{r3, lr}
 176              	.LCFI2:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 3, -8
 179              		.cfi_offset 14, -4
 104:Src/led.c     ****     configASSERT (e > LED_EVT_NONE || e <= LED_EVT_OFF_RSP)
 105:Src/led.c     ****     
 106:Src/led.c     ****     return Led.ack[ledGetAckIndex(e)].taskId;
 180              		.loc 1 106 0
 181 0002 FFF7FEFF 		bl	ledGetAckIndex
 182              	.LVL10:
 183 0006 024B     		ldr	r3, .L17
 184 0008 03EBC000 		add	r0, r3, r0, lsl #3
 107:Src/led.c     **** }
 185              		.loc 1 107 0
 186 000c 4068     		ldr	r0, [r0, #4]
 187 000e 08BD     		pop	{r3, pc}
 188              	.L18:
 189              		.align	2
 190              	.L17:
 191 0010 00000000 		.word	.LANCHOR0
 192              		.cfi_endproc
 193              	.LFE11:
 195              		.section	.text.ledTurnOn,"ax",%progbits
 196              		.align	1
 197              		.global	ledTurnOn
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv5-sp-d16
 203              	ledTurnOn:
 204              	.LFB12:
 108:Src/led.c     **** 
 109:Src/led.c     **** 
 110:Src/led.c     **** void ledTurnOn(unsigned char ackRequired) {
 205              		.loc 1 110 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              	.LVL11:
 111:Src/led.c     ****     /* led on*/
 112:Src/led.c     **** 
 113:Src/led.c     ****     /* response to origin */
 114:Src/led.c     ****     if (ackRequired) {
 210              		.loc 1 114 0
 211 0000 00B9     		cbnz	r0, .L25
 212 0002 7047     		bx	lr
 213              	.L25:
ARM GAS  /tmp/ccrN7PzT.s 			page 10


 110:Src/led.c     ****     /* led on*/
 214              		.loc 1 110 0
 215 0004 08B5     		push	{r3, lr}
 216              	.LCFI3:
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 3, -8
 219              		.cfi_offset 14, -4
 115:Src/led.c     ****         ledSendSimpleEvent(LED_EVT_ON_RSP, 0, 0);
 220              		.loc 1 115 0
 221 0006 0022     		movs	r2, #0
 222 0008 1146     		mov	r1, r2
 223 000a 0320     		movs	r0, #3
 224              	.LVL12:
 225 000c FFF7FEFF 		bl	ledSendSimpleEvent
 226              	.LVL13:
 116:Src/led.c     ****     }
 117:Src/led.c     **** }
 227              		.loc 1 117 0
 228 0010 08BD     		pop	{r3, pc}
 229              		.cfi_endproc
 230              	.LFE12:
 232              		.section	.text.ledTurnOff,"ax",%progbits
 233              		.align	1
 234              		.global	ledTurnOff
 235              		.syntax unified
 236              		.thumb
 237              		.thumb_func
 238              		.fpu fpv5-sp-d16
 240              	ledTurnOff:
 241              	.LFB13:
 118:Src/led.c     **** 
 119:Src/led.c     **** void ledTurnOff(unsigned char ackRequired) {
 242              		.loc 1 119 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              	.LVL14:
 120:Src/led.c     ****     /* led off*/
 121:Src/led.c     **** 
 122:Src/led.c     ****     /* response to origin */
 123:Src/led.c     ****     if (ackRequired) {
 247              		.loc 1 123 0
 248 0000 00B9     		cbnz	r0, .L32
 249 0002 7047     		bx	lr
 250              	.L32:
 119:Src/led.c     ****     /* led off*/
 251              		.loc 1 119 0
 252 0004 08B5     		push	{r3, lr}
 253              	.LCFI4:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 3, -8
 256              		.cfi_offset 14, -4
 124:Src/led.c     ****         ledSendSimpleEvent(LED_EVT_OFF_RSP, 0, 0);
 257              		.loc 1 124 0
 258 0006 0022     		movs	r2, #0
 259 0008 1146     		mov	r1, r2
 260 000a 0620     		movs	r0, #6
ARM GAS  /tmp/ccrN7PzT.s 			page 11


 261              	.LVL15:
 262 000c FFF7FEFF 		bl	ledSendSimpleEvent
 263              	.LVL16:
 125:Src/led.c     ****     }
 126:Src/led.c     **** }
 264              		.loc 1 126 0
 265 0010 08BD     		pop	{r3, pc}
 266              		.cfi_endproc
 267              	.LFE13:
 269              		.section	.text.ledInit,"ax",%progbits
 270              		.align	1
 271              		.global	ledInit
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu fpv5-sp-d16
 277              	ledInit:
 278              	.LFB15:
 127:Src/led.c     **** 
 128:Src/led.c     **** static void ledHwInit(void) {
 129:Src/led.c     **** }
 130:Src/led.c     **** 
 131:Src/led.c     **** void ledInit(void) {
 279              		.loc 1 131 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283 0000 10B5     		push	{r4, lr}
 284              	.LCFI5:
 285              		.cfi_def_cfa_offset 8
 286              		.cfi_offset 4, -8
 287              		.cfi_offset 14, -4
 132:Src/led.c     ****     ledHwInit();
 133:Src/led.c     **** 
 134:Src/led.c     ****     memset((void *)&Led, 0, sizeof(Led));
 288              		.loc 1 134 0
 289 0002 044C     		ldr	r4, .L35
 290 0004 5422     		movs	r2, #84
 291 0006 0021     		movs	r1, #0
 292 0008 2046     		mov	r0, r4
 293 000a FFF7FEFF 		bl	memset
 294              	.LVL17:
 135:Src/led.c     ****     Led.initialized = 1;
 295              		.loc 1 135 0
 296 000e 0123     		movs	r3, #1
 297 0010 2370     		strb	r3, [r4]
 136:Src/led.c     **** }...
 298              		.loc 1 136 0
 299 0012 10BD     		pop	{r4, pc}
 300              	.L36:
 301              		.align	2
 302              	.L35:
 303 0014 00000000 		.word	.LANCHOR0
 304              		.cfi_endproc
 305              	.LFE15:
 307              		.section	.bss.Led,"aw",%nobits
 308              		.align	2
ARM GAS  /tmp/ccrN7PzT.s 			page 12


 309              		.set	.LANCHOR0,. + 0
 312              	Led:
 313 0000 00000000 		.space	84
 313      00000000 
 313      00000000 
 313      00000000 
 313      00000000 
 314              		.text
 315              	.Letext0:
 316              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 317              		.file 4 "/usr/include/newlib/sys/lock.h"
 318              		.file 5 "/usr/include/newlib/sys/_types.h"
 319              		.file 6 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 320              		.file 7 "/usr/include/newlib/sys/reent.h"
 321              		.file 8 "/usr/include/newlib/sys/_stdint.h"
 322              		.file 9 "Core/Inc/FreeRTOSConfig.h"
 323              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 324              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 325              		.file 12 "Inc/led.h"
 326              		.file 13 "<built-in>"
ARM GAS  /tmp/ccrN7PzT.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 led.c
     /tmp/ccrN7PzT.s:18     .text.ledGetAckIndex:0000000000000000 $t
     /tmp/ccrN7PzT.s:25     .text.ledGetAckIndex:0000000000000000 ledGetAckIndex
     /tmp/ccrN7PzT.s:45     .text.ledGetAckIndex:000000000000000c $d
     /tmp/ccrN7PzT.s:50     .text.ledSetAckInfo:0000000000000000 $t
     /tmp/ccrN7PzT.s:57     .text.ledSetAckInfo:0000000000000000 ledSetAckInfo
     /tmp/ccrN7PzT.s:114    .text.ledSetAckInfo:0000000000000034 $d
     /tmp/ccrN7PzT.s:121    .text.ledClearAckInfo:0000000000000000 $t
     /tmp/ccrN7PzT.s:128    .text.ledClearAckInfo:0000000000000000 ledClearAckInfo
     /tmp/ccrN7PzT.s:156    .text.ledClearAckInfo:0000000000000018 $d
     /tmp/ccrN7PzT.s:161    .text.ledGetClientTaskId:0000000000000000 $t
     /tmp/ccrN7PzT.s:168    .text.ledGetClientTaskId:0000000000000000 ledGetClientTaskId
     /tmp/ccrN7PzT.s:191    .text.ledGetClientTaskId:0000000000000010 $d
     /tmp/ccrN7PzT.s:196    .text.ledTurnOn:0000000000000000 $t
     /tmp/ccrN7PzT.s:203    .text.ledTurnOn:0000000000000000 ledTurnOn
     /tmp/ccrN7PzT.s:233    .text.ledTurnOff:0000000000000000 $t
     /tmp/ccrN7PzT.s:240    .text.ledTurnOff:0000000000000000 ledTurnOff
     /tmp/ccrN7PzT.s:270    .text.ledInit:0000000000000000 $t
     /tmp/ccrN7PzT.s:277    .text.ledInit:0000000000000000 ledInit
     /tmp/ccrN7PzT.s:303    .text.ledInit:0000000000000014 $d
     /tmp/ccrN7PzT.s:308    .bss.Led:0000000000000000 $d
     /tmp/ccrN7PzT.s:312    .bss.Led:0000000000000000 Led

UNDEFINED SYMBOLS
ledSendSimpleEvent
memset
