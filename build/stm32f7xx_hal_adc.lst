ARM GAS  /tmp/cck3XRbv.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7xx_hal_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ADC_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	ADC_Init:
  25              	.LFB163:
  26              		.file 1 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c"
   1:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
   2:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @file    stm32f7xx_hal_adc.c
   4:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   7:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   8:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           + IO operation functions
   9:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           + State and errors functions
  10:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         
  11:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   @verbatim
  12:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  13:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                     ##### ADC Peripheral features #####
  14:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  15:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   [..] 
  16:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  17:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Interrupt generation at the end of conversion, end of injected conversion,  
  18:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       and in case of analog watchdog or overrun events
  19:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Single and continuous conversion modes.
  20:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Scan mode for automatic conversion of channel 0 to channel x.
  21:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Data alignment with in-built data coherency.
  22:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Channel-wise programmable sampling time.
  23:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) External trigger option with configurable polarity for both regular and 
  24:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       injected conversion.
  25:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Dual/Triple mode (on devices with 2 ADCs or more).
  26:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Configurable DMA data storage in Dual/Triple ADC mode. 
  27:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Configurable delay between conversions in Dual/Triple interleaved mode.
  28:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) ADC conversion type (refer to the datasheets).
  29:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  30:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       slower speed.
  31:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) ADC input range: VREF(minus) = VIN = VREF(plus).
  32:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) DMA request generation during regular channel conversion.
ARM GAS  /tmp/cck3XRbv.s 			page 2


  33:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  34:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  35:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                      ##### How to use this driver #####
  36:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  37:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   [..]
  38:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#)Initialize the ADC low level resources by implementing the HAL_ADC_MspInit():
  39:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (##) Enable the ADC interface clock using __HAL_RCC_ADC_CLK_ENABLE()
  40:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (##) ADC pins configuration
  41:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Enable the clock for the ADC GPIOs using the following function:
  42:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                    __HAL_RCC_GPIOx_CLK_ENABLE()  
  43:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Configure these ADC pins in analog mode using HAL_GPIO_Init() 
  44:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (##) In case of using interrupts (e.g. HAL_ADC_Start_IT())
  45:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Configure the ADC interrupt priority using HAL_NVIC_SetPriority()
  46:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Enable the ADC IRQ handler using HAL_NVIC_EnableIRQ()
  47:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) In ADC IRQ handler, call HAL_ADC_IRQHandler()
  48:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (##) In case of using DMA to control data transfer (e.g. HAL_ADC_Start_DMA())
  49:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Enable the DMAx interface clock using __HAL_RCC_DMAx_CLK_ENABLE()
  50:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Configure and enable two DMA streams stream for managing data
  51:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                  transfer from peripheral to memory (output stream)
  52:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Associate the initialized DMA handle to the CRYP DMA handle
  53:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                  using  __HAL_LINKDMA()
  54:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              (+++) Configure the priority and enable the NVIC for the transfer complete
  55:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                  interrupt on the two DMA Streams. The output stream should have higher
  56:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                  priority than the input stream.
  57:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                        
  58:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     *** Configuration of ADC, groups regular/injected, channels parameters ***
  59:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  60:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   [..]
  61:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Configure the ADC parameters (resolution, data alignment, ...)
  62:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       and regular group parameters (conversion trigger, sequencer, ...)
  63:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       using function HAL_ADC_Init().
  64:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  65:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Configure the channels for regular group parameters (channel number, 
  66:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       channel rank into sequencer, ..., into regular group)
  67:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       using function HAL_ADC_ConfigChannel().
  68:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  69:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, configure the injected group parameters (conversion trigger, 
  70:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       sequencer, ..., of injected group)
  71:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       and the channels for injected group parameters (channel number, 
  72:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       channel rank into sequencer, ..., into injected group)
  73:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       using function HAL_ADCEx_InjectedConfigChannel().
  74:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  75:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, configure the analog watchdog parameters (channels
  76:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       monitored, thresholds, ...) using function HAL_ADC_AnalogWDGConfig().
  77:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  78:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, for devices with several ADC instances: configure the 
  79:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       multimode parameters using function HAL_ADCEx_MultiModeConfigChannel().
  80:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  81:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                        *** Execution of ADC conversions ***
  82:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
  83:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   [..]  
  84:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) ADC driver can be used among three modes: polling, interruption,
  85:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       transfer by DMA.    
  86:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
  87:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      *** Polling mode IO operation ***
  88:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      =================================
  89:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]    
ARM GAS  /tmp/cck3XRbv.s 			page 3


  90:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start() 
  91:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Wait for end of conversion using HAL_ADC_PollForConversion(), at this stage
  92:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            user can specify the value of timeout according to his end application      
  93:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) To read the ADC converted values, use the HAL_ADC_GetValue() function.
  94:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop()
  95:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        
  96:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      *** Interrupt mode IO operation ***    
  97:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      ===================================
  98:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]    
  99:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_IT() 
 100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Use HAL_ADC_IRQHandler() called under ADC_IRQHandler() Interrupt subroutine
 101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) At ADC end of conversion HAL_ADC_ConvCpltCallback() function is executed and user can 
 102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) In case of ADC Error, HAL_ADC_ErrorCallback() function is executed and user can 
 104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_IT()     
 106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      *** DMA mode IO operation ***    
 108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      ==============================
 109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]    
 110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_DMA(), at this stage the user specify the l
 111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            of data to be transferred at each end of conversion 
 112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) At The end of data transfer by HAL_ADC_ConvCpltCallback() function is executed and user 
 113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) In case of transfer Error, HAL_ADC_ErrorCallback() function is executed and user can 
 115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_DMA()
 117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                     
 118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      *** ADC HAL driver macros list ***
 119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      ============================================= 
 120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]
 121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        Below the list of most used macros in ADC HAL driver.
 122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        
 123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE : Enable the ADC peripheral
 124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE : Disable the ADC peripheral
 125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE_IT: Enable the ADC end of conversion interrupt
 126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE_IT: Disable the ADC end of conversion interrupt
 127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_GET_IT_SOURCE: Check if the specified ADC interrupt source is enabled or disabl
 128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_CLEAR_FLAG: Clear the ADC's pending flags
 129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) __HAL_ADC_GET_FLAG: Get the selected ADC's flag status
 130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) ADC_GET_RESOLUTION: Return resolution bits in CR1 register 
 131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      *** Callback functions ***
 133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      ==============================
 134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]
 135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (@) Callback functions must be implemented in user program:
 136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (@) You can refer to the ADC HAL driver header file for more useful macros 
 142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       *** Deinitialization of ADC ***
 144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
 145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   [..]
 146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Disable the ADC interface
ARM GAS  /tmp/cck3XRbv.s 			page 4


 147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (++) ADC clock can be hard reset and disabled at RCC top level.
 148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (++) Hard reset of ADC peripherals
 149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           using macro __HAL_RCC_ADC_FORCE_RESET(), __HAL_RCC_ADC_RELEASE_RESET().
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (++) ADC clock disable using the equivalent macro/functions as configuration step.
 151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                (+++) Example:
 152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                    other device clock parameters configuration:
 154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                (+++) HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
 155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
 157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) ADC pins configuration
 160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (++) Disable the clock for the ADC GPIOs using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, in case of usage of ADC with interruptions:
 163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (++) Disable the NVIC for ADC using function HAL_NVIC_DisableIRQ(ADCx_IRQn)
 164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   (#) Optionally, in case of usage of DMA:
 166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         (++) Deinitialize the DMA using function HAL_DMA_DeInit().
 167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         (++) Disable the NVIC for DMA using function HAL_NVIC_DisableIRQ(DMAx_Channelx_IRQn)   
 168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       *** Callback registration ***
 170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ==============================================================================
 171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      to register an interrupt callback.
 177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      and a pointer to the user callback function.
 193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
 196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      weak function.
 197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      and the Callback ID.
 201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      This function allows to reset following callbacks:
 202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
ARM GAS  /tmp/cck3XRbv.s 			page 5


 204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]
 214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
 216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]
 226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
 232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      [..]
 237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      are set to the corresponding weak functions.
 241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     @endverbatim
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ******************************************************************************
 244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @attention
 245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
 246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * All rights reserved.</center></h2>
 248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
 249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
 251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
 254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ******************************************************************************
 255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */ 
 256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #include "stm32f7xx_hal.h"
 259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @addtogroup STM32F7xx_HAL_Driver
ARM GAS  /tmp/cck3XRbv.s 			page 6


 261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC ADC
 265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief ADC driver modules
 266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */ 
 268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @addtogroup ADC_Private_Functions
 276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc);
 280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions 
 293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *
 295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @verbatim    
 296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
 297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
 299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) De-initialize the ADC. 
 302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****          
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @endverbatim
 304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         in the ADC_InitStruct and initializes the ADC MSP.
 310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         ClockPrescaler, Resolution, Data Alignment and number of conversion), however,
 313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the rest of the configuration parameters are specific to the regular
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         channels group (scan mode activation, continuous mode activation,
 315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         External trigger source and edge, DMA continuous request after the  
 316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         last transfer and End of conversion selection).
 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *             
ARM GAS  /tmp/cck3XRbv.s 			page 7


 318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check ADC handle */
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc == NULL)
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     return HAL_ERROR;
 330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
 351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Init the ADC Callback settings */
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Init the low level hardware */
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Init the low level hardware */
 368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Initialize ADC error code */
 372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
ARM GAS  /tmp/cck3XRbv.s 			page 8


 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* correctly completed.                                                     */
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC parameters */
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_Init(hadc);
 389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to none */
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the ADC state */
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Release Lock */
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return tmp_hal_status;
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values. 
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check ADC handle */
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc == NULL)
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     return HAL_ERROR;
 424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC state */
 430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
ARM GAS  /tmp/cck3XRbv.s 			page 9


 432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* correctly completed.                                                     */
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (hadc->MspDeInitCallback == NULL)
 442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* DeInit the low level hardware: RCC clock, NVIC */
 447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->MspDeInitCallback(hadc);
 448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* DeInit the low level hardware: RCC clock, NVIC */
 450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_ADC_MspDeInit(hadc);
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to none */
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return tmp_hal_status;
 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
 472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
 477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_MspInit could be implemented in the user file
 479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */ 
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/cck3XRbv.s 			page 10


 489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
 492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_MspDeInit could be implemented in the user file
 494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */ 
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         This parameter can be one of the following values:
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
 507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (pCallback == NULL)
 521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update the error code */
 523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     return HAL_ERROR;
 526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     switch (CallbackID)
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
 542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
ARM GAS  /tmp/cck3XRbv.s 			page 11


 546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
 550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       default :
 561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update the error code */
 562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Return error status */
 565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         status = HAL_ERROR;
 566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     switch (CallbackID)
 572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       default :
 582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update the error code */
 583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Return error status */
 586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         status = HAL_ERROR;
 587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
 591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update the error code */
 593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Return error status */
 596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     status =  HAL_ERROR;
 597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return status;
 600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
ARM GAS  /tmp/cck3XRbv.s 			page 12


 603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
 604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
 605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
 608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         This parameter can be one of the following values:
 609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
 611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
 615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
 620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     switch (CallbackID)
 626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
 629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
 633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
 637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
 641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
 645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
 649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
 653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       default :
 656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update the error code */
 657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Return error status */
ARM GAS  /tmp/cck3XRbv.s 			page 13


 660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         status =  HAL_ERROR;
 661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     switch (CallbackID)
 667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
 670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
 674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       default :
 677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update the error code */
 678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Return error status */
 681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         status =  HAL_ERROR;
 682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         break;
 683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
 686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update the error code */
 688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Return error status */
 691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     status =  HAL_ERROR;
 692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return status;
 695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
 702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *  @brief    IO operation functions 
 706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *
 707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @verbatim   
 708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
 709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              ##### IO operation functions #####
 710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================  
 711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Start conversion of regular channel.
 713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Stop conversion of regular channel.
 714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Start conversion of regular channel and enable interrupt.
 715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable interrupt.
 716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Start conversion of regular channel and enable DMA transfer.
ARM GAS  /tmp/cck3XRbv.s 			page 14


 717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable DMA transfer.
 718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Handle ADC interrupt request. 
 719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                
 720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @endverbatim
 721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
 722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Enables ADC and starts conversion of the regular channels.
 726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable the ADC peripheral */
 742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   Tstab time the ADC's stabilization */
 744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
 746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the Peripheral */
 747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Delay for ADC stabilization time */
 750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       counter--;
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state                                                          */
 762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
 764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
 769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* update ADC state.                                                      */
 770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
ARM GAS  /tmp/cck3XRbv.s 			page 15


 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
 782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC all error code fields */
 784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
 788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
 793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Check if Multimode enabled */
 797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
 800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
 807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if dual mode is selected, ADC3 works independently. */
 816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* check if the mode selected is not triple */
 817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* if instance of handle correspond to ADC3 and no external trigger present enable software
 820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           /* Enable the selected ADC software conversion for regular group */
 823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
ARM GAS  /tmp/cck3XRbv.s 			page 16


 831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Disables ADC and stop conversion of regular channels.
 835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * 
 836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
 838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
 841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status.
 842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
 850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
 853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
 869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Poll for regular conversion complete
 873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         conversion) are cleared by this function.
 875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         be performed on the complete sequence.
 881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.  
 884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
ARM GAS  /tmp/cck3XRbv.s 			page 17


 888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for      */
 891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* each conversion:                                                       */
 892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* several ranks and polling for end of each conversion.                  */
 894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* For code simplicity sake, this particular case is generalized to       */
 895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* ADC configured in DMA mode and polling for end of each conversion.     */
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update ADC state machine to error */
 900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
 903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     return HAL_ERROR;
 906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  
 908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Get tick */ 
 909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag */
 912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Process unlocked */
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         return HAL_TIMEOUT;
 926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Clear regular group conversion flag */
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Update ADC state machine */
 934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Note: On STM32F7, there is no independent flag of end of sequence.       */
 939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /*       The test of scan sequence on going is done either with scan        */
 940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /*       sequence disabled or with end of conversion flag set to            */
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /*       of end of sequence.                                                */
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
ARM GAS  /tmp/cck3XRbv.s 			page 18


 945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
 948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     { 
 952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
 958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
 961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Poll for conversion event
 962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  EventType the ADC event type.
 965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *          This parameter can be one of the following values:
 966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watch Dog event.
 967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event.
 968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.   
 969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
 970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
 971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
 972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
 978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Get tick */
 980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check selected event flag */
 983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc,EventType)))
 984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Check for the Timeout */
 986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Process unlocked */
 994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         return HAL_TIMEOUT;
 997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
ARM GAS  /tmp/cck3XRbv.s 			page 19


1002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(EventType == ADC_AWD_EVENT)
1003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
1005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Overrun event */
1011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
1012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to overrun */
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear ADC overrun flag */
1019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Enables the interrupt and starts ADC conversion of regular channels.
1029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status.
1032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
1036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable the ADC peripheral */
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
1046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Tstab time the ADC's stabilization */
1047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the Peripheral */
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
1055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
1056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       counter--;
1058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
ARM GAS  /tmp/cck3XRbv.s 			page 20


1059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
1063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state                                                          */
1065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* update ADC state.                                                      */
1073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
1085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC all error code fields */
1087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
1091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
1101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Check if Multimode enabled */
1103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
1104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
1106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
ARM GAS  /tmp/cck3XRbv.s 			page 21


1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if dual mode is selected, ADC3 works independently. */
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* check if the mode selected is not triple */
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
1124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* if instance of handle correspond to ADC3 and  no external trigger present enable softwar
1126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
1128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           /* Enable the selected ADC software conversion for regular group */
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
1131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       } 
1132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Disables the interrupt and stop ADC conversion of regular channels.
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * 
1142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
1143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *
1144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status.
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
1159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
1162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   	/* Disable ADC end of conversion interrupt for regular group */
1164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
1165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
ARM GAS  /tmp/cck3XRbv.s 			page 22


1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tmp1 = 0, tmp2 = 0;
1188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
1192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
1198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
1207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
1208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Note: On STM32F7, there is no independent flag of end of sequence.   */
1209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
1210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       of end of sequence.                                            */
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
1215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
1216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
1220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
1221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
1225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
ARM GAS  /tmp/cck3XRbv.s 			page 23


1230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Conversion complete callback */ 
1233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
1235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
1237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag */
1240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
1241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
1245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
1246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
1247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
1253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group injected  */
1256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* by external trigger, scan sequence on going or by automatic injected */
1257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* conversion from group regular (same conditions as group regular      */
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* interruption disabling above).                                       */
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
1264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE))))
1265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group injected */
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
1271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
1273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       { 
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Conversion complete callback */ 
1279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->InjectedConvCpltCallback(hadc);
1281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
1283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear injected group conversion flag */
1286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
ARM GAS  /tmp/cck3XRbv.s 			page 24


1287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
1290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
1291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check Analog watchdog flag */
1292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
1293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
1295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Level out of window callback */ 
1300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->LevelOutOfWindowCallback(hadc);
1302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
1304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
1313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
1314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check Overrun flag */
1315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(tmp1 && tmp2)
1316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Note: On STM32F7, ADC overrun can be set through other parameters    */
1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       refer to description of parameter "EOCSelection" for more      */
1319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       details.                                                       */
1320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to overrun */
1322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear ADC overrun flag */
1325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Error callback */ 
1328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear the Overrun flag */
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Enables ADC DMA request after last transfer (Single-ADC mode) and enables ADC periphera
1341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  pData The destination Buffer address.
ARM GAS  /tmp/cck3XRbv.s 			page 25


1344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  Length The length of data to be transferred from ADC peripheral to memory.
1345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
1346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
1350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
1354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable the ADC peripheral */
1359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
1360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      Tstab time the ADC's stabilization */
1361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
1362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
1363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the Peripheral */
1364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
1369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       counter--;
1372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
1377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state                                                          */
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* update ADC state.                                                      */
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
1399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Reset ADC all error code fields */
ARM GAS  /tmp/cck3XRbv.s 			page 26


1401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Process unlocked */
1405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_UNLOCK(hadc);   
1408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the DMA transfer complete callback */
1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the DMA half transfer complete callback */
1413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the DMA error callback */
1416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
1420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* start (in case of SW start):                                           */
1421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable ADC overrun interrupt */
1427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable ADC DMA mode */
1430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 |= ADC_CR2_DMA;
1431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Start the DMA channel */
1433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Check if Multimode enabled */
1436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
1437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
1439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
1440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
1446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
1448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
1449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* if dual mode is selected, ADC3 works independently. */
1454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* check if the mode selected is not triple */
1455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
1456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         /* if instance of handle correspond to ADC3 and  no external trigger present enable softwar
ARM GAS  /tmp/cck3XRbv.s 			page 27


1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
1459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
1460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           /* Enable the selected ADC software conversion for regular group */
1461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
1463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Disables ADC DMA (Single-ADC mode) and disables ADC peripheral    
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Disable ADC peripheral */
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
1490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
1493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Disable the selected ADC DMA mode */
1495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~ADC_CR2_DMA;
1496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC state */
1505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
1511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return tmp_hal_status;
ARM GAS  /tmp/cck3XRbv.s 			page 28


1515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Gets the converted value from data register of regular channel.
1519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval Converted value
1522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {       
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
1526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return hadc->Instance->DR;
1527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Regular conversion complete callback in non blocking mode 
1531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_ConvCpltCallback could be implemented in the user file
1541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */
1542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Regular conversion half DMA transfer callback in non blocking mode 
1546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
1556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */
1557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode 
1561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
1571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */
ARM GAS  /tmp/cck3XRbv.s 			page 29


1572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Error ADC callback.
1576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
1579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   UNUSED(hadc);
1590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             the HAL_ADC_ErrorCallback could be implemented in the user file
1592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    */
1593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
1597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *  @brief   	Peripheral Control functions 
1601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *
1602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @verbatim   
1603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
1604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****              ##### Peripheral Control functions #####
1605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================  
1606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Configure regular channels. 
1608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Configure injected channels.
1609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Configure multimode.
1610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Configure the analog watch dog.
1611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @endverbatim
1613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
1614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /**
1617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
1618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         rank in the sequencer and its sample time.
1619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  sConfig ADC configuration structure. 
1622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status
1623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
1627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
ARM GAS  /tmp/cck3XRbv.s 			page 30


1629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
1638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear the old sample time */
1640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
1641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
1643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set the new sample time */
1645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
1646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
1648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set the new sample time */
1650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
1651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear the old sample time */
1656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
1657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the new sample time */
1659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
1660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* For Rank 1 to 6 */
1663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (sConfig->Rank < 7)
1664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
1667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
1670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* For Rank 7 to 12 */
1672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else if (sConfig->Rank < 13)
1673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
1676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
1679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* For Rank 13 to 16 */
1681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
1682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
1685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
ARM GAS  /tmp/cck3XRbv.s 			page 31


1686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
1688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* if no internal channel selected */
1691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
1692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Disable the VBAT & TSVREFE channel*/
1694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
1695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* if ADC1 Channel_18 is selected enable VBAT Channel */
1698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
1699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the VBAT channel*/
1701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_VBATE;
1702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VRE
1705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channe
1706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the TSVREFE channel*/
1708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_TSVREFE;
1709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
1711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Delay for temperature sensor stabilization time */
1713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Compute number of CPU cycles to wait for */
1714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
1715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       while(counter != 0)
1716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         counter--;
1718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
1723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         is on going.
1733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
1735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
1736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
1738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
1742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         that contains the configuration information of ADC analog watchdog.
ARM GAS  /tmp/cck3XRbv.s 			page 32


1743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL status	  
1744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tmp = 0;
1749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */  
1750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
1752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(AnalogWDGConfig->WatchdogMode));
1753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp = ADC_GET_RESOLUTION(hadc);
1758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
1759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
1760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */
1761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process locked */
1763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
1766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
1771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
1777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
1778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set the analog watchdog enable mode */
1780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
1781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set the high threshold */
1783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
1784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set the low threshold */
1786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
1787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Clear the Analog watchdog channel select bits */
1789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
1790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set the Analog watchdog channel */
1792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
1793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Process unlocked */
1795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return function status */
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return HAL_OK;
1799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
ARM GAS  /tmp/cck3XRbv.s 			page 33


1800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
1803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 ADC Peripheral State functions
1806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *  @brief   ADC Peripheral State functions 
1807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  *
1808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @verbatim   
1809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================
1810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****             ##### Peripheral State and errors functions #####
1811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****  ===============================================================================  
1812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     [..]
1813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     This subsection provides functions allowing to
1814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Check the ADC state
1815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       (+) Check the ADC Error
1816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****          
1817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** @endverbatim
1818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
1819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  return the ADC state
1823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval HAL state
1826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
1830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return hadc->State;
1831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Return the ADC error code
1835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval ADC Error Code
1838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return hadc->ErrorCode;
1842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
1843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
1846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @}
1850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /* Private functions ---------------------------------------------------------*/
1853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @{
1856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
ARM GAS  /tmp/cck3XRbv.s 			page 34


1857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
1860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         in the ADC_InitStruct without initializing the ADC MSP.       
1861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
1863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc)
1866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
  27              		.loc 1 1866 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC parameters */
1868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set the ADC clock prescaler */
1869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ADC->CCR &= ~(ADC_CCR_ADCPRE);
  33              		.loc 1 1869 0
  34 0000 4A4B     		ldr	r3, .L7
  35 0002 5A68     		ldr	r2, [r3, #4]
  36 0004 22F44032 		bic	r2, r2, #196608
  37 0008 5A60     		str	r2, [r3, #4]
1870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ADC->CCR |=  hadc->Init.ClockPrescaler;
  38              		.loc 1 1870 0
  39 000a 5A68     		ldr	r2, [r3, #4]
  40 000c 4168     		ldr	r1, [r0, #4]
  41 000e 0A43     		orrs	r2, r2, r1
  42 0010 5A60     		str	r2, [r3, #4]
1871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC scan mode */
1873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
  43              		.loc 1 1873 0
  44 0012 0268     		ldr	r2, [r0]
  45 0014 5368     		ldr	r3, [r2, #4]
  46 0016 23F48073 		bic	r3, r3, #256
  47 001a 5360     		str	r3, [r2, #4]
1874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
  48              		.loc 1 1874 0
  49 001c 0268     		ldr	r2, [r0]
  50 001e 5368     		ldr	r3, [r2, #4]
  51 0020 0169     		ldr	r1, [r0, #16]
  52 0022 43EA0123 		orr	r3, r3, r1, lsl #8
  53 0026 5360     		str	r3, [r2, #4]
1875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC resolution */
1877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  54              		.loc 1 1877 0
  55 0028 0268     		ldr	r2, [r0]
  56 002a 5368     		ldr	r3, [r2, #4]
  57 002c 23F04073 		bic	r3, r3, #50331648
  58 0030 5360     		str	r3, [r2, #4]
1878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR1 |=  hadc->Init.Resolution;
  59              		.loc 1 1878 0
  60 0032 0268     		ldr	r2, [r0]
  61 0034 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/cck3XRbv.s 			page 35


  62 0036 8168     		ldr	r1, [r0, #8]
  63 0038 0B43     		orrs	r3, r3, r1
  64 003a 5360     		str	r3, [r2, #4]
1879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC data alignment */
1881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  65              		.loc 1 1881 0
  66 003c 0268     		ldr	r2, [r0]
  67 003e 9368     		ldr	r3, [r2, #8]
  68 0040 23F40063 		bic	r3, r3, #2048
  69 0044 9360     		str	r3, [r2, #8]
1882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= hadc->Init.DataAlign;
  70              		.loc 1 1882 0
  71 0046 0268     		ldr	r2, [r0]
  72 0048 9368     		ldr	r3, [r2, #8]
  73 004a C168     		ldr	r1, [r0, #12]
  74 004c 0B43     		orrs	r3, r3, r1
  75 004e 9360     		str	r3, [r2, #8]
1883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable external trigger if trigger selection is different of software  */
1885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* start.                                                                 */
1886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Note: This configuration keeps the hardware feature of parameter       */
1887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
1888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /*       software start.                                                  */
1889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  76              		.loc 1 1889 0
  77 0050 826A     		ldr	r2, [r0, #40]
  78 0052 374B     		ldr	r3, .L7+4
  79 0054 9A42     		cmp	r2, r3
  80 0056 4BD0     		beq	.L2
1890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Select external trigger to start conversion */
1892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
  81              		.loc 1 1892 0
  82 0058 0268     		ldr	r2, [r0]
  83 005a 9368     		ldr	r3, [r2, #8]
  84 005c 23F07063 		bic	r3, r3, #251658240
  85 0060 9360     		str	r3, [r2, #8]
1893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
  86              		.loc 1 1893 0
  87 0062 0268     		ldr	r2, [r0]
  88 0064 9368     		ldr	r3, [r2, #8]
  89 0066 816A     		ldr	r1, [r0, #40]
  90 0068 0B43     		orrs	r3, r3, r1
  91 006a 9360     		str	r3, [r2, #8]
1894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Select external trigger polarity */
1896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  92              		.loc 1 1896 0
  93 006c 0268     		ldr	r2, [r0]
  94 006e 9368     		ldr	r3, [r2, #8]
  95 0070 23F04053 		bic	r3, r3, #805306368
  96 0074 9360     		str	r3, [r2, #8]
1897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
  97              		.loc 1 1897 0
  98 0076 0268     		ldr	r2, [r0]
  99 0078 9368     		ldr	r3, [r2, #8]
ARM GAS  /tmp/cck3XRbv.s 			page 36


 100 007a C16A     		ldr	r1, [r0, #44]
 101 007c 0B43     		orrs	r3, r3, r1
 102 007e 9360     		str	r3, [r2, #8]
 103              	.L3:
1898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
1900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Reset the external trigger */
1902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
1903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
1904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable or disable ADC continuous conversion mode */
1907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 104              		.loc 1 1907 0
 105 0080 0268     		ldr	r2, [r0]
 106 0082 9368     		ldr	r3, [r2, #8]
 107 0084 23F00203 		bic	r3, r3, #2
 108 0088 9360     		str	r3, [r2, #8]
1908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 109              		.loc 1 1908 0
 110 008a 0268     		ldr	r2, [r0]
 111 008c 9368     		ldr	r3, [r2, #8]
 112 008e 8169     		ldr	r1, [r0, #24]
 113 0090 43EA4103 		orr	r3, r3, r1, lsl #1
 114 0094 9360     		str	r3, [r2, #8]
1909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if(hadc->Init.DiscontinuousConvMode != DISABLE)
 115              		.loc 1 1910 0
 116 0096 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 117 009a 002B     		cmp	r3, #0
 118 009c 33D1     		bne	.L6
1911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
1913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
1915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
1916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set the number of channels to be converted in discontinuous mode */
1918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
1919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
1920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else
1922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
1924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 119              		.loc 1 1924 0
 120 009e 0268     		ldr	r2, [r0]
 121 00a0 5368     		ldr	r3, [r2, #4]
 122 00a2 23F40063 		bic	r3, r3, #2048
 123 00a6 5360     		str	r3, [r2, #4]
 124              	.L5:
1925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC number of conversion */
1928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 125              		.loc 1 1928 0
ARM GAS  /tmp/cck3XRbv.s 			page 37


 126 00a8 0268     		ldr	r2, [r0]
 127 00aa D36A     		ldr	r3, [r2, #44]
 128 00ac 23F47003 		bic	r3, r3, #15728640
 129 00b0 D362     		str	r3, [r2, #44]
1929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 130              		.loc 1 1929 0
 131 00b2 0168     		ldr	r1, [r0]
 132 00b4 CB6A     		ldr	r3, [r1, #44]
 133 00b6 C269     		ldr	r2, [r0, #28]
 134 00b8 013A     		subs	r2, r2, #1
 135 00ba 43EA0253 		orr	r3, r3, r2, lsl #20
 136 00be CB62     		str	r3, [r1, #44]
1930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable or disable ADC DMA continuous request */
1932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 137              		.loc 1 1932 0
 138 00c0 0268     		ldr	r2, [r0]
 139 00c2 9368     		ldr	r3, [r2, #8]
 140 00c4 23F40073 		bic	r3, r3, #512
 141 00c8 9360     		str	r3, [r2, #8]
1933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 142              		.loc 1 1933 0
 143 00ca 0268     		ldr	r2, [r0]
 144 00cc 9368     		ldr	r3, [r2, #8]
 145 00ce 90F83010 		ldrb	r1, [r0, #48]	@ zero_extendqisi2
 146 00d2 43EA4123 		orr	r3, r3, r1, lsl #9
 147 00d6 9360     		str	r3, [r2, #8]
1934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Enable or disable ADC end of conversion selection */
1936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 148              		.loc 1 1936 0
 149 00d8 0268     		ldr	r2, [r0]
 150 00da 9368     		ldr	r3, [r2, #8]
 151 00dc 23F48063 		bic	r3, r3, #1024
 152 00e0 9360     		str	r3, [r2, #8]
1937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 153              		.loc 1 1937 0
 154 00e2 0268     		ldr	r2, [r0]
 155 00e4 9368     		ldr	r3, [r2, #8]
 156 00e6 4169     		ldr	r1, [r0, #20]
 157 00e8 43EA8123 		orr	r3, r3, r1, lsl #10
 158 00ec 9360     		str	r3, [r2, #8]
1938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 159              		.loc 1 1938 0
 160 00ee 7047     		bx	lr
 161              	.L2:
1902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 162              		.loc 1 1902 0
 163 00f0 0268     		ldr	r2, [r0]
 164 00f2 9368     		ldr	r3, [r2, #8]
 165 00f4 23F07063 		bic	r3, r3, #251658240
 166 00f8 9360     		str	r3, [r2, #8]
1903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 167              		.loc 1 1903 0
 168 00fa 0268     		ldr	r2, [r0]
 169 00fc 9368     		ldr	r3, [r2, #8]
 170 00fe 23F04053 		bic	r3, r3, #805306368
ARM GAS  /tmp/cck3XRbv.s 			page 38


 171 0102 9360     		str	r3, [r2, #8]
 172 0104 BCE7     		b	.L3
 173              	.L6:
1915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 174              		.loc 1 1915 0
 175 0106 0268     		ldr	r2, [r0]
 176 0108 5368     		ldr	r3, [r2, #4]
 177 010a 43F40063 		orr	r3, r3, #2048
 178 010e 5360     		str	r3, [r2, #4]
1918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 179              		.loc 1 1918 0
 180 0110 0268     		ldr	r2, [r0]
 181 0112 5368     		ldr	r3, [r2, #4]
 182 0114 23F46043 		bic	r3, r3, #57344
 183 0118 5360     		str	r3, [r2, #4]
1919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 184              		.loc 1 1919 0
 185 011a 0168     		ldr	r1, [r0]
 186 011c 4B68     		ldr	r3, [r1, #4]
 187 011e 426A     		ldr	r2, [r0, #36]
 188 0120 013A     		subs	r2, r2, #1
 189 0122 43EA4233 		orr	r3, r3, r2, lsl #13
 190 0126 4B60     		str	r3, [r1, #4]
 191 0128 BEE7     		b	.L5
 192              	.L8:
 193 012a 00BF     		.align	2
 194              	.L7:
 195 012c 00230140 		.word	1073816320
 196 0130 0100000F 		.word	251658241
 197              		.cfi_endproc
 198              	.LFE163:
 200              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 201              		.align	1
 202              		.weak	HAL_ADC_MspInit
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv5-sp-d16
 208              	HAL_ADC_MspInit:
 209              	.LFB143:
 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 210              		.loc 1 474 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215              	.LVL1:
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 216              		.loc 1 480 0
 217 0000 7047     		bx	lr
 218              		.cfi_endproc
 219              	.LFE143:
 221              		.section	.text.HAL_ADC_Init,"ax",%progbits
 222              		.align	1
 223              		.global	HAL_ADC_Init
 224              		.syntax unified
 225              		.thumb
ARM GAS  /tmp/cck3XRbv.s 			page 39


 226              		.thumb_func
 227              		.fpu fpv5-sp-d16
 229              	HAL_ADC_Init:
 230              	.LFB141:
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 231              		.loc 1 323 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              	.LVL2:
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 236              		.loc 1 327 0
 237 0000 28B3     		cbz	r0, .L14
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 238              		.loc 1 323 0
 239 0002 10B5     		push	{r4, lr}
 240              	.LCFI0:
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 4, -8
 243              		.cfi_offset 14, -4
 244 0004 0446     		mov	r4, r0
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 245              		.loc 1 350 0
 246 0006 036C     		ldr	r3, [r0, #64]
 247 0008 43B1     		cbz	r3, .L20
 248              	.LVL3:
 249              	.L12:
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 250              		.loc 1 380 0
 251 000a 236C     		ldr	r3, [r4, #64]
 252 000c 13F0100F 		tst	r3, #16
 253 0010 0BD0     		beq	.L21
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 254              		.loc 1 400 0
 255 0012 0120     		movs	r0, #1
 256              	.L13:
 257              	.LVL4:
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 258              		.loc 1 404 0
 259 0014 0023     		movs	r3, #0
 260 0016 84F83C30 		strb	r3, [r4, #60]
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 261              		.loc 1 408 0
 262 001a 10BD     		pop	{r4, pc}
 263              	.LVL5:
 264              	.L20:
 368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 265              		.loc 1 368 0
 266 001c FFF7FEFF 		bl	HAL_ADC_MspInit
 267              	.LVL6:
 372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 268              		.loc 1 372 0
 269 0020 0023     		movs	r3, #0
 270 0022 6364     		str	r3, [r4, #68]
 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 271              		.loc 1 375 0
 272 0024 84F83C30 		strb	r3, [r4, #60]
ARM GAS  /tmp/cck3XRbv.s 			page 40


 273 0028 EFE7     		b	.L12
 274              	.L21:
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 275              		.loc 1 383 0
 276 002a 226C     		ldr	r2, [r4, #64]
 277 002c 094B     		ldr	r3, .L22
 278 002e 1340     		ands	r3, r3, r2
 279 0030 43F00203 		orr	r3, r3, #2
 280 0034 2364     		str	r3, [r4, #64]
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 281              		.loc 1 388 0
 282 0036 2046     		mov	r0, r4
 283 0038 FFF7FEFF 		bl	ADC_Init
 284              	.LVL7:
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 285              		.loc 1 391 0
 286 003c 0020     		movs	r0, #0
 287 003e 6064     		str	r0, [r4, #68]
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 288              		.loc 1 394 0
 289 0040 236C     		ldr	r3, [r4, #64]
 290 0042 23F00303 		bic	r3, r3, #3
 291 0046 43F00103 		orr	r3, r3, #1
 292 004a 2364     		str	r3, [r4, #64]
 293 004c E2E7     		b	.L13
 294              	.LVL8:
 295              	.L14:
 296              	.LCFI1:
 297              		.cfi_def_cfa_offset 0
 298              		.cfi_restore 4
 299              		.cfi_restore 14
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 300              		.loc 1 329 0
 301 004e 0120     		movs	r0, #1
 302              	.LVL9:
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 303              		.loc 1 408 0
 304 0050 7047     		bx	lr
 305              	.L23:
 306 0052 00BF     		.align	2
 307              	.L22:
 308 0054 FDEEFFFF 		.word	-4355
 309              		.cfi_endproc
 310              	.LFE141:
 312              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 313              		.align	1
 314              		.weak	HAL_ADC_MspDeInit
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu fpv5-sp-d16
 320              	HAL_ADC_MspDeInit:
 321              	.LFB144:
 489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 322              		.loc 1 489 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cck3XRbv.s 			page 41


 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327              	.LVL10:
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 328              		.loc 1 495 0
 329 0000 7047     		bx	lr
 330              		.cfi_endproc
 331              	.LFE144:
 333              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 334              		.align	1
 335              		.global	HAL_ADC_DeInit
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 339              		.fpu fpv5-sp-d16
 341              	HAL_ADC_DeInit:
 342              	.LFB142:
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 343              		.loc 1 417 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347              	.LVL11:
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 348              		.loc 1 421 0
 349 0000 C8B1     		cbz	r0, .L28
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 350              		.loc 1 417 0
 351 0002 10B5     		push	{r4, lr}
 352              	.LCFI2:
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 4, -8
 355              		.cfi_offset 14, -4
 356 0004 0446     		mov	r4, r0
 430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 357              		.loc 1 430 0
 358 0006 036C     		ldr	r3, [r0, #64]
 359 0008 43F00203 		orr	r3, r3, #2
 360 000c 0364     		str	r3, [r0, #64]
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 361              		.loc 1 434 0
 362 000e 0268     		ldr	r2, [r0]
 363 0010 9368     		ldr	r3, [r2, #8]
 364 0012 23F00103 		bic	r3, r3, #1
 365 0016 9360     		str	r3, [r2, #8]
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 366              		.loc 1 438 0
 367 0018 0368     		ldr	r3, [r0]
 368 001a 9B68     		ldr	r3, [r3, #8]
 369 001c 13F0010F 		tst	r3, #1
 370 0020 03D0     		beq	.L33
 371              	.LVL12:
 372              	.L27:
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 373              		.loc 1 461 0
 374 0022 0020     		movs	r0, #0
 375 0024 84F83C00 		strb	r0, [r4, #60]
ARM GAS  /tmp/cck3XRbv.s 			page 42


 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 376              		.loc 1 465 0
 377 0028 10BD     		pop	{r4, pc}
 378              	.LVL13:
 379              	.L33:
 450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 380              		.loc 1 450 0
 381 002a FFF7FEFF 		bl	HAL_ADC_MspDeInit
 382              	.LVL14:
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 383              		.loc 1 454 0
 384 002e 0023     		movs	r3, #0
 385 0030 6364     		str	r3, [r4, #68]
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 386              		.loc 1 457 0
 387 0032 2364     		str	r3, [r4, #64]
 388 0034 F5E7     		b	.L27
 389              	.LVL15:
 390              	.L28:
 391              	.LCFI3:
 392              		.cfi_def_cfa_offset 0
 393              		.cfi_restore 4
 394              		.cfi_restore 14
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 395              		.loc 1 423 0
 396 0036 0120     		movs	r0, #1
 397              	.LVL16:
 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 398              		.loc 1 465 0
 399 0038 7047     		bx	lr
 400              		.cfi_endproc
 401              	.LFE142:
 403              		.section	.text.HAL_ADC_Start,"ax",%progbits
 404              		.align	1
 405              		.global	HAL_ADC_Start
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 409              		.fpu fpv5-sp-d16
 411              	HAL_ADC_Start:
 412              	.LFB145:
 731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 413              		.loc 1 731 0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 8
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417              		@ link register save eliminated.
 418              	.LVL17:
 419 0000 82B0     		sub	sp, sp, #8
 420              	.LCFI4:
 421              		.cfi_def_cfa_offset 8
 732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 422              		.loc 1 732 0
 423 0002 0023     		movs	r3, #0
 424 0004 0193     		str	r3, [sp, #4]
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 425              		.loc 1 739 0
ARM GAS  /tmp/cck3XRbv.s 			page 43


 426 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 427 000a 012B     		cmp	r3, #1
 428 000c 73D0     		beq	.L44
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 429              		.loc 1 739 0 is_stmt 0 discriminator 2
 430 000e 0123     		movs	r3, #1
 431 0010 80F83C30 		strb	r3, [r0, #60]
 744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
 432              		.loc 1 744 0 is_stmt 1 discriminator 2
 433 0014 0368     		ldr	r3, [r0]
 434 0016 9A68     		ldr	r2, [r3, #8]
 435 0018 12F0010F 		tst	r2, #1
 436 001c 13D1     		bne	.L36
 747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 437              		.loc 1 747 0
 438 001e 9A68     		ldr	r2, [r3, #8]
 439 0020 42F00102 		orr	r2, r2, #1
 440 0024 9A60     		str	r2, [r3, #8]
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 441              		.loc 1 751 0
 442 0026 394B     		ldr	r3, .L53
 443 0028 1B68     		ldr	r3, [r3]
 444 002a 394A     		ldr	r2, .L53+4
 445 002c A2FB0323 		umull	r2, r3, r2, r3
 446 0030 9B0C     		lsrs	r3, r3, #18
 447 0032 03EB4303 		add	r3, r3, r3, lsl #1
 448 0036 0193     		str	r3, [sp, #4]
 752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 449              		.loc 1 752 0
 450 0038 02E0     		b	.L37
 451              	.L38:
 754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 452              		.loc 1 754 0
 453 003a 019B     		ldr	r3, [sp, #4]
 454 003c 013B     		subs	r3, r3, #1
 455 003e 0193     		str	r3, [sp, #4]
 456              	.L37:
 752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 457              		.loc 1 752 0
 458 0040 019B     		ldr	r3, [sp, #4]
 459 0042 002B     		cmp	r3, #0
 460 0044 F9D1     		bne	.L38
 461              	.L36:
 759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 462              		.loc 1 759 0
 463 0046 0268     		ldr	r2, [r0]
 464 0048 9368     		ldr	r3, [r2, #8]
 465 004a 13F0010F 		tst	r3, #1
 466 004e 54D0     		beq	.L45
 764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 467              		.loc 1 764 0
 468 0050 016C     		ldr	r1, [r0, #64]
 469 0052 304B     		ldr	r3, .L53+8
 470 0054 0B40     		ands	r3, r3, r1
 471 0056 43F48073 		orr	r3, r3, #256
 472 005a 0364     		str	r3, [r0, #64]
 770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
ARM GAS  /tmp/cck3XRbv.s 			page 44


 473              		.loc 1 770 0
 474 005c 5368     		ldr	r3, [r2, #4]
 475 005e 13F4806F 		tst	r3, #1024
 476 0062 05D0     		beq	.L39
 772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 477              		.loc 1 772 0
 478 0064 036C     		ldr	r3, [r0, #64]
 479 0066 23F44053 		bic	r3, r3, #12288
 480 006a 43F48053 		orr	r3, r3, #4096
 481 006e 0364     		str	r3, [r0, #64]
 482              	.L39:
 776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 483              		.loc 1 776 0
 484 0070 036C     		ldr	r3, [r0, #64]
 485 0072 13F4805F 		tst	r3, #4096
 486 0076 19D0     		beq	.L40
 779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 487              		.loc 1 779 0
 488 0078 436C     		ldr	r3, [r0, #68]
 489 007a 23F00603 		bic	r3, r3, #6
 490 007e 4364     		str	r3, [r0, #68]
 491              	.L41:
 790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 492              		.loc 1 790 0
 493 0080 0023     		movs	r3, #0
 494 0082 80F83C30 		strb	r3, [r0, #60]
 794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 495              		.loc 1 794 0
 496 0086 6FF02203 		mvn	r3, #34
 497 008a 1360     		str	r3, [r2]
 797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 498              		.loc 1 797 0
 499 008c 224B     		ldr	r3, .L53+12
 500 008e 5B68     		ldr	r3, [r3, #4]
 501 0090 13F01F0F 		tst	r3, #31
 502 0094 0DD1     		bne	.L42
 800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 503              		.loc 1 800 0
 504 0096 0368     		ldr	r3, [r0]
 505 0098 9A68     		ldr	r2, [r3, #8]
 506 009a 12F0405F 		tst	r2, #805306368
 507 009e 2FD1     		bne	.L46
 803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 508              		.loc 1 803 0
 509 00a0 9A68     		ldr	r2, [r3, #8]
 510 00a2 42F08042 		orr	r2, r2, #1073741824
 511 00a6 9A60     		str	r2, [r3, #8]
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 512              		.loc 1 830 0
 513 00a8 0020     		movs	r0, #0
 514              	.LVL18:
 515 00aa 27E0     		b	.L35
 516              	.LVL19:
 517              	.L40:
 784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 518              		.loc 1 784 0
 519 00ac 0023     		movs	r3, #0
ARM GAS  /tmp/cck3XRbv.s 			page 45


 520 00ae 4364     		str	r3, [r0, #68]
 521 00b0 E6E7     		b	.L41
 522              	.L42:
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 523              		.loc 1 809 0
 524 00b2 0368     		ldr	r3, [r0]
 525 00b4 194A     		ldr	r2, .L53+16
 526 00b6 9342     		cmp	r3, r2
 527 00b8 0AD0     		beq	.L51
 528              	.L43:
 817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 529              		.loc 1 817 0
 530 00ba 174B     		ldr	r3, .L53+12
 531 00bc 5B68     		ldr	r3, [r3, #4]
 532 00be 13F0100F 		tst	r3, #16
 533 00c2 1FD1     		bne	.L47
 820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 534              		.loc 1 820 0
 535 00c4 0368     		ldr	r3, [r0]
 536 00c6 164A     		ldr	r2, .L53+20
 537 00c8 9342     		cmp	r3, r2
 538 00ca 0AD0     		beq	.L52
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 539              		.loc 1 830 0
 540 00cc 0020     		movs	r0, #0
 541              	.LVL20:
 542 00ce 15E0     		b	.L35
 543              	.LVL21:
 544              	.L51:
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 545              		.loc 1 809 0 discriminator 1
 546 00d0 9A68     		ldr	r2, [r3, #8]
 547 00d2 12F0405F 		tst	r2, #805306368
 548 00d6 F0D1     		bne	.L43
 812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 549              		.loc 1 812 0
 550 00d8 9A68     		ldr	r2, [r3, #8]
 551 00da 42F08042 		orr	r2, r2, #1073741824
 552 00de 9A60     		str	r2, [r3, #8]
 553 00e0 EBE7     		b	.L43
 554              	.L52:
 820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 555              		.loc 1 820 0 discriminator 1
 556 00e2 9A68     		ldr	r2, [r3, #8]
 557 00e4 12F0405F 		tst	r2, #805306368
 558 00e8 0ED1     		bne	.L49
 823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
 559              		.loc 1 823 0
 560 00ea 9A68     		ldr	r2, [r3, #8]
 561 00ec 42F08042 		orr	r2, r2, #1073741824
 562 00f0 9A60     		str	r2, [r3, #8]
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 563              		.loc 1 830 0
 564 00f2 0020     		movs	r0, #0
 565              	.LVL22:
 566 00f4 02E0     		b	.L35
 567              	.LVL23:
ARM GAS  /tmp/cck3XRbv.s 			page 46


 568              	.L44:
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 569              		.loc 1 739 0
 570 00f6 0220     		movs	r0, #2
 571              	.LVL24:
 572 00f8 00E0     		b	.L35
 573              	.LVL25:
 574              	.L45:
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 575              		.loc 1 830 0
 576 00fa 0020     		movs	r0, #0
 577              	.LVL26:
 578              	.L35:
 831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 579              		.loc 1 831 0
 580 00fc 02B0     		add	sp, sp, #8
 581              	.LCFI5:
 582              		.cfi_remember_state
 583              		.cfi_def_cfa_offset 0
 584              		@ sp needed
 585 00fe 7047     		bx	lr
 586              	.LVL27:
 587              	.L46:
 588              	.LCFI6:
 589              		.cfi_restore_state
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 590              		.loc 1 830 0
 591 0100 0020     		movs	r0, #0
 592              	.LVL28:
 593 0102 FBE7     		b	.L35
 594              	.LVL29:
 595              	.L47:
 596 0104 0020     		movs	r0, #0
 597              	.LVL30:
 598 0106 F9E7     		b	.L35
 599              	.LVL31:
 600              	.L49:
 601 0108 0020     		movs	r0, #0
 602              	.LVL32:
 603 010a F7E7     		b	.L35
 604              	.L54:
 605              		.align	2
 606              	.L53:
 607 010c 00000000 		.word	SystemCoreClock
 608 0110 83DE1B43 		.word	1125899907
 609 0114 FEF8FFFF 		.word	-1794
 610 0118 00230140 		.word	1073816320
 611 011c 00200140 		.word	1073815552
 612 0120 00220140 		.word	1073816064
 613              		.cfi_endproc
 614              	.LFE145:
 616              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 617              		.align	1
 618              		.global	HAL_ADC_Stop
 619              		.syntax unified
 620              		.thumb
 621              		.thumb_func
ARM GAS  /tmp/cck3XRbv.s 			page 47


 622              		.fpu fpv5-sp-d16
 624              	HAL_ADC_Stop:
 625              	.LFB146:
 844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 626              		.loc 1 844 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 631              	.LVL33:
 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 632              		.loc 1 849 0
 633 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 634 0004 012B     		cmp	r3, #1
 635 0006 17D0     		beq	.L58
 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 636              		.loc 1 849 0 is_stmt 0 discriminator 2
 637 0008 0123     		movs	r3, #1
 638 000a 80F83C30 		strb	r3, [r0, #60]
 853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 639              		.loc 1 853 0 is_stmt 1 discriminator 2
 640 000e 0268     		ldr	r2, [r0]
 641 0010 9368     		ldr	r3, [r2, #8]
 642 0012 23F00103 		bic	r3, r3, #1
 643 0016 9360     		str	r3, [r2, #8]
 856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 644              		.loc 1 856 0 discriminator 2
 645 0018 0368     		ldr	r3, [r0]
 646 001a 9B68     		ldr	r3, [r3, #8]
 647 001c 13F0010F 		tst	r3, #1
 648 0020 05D1     		bne	.L57
 859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 649              		.loc 1 859 0
 650 0022 026C     		ldr	r2, [r0, #64]
 651 0024 054B     		ldr	r3, .L59
 652 0026 1340     		ands	r3, r3, r2
 653 0028 43F00103 		orr	r3, r3, #1
 654 002c 0364     		str	r3, [r0, #64]
 655              	.L57:
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 656              		.loc 1 865 0
 657 002e 0023     		movs	r3, #0
 658 0030 80F83C30 		strb	r3, [r0, #60]
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 659              		.loc 1 868 0
 660 0034 1846     		mov	r0, r3
 661              	.LVL34:
 662 0036 7047     		bx	lr
 663              	.LVL35:
 664              	.L58:
 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 665              		.loc 1 849 0
 666 0038 0220     		movs	r0, #2
 667              	.LVL36:
 869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 668              		.loc 1 869 0
 669 003a 7047     		bx	lr
ARM GAS  /tmp/cck3XRbv.s 			page 48


 670              	.L60:
 671              		.align	2
 672              	.L59:
 673 003c FEEEFFFF 		.word	-4354
 674              		.cfi_endproc
 675              	.LFE146:
 677              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 678              		.align	1
 679              		.global	HAL_ADC_PollForConversion
 680              		.syntax unified
 681              		.thumb
 682              		.thumb_func
 683              		.fpu fpv5-sp-d16
 685              	HAL_ADC_PollForConversion:
 686              	.LFB147:
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 687              		.loc 1 887 0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691              	.LVL37:
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 692              		.loc 1 896 0
 693 0000 0368     		ldr	r3, [r0]
 694 0002 9A68     		ldr	r2, [r3, #8]
 695 0004 12F4806F 		tst	r2, #1024
 696 0008 03D0     		beq	.L62
 897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 697              		.loc 1 897 0 discriminator 1
 698 000a 9B68     		ldr	r3, [r3, #8]
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 699              		.loc 1 896 0 discriminator 1
 700 000c 13F4807F 		tst	r3, #256
 701 0010 1CD1     		bne	.L76
 702              	.L62:
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 703              		.loc 1 887 0
 704 0012 70B5     		push	{r4, r5, r6, lr}
 705              	.LCFI7:
 706              		.cfi_def_cfa_offset 16
 707              		.cfi_offset 4, -16
 708              		.cfi_offset 5, -12
 709              		.cfi_offset 6, -8
 710              		.cfi_offset 14, -4
 711 0014 0D46     		mov	r5, r1
 712 0016 0446     		mov	r4, r0
 909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 713              		.loc 1 909 0
 714 0018 FFF7FEFF 		bl	HAL_GetTick
 715              	.LVL38:
 716 001c 0646     		mov	r6, r0
 717              	.LVL39:
 718              	.L65:
 912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 719              		.loc 1 912 0
 720 001e 2368     		ldr	r3, [r4]
 721 0020 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cck3XRbv.s 			page 49


 722 0022 12F0020F 		tst	r2, #2
 723 0026 1AD1     		bne	.L77
 915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 724              		.loc 1 915 0
 725 0028 B5F1FF3F 		cmp	r5, #-1
 726 002c F7D0     		beq	.L65
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 727              		.loc 1 917 0
 728 002e 25B1     		cbz	r5, .L66
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 729              		.loc 1 917 0 is_stmt 0 discriminator 1
 730 0030 FFF7FEFF 		bl	HAL_GetTick
 731              	.LVL40:
 732 0034 801B     		subs	r0, r0, r6
 733 0036 A842     		cmp	r0, r5
 734 0038 F1D9     		bls	.L65
 735              	.L66:
 920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 736              		.loc 1 920 0 is_stmt 1
 737 003a 236C     		ldr	r3, [r4, #64]
 738 003c 43F00403 		orr	r3, r3, #4
 739 0040 2364     		str	r3, [r4, #64]
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 740              		.loc 1 923 0
 741 0042 0023     		movs	r3, #0
 742 0044 84F83C30 		strb	r3, [r4, #60]
 925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 743              		.loc 1 925 0
 744 0048 0320     		movs	r0, #3
 745 004a 2DE0     		b	.L63
 746              	.LVL41:
 747              	.L76:
 748              	.LCFI8:
 749              		.cfi_def_cfa_offset 0
 750              		.cfi_restore 4
 751              		.cfi_restore 5
 752              		.cfi_restore 6
 753              		.cfi_restore 14
 900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 754              		.loc 1 900 0
 755 004c 036C     		ldr	r3, [r0, #64]
 756 004e 43F02003 		orr	r3, r3, #32
 757 0052 0364     		str	r3, [r0, #64]
 903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 758              		.loc 1 903 0
 759 0054 0023     		movs	r3, #0
 760 0056 80F83C30 		strb	r3, [r0, #60]
 905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 761              		.loc 1 905 0
 762 005a 0120     		movs	r0, #1
 763              	.LVL42:
 958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 764              		.loc 1 958 0
 765 005c 7047     		bx	lr
 766              	.LVL43:
 767              	.L77:
 768              	.LCFI9:
ARM GAS  /tmp/cck3XRbv.s 			page 50


 769              		.cfi_def_cfa_offset 16
 770              		.cfi_offset 4, -16
 771              		.cfi_offset 5, -12
 772              		.cfi_offset 6, -8
 773              		.cfi_offset 14, -4
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 774              		.loc 1 931 0
 775 005e 6FF01202 		mvn	r2, #18
 776 0062 1A60     		str	r2, [r3]
 934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 777              		.loc 1 934 0
 778 0064 236C     		ldr	r3, [r4, #64]
 779 0066 43F40073 		orr	r3, r3, #512
 780 006a 2364     		str	r3, [r4, #64]
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 781              		.loc 1 942 0
 782 006c 2368     		ldr	r3, [r4]
 783 006e 9A68     		ldr	r2, [r3, #8]
 784 0070 12F0405F 		tst	r2, #805306368
 785 0074 17D1     		bne	.L69
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 786              		.loc 1 943 0 discriminator 1
 787 0076 A269     		ldr	r2, [r4, #24]
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 788              		.loc 1 942 0 discriminator 1
 789 0078 BAB9     		cbnz	r2, .L70
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 790              		.loc 1 944 0
 791 007a DA6A     		ldr	r2, [r3, #44]
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 792              		.loc 1 943 0
 793 007c 12F4700F 		tst	r2, #15728640
 794 0080 03D0     		beq	.L68
 945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 795              		.loc 1 945 0
 796 0082 9B68     		ldr	r3, [r3, #8]
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 797              		.loc 1 944 0
 798 0084 13F4806F 		tst	r3, #1024
 799 0088 11D1     		bne	.L71
 800              	.L68:
 948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 801              		.loc 1 948 0
 802 008a 236C     		ldr	r3, [r4, #64]
 803 008c 23F48073 		bic	r3, r3, #256
 804 0090 2364     		str	r3, [r4, #64]
 950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     { 
 805              		.loc 1 950 0
 806 0092 236C     		ldr	r3, [r4, #64]
 807 0094 13F4805F 		tst	r3, #4096
 808 0098 0BD1     		bne	.L72
 952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 809              		.loc 1 952 0
 810 009a 236C     		ldr	r3, [r4, #64]
 811 009c 43F00103 		orr	r3, r3, #1
 812 00a0 2364     		str	r3, [r4, #64]
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
ARM GAS  /tmp/cck3XRbv.s 			page 51


 813              		.loc 1 957 0
 814 00a2 0020     		movs	r0, #0
 815 00a4 00E0     		b	.L63
 816              	.L69:
 817 00a6 0020     		movs	r0, #0
 818              	.L63:
 958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 819              		.loc 1 958 0
 820 00a8 70BD     		pop	{r4, r5, r6, pc}
 821              	.LVL44:
 822              	.L70:
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 823              		.loc 1 957 0
 824 00aa 0020     		movs	r0, #0
 825 00ac FCE7     		b	.L63
 826              	.L71:
 827 00ae 0020     		movs	r0, #0
 828 00b0 FAE7     		b	.L63
 829              	.L72:
 830 00b2 0020     		movs	r0, #0
 831 00b4 F8E7     		b	.L63
 832              		.cfi_endproc
 833              	.LFE147:
 835              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 836              		.align	1
 837              		.global	HAL_ADC_PollForEvent
 838              		.syntax unified
 839              		.thumb
 840              		.thumb_func
 841              		.fpu fpv5-sp-d16
 843              	HAL_ADC_PollForEvent:
 844              	.LFB148:
 972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tickstart = 0;
 845              		.loc 1 972 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849              	.LVL45:
 850 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 851              	.LCFI10:
 852              		.cfi_def_cfa_offset 24
 853              		.cfi_offset 3, -24
 854              		.cfi_offset 4, -20
 855              		.cfi_offset 5, -16
 856              		.cfi_offset 6, -12
 857              		.cfi_offset 7, -8
 858              		.cfi_offset 14, -4
 859 0002 0446     		mov	r4, r0
 860 0004 0D46     		mov	r5, r1
 861 0006 1646     		mov	r6, r2
 862              	.LVL46:
 980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 863              		.loc 1 980 0
 864 0008 FFF7FEFF 		bl	HAL_GetTick
 865              	.LVL47:
 866 000c 0746     		mov	r7, r0
 867              	.LVL48:
ARM GAS  /tmp/cck3XRbv.s 			page 52


 868              	.L80:
 983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 869              		.loc 1 983 0
 870 000e 2368     		ldr	r3, [r4]
 871 0010 1A68     		ldr	r2, [r3]
 872 0012 35EA0202 		bics	r2, r5, r2
 873 0016 11D0     		beq	.L86
 986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 874              		.loc 1 986 0
 875 0018 B6F1FF3F 		cmp	r6, #-1
 876 001c F7D0     		beq	.L80
 988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 877              		.loc 1 988 0
 878 001e 26B1     		cbz	r6, .L81
 988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 879              		.loc 1 988 0 is_stmt 0 discriminator 1
 880 0020 FFF7FEFF 		bl	HAL_GetTick
 881              	.LVL49:
 882 0024 C01B     		subs	r0, r0, r7
 883 0026 B042     		cmp	r0, r6
 884 0028 F1D9     		bls	.L80
 885              	.L81:
 991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 886              		.loc 1 991 0 is_stmt 1
 887 002a 236C     		ldr	r3, [r4, #64]
 888 002c 43F00403 		orr	r3, r3, #4
 889 0030 2364     		str	r3, [r4, #64]
 994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         
 890              		.loc 1 994 0
 891 0032 0023     		movs	r3, #0
 892 0034 84F83C30 		strb	r3, [r4, #60]
 996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 893              		.loc 1 996 0
 894 0038 0320     		movs	r0, #3
 895 003a 0DE0     		b	.L82
 896              	.L86:
1002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 897              		.loc 1 1002 0
 898 003c 012D     		cmp	r5, #1
 899 003e 0CD0     		beq	.L87
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Set ADC error code to overrun */
 900              		.loc 1 1014 0
 901 0040 226C     		ldr	r2, [r4, #64]
 902 0042 42F48062 		orr	r2, r2, #1024
 903 0046 2264     		str	r2, [r4, #64]
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 904              		.loc 1 1016 0
 905 0048 626C     		ldr	r2, [r4, #68]
 906 004a 42F00202 		orr	r2, r2, #2
 907 004e 6264     		str	r2, [r4, #68]
1019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 908              		.loc 1 1019 0
 909 0050 6FF02002 		mvn	r2, #32
 910 0054 1A60     		str	r2, [r3]
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 911              		.loc 1 1023 0
 912 0056 0020     		movs	r0, #0
ARM GAS  /tmp/cck3XRbv.s 			page 53


 913              	.L82:
1024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 914              		.loc 1 1024 0
 915 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 916              	.LVL50:
 917              	.L87:
1005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 918              		.loc 1 1005 0
 919 005a 226C     		ldr	r2, [r4, #64]
 920 005c 42F48032 		orr	r2, r2, #65536
 921 0060 2264     		str	r2, [r4, #64]
1008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 922              		.loc 1 1008 0
 923 0062 6FF00102 		mvn	r2, #1
 924 0066 1A60     		str	r2, [r3]
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 925              		.loc 1 1023 0
 926 0068 0020     		movs	r0, #0
 927 006a F5E7     		b	.L82
 928              		.cfi_endproc
 929              	.LFE148:
 931              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 932              		.align	1
 933              		.global	HAL_ADC_Start_IT
 934              		.syntax unified
 935              		.thumb
 936              		.thumb_func
 937              		.fpu fpv5-sp-d16
 939              	HAL_ADC_Start_IT:
 940              	.LFB149:
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 941              		.loc 1 1034 0
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 8
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              		@ link register save eliminated.
 946              	.LVL51:
 947 0000 82B0     		sub	sp, sp, #8
 948              	.LCFI11:
 949              		.cfi_def_cfa_offset 8
1035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 950              		.loc 1 1035 0
 951 0002 0023     		movs	r3, #0
 952 0004 0193     		str	r3, [sp, #4]
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 953              		.loc 1 1042 0
 954 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 955 000a 012B     		cmp	r3, #1
 956 000c 78D0     		beq	.L98
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 957              		.loc 1 1042 0 is_stmt 0 discriminator 2
 958 000e 0123     		movs	r3, #1
 959 0010 80F83C30 		strb	r3, [r0, #60]
1047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
 960              		.loc 1 1047 0 is_stmt 1 discriminator 2
 961 0014 0368     		ldr	r3, [r0]
 962 0016 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/cck3XRbv.s 			page 54


 963 0018 12F0010F 		tst	r2, #1
 964 001c 13D1     		bne	.L90
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 965              		.loc 1 1050 0
 966 001e 9A68     		ldr	r2, [r3, #8]
 967 0020 42F00102 		orr	r2, r2, #1
 968 0024 9A60     		str	r2, [r3, #8]
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 969              		.loc 1 1054 0
 970 0026 3C4B     		ldr	r3, .L107
 971 0028 1B68     		ldr	r3, [r3]
 972 002a 3C4A     		ldr	r2, .L107+4
 973 002c A2FB0323 		umull	r2, r3, r2, r3
 974 0030 9B0C     		lsrs	r3, r3, #18
 975 0032 03EB4303 		add	r3, r3, r3, lsl #1
 976 0036 0193     		str	r3, [sp, #4]
1055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 977              		.loc 1 1055 0
 978 0038 02E0     		b	.L91
 979              	.L92:
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 980              		.loc 1 1057 0
 981 003a 019B     		ldr	r3, [sp, #4]
 982 003c 013B     		subs	r3, r3, #1
 983 003e 0193     		str	r3, [sp, #4]
 984              	.L91:
1055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 985              		.loc 1 1055 0
 986 0040 019B     		ldr	r3, [sp, #4]
 987 0042 002B     		cmp	r3, #0
 988 0044 F9D1     		bne	.L92
 989              	.L90:
1062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 990              		.loc 1 1062 0
 991 0046 0268     		ldr	r2, [r0]
 992 0048 9368     		ldr	r3, [r2, #8]
 993 004a 13F0010F 		tst	r3, #1
 994 004e 59D0     		beq	.L99
1067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 995              		.loc 1 1067 0
 996 0050 016C     		ldr	r1, [r0, #64]
 997 0052 334B     		ldr	r3, .L107+8
 998 0054 0B40     		ands	r3, r3, r1
 999 0056 43F48073 		orr	r3, r3, #256
 1000 005a 0364     		str	r3, [r0, #64]
1073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1001              		.loc 1 1073 0
 1002 005c 5368     		ldr	r3, [r2, #4]
 1003 005e 13F4806F 		tst	r3, #1024
 1004 0062 05D0     		beq	.L93
1075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1005              		.loc 1 1075 0
 1006 0064 036C     		ldr	r3, [r0, #64]
 1007 0066 23F44053 		bic	r3, r3, #12288
 1008 006a 43F48053 		orr	r3, r3, #4096
 1009 006e 0364     		str	r3, [r0, #64]
 1010              	.L93:
ARM GAS  /tmp/cck3XRbv.s 			page 55


1079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1011              		.loc 1 1079 0
 1012 0070 036C     		ldr	r3, [r0, #64]
 1013 0072 13F4805F 		tst	r3, #4096
 1014 0076 1ED0     		beq	.L94
1082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1015              		.loc 1 1082 0
 1016 0078 436C     		ldr	r3, [r0, #68]
 1017 007a 23F00603 		bic	r3, r3, #6
 1018 007e 4364     		str	r3, [r0, #68]
 1019              	.L95:
1093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1020              		.loc 1 1093 0
 1021 0080 0023     		movs	r3, #0
 1022 0082 80F83C30 		strb	r3, [r0, #60]
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1023              		.loc 1 1097 0
 1024 0086 6FF02203 		mvn	r3, #34
 1025 008a 1360     		str	r3, [r2]
1100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1026              		.loc 1 1100 0
 1027 008c 0268     		ldr	r2, [r0]
 1028 008e 5168     		ldr	r1, [r2, #4]
 1029 0090 244B     		ldr	r3, .L107+12
 1030 0092 0B43     		orrs	r3, r3, r1
 1031 0094 5360     		str	r3, [r2, #4]
1103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1032              		.loc 1 1103 0
 1033 0096 244B     		ldr	r3, .L107+16
 1034 0098 5B68     		ldr	r3, [r3, #4]
 1035 009a 13F01F0F 		tst	r3, #31
 1036 009e 0DD1     		bne	.L96
1106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1037              		.loc 1 1106 0
 1038 00a0 0368     		ldr	r3, [r0]
 1039 00a2 9A68     		ldr	r2, [r3, #8]
 1040 00a4 12F0405F 		tst	r2, #805306368
 1041 00a8 2FD1     		bne	.L100
1109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 1042              		.loc 1 1109 0
 1043 00aa 9A68     		ldr	r2, [r3, #8]
 1044 00ac 42F08042 		orr	r2, r2, #1073741824
 1045 00b0 9A60     		str	r2, [r3, #8]
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1046              		.loc 1 1136 0
 1047 00b2 0020     		movs	r0, #0
 1048              	.LVL52:
 1049 00b4 27E0     		b	.L89
 1050              	.LVL53:
 1051              	.L94:
1087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1052              		.loc 1 1087 0
 1053 00b6 0023     		movs	r3, #0
 1054 00b8 4364     		str	r3, [r0, #68]
 1055 00ba E1E7     		b	.L95
 1056              	.L96:
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
ARM GAS  /tmp/cck3XRbv.s 			page 56


 1057              		.loc 1 1115 0
 1058 00bc 0368     		ldr	r3, [r0]
 1059 00be 1B4A     		ldr	r2, .L107+20
 1060 00c0 9342     		cmp	r3, r2
 1061 00c2 0AD0     		beq	.L105
 1062              	.L97:
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1063              		.loc 1 1123 0
 1064 00c4 184B     		ldr	r3, .L107+16
 1065 00c6 5B68     		ldr	r3, [r3, #4]
 1066 00c8 13F0100F 		tst	r3, #16
 1067 00cc 1FD1     		bne	.L101
1126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 1068              		.loc 1 1126 0
 1069 00ce 0368     		ldr	r3, [r0]
 1070 00d0 174A     		ldr	r2, .L107+24
 1071 00d2 9342     		cmp	r3, r2
 1072 00d4 0AD0     		beq	.L106
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1073              		.loc 1 1136 0
 1074 00d6 0020     		movs	r0, #0
 1075              	.LVL54:
 1076 00d8 15E0     		b	.L89
 1077              	.LVL55:
 1078              	.L105:
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1079              		.loc 1 1115 0 discriminator 1
 1080 00da 9A68     		ldr	r2, [r3, #8]
 1081 00dc 12F0405F 		tst	r2, #805306368
 1082 00e0 F0D1     		bne	.L97
1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 1083              		.loc 1 1118 0
 1084 00e2 9A68     		ldr	r2, [r3, #8]
 1085 00e4 42F08042 		orr	r2, r2, #1073741824
 1086 00e8 9A60     		str	r2, [r3, #8]
 1087 00ea EBE7     		b	.L97
 1088              	.L106:
1126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 1089              		.loc 1 1126 0 discriminator 1
 1090 00ec 9A68     		ldr	r2, [r3, #8]
 1091 00ee 12F0405F 		tst	r2, #805306368
 1092 00f2 0ED1     		bne	.L103
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
 1093              		.loc 1 1129 0
 1094 00f4 9A68     		ldr	r2, [r3, #8]
 1095 00f6 42F08042 		orr	r2, r2, #1073741824
 1096 00fa 9A60     		str	r2, [r3, #8]
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1097              		.loc 1 1136 0
 1098 00fc 0020     		movs	r0, #0
 1099              	.LVL56:
 1100 00fe 02E0     		b	.L89
 1101              	.LVL57:
 1102              	.L98:
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1103              		.loc 1 1042 0
 1104 0100 0220     		movs	r0, #2
ARM GAS  /tmp/cck3XRbv.s 			page 57


 1105              	.LVL58:
 1106 0102 00E0     		b	.L89
 1107              	.LVL59:
 1108              	.L99:
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1109              		.loc 1 1136 0
 1110 0104 0020     		movs	r0, #0
 1111              	.LVL60:
 1112              	.L89:
1137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1113              		.loc 1 1137 0
 1114 0106 02B0     		add	sp, sp, #8
 1115              	.LCFI12:
 1116              		.cfi_remember_state
 1117              		.cfi_def_cfa_offset 0
 1118              		@ sp needed
 1119 0108 7047     		bx	lr
 1120              	.LVL61:
 1121              	.L100:
 1122              	.LCFI13:
 1123              		.cfi_restore_state
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1124              		.loc 1 1136 0
 1125 010a 0020     		movs	r0, #0
 1126              	.LVL62:
 1127 010c FBE7     		b	.L89
 1128              	.LVL63:
 1129              	.L101:
 1130 010e 0020     		movs	r0, #0
 1131              	.LVL64:
 1132 0110 F9E7     		b	.L89
 1133              	.LVL65:
 1134              	.L103:
 1135 0112 0020     		movs	r0, #0
 1136              	.LVL66:
 1137 0114 F7E7     		b	.L89
 1138              	.L108:
 1139 0116 00BF     		.align	2
 1140              	.L107:
 1141 0118 00000000 		.word	SystemCoreClock
 1142 011c 83DE1B43 		.word	1125899907
 1143 0120 FEF8FFFF 		.word	-1794
 1144 0124 20000004 		.word	67108896
 1145 0128 00230140 		.word	1073816320
 1146 012c 00200140 		.word	1073815552
 1147 0130 00220140 		.word	1073816064
 1148              		.cfi_endproc
 1149              	.LFE149:
 1151              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1152              		.align	1
 1153              		.global	HAL_ADC_Stop_IT
 1154              		.syntax unified
 1155              		.thumb
 1156              		.thumb_func
 1157              		.fpu fpv5-sp-d16
 1159              	HAL_ADC_Stop_IT:
 1160              	.LFB150:
ARM GAS  /tmp/cck3XRbv.s 			page 58


1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check the parameters */
 1161              		.loc 1 1149 0
 1162              		.cfi_startproc
 1163              		@ args = 0, pretend = 0, frame = 0
 1164              		@ frame_needed = 0, uses_anonymous_args = 0
 1165              		@ link register save eliminated.
 1166              	.LVL67:
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1167              		.loc 1 1154 0
 1168 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1169 0004 012B     		cmp	r3, #1
 1170 0006 1BD0     		beq	.L112
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1171              		.loc 1 1154 0 is_stmt 0 discriminator 2
 1172 0008 0123     		movs	r3, #1
 1173 000a 80F83C30 		strb	r3, [r0, #60]
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1174              		.loc 1 1158 0 is_stmt 1 discriminator 2
 1175 000e 0268     		ldr	r2, [r0]
 1176 0010 9368     		ldr	r3, [r2, #8]
 1177 0012 23F00103 		bic	r3, r3, #1
 1178 0016 9360     		str	r3, [r2, #8]
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1179              		.loc 1 1161 0 discriminator 2
 1180 0018 0368     		ldr	r3, [r0]
 1181 001a 9A68     		ldr	r2, [r3, #8]
 1182 001c 12F0010F 		tst	r2, #1
 1183 0020 09D1     		bne	.L111
1164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1184              		.loc 1 1164 0
 1185 0022 5968     		ldr	r1, [r3, #4]
 1186 0024 074A     		ldr	r2, .L113
 1187 0026 0A40     		ands	r2, r2, r1
 1188 0028 5A60     		str	r2, [r3, #4]
1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1189              		.loc 1 1167 0
 1190 002a 026C     		ldr	r2, [r0, #64]
 1191 002c 064B     		ldr	r3, .L113+4
 1192 002e 1340     		ands	r3, r3, r2
 1193 0030 43F00103 		orr	r3, r3, #1
 1194 0034 0364     		str	r3, [r0, #64]
 1195              	.L111:
1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1196              		.loc 1 1173 0
 1197 0036 0023     		movs	r3, #0
 1198 0038 80F83C30 		strb	r3, [r0, #60]
1176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1199              		.loc 1 1176 0
 1200 003c 1846     		mov	r0, r3
 1201              	.LVL68:
 1202 003e 7047     		bx	lr
 1203              	.LVL69:
 1204              	.L112:
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1205              		.loc 1 1154 0
 1206 0040 0220     		movs	r0, #2
 1207              	.LVL70:
ARM GAS  /tmp/cck3XRbv.s 			page 59


1177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1208              		.loc 1 1177 0
 1209 0042 7047     		bx	lr
 1210              	.L114:
 1211              		.align	2
 1212              	.L113:
 1213 0044 DFFFFFFB 		.word	-67108897
 1214 0048 FEEEFFFF 		.word	-4354
 1215              		.cfi_endproc
 1216              	.LFE150:
 1218              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1219              		.align	1
 1220              		.global	HAL_ADC_Start_DMA
 1221              		.syntax unified
 1222              		.thumb
 1223              		.thumb_func
 1224              		.fpu fpv5-sp-d16
 1226              	HAL_ADC_Start_DMA:
 1227              	.LFB152:
1348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 1228              		.loc 1 1348 0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 8
 1231              		@ frame_needed = 0, uses_anonymous_args = 0
 1232              	.LVL71:
 1233 0000 30B5     		push	{r4, r5, lr}
 1234              	.LCFI14:
 1235              		.cfi_def_cfa_offset 12
 1236              		.cfi_offset 4, -12
 1237              		.cfi_offset 5, -8
 1238              		.cfi_offset 14, -4
 1239 0002 83B0     		sub	sp, sp, #12
 1240              	.LCFI15:
 1241              		.cfi_def_cfa_offset 24
1349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1242              		.loc 1 1349 0
 1243 0004 0023     		movs	r3, #0
 1244 0006 0193     		str	r3, [sp, #4]
1356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1245              		.loc 1 1356 0
 1246 0008 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1247 000c 012B     		cmp	r3, #1
 1248 000e 00F09180 		beq	.L125
1356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1249              		.loc 1 1356 0 is_stmt 0 discriminator 2
 1250 0012 0123     		movs	r3, #1
 1251 0014 80F83C30 		strb	r3, [r0, #60]
1361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {  
 1252              		.loc 1 1361 0 is_stmt 1 discriminator 2
 1253 0018 0468     		ldr	r4, [r0]
 1254 001a A368     		ldr	r3, [r4, #8]
 1255 001c 13F0010F 		tst	r3, #1
 1256 0020 13D1     		bne	.L117
1364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1257              		.loc 1 1364 0
 1258 0022 A368     		ldr	r3, [r4, #8]
 1259 0024 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/cck3XRbv.s 			page 60


 1260 0028 A360     		str	r3, [r4, #8]
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     while(counter != 0)
 1261              		.loc 1 1368 0
 1262 002a 484B     		ldr	r3, .L134
 1263 002c 1C68     		ldr	r4, [r3]
 1264 002e 484B     		ldr	r3, .L134+4
 1265 0030 A3FB0434 		umull	r3, r4, r3, r4
 1266 0034 A40C     		lsrs	r4, r4, #18
 1267 0036 04EB4404 		add	r4, r4, r4, lsl #1
 1268 003a 0194     		str	r4, [sp, #4]
1369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1269              		.loc 1 1369 0
 1270 003c 02E0     		b	.L118
 1271              	.L119:
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1272              		.loc 1 1371 0
 1273 003e 019C     		ldr	r4, [sp, #4]
 1274 0040 013C     		subs	r4, r4, #1
 1275 0042 0194     		str	r4, [sp, #4]
 1276              	.L118:
1369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1277              		.loc 1 1369 0
 1278 0044 019C     		ldr	r4, [sp, #4]
 1279 0046 002C     		cmp	r4, #0
 1280 0048 F9D1     		bne	.L119
 1281              	.L117:
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1282              		.loc 1 1376 0
 1283 004a 0368     		ldr	r3, [r0]
 1284 004c 9C68     		ldr	r4, [r3, #8]
 1285 004e 14F0010F 		tst	r4, #1
 1286 0052 71D0     		beq	.L126
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 1287              		.loc 1 1381 0
 1288 0054 056C     		ldr	r5, [r0, #64]
 1289 0056 3F4C     		ldr	r4, .L134+8
 1290 0058 2C40     		ands	r4, r4, r5
 1291 005a 44F48074 		orr	r4, r4, #256
 1292 005e 0464     		str	r4, [r0, #64]
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1293              		.loc 1 1387 0
 1294 0060 5B68     		ldr	r3, [r3, #4]
 1295 0062 13F4806F 		tst	r3, #1024
 1296 0066 05D0     		beq	.L120
1389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1297              		.loc 1 1389 0
 1298 0068 036C     		ldr	r3, [r0, #64]
 1299 006a 23F44053 		bic	r3, r3, #12288
 1300 006e 43F48053 		orr	r3, r3, #4096
 1301 0072 0364     		str	r3, [r0, #64]
 1302              	.L120:
1393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1303              		.loc 1 1393 0
 1304 0074 036C     		ldr	r3, [r0, #64]
 1305 0076 13F4805F 		tst	r3, #4096
 1306 007a 36D0     		beq	.L121
1396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
ARM GAS  /tmp/cck3XRbv.s 			page 61


 1307              		.loc 1 1396 0
 1308 007c 436C     		ldr	r3, [r0, #68]
 1309 007e 23F00603 		bic	r3, r3, #6
 1310 0082 4364     		str	r3, [r0, #68]
 1311              	.L122:
 1312 0084 1346     		mov	r3, r2
 1313 0086 0446     		mov	r4, r0
1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1314              		.loc 1 1407 0
 1315 0088 0022     		movs	r2, #0
 1316              	.LVL72:
 1317 008a 80F83C20 		strb	r2, [r0, #60]
1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1318              		.loc 1 1410 0
 1319 008e 826B     		ldr	r2, [r0, #56]
 1320 0090 3148     		ldr	r0, .L134+12
 1321              	.LVL73:
 1322 0092 D063     		str	r0, [r2, #60]
1413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1323              		.loc 1 1413 0
 1324 0094 A26B     		ldr	r2, [r4, #56]
 1325 0096 3148     		ldr	r0, .L134+16
 1326 0098 1064     		str	r0, [r2, #64]
1416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1327              		.loc 1 1416 0
 1328 009a A26B     		ldr	r2, [r4, #56]
 1329 009c 3048     		ldr	r0, .L134+20
 1330 009e D064     		str	r0, [r2, #76]
1424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1331              		.loc 1 1424 0
 1332 00a0 2268     		ldr	r2, [r4]
 1333 00a2 6FF02200 		mvn	r0, #34
 1334 00a6 1060     		str	r0, [r2]
1427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1335              		.loc 1 1427 0
 1336 00a8 2568     		ldr	r5, [r4]
 1337 00aa 6868     		ldr	r0, [r5, #4]
 1338 00ac 40F08060 		orr	r0, r0, #67108864
 1339 00b0 6860     		str	r0, [r5, #4]
1430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1340              		.loc 1 1430 0
 1341 00b2 2568     		ldr	r5, [r4]
 1342 00b4 A868     		ldr	r0, [r5, #8]
 1343 00b6 40F48070 		orr	r0, r0, #256
 1344 00ba A860     		str	r0, [r5, #8]
1433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1345              		.loc 1 1433 0
 1346 00bc 2068     		ldr	r0, [r4]
 1347 00be 0A46     		mov	r2, r1
 1348 00c0 00F14C01 		add	r1, r0, #76
 1349              	.LVL74:
 1350 00c4 A06B     		ldr	r0, [r4, #56]
 1351 00c6 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1352              	.LVL75:
1436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1353              		.loc 1 1436 0
 1354 00ca 264B     		ldr	r3, .L134+24
ARM GAS  /tmp/cck3XRbv.s 			page 62


 1355 00cc 5B68     		ldr	r3, [r3, #4]
 1356 00ce 13F01F0F 		tst	r3, #31
 1357 00d2 0DD1     		bne	.L123
1439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1358              		.loc 1 1439 0
 1359 00d4 2368     		ldr	r3, [r4]
 1360 00d6 9A68     		ldr	r2, [r3, #8]
 1361 00d8 12F0405F 		tst	r2, #805306368
 1362 00dc 2FD1     		bne	.L127
1442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 1363              		.loc 1 1442 0
 1364 00de 9A68     		ldr	r2, [r3, #8]
 1365 00e0 42F08042 		orr	r2, r2, #1073741824
 1366 00e4 9A60     		str	r2, [r3, #8]
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1367              		.loc 1 1468 0
 1368 00e6 0020     		movs	r0, #0
 1369 00e8 27E0     		b	.L116
 1370              	.LVL76:
 1371              	.L121:
1401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1372              		.loc 1 1401 0
 1373 00ea 0023     		movs	r3, #0
 1374 00ec 4364     		str	r3, [r0, #68]
 1375 00ee C9E7     		b	.L122
 1376              	.LVL77:
 1377              	.L123:
1448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1378              		.loc 1 1448 0
 1379 00f0 2368     		ldr	r3, [r4]
 1380 00f2 1D4A     		ldr	r2, .L134+28
 1381 00f4 9342     		cmp	r3, r2
 1382 00f6 0AD0     		beq	.L132
 1383              	.L124:
1455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1384              		.loc 1 1455 0
 1385 00f8 1A4B     		ldr	r3, .L134+24
 1386 00fa 5B68     		ldr	r3, [r3, #4]
 1387 00fc 13F0100F 		tst	r3, #16
 1388 0100 1FD1     		bne	.L128
1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 1389              		.loc 1 1458 0
 1390 0102 2368     		ldr	r3, [r4]
 1391 0104 194A     		ldr	r2, .L134+32
 1392 0106 9342     		cmp	r3, r2
 1393 0108 0AD0     		beq	.L133
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1394              		.loc 1 1468 0
 1395 010a 0020     		movs	r0, #0
 1396 010c 15E0     		b	.L116
 1397              	.L132:
1448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1398              		.loc 1 1448 0 discriminator 1
 1399 010e 9A68     		ldr	r2, [r3, #8]
 1400 0110 12F0405F 		tst	r2, #805306368
 1401 0114 F0D1     		bne	.L124
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
ARM GAS  /tmp/cck3XRbv.s 			page 63


 1402              		.loc 1 1451 0
 1403 0116 9A68     		ldr	r2, [r3, #8]
 1404 0118 42F08042 		orr	r2, r2, #1073741824
 1405 011c 9A60     		str	r2, [r3, #8]
 1406 011e EBE7     		b	.L124
 1407              	.L133:
1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         {
 1408              		.loc 1 1458 0 discriminator 1
 1409 0120 9A68     		ldr	r2, [r3, #8]
 1410 0122 12F0405F 		tst	r2, #805306368
 1411 0126 0ED1     		bne	.L130
1461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         }
 1412              		.loc 1 1461 0
 1413 0128 9A68     		ldr	r2, [r3, #8]
 1414 012a 42F08042 		orr	r2, r2, #1073741824
 1415 012e 9A60     		str	r2, [r3, #8]
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1416              		.loc 1 1468 0
 1417 0130 0020     		movs	r0, #0
 1418 0132 02E0     		b	.L116
 1419              	.LVL78:
 1420              	.L125:
1356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1421              		.loc 1 1356 0
 1422 0134 0220     		movs	r0, #2
 1423              	.LVL79:
 1424 0136 00E0     		b	.L116
 1425              	.LVL80:
 1426              	.L126:
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1427              		.loc 1 1468 0
 1428 0138 0020     		movs	r0, #0
 1429              	.LVL81:
 1430              	.L116:
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1431              		.loc 1 1469 0
 1432 013a 03B0     		add	sp, sp, #12
 1433              	.LCFI16:
 1434              		.cfi_remember_state
 1435              		.cfi_def_cfa_offset 12
 1436              		@ sp needed
 1437 013c 30BD     		pop	{r4, r5, pc}
 1438              	.LVL82:
 1439              	.L127:
 1440              	.LCFI17:
 1441              		.cfi_restore_state
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1442              		.loc 1 1468 0
 1443 013e 0020     		movs	r0, #0
 1444 0140 FBE7     		b	.L116
 1445              	.L128:
 1446 0142 0020     		movs	r0, #0
 1447 0144 F9E7     		b	.L116
 1448              	.L130:
 1449 0146 0020     		movs	r0, #0
 1450 0148 F7E7     		b	.L116
 1451              	.L135:
ARM GAS  /tmp/cck3XRbv.s 			page 64


 1452 014a 00BF     		.align	2
 1453              	.L134:
 1454 014c 00000000 		.word	SystemCoreClock
 1455 0150 83DE1B43 		.word	1125899907
 1456 0154 FEF8FFFF 		.word	-1794
 1457 0158 00000000 		.word	ADC_DMAConvCplt
 1458 015c 00000000 		.word	ADC_DMAHalfConvCplt
 1459 0160 00000000 		.word	ADC_DMAError
 1460 0164 00230140 		.word	1073816320
 1461 0168 00200140 		.word	1073815552
 1462 016c 00220140 		.word	1073816064
 1463              		.cfi_endproc
 1464              	.LFE152:
 1466              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1467              		.align	1
 1468              		.global	HAL_ADC_Stop_DMA
 1469              		.syntax unified
 1470              		.thumb
 1471              		.thumb_func
 1472              		.fpu fpv5-sp-d16
 1474              	HAL_ADC_Stop_DMA:
 1475              	.LFB153:
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1476              		.loc 1 1478 0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
 1480              	.LVL83:
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1481              		.loc 1 1485 0
 1482 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1483 0004 012B     		cmp	r3, #1
 1484 0006 26D0     		beq	.L139
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1485              		.loc 1 1478 0 discriminator 2
 1486 0008 10B5     		push	{r4, lr}
 1487              	.LCFI18:
 1488              		.cfi_def_cfa_offset 8
 1489              		.cfi_offset 4, -8
 1490              		.cfi_offset 14, -4
 1491 000a 0446     		mov	r4, r0
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1492              		.loc 1 1485 0 discriminator 2
 1493 000c 0123     		movs	r3, #1
 1494 000e 80F83C30 		strb	r3, [r0, #60]
1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1495              		.loc 1 1489 0 discriminator 2
 1496 0012 0268     		ldr	r2, [r0]
 1497 0014 9368     		ldr	r3, [r2, #8]
 1498 0016 23F00103 		bic	r3, r3, #1
 1499 001a 9360     		str	r3, [r2, #8]
1492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1500              		.loc 1 1492 0 discriminator 2
 1501 001c 0368     		ldr	r3, [r0]
 1502 001e 9A68     		ldr	r2, [r3, #8]
 1503 0020 12F0010F 		tst	r2, #1
 1504 0024 04D0     		beq	.L145
ARM GAS  /tmp/cck3XRbv.s 			page 65


1479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1505              		.loc 1 1479 0
 1506 0026 0020     		movs	r0, #0
 1507              	.LVL84:
 1508              	.L138:
1511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1509              		.loc 1 1511 0
 1510 0028 0023     		movs	r3, #0
 1511 002a 84F83C30 		strb	r3, [r4, #60]
1515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1512              		.loc 1 1515 0
 1513 002e 10BD     		pop	{r4, pc}
 1514              	.LVL85:
 1515              	.L145:
1495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1516              		.loc 1 1495 0
 1517 0030 9A68     		ldr	r2, [r3, #8]
 1518 0032 22F48072 		bic	r2, r2, #256
 1519 0036 9A60     		str	r2, [r3, #8]
1499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1520              		.loc 1 1499 0
 1521 0038 806B     		ldr	r0, [r0, #56]
 1522              	.LVL86:
 1523 003a FFF7FEFF 		bl	HAL_DMA_Abort
 1524              	.LVL87:
1502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1525              		.loc 1 1502 0
 1526 003e 2268     		ldr	r2, [r4]
 1527 0040 5368     		ldr	r3, [r2, #4]
 1528 0042 23F08063 		bic	r3, r3, #67108864
 1529 0046 5360     		str	r3, [r2, #4]
1505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1530              		.loc 1 1505 0
 1531 0048 226C     		ldr	r2, [r4, #64]
 1532 004a 044B     		ldr	r3, .L146
 1533 004c 1340     		ands	r3, r3, r2
 1534 004e 43F00103 		orr	r3, r3, #1
 1535 0052 2364     		str	r3, [r4, #64]
 1536 0054 E8E7     		b	.L138
 1537              	.LVL88:
 1538              	.L139:
 1539              	.LCFI19:
 1540              		.cfi_def_cfa_offset 0
 1541              		.cfi_restore 4
 1542              		.cfi_restore 14
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1543              		.loc 1 1485 0
 1544 0056 0220     		movs	r0, #2
 1545              	.LVL89:
1515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1546              		.loc 1 1515 0
 1547 0058 7047     		bx	lr
 1548              	.L147:
 1549 005a 00BF     		.align	2
 1550              	.L146:
 1551 005c FEEEFFFF 		.word	-4354
 1552              		.cfi_endproc
ARM GAS  /tmp/cck3XRbv.s 			page 66


 1553              	.LFE153:
 1555              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1556              		.align	1
 1557              		.global	HAL_ADC_GetValue
 1558              		.syntax unified
 1559              		.thumb
 1560              		.thumb_func
 1561              		.fpu fpv5-sp-d16
 1563              	HAL_ADC_GetValue:
 1564              	.LFB154:
1524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
 1565              		.loc 1 1524 0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 0
 1568              		@ frame_needed = 0, uses_anonymous_args = 0
 1569              		@ link register save eliminated.
 1570              	.LVL90:
1526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1571              		.loc 1 1526 0
 1572 0000 0368     		ldr	r3, [r0]
 1573 0002 D86C     		ldr	r0, [r3, #76]
 1574              	.LVL91:
1527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1575              		.loc 1 1527 0
 1576 0004 7047     		bx	lr
 1577              		.cfi_endproc
 1578              	.LFE154:
 1580              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1581              		.align	1
 1582              		.weak	HAL_ADC_ConvCpltCallback
 1583              		.syntax unified
 1584              		.thumb
 1585              		.thumb_func
 1586              		.fpu fpv5-sp-d16
 1588              	HAL_ADC_ConvCpltCallback:
 1589              	.LFB155:
1536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1590              		.loc 1 1536 0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 0
 1593              		@ frame_needed = 0, uses_anonymous_args = 0
 1594              		@ link register save eliminated.
 1595              	.LVL92:
1542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1596              		.loc 1 1542 0
 1597 0000 7047     		bx	lr
 1598              		.cfi_endproc
 1599              	.LFE155:
 1601              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1602              		.align	1
 1603              		.weak	HAL_ADC_ConvHalfCpltCallback
 1604              		.syntax unified
 1605              		.thumb
 1606              		.thumb_func
 1607              		.fpu fpv5-sp-d16
 1609              	HAL_ADC_ConvHalfCpltCallback:
 1610              	.LFB156:
ARM GAS  /tmp/cck3XRbv.s 			page 67


1551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1611              		.loc 1 1551 0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 0
 1614              		@ frame_needed = 0, uses_anonymous_args = 0
 1615              		@ link register save eliminated.
 1616              	.LVL93:
1557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1617              		.loc 1 1557 0
 1618 0000 7047     		bx	lr
 1619              		.cfi_endproc
 1620              	.LFE156:
 1622              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 1623              		.align	1
 1624              		.syntax unified
 1625              		.thumb
 1626              		.thumb_func
 1627              		.fpu fpv5-sp-d16
 1629              	ADC_DMAHalfConvCplt:
 1630              	.LFB165:
1939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
1940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
1941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
1942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
1945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
1946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
1947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
1948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
1949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
1951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
1952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
1953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Update ADC state machine */
1955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
1958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
1959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Note: On STM32F7, there is no independent flag of end of sequence.   */
1960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
1961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
1962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /*       of end of sequence.                                            */
1963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
1964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
1965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
1966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
1967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
1969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
1971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
1972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Set ADC state */
1975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
ARM GAS  /tmp/cck3XRbv.s 			page 68


1976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
1977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
1979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
1981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
1982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
1983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     /* Conversion complete callback */
1984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
1986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
1988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
1990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   else /* DMA and-or internal error occurred */
1991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
1992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
1993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
1994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Call HAL ADC Error Callback function */
1995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
1997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
1998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
2001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     else
2002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
2003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       /* Call DMA error callback */
2004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback(hdma);
2005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
2006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
2007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
2008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
2009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
2010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
2013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
2014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
2015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 1631              		.loc 1 2016 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635              	.LVL94:
 1636 0000 08B5     		push	{r3, lr}
 1637              	.LCFI20:
 1638              		.cfi_def_cfa_offset 8
 1639              		.cfi_offset 3, -8
 1640              		.cfi_offset 14, -4
 1641              	.LVL95:
2017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****    /* Half conversion callback */
2019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->ConvHalfCpltCallback(hadc);
2021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
ARM GAS  /tmp/cck3XRbv.s 			page 69


2022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 1642              		.loc 1 2022 0
 1643 0002 806B     		ldr	r0, [r0, #56]
 1644              	.LVL96:
 1645 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 1646              	.LVL97:
2023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1647              		.loc 1 2024 0
 1648 0008 08BD     		pop	{r3, pc}
 1649              		.cfi_endproc
 1650              	.LFE165:
 1652              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 1653              		.align	1
 1654              		.weak	HAL_ADC_LevelOutOfWindowCallback
 1655              		.syntax unified
 1656              		.thumb
 1657              		.thumb_func
 1658              		.fpu fpv5-sp-d16
 1660              	HAL_ADC_LevelOutOfWindowCallback:
 1661              	.LFB157:
1566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1662              		.loc 1 1566 0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 0
 1665              		@ frame_needed = 0, uses_anonymous_args = 0
 1666              		@ link register save eliminated.
 1667              	.LVL98:
1572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1668              		.loc 1 1572 0
 1669 0000 7047     		bx	lr
 1670              		.cfi_endproc
 1671              	.LFE157:
 1673              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 1674              		.align	1
 1675              		.weak	HAL_ADC_ErrorCallback
 1676              		.syntax unified
 1677              		.thumb
 1678              		.thumb_func
 1679              		.fpu fpv5-sp-d16
 1681              	HAL_ADC_ErrorCallback:
 1682              	.LFB158:
1587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1683              		.loc 1 1587 0
 1684              		.cfi_startproc
 1685              		@ args = 0, pretend = 0, frame = 0
 1686              		@ frame_needed = 0, uses_anonymous_args = 0
 1687              		@ link register save eliminated.
 1688              	.LVL99:
1593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1689              		.loc 1 1593 0
 1690 0000 7047     		bx	lr
 1691              		.cfi_endproc
 1692              	.LFE158:
 1694              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 1695              		.align	1
 1696              		.global	HAL_ADC_IRQHandler
ARM GAS  /tmp/cck3XRbv.s 			page 70


 1697              		.syntax unified
 1698              		.thumb
 1699              		.thumb_func
 1700              		.fpu fpv5-sp-d16
 1702              	HAL_ADC_IRQHandler:
 1703              	.LFB151:
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   uint32_t tmp1 = 0, tmp2 = 0;
 1704              		.loc 1 1186 0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 0
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708              	.LVL100:
 1709 0000 38B5     		push	{r3, r4, r5, lr}
 1710              	.LCFI21:
 1711              		.cfi_def_cfa_offset 16
 1712              		.cfi_offset 3, -16
 1713              		.cfi_offset 4, -12
 1714              		.cfi_offset 5, -8
 1715              		.cfi_offset 14, -4
 1716 0002 0446     		mov	r4, r0
 1717              	.LVL101:
1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 1718              		.loc 1 1194 0
 1719 0004 0168     		ldr	r1, [r0]
 1720 0006 0A68     		ldr	r2, [r1]
 1721 0008 C2F34002 		ubfx	r2, r2, #1, #1
 1722              	.LVL102:
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
 1723              		.loc 1 1195 0
 1724 000c 4B68     		ldr	r3, [r1, #4]
 1725 000e C3F34013 		ubfx	r3, r3, #5, #1
 1726              	.LVL103:
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1727              		.loc 1 1197 0
 1728 0012 1A42     		tst	r2, r3
 1729 0014 2CD0     		beq	.L156
1200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1730              		.loc 1 1200 0
 1731 0016 036C     		ldr	r3, [r0, #64]
 1732              	.LVL104:
 1733 0018 13F0100F 		tst	r3, #16
 1734 001c 03D1     		bne	.L157
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1735              		.loc 1 1203 0
 1736 001e 036C     		ldr	r3, [r0, #64]
 1737 0020 43F40073 		orr	r3, r3, #512
 1738 0024 0364     		str	r3, [r0, #64]
 1739              	.L157:
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1740              		.loc 1 1212 0
 1741 0026 8B68     		ldr	r3, [r1, #8]
 1742 0028 13F0405F 		tst	r3, #805306368
 1743 002c 19D1     		bne	.L158
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1744              		.loc 1 1213 0 discriminator 1
 1745 002e A369     		ldr	r3, [r4, #24]
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
ARM GAS  /tmp/cck3XRbv.s 			page 71


 1746              		.loc 1 1212 0 discriminator 1
 1747 0030 BBB9     		cbnz	r3, .L158
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1748              		.loc 1 1214 0
 1749 0032 CB6A     		ldr	r3, [r1, #44]
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1750              		.loc 1 1213 0
 1751 0034 13F4700F 		tst	r3, #15728640
 1752 0038 03D0     		beq	.L159
1215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1753              		.loc 1 1215 0
 1754 003a 8B68     		ldr	r3, [r1, #8]
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1755              		.loc 1 1214 0
 1756 003c 13F4806F 		tst	r3, #1024
 1757 0040 0FD1     		bne	.L158
 1758              	.L159:
1221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 1759              		.loc 1 1221 0
 1760 0042 4B68     		ldr	r3, [r1, #4]
 1761 0044 23F02003 		bic	r3, r3, #32
 1762 0048 4B60     		str	r3, [r1, #4]
1224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 1763              		.loc 1 1224 0
 1764 004a 236C     		ldr	r3, [r4, #64]
 1765 004c 23F48073 		bic	r3, r3, #256
 1766 0050 2364     		str	r3, [r4, #64]
1226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 1767              		.loc 1 1226 0
 1768 0052 236C     		ldr	r3, [r4, #64]
 1769 0054 13F4805F 		tst	r3, #4096
 1770 0058 03D1     		bne	.L158
1228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 1771              		.loc 1 1228 0
 1772 005a 236C     		ldr	r3, [r4, #64]
 1773 005c 43F00103 		orr	r3, r3, #1
 1774 0060 2364     		str	r3, [r4, #64]
 1775              	.L158:
1236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1776              		.loc 1 1236 0
 1777 0062 2046     		mov	r0, r4
 1778              	.LVL105:
 1779 0064 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1780              	.LVL106:
1240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 1781              		.loc 1 1240 0
 1782 0068 2368     		ldr	r3, [r4]
 1783 006a 6FF01202 		mvn	r2, #18
 1784 006e 1A60     		str	r2, [r3]
 1785              	.L156:
1243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 1786              		.loc 1 1243 0
 1787 0070 2368     		ldr	r3, [r4]
 1788 0072 1968     		ldr	r1, [r3]
 1789 0074 C1F38001 		ubfx	r1, r1, #2, #1
 1790              	.LVL107:
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
ARM GAS  /tmp/cck3XRbv.s 			page 72


 1791              		.loc 1 1244 0
 1792 0078 5A68     		ldr	r2, [r3, #4]
 1793 007a C2F3C012 		ubfx	r2, r2, #7, #1
 1794              	.LVL108:
1246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1795              		.loc 1 1246 0
 1796 007e 1142     		tst	r1, r2
 1797 0080 34D0     		beq	.L160
1249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1798              		.loc 1 1249 0
 1799 0082 226C     		ldr	r2, [r4, #64]
 1800              	.LVL109:
 1801 0084 12F0100F 		tst	r2, #16
 1802 0088 03D1     		bne	.L161
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1803              		.loc 1 1252 0
 1804 008a 226C     		ldr	r2, [r4, #64]
 1805 008c 42F40052 		orr	r2, r2, #8192
 1806 0090 2264     		str	r2, [r4, #64]
 1807              	.L161:
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 1808              		.loc 1 1259 0
 1809 0092 9A68     		ldr	r2, [r3, #8]
 1810 0094 12F4401F 		tst	r2, #3145728
 1811 0098 21D1     		bne	.L162
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 1812              		.loc 1 1260 0 discriminator 1
 1813 009a 9A6B     		ldr	r2, [r3, #56]
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 1814              		.loc 1 1259 0 discriminator 1
 1815 009c 12F4401F 		tst	r2, #3145728
 1816 00a0 03D0     		beq	.L163
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1817              		.loc 1 1261 0
 1818 00a2 9A68     		ldr	r2, [r3, #8]
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 1819              		.loc 1 1260 0
 1820 00a4 12F4806F 		tst	r2, #1024
 1821 00a8 19D1     		bne	.L162
 1822              	.L163:
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 1823              		.loc 1 1262 0
 1824 00aa 5A68     		ldr	r2, [r3, #4]
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1825              		.loc 1 1261 0
 1826 00ac 12F4806F 		tst	r2, #1024
 1827 00b0 15D1     		bne	.L162
1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE))))
 1828              		.loc 1 1263 0
 1829 00b2 9A68     		ldr	r2, [r3, #8]
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 1830              		.loc 1 1262 0
 1831 00b4 12F0405F 		tst	r2, #805306368
 1832 00b8 11D1     		bne	.L162
1264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1833              		.loc 1 1264 0
 1834 00ba A269     		ldr	r2, [r4, #24]
ARM GAS  /tmp/cck3XRbv.s 			page 73


1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE))))
 1835              		.loc 1 1263 0
 1836 00bc 7AB9     		cbnz	r2, .L162
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 1837              		.loc 1 1267 0
 1838 00be 5A68     		ldr	r2, [r3, #4]
 1839 00c0 22F08002 		bic	r2, r2, #128
 1840 00c4 5A60     		str	r2, [r3, #4]
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1841              		.loc 1 1270 0
 1842 00c6 236C     		ldr	r3, [r4, #64]
 1843 00c8 23F48053 		bic	r3, r3, #4096
 1844 00cc 2364     		str	r3, [r4, #64]
1272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       { 
 1845              		.loc 1 1272 0
 1846 00ce 236C     		ldr	r3, [r4, #64]
 1847 00d0 13F4807F 		tst	r3, #256
 1848 00d4 03D1     		bne	.L162
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 1849              		.loc 1 1274 0
 1850 00d6 236C     		ldr	r3, [r4, #64]
 1851 00d8 43F00103 		orr	r3, r3, #1
 1852 00dc 2364     		str	r3, [r4, #64]
 1853              	.L162:
1282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1854              		.loc 1 1282 0
 1855 00de 2046     		mov	r0, r4
 1856 00e0 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 1857              	.LVL110:
1286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 1858              		.loc 1 1286 0
 1859 00e4 2368     		ldr	r3, [r4]
 1860 00e6 6FF00C02 		mvn	r2, #12
 1861 00ea 1A60     		str	r2, [r3]
 1862              	.L160:
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 1863              		.loc 1 1289 0
 1864 00ec 2268     		ldr	r2, [r4]
 1865 00ee 1168     		ldr	r1, [r2]
 1866              	.LVL111:
1290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check Analog watchdog flag */
 1867              		.loc 1 1290 0
 1868 00f0 5368     		ldr	r3, [r2, #4]
 1869 00f2 C3F38013 		ubfx	r3, r3, #6, #1
 1870              	.LVL112:
1292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1871              		.loc 1 1292 0
 1872 00f6 1942     		tst	r1, r3
 1873 00f8 03D0     		beq	.L164
1294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 1874              		.loc 1 1294 0
 1875 00fa 1368     		ldr	r3, [r2]
 1876              	.LVL113:
 1877 00fc 13F0010F 		tst	r3, #1
 1878 0100 09D1     		bne	.L167
 1879              	.LVL114:
 1880              	.L164:
ARM GAS  /tmp/cck3XRbv.s 			page 74


1312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 1881              		.loc 1 1312 0
 1882 0102 2168     		ldr	r1, [r4]
 1883 0104 0A68     		ldr	r2, [r1]
 1884 0106 C2F34012 		ubfx	r2, r2, #5, #1
 1885              	.LVL115:
1313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Check Overrun flag */
 1886              		.loc 1 1313 0
 1887 010a 4B68     		ldr	r3, [r1, #4]
 1888 010c C3F38063 		ubfx	r3, r3, #26, #1
 1889              	.LVL116:
1315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1890              		.loc 1 1315 0
 1891 0110 1A42     		tst	r2, r3
 1892 0112 0CD1     		bne	.L168
 1893              	.LVL117:
 1894              	.L155:
1337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1895              		.loc 1 1337 0
 1896 0114 38BD     		pop	{r3, r4, r5, pc}
 1897              	.LVL118:
 1898              	.L167:
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 1899              		.loc 1 1297 0
 1900 0116 236C     		ldr	r3, [r4, #64]
 1901 0118 43F48033 		orr	r3, r3, #65536
 1902 011c 2364     		str	r3, [r4, #64]
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1903              		.loc 1 1303 0
 1904 011e 2046     		mov	r0, r4
 1905 0120 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1906              	.LVL119:
1308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 1907              		.loc 1 1308 0
 1908 0124 2368     		ldr	r3, [r4]
 1909 0126 6FF00102 		mvn	r2, #1
 1910 012a 1A60     		str	r2, [r3]
 1911 012c E9E7     		b	.L164
 1912              	.LVL120:
 1913              	.L168:
1322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1914              		.loc 1 1322 0
 1915 012e 636C     		ldr	r3, [r4, #68]
 1916              	.LVL121:
 1917 0130 43F00203 		orr	r3, r3, #2
 1918 0134 6364     		str	r3, [r4, #68]
1325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1919              		.loc 1 1325 0
 1920 0136 6FF02005 		mvn	r5, #32
 1921 013a 0D60     		str	r5, [r1]
1331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1922              		.loc 1 1331 0
 1923 013c 2046     		mov	r0, r4
 1924 013e FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1925              	.LVL122:
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 1926              		.loc 1 1335 0
ARM GAS  /tmp/cck3XRbv.s 			page 75


 1927 0142 2368     		ldr	r3, [r4]
 1928 0144 1D60     		str	r5, [r3]
1337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 1929              		.loc 1 1337 0
 1930 0146 E5E7     		b	.L155
 1931              		.cfi_endproc
 1932              	.LFE151:
 1934              		.section	.text.ADC_DMAError,"ax",%progbits
 1935              		.align	1
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
 1939              		.fpu fpv5-sp-d16
 1941              	ADC_DMAError:
 1942              	.LFB166:
2025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
2026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** /**
2027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @brief  DMA error callback 
2028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
2030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   * @retval None
2031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   */
2032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** {
 1943              		.loc 1 2033 0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 0
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
 1947              	.LVL123:
 1948 0000 08B5     		push	{r3, lr}
 1949              	.LCFI22:
 1950              		.cfi_def_cfa_offset 8
 1951              		.cfi_offset 3, -8
 1952              		.cfi_offset 14, -4
2034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1953              		.loc 1 2034 0
 1954 0002 806B     		ldr	r0, [r0, #56]
 1955              	.LVL124:
2035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->State= HAL_ADC_STATE_ERROR_DMA;
 1956              		.loc 1 2035 0
 1957 0004 4023     		movs	r3, #64
 1958 0006 0364     		str	r3, [r0, #64]
2036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 1959              		.loc 1 2037 0
 1960 0008 436C     		ldr	r3, [r0, #68]
 1961 000a 43F00403 		orr	r3, r3, #4
 1962 000e 4364     		str	r3, [r0, #68]
2038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Error callback */
2039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
2041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #else
2042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 1963              		.loc 1 2042 0
 1964 0010 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1965              	.LVL125:
2043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
ARM GAS  /tmp/cck3XRbv.s 			page 76


2044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 1966              		.loc 1 2044 0
 1967 0014 08BD     		pop	{r3, pc}
 1968              		.cfi_endproc
 1969              	.LFE166:
 1971              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1972              		.align	1
 1973              		.syntax unified
 1974              		.thumb
 1975              		.thumb_func
 1976              		.fpu fpv5-sp-d16
 1978              	ADC_DMAConvCplt:
 1979              	.LFB164:
1947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1980              		.loc 1 1947 0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 0
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 1984              	.LVL126:
 1985 0000 08B5     		push	{r3, lr}
 1986              	.LCFI23:
 1987              		.cfi_def_cfa_offset 8
 1988              		.cfi_offset 3, -8
 1989              		.cfi_offset 14, -4
1949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 1990              		.loc 1 1949 0
 1991 0002 836B     		ldr	r3, [r0, #56]
 1992              	.LVL127:
1952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 1993              		.loc 1 1952 0
 1994 0004 1A6C     		ldr	r2, [r3, #64]
 1995 0006 12F0500F 		tst	r2, #80
 1996 000a 26D1     		bne	.L172
1955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 1997              		.loc 1 1955 0
 1998 000c 1A6C     		ldr	r2, [r3, #64]
 1999 000e 42F40072 		orr	r2, r2, #512
 2000 0012 1A64     		str	r2, [r3, #64]
1963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 2001              		.loc 1 1963 0
 2002 0014 1A68     		ldr	r2, [r3]
 2003 0016 9168     		ldr	r1, [r2, #8]
 2004 0018 11F0405F 		tst	r1, #805306368
 2005 001c 19D1     		bne	.L173
1964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 2006              		.loc 1 1964 0 discriminator 1
 2007 001e 9969     		ldr	r1, [r3, #24]
1963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 2008              		.loc 1 1963 0 discriminator 1
 2009 0020 B9B9     		cbnz	r1, .L173
1965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 2010              		.loc 1 1965 0
 2011 0022 D16A     		ldr	r1, [r2, #44]
1964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 2012              		.loc 1 1964 0
 2013 0024 11F4700F 		tst	r1, #15728640
 2014 0028 03D0     		beq	.L174
ARM GAS  /tmp/cck3XRbv.s 			page 77


1966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 2015              		.loc 1 1966 0
 2016 002a 9168     		ldr	r1, [r2, #8]
1965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 2017              		.loc 1 1965 0
 2018 002c 11F4806F 		tst	r1, #1024
 2019 0030 0FD1     		bne	.L173
 2020              	.L174:
1972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 2021              		.loc 1 1972 0
 2022 0032 5168     		ldr	r1, [r2, #4]
 2023 0034 21F02001 		bic	r1, r1, #32
 2024 0038 5160     		str	r1, [r2, #4]
1975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       
 2025              		.loc 1 1975 0
 2026 003a 1A6C     		ldr	r2, [r3, #64]
 2027 003c 22F48072 		bic	r2, r2, #256
 2028 0040 1A64     		str	r2, [r3, #64]
1977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 2029              		.loc 1 1977 0
 2030 0042 1A6C     		ldr	r2, [r3, #64]
 2031 0044 12F4805F 		tst	r2, #4096
 2032 0048 03D1     		bne	.L173
1979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 2033              		.loc 1 1979 0
 2034 004a 1A6C     		ldr	r2, [r3, #64]
 2035 004c 42F00102 		orr	r2, r2, #1
 2036 0050 1A64     		str	r2, [r3, #64]
 2037              	.L173:
1987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 2038              		.loc 1 1987 0
 2039 0052 1846     		mov	r0, r3
 2040              	.LVL128:
 2041 0054 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 2042              	.LVL129:
 2043              	.L171:
2007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2044              		.loc 1 2007 0
 2045 0058 08BD     		pop	{r3, pc}
 2046              	.LVL130:
 2047              	.L172:
1992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 2048              		.loc 1 1992 0
 2049 005a 1A6C     		ldr	r2, [r3, #64]
 2050 005c 12F0100F 		tst	r2, #16
 2051 0060 03D1     		bne	.L178
2004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 2052              		.loc 1 2004 0
 2053 0062 9B6B     		ldr	r3, [r3, #56]
 2054              	.LVL131:
 2055 0064 DB6C     		ldr	r3, [r3, #76]
 2056 0066 9847     		blx	r3
 2057              	.LVL132:
2007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2058              		.loc 1 2007 0
 2059 0068 F6E7     		b	.L171
 2060              	.LVL133:
ARM GAS  /tmp/cck3XRbv.s 			page 78


 2061              	.L178:
1998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 2062              		.loc 1 1998 0
 2063 006a 1846     		mov	r0, r3
 2064              	.LVL134:
 2065 006c FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2066              	.LVL135:
 2067 0070 F2E7     		b	.L171
 2068              		.cfi_endproc
 2069              	.LFE164:
 2071              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2072              		.align	1
 2073              		.global	HAL_ADC_ConfigChannel
 2074              		.syntax unified
 2075              		.thumb
 2076              		.thumb_func
 2077              		.fpu fpv5-sp-d16
 2079              	HAL_ADC_ConfigChannel:
 2080              	.LFB159:
1625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   __IO uint32_t counter = 0;
 2081              		.loc 1 1625 0
 2082              		.cfi_startproc
 2083              		@ args = 0, pretend = 0, frame = 8
 2084              		@ frame_needed = 0, uses_anonymous_args = 0
 2085              		@ link register save eliminated.
 2086              	.LVL136:
 2087 0000 30B4     		push	{r4, r5}
 2088              	.LCFI24:
 2089              		.cfi_def_cfa_offset 8
 2090              		.cfi_offset 4, -8
 2091              		.cfi_offset 5, -4
 2092 0002 82B0     		sub	sp, sp, #8
 2093              	.LCFI25:
 2094              		.cfi_def_cfa_offset 16
1626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2095              		.loc 1 1626 0
 2096 0004 0023     		movs	r3, #0
 2097 0006 0193     		str	r3, [sp, #4]
1634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2098              		.loc 1 1634 0
 2099 0008 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2100 000c 012B     		cmp	r3, #1
 2101 000e 00F0D180 		beq	.L192
1634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2102              		.loc 1 1634 0 is_stmt 0 discriminator 2
 2103 0012 0123     		movs	r3, #1
 2104 0014 80F83C30 		strb	r3, [r0, #60]
1637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2105              		.loc 1 1637 0 is_stmt 1 discriminator 2
 2106 0018 0B68     		ldr	r3, [r1]
 2107 001a B3F1004F 		cmp	r3, #-2147483648
 2108 001e 18BF     		it	ne
 2109 0020 092B     		cmpne	r3, #9
 2110 0022 22D9     		bls	.L181
1640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2111              		.loc 1 1640 0
 2112 0024 0568     		ldr	r5, [r0]
ARM GAS  /tmp/cck3XRbv.s 			page 79


 2113 0026 EA68     		ldr	r2, [r5, #12]
 2114 0028 9BB2     		uxth	r3, r3
 2115 002a 03EB4303 		add	r3, r3, r3, lsl #1
 2116 002e 1E3B     		subs	r3, r3, #30
 2117 0030 0724     		movs	r4, #7
 2118 0032 04FA03F3 		lsl	r3, r4, r3
 2119 0036 22EA0303 		bic	r3, r2, r3
 2120 003a EB60     		str	r3, [r5, #12]
1642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 2121              		.loc 1 1642 0
 2122 003c 0B68     		ldr	r3, [r1]
 2123 003e 5E4A     		ldr	r2, .L198
 2124 0040 9342     		cmp	r3, r2
 2125 0042 0BD0     		beq	.L194
1650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 2126              		.loc 1 1650 0
 2127 0044 0568     		ldr	r5, [r0]
 2128 0046 EA68     		ldr	r2, [r5, #12]
 2129 0048 8C68     		ldr	r4, [r1, #8]
 2130 004a 9BB2     		uxth	r3, r3
 2131 004c 03EB4303 		add	r3, r3, r3, lsl #1
 2132 0050 1E3B     		subs	r3, r3, #30
 2133 0052 04FA03F3 		lsl	r3, r4, r3
 2134 0056 1343     		orrs	r3, r3, r2
 2135 0058 EB60     		str	r3, [r5, #12]
 2136 005a 1BE0     		b	.L183
 2137              	.L194:
1645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     }
 2138              		.loc 1 1645 0
 2139 005c 0268     		ldr	r2, [r0]
 2140 005e D368     		ldr	r3, [r2, #12]
 2141 0060 8C68     		ldr	r4, [r1, #8]
 2142 0062 43EA0463 		orr	r3, r3, r4, lsl #24
 2143 0066 D360     		str	r3, [r2, #12]
 2144 0068 14E0     		b	.L183
 2145              	.L181:
1656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 2146              		.loc 1 1656 0
 2147 006a 0568     		ldr	r5, [r0]
 2148 006c 2A69     		ldr	r2, [r5, #16]
 2149 006e 9BB2     		uxth	r3, r3
 2150 0070 03EB4303 		add	r3, r3, r3, lsl #1
 2151 0074 0724     		movs	r4, #7
 2152 0076 04FA03F3 		lsl	r3, r4, r3
 2153 007a 22EA0303 		bic	r3, r2, r3
 2154 007e 2B61     		str	r3, [r5, #16]
1659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2155              		.loc 1 1659 0
 2156 0080 0568     		ldr	r5, [r0]
 2157 0082 2A69     		ldr	r2, [r5, #16]
 2158 0084 8C68     		ldr	r4, [r1, #8]
 2159 0086 0B88     		ldrh	r3, [r1]
 2160 0088 03EB4303 		add	r3, r3, r3, lsl #1
 2161 008c 04FA03F3 		lsl	r3, r4, r3
 2162 0090 1343     		orrs	r3, r3, r2
 2163 0092 2B61     		str	r3, [r5, #16]
 2164              	.L183:
ARM GAS  /tmp/cck3XRbv.s 			page 80


1663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2165              		.loc 1 1663 0
 2166 0094 4B68     		ldr	r3, [r1, #4]
 2167 0096 062B     		cmp	r3, #6
 2168 0098 28D8     		bhi	.L184
1666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 2169              		.loc 1 1666 0
 2170 009a 0568     		ldr	r5, [r0]
 2171 009c 6A6B     		ldr	r2, [r5, #52]
 2172 009e 03EB8303 		add	r3, r3, r3, lsl #2
 2173 00a2 053B     		subs	r3, r3, #5
 2174 00a4 1F24     		movs	r4, #31
 2175 00a6 04FA03F3 		lsl	r3, r4, r3
 2176 00aa 22EA0303 		bic	r3, r2, r3
 2177 00ae 6B63     		str	r3, [r5, #52]
1669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2178              		.loc 1 1669 0
 2179 00b0 0568     		ldr	r5, [r0]
 2180 00b2 6A6B     		ldr	r2, [r5, #52]
 2181 00b4 4B68     		ldr	r3, [r1, #4]
 2182 00b6 03EB8303 		add	r3, r3, r3, lsl #2
 2183 00ba 053B     		subs	r3, r3, #5
 2184 00bc 0C88     		ldrh	r4, [r1]
 2185 00be 04FA03F3 		lsl	r3, r4, r3
 2186 00c2 1343     		orrs	r3, r3, r2
 2187 00c4 6B63     		str	r3, [r5, #52]
 2188              	.L185:
1691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2189              		.loc 1 1691 0
 2190 00c6 0268     		ldr	r2, [r0]
 2191 00c8 3C4B     		ldr	r3, .L198+4
 2192 00ca 9A42     		cmp	r2, r3
 2193 00cc 3ED0     		beq	.L195
 2194              	.L187:
1698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2195              		.loc 1 1698 0
 2196 00ce 0268     		ldr	r2, [r0]
 2197 00d0 3A4B     		ldr	r3, .L198+4
 2198 00d2 9A42     		cmp	r2, r3
 2199 00d4 44D0     		beq	.L196
 2200              	.L188:
1705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2201              		.loc 1 1705 0
 2202 00d6 0268     		ldr	r2, [r0]
 2203 00d8 384B     		ldr	r3, .L198+4
 2204 00da 9A42     		cmp	r2, r3
 2205 00dc 49D0     		beq	.L197
 2206              	.L189:
1723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2207              		.loc 1 1723 0
 2208 00de 0023     		movs	r3, #0
 2209 00e0 80F83C30 		strb	r3, [r0, #60]
1726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 2210              		.loc 1 1726 0
 2211 00e4 1846     		mov	r0, r3
 2212              	.LVL137:
 2213              	.L180:
ARM GAS  /tmp/cck3XRbv.s 			page 81


1727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2214              		.loc 1 1727 0
 2215 00e6 02B0     		add	sp, sp, #8
 2216              	.LCFI26:
 2217              		.cfi_remember_state
 2218              		.cfi_def_cfa_offset 8
 2219              		@ sp needed
 2220 00e8 30BC     		pop	{r4, r5}
 2221              	.LCFI27:
 2222              		.cfi_restore 5
 2223              		.cfi_restore 4
 2224              		.cfi_def_cfa_offset 0
 2225 00ea 7047     		bx	lr
 2226              	.LVL138:
 2227              	.L184:
 2228              	.LCFI28:
 2229              		.cfi_restore_state
1672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2230              		.loc 1 1672 0
 2231 00ec 0C2B     		cmp	r3, #12
 2232 00ee 16D8     		bhi	.L186
1675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 2233              		.loc 1 1675 0
 2234 00f0 0568     		ldr	r5, [r0]
 2235 00f2 2A6B     		ldr	r2, [r5, #48]
 2236 00f4 03EB8303 		add	r3, r3, r3, lsl #2
 2237 00f8 233B     		subs	r3, r3, #35
 2238 00fa 1F24     		movs	r4, #31
 2239 00fc 04FA03F3 		lsl	r3, r4, r3
 2240 0100 22EA0303 		bic	r3, r2, r3
 2241 0104 2B63     		str	r3, [r5, #48]
1678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2242              		.loc 1 1678 0
 2243 0106 0568     		ldr	r5, [r0]
 2244 0108 2A6B     		ldr	r2, [r5, #48]
 2245 010a 4B68     		ldr	r3, [r1, #4]
 2246 010c 03EB8303 		add	r3, r3, r3, lsl #2
 2247 0110 233B     		subs	r3, r3, #35
 2248 0112 0C88     		ldrh	r4, [r1]
 2249 0114 04FA03F3 		lsl	r3, r4, r3
 2250 0118 1343     		orrs	r3, r3, r2
 2251 011a 2B63     		str	r3, [r5, #48]
 2252 011c D3E7     		b	.L185
 2253              	.L186:
1684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     
 2254              		.loc 1 1684 0
 2255 011e 0568     		ldr	r5, [r0]
 2256 0120 EA6A     		ldr	r2, [r5, #44]
 2257 0122 03EB8303 		add	r3, r3, r3, lsl #2
 2258 0126 413B     		subs	r3, r3, #65
 2259 0128 1F24     		movs	r4, #31
 2260 012a 04FA03F3 		lsl	r3, r4, r3
 2261 012e 22EA0303 		bic	r3, r2, r3
 2262 0132 EB62     		str	r3, [r5, #44]
1687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2263              		.loc 1 1687 0
 2264 0134 0568     		ldr	r5, [r0]
ARM GAS  /tmp/cck3XRbv.s 			page 82


 2265 0136 EA6A     		ldr	r2, [r5, #44]
 2266 0138 4B68     		ldr	r3, [r1, #4]
 2267 013a 03EB8303 		add	r3, r3, r3, lsl #2
 2268 013e 413B     		subs	r3, r3, #65
 2269 0140 0C88     		ldrh	r4, [r1]
 2270 0142 04FA03F3 		lsl	r3, r4, r3
 2271 0146 1343     		orrs	r3, r3, r2
 2272 0148 EB62     		str	r3, [r5, #44]
 2273 014a BCE7     		b	.L185
 2274              	.L195:
1691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2275              		.loc 1 1691 0 discriminator 1
 2276 014c 0B68     		ldr	r3, [r1]
 2277 014e B3F1004F 		cmp	r3, #-2147483648
 2278 0152 BCD1     		bne	.L187
1694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2279              		.loc 1 1694 0
 2280 0154 1A4A     		ldr	r2, .L198+8
 2281 0156 5368     		ldr	r3, [r2, #4]
 2282 0158 23F44003 		bic	r3, r3, #12582912
 2283 015c 5360     		str	r3, [r2, #4]
 2284 015e B6E7     		b	.L187
 2285              	.L196:
1698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2286              		.loc 1 1698 0 discriminator 1
 2287 0160 0B68     		ldr	r3, [r1]
 2288 0162 122B     		cmp	r3, #18
 2289 0164 B7D1     		bne	.L188
1701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2290              		.loc 1 1701 0
 2291 0166 164A     		ldr	r2, .L198+8
 2292 0168 5368     		ldr	r3, [r2, #4]
 2293 016a 43F48003 		orr	r3, r3, #4194304
 2294 016e 5360     		str	r3, [r2, #4]
 2295 0170 B1E7     		b	.L188
 2296              	.L197:
1705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2297              		.loc 1 1705 0 discriminator 1
 2298 0172 0B68     		ldr	r3, [r1]
 2299 0174 104A     		ldr	r2, .L198
 2300 0176 112B     		cmp	r3, #17
 2301 0178 18BF     		it	ne
 2302 017a 9342     		cmpne	r3, r2
 2303 017c AFD1     		bne	.L189
1708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2304              		.loc 1 1708 0
 2305 017e 104A     		ldr	r2, .L198+8
 2306 0180 5368     		ldr	r3, [r2, #4]
 2307 0182 43F40003 		orr	r3, r3, #8388608
 2308 0186 5360     		str	r3, [r2, #4]
1710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****     {
 2309              		.loc 1 1710 0
 2310 0188 0A68     		ldr	r2, [r1]
 2311 018a 0B4B     		ldr	r3, .L198
 2312 018c 9A42     		cmp	r2, r3
 2313 018e A6D1     		bne	.L189
1714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       while(counter != 0)
ARM GAS  /tmp/cck3XRbv.s 			page 83


 2314              		.loc 1 1714 0
 2315 0190 0C4B     		ldr	r3, .L198+12
 2316 0192 1B68     		ldr	r3, [r3]
 2317 0194 0C4A     		ldr	r2, .L198+16
 2318 0196 A2FB0323 		umull	r2, r3, r2, r3
 2319 019a 9B0C     		lsrs	r3, r3, #18
 2320 019c 03EB8303 		add	r3, r3, r3, lsl #2
 2321 01a0 5A00     		lsls	r2, r3, #1
 2322 01a2 0192     		str	r2, [sp, #4]
1715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 2323              		.loc 1 1715 0
 2324 01a4 02E0     		b	.L190
 2325              	.L191:
1717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       }
 2326              		.loc 1 1717 0
 2327 01a6 019B     		ldr	r3, [sp, #4]
 2328 01a8 013B     		subs	r3, r3, #1
 2329 01aa 0193     		str	r3, [sp, #4]
 2330              	.L190:
1715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****       {
 2331              		.loc 1 1715 0
 2332 01ac 019B     		ldr	r3, [sp, #4]
 2333 01ae 002B     		cmp	r3, #0
 2334 01b0 F9D1     		bne	.L191
 2335 01b2 94E7     		b	.L189
 2336              	.L192:
1634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2337              		.loc 1 1634 0
 2338 01b4 0220     		movs	r0, #2
 2339              	.LVL139:
 2340 01b6 96E7     		b	.L180
 2341              	.L199:
 2342              		.align	2
 2343              	.L198:
 2344 01b8 12000010 		.word	268435474
 2345 01bc 00200140 		.word	1073815552
 2346 01c0 00230140 		.word	1073816320
 2347 01c4 00000000 		.word	SystemCoreClock
 2348 01c8 83DE1B43 		.word	1125899907
 2349              		.cfi_endproc
 2350              	.LFE159:
 2352              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2353              		.align	1
 2354              		.global	HAL_ADC_AnalogWDGConfig
 2355              		.syntax unified
 2356              		.thumb
 2357              		.thumb_func
 2358              		.fpu fpv5-sp-d16
 2360              	HAL_ADC_AnalogWDGConfig:
 2361              	.LFB160:
1746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
 2362              		.loc 1 1746 0
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 0
 2365              		@ frame_needed = 0, uses_anonymous_args = 0
 2366              		@ link register save eliminated.
 2367              	.LVL140:
ARM GAS  /tmp/cck3XRbv.s 			page 84


1763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2368              		.loc 1 1763 0
 2369 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2370 0004 012B     		cmp	r3, #1
 2371 0006 32D0     		beq	.L204
1746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
 2372              		.loc 1 1746 0 discriminator 2
 2373 0008 10B4     		push	{r4}
 2374              	.LCFI29:
 2375              		.cfi_def_cfa_offset 4
 2376              		.cfi_offset 4, -4
1763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2377              		.loc 1 1763 0 discriminator 2
 2378 000a 0123     		movs	r3, #1
 2379 000c 80F83C30 		strb	r3, [r0, #60]
1765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   {
 2380              		.loc 1 1765 0 discriminator 2
 2381 0010 0B7C     		ldrb	r3, [r1, #16]	@ zero_extendqisi2
 2382 0012 012B     		cmp	r3, #1
 2383 0014 25D0     		beq	.L209
1773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2384              		.loc 1 1773 0
 2385 0016 0268     		ldr	r2, [r0]
 2386 0018 5368     		ldr	r3, [r2, #4]
 2387 001a 23F04003 		bic	r3, r3, #64
 2388 001e 5360     		str	r3, [r2, #4]
 2389              	.L203:
1777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2390              		.loc 1 1777 0
 2391 0020 0268     		ldr	r2, [r0]
 2392 0022 5468     		ldr	r4, [r2, #4]
 2393 0024 134B     		ldr	r3, .L210
 2394 0026 2340     		ands	r3, r3, r4
 2395 0028 5360     		str	r3, [r2, #4]
1780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2396              		.loc 1 1780 0
 2397 002a 0268     		ldr	r2, [r0]
 2398 002c 5368     		ldr	r3, [r2, #4]
 2399 002e 0C68     		ldr	r4, [r1]
 2400 0030 2343     		orrs	r3, r3, r4
 2401 0032 5360     		str	r3, [r2, #4]
1783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2402              		.loc 1 1783 0
 2403 0034 0368     		ldr	r3, [r0]
 2404 0036 4A68     		ldr	r2, [r1, #4]
 2405 0038 5A62     		str	r2, [r3, #36]
1786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2406              		.loc 1 1786 0
 2407 003a 0368     		ldr	r3, [r0]
 2408 003c 8A68     		ldr	r2, [r1, #8]
 2409 003e 9A62     		str	r2, [r3, #40]
1789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2410              		.loc 1 1789 0
 2411 0040 0268     		ldr	r2, [r0]
 2412 0042 5368     		ldr	r3, [r2, #4]
 2413 0044 23F01F03 		bic	r3, r3, #31
 2414 0048 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/cck3XRbv.s 			page 85


1792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2415              		.loc 1 1792 0
 2416 004a 0268     		ldr	r2, [r0]
 2417 004c 5468     		ldr	r4, [r2, #4]
 2418 004e 8B89     		ldrh	r3, [r1, #12]
 2419 0050 2343     		orrs	r3, r3, r4
 2420 0052 5360     		str	r3, [r2, #4]
1795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2421              		.loc 1 1795 0
 2422 0054 0023     		movs	r3, #0
 2423 0056 80F83C30 		strb	r3, [r0, #60]
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 2424              		.loc 1 1798 0
 2425 005a 1846     		mov	r0, r3
 2426              	.LVL141:
1799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2427              		.loc 1 1799 0
 2428 005c 5DF8044B 		ldr	r4, [sp], #4
 2429              	.LCFI30:
 2430              		.cfi_remember_state
 2431              		.cfi_restore 4
 2432              		.cfi_def_cfa_offset 0
 2433 0060 7047     		bx	lr
 2434              	.LVL142:
 2435              	.L209:
 2436              	.LCFI31:
 2437              		.cfi_restore_state
1768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   }
 2438              		.loc 1 1768 0
 2439 0062 0268     		ldr	r2, [r0]
 2440 0064 5368     		ldr	r3, [r2, #4]
 2441 0066 43F04003 		orr	r3, r3, #64
 2442 006a 5360     		str	r3, [r2, #4]
 2443 006c D8E7     		b	.L203
 2444              	.L204:
 2445              	.LCFI32:
 2446              		.cfi_def_cfa_offset 0
 2447              		.cfi_restore 4
1763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   
 2448              		.loc 1 1763 0
 2449 006e 0220     		movs	r0, #2
 2450              	.LVL143:
1799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2451              		.loc 1 1799 0
 2452 0070 7047     		bx	lr
 2453              	.L211:
 2454 0072 00BF     		.align	2
 2455              	.L210:
 2456 0074 FFFD3FFF 		.word	-12583425
 2457              		.cfi_endproc
 2458              	.LFE160:
 2460              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2461              		.align	1
 2462              		.global	HAL_ADC_GetState
 2463              		.syntax unified
 2464              		.thumb
 2465              		.thumb_func
ARM GAS  /tmp/cck3XRbv.s 			page 86


 2466              		.fpu fpv5-sp-d16
 2468              	HAL_ADC_GetState:
 2469              	.LFB161:
1828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   /* Return ADC state */
 2470              		.loc 1 1828 0
 2471              		.cfi_startproc
 2472              		@ args = 0, pretend = 0, frame = 0
 2473              		@ frame_needed = 0, uses_anonymous_args = 0
 2474              		@ link register save eliminated.
 2475              	.LVL144:
1830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 2476              		.loc 1 1830 0
 2477 0000 006C     		ldr	r0, [r0, #64]
 2478              	.LVL145:
1831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2479              		.loc 1 1831 0
 2480 0002 7047     		bx	lr
 2481              		.cfi_endproc
 2482              	.LFE161:
 2484              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2485              		.align	1
 2486              		.global	HAL_ADC_GetError
 2487              		.syntax unified
 2488              		.thumb
 2489              		.thumb_func
 2490              		.fpu fpv5-sp-d16
 2492              	HAL_ADC_GetError:
 2493              	.LFB162:
1840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c ****   return hadc->ErrorCode;
 2494              		.loc 1 1840 0
 2495              		.cfi_startproc
 2496              		@ args = 0, pretend = 0, frame = 0
 2497              		@ frame_needed = 0, uses_anonymous_args = 0
 2498              		@ link register save eliminated.
 2499              	.LVL146:
1841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** }
 2500              		.loc 1 1841 0
 2501 0000 406C     		ldr	r0, [r0, #68]
 2502              	.LVL147:
1842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_adc.c **** 
 2503              		.loc 1 1842 0
 2504 0002 7047     		bx	lr
 2505              		.cfi_endproc
 2506              	.LFE162:
 2508              		.text
 2509              	.Letext0:
 2510              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2511              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2512              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 2513              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 2514              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 2515              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 2516              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2517              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 2518              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_adc.h"
 2519              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 2520              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_adc_ex.h"
ARM GAS  /tmp/cck3XRbv.s 			page 87


ARM GAS  /tmp/cck3XRbv.s 			page 88


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_adc.c
     /tmp/cck3XRbv.s:18     .text.ADC_Init:0000000000000000 $t
     /tmp/cck3XRbv.s:24     .text.ADC_Init:0000000000000000 ADC_Init
     /tmp/cck3XRbv.s:195    .text.ADC_Init:000000000000012c $d
     /tmp/cck3XRbv.s:201    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/cck3XRbv.s:208    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/cck3XRbv.s:222    .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/cck3XRbv.s:229    .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/cck3XRbv.s:308    .text.HAL_ADC_Init:0000000000000054 $d
     /tmp/cck3XRbv.s:313    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/cck3XRbv.s:320    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/cck3XRbv.s:334    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/cck3XRbv.s:341    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/cck3XRbv.s:404    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/cck3XRbv.s:411    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/cck3XRbv.s:607    .text.HAL_ADC_Start:000000000000010c $d
     /tmp/cck3XRbv.s:617    .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/cck3XRbv.s:624    .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/cck3XRbv.s:673    .text.HAL_ADC_Stop:000000000000003c $d
     /tmp/cck3XRbv.s:678    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/cck3XRbv.s:685    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/cck3XRbv.s:836    .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/cck3XRbv.s:843    .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/cck3XRbv.s:932    .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/cck3XRbv.s:939    .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/cck3XRbv.s:1141   .text.HAL_ADC_Start_IT:0000000000000118 $d
     /tmp/cck3XRbv.s:1152   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/cck3XRbv.s:1159   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/cck3XRbv.s:1213   .text.HAL_ADC_Stop_IT:0000000000000044 $d
     /tmp/cck3XRbv.s:1219   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/cck3XRbv.s:1226   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/cck3XRbv.s:1454   .text.HAL_ADC_Start_DMA:000000000000014c $d
     /tmp/cck3XRbv.s:1978   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/cck3XRbv.s:1629   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/cck3XRbv.s:1941   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/cck3XRbv.s:1467   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/cck3XRbv.s:1474   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/cck3XRbv.s:1551   .text.HAL_ADC_Stop_DMA:000000000000005c $d
     /tmp/cck3XRbv.s:1556   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/cck3XRbv.s:1563   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/cck3XRbv.s:1581   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cck3XRbv.s:1588   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cck3XRbv.s:1602   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/cck3XRbv.s:1609   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/cck3XRbv.s:1623   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/cck3XRbv.s:1653   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/cck3XRbv.s:1660   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/cck3XRbv.s:1674   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/cck3XRbv.s:1681   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/cck3XRbv.s:1695   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/cck3XRbv.s:1702   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/cck3XRbv.s:1935   .text.ADC_DMAError:0000000000000000 $t
     /tmp/cck3XRbv.s:1972   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/cck3XRbv.s:2072   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/cck3XRbv.s:2079   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/cck3XRbv.s:2344   .text.HAL_ADC_ConfigChannel:00000000000001b8 $d
ARM GAS  /tmp/cck3XRbv.s 			page 89


     /tmp/cck3XRbv.s:2353   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/cck3XRbv.s:2360   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/cck3XRbv.s:2456   .text.HAL_ADC_AnalogWDGConfig:0000000000000074 $d
     /tmp/cck3XRbv.s:2461   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/cck3XRbv.s:2468   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/cck3XRbv.s:2485   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/cck3XRbv.s:2492   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_InjectedConvCpltCallback
