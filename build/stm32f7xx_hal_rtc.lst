ARM GAS  /tmp/cci5ScRN.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f7xx_hal_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
  18              		.align	1
  19              		.weak	HAL_RTC_MspInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-sp-d16
  25              	HAL_RTC_MspInit:
  26              	.LFB143:
  27              		.file 1 "Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c"
   1:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
   2:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
   3:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @file    stm32f7xx_hal_rtc.c
   4:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          functionalities of the Real Time Clock (RTC) peripheral:
   8:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + RTC Time and Date functions
  10:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + RTC Alarm functions
  11:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Peripheral Control functions
  12:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *           + Peripheral State functions
  13:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
  14:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   @verbatim
  15:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==============================================================================
  16:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ##### Backup Domain Operating Condition #####
  17:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==============================================================================
  18:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The real-time clock (RTC), the RTC backup registers, and the backup
  19:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        SRAM (BKP SRAM) can be powered from the VBAT voltage when the main
  20:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        VDD supply is powered off.
  21:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        To retain the content of the RTC backup registers, backup SRAM, and supply
  22:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        the RTC when VDD is turned off, VBAT pin can be connected to an optional
  23:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  24:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  25:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] To allow the RTC operating even when the main digital supply (VDD) is turned
  26:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        off, the VBAT pin powers the following blocks:
  27:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The RTC
  28:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The LSE oscillator
  29:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) The backup SRAM when the low power backup regulator is enabled
  30:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  31:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cci5ScRN.s 			page 2


  32:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  33:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        the following pins are available:
  34:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as either GPIO or LSE pins
  35:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  36:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  37:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  38:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT
  39:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        because VDD is not present), the following pins are available:
  40:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as LSE pins only
  41:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC13 can be used as the RTC_AF1 pin
  42:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PI8 can be used as the RTC_AF2 pin
  43:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) PC1 can be used as the RTC_AF3 pin
  44:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  45:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  46:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  47:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register
  48:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        to their reset values. The BKPSRAM is not affected by this reset. The only
  49:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        way to reset the BKPSRAM is through the Flash interface by requesting
  50:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        a protection level change from 1 to 0.
  51:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] A backup domain reset is generated when one of the following events occurs:
  52:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the
  53:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR).
  54:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.
  55:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  56:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  57:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  58:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data
  59:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write
  60:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        accesses.
  61:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  62:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable the Power Controller (PWR) APB1 interface clock using the
  63:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RCC_PWR_CLK_ENABLE() function.
  64:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  65:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() function.
  66:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() function.
  67:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  68:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  69:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ##### How to use this driver #####
  70:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  71:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..]
  72:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  73:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour
  74:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  75:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  76:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *** Time and Date configuration ***
  77:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ===================================
  78:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..]
  79:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime()
  80:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  81:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions.
  82:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  83:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *** Alarm configuration ***
  84:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ===========================
  85:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..]
  86:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function.
  87:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         You can also configure the RTC Alarm with interrupt mode using the HAL_RTC_SetAlarm_IT() fu
  88:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
ARM GAS  /tmp/cci5ScRN.s 			page 3


  89:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
  90:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  91:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ==================================================================
  92:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate
  93:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        function.
  94:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B),
  95:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        RTC wake-up, RTC tamper event detection and RTC time stamp event detection.
  96:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and
  97:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Standby low power modes.
  98:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending
  99:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        on an external interrupt (Auto-wake-up mode), by using the RTC alarm
 100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        or the RTC wake-up events.
 101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the
 102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
 103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        Wake-up from STOP and STANDBY modes is possible only when the RTC clock source
 104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****        is LSE or LSI.
 105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *** Callback registration ***
 107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   =============================================
 108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   The compilation define  USE_HAL_RTC_REGISTER_CALLBACKS when set to 1
 110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   allows the user to configure dynamically the driver callbacks.
 111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   Use Function @ref HAL_RTC_RegisterCallback() to register an interrupt callback.
 112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   Function @ref HAL_RTC_RegisterCallback() allows to register following callbacks:
 114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   and a pointer to the user callback function.
 125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   Use function @ref HAL_RTC_UnRegisterCallback() to reset a callback to the default
 127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   weak function.
 128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   @ref HAL_RTC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   and the Callback ID.
 130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   This function allows to reset following callbacks:
 131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   By default, after the @ref HAL_RTC_Init() and when the state is HAL_RTC_STATE_RESET,
 142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   all callbacks are set to the corresponding weak functions :
 143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   examples @ref AlarmAEventCallback(), @ref WakeUpTimerEventCallback().
 144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   Exception done for MspInit and MspDeInit callbacks that are reset to the legacy weak function
 145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   in the @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit() only when these callbacks are null
ARM GAS  /tmp/cci5ScRN.s 			page 4


 146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   (not registered beforehand).
 147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   If not, MspInit or MspDeInit are not null, @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit()
 148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   Callbacks can be registered/unregistered in HAL_RTC_STATE_READY state only.
 151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   in HAL_RTC_STATE_READY or HAL_RTC_STATE_RESET state,
 153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   In that case first register the MspInit/MspDeInit user callbacks
 155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   using @ref HAL_RTC_RegisterCallback() before calling @ref HAL_RTC_DeInit()
 156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   or @ref HAL_RTC_Init() function.
 157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
 159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
 160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   are set to the corresponding weak functions.
 161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    @endverbatim
 162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
 164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @attention
 165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * All rights reserved.</center></h2>
 168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * the "License"; You may not use this file except in compliance with the
 171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * License. You may obtain a copy of the License at:
 172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *
 174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   ******************************************************************************
 175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #include "stm32f7xx_hal.h"
 179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @addtogroup STM32F7xx_HAL_Driver
 181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC RTC
 185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief RTC HAL module driver
 186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /* Exported functions --------------------------------------------------------*/
 197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions RTC Exported Functions
 199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group1 Initialization and de-initialization functions
ARM GAS  /tmp/cci5ScRN.s 			page 5


 203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions
 204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
 205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim
 206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the
 210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable
 211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode,
 212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
 214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 13-bit synchronous prescaler.
 216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the
 217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter
 221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped
 222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is
 223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar
 225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              initialization, calendar update or after wake-up from low power modes
 226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then
 227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means
 228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the
 229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function
 230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Initializes the RTC peripheral
 238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(hrtc == NULL)
 246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      return HAL_ERROR;
 248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/cci5ScRN.s 			page 6


 260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(hrtc->State == HAL_RTC_STATE_RESET)
 261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
 264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmA
 266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmB
 267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeSt
 268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUp
 269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper
 270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper
 271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;     /* Legacy weak Tamper
 272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(hrtc->MspInitCallback == NULL)
 274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->MspInitCallback = HAL_RTC_MspInit;
 276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Init the low level hardware */
 278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->MspInitCallback(hrtc);
 279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(hrtc->MspDeInitCallback == NULL)
 281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #else
 286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(hrtc->State == HAL_RTC_STATE_RESET)
 287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
 290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Initialize RTC MSP */
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     HAL_RTC_MspInit(hrtc);
 293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set RTC state */
 297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear RTC_CR FMT, OSEL and POL Bits */
 316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
ARM GAS  /tmp/cci5ScRN.s 			page 7


 317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC_CR register */
 318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutP
 319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the RTC PRER */
 321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_OK;
 337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  DeInitializes the RTC peripheral
 342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.
 345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set RTC state */
 355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset TR, DR and CR registers */
ARM GAS  /tmp/cci5ScRN.s 			page 8


 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)0x00000000;
 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)0x00002101;
 376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000007;
 378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till WUTWF flag is set and if Time out is reached exit */
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Set RTC state */
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset all RTC CR register bits */
 398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)0x00000000;
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->WUTR = (uint32_t)0x0000FFFF;
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)0x007F00FF;
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)0x00000000;
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)0x00000000;
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->SHIFTR = (uint32_t)0x00000000;
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CALR = (uint32_t)0x00000000;
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = (uint32_t)0x00000000;
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = (uint32_t)0x00000000;
 407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset ISR register and exit initialization mode */
 409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)0x00000000;
 410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TAMPCR = 0x00000000;
 413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset Option register */
 415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR = 0x00000000;
 416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
ARM GAS  /tmp/cci5ScRN.s 			page 9


 431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(hrtc->MspDeInitCallback == NULL)
 437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* DeInit the low level hardware: CLOCK, NVIC.*/
 442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->MspDeInitCallback(hrtc);
 443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #else
 445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* De-Initialize RTC MSP */
 446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   HAL_RTC_MspDeInit(hrtc);
 447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_RESET;
 450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Release Lock */
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Register a User RTC Callback
 460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         To be used instead of the weak predefined callback
 461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be registered
 463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      Wake-Up Timer Event Callback ID
 468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID                Msp Init callback ID
 472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
 473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  pCallback pointer to the Callback function
 474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_RegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Callb
 477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(pCallback == NULL)
 481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process locked */
 486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cci5ScRN.s 			page 10


 488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(HAL_RTC_STATE_READY == hrtc->State)
 489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     switch (CallbackID)
 491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_ALARM_A_EVENT_CB_ID :
 493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback = pCallback;
 494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_ALARM_B_EVENT_CB_ID :
 497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback = pCallback;
 498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->TimeStampEventCallback = pCallback;
 502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->WakeUpTimerEventCallback = pCallback;
 506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_TAMPER1_EVENT_CB_ID :
 509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->Tamper1EventCallback = pCallback;
 510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_TAMPER2_EVENT_CB_ID :
 513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->Tamper2EventCallback = pCallback;
 514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_TAMPER3_EVENT_CB_ID :
 517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->Tamper3EventCallback = pCallback;
 518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    case HAL_RTC_MSPINIT_CB_ID :
 521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->MspInitCallback = pCallback;
 522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    case HAL_RTC_MSPDEINIT_CB_ID :
 525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->MspDeInitCallback = pCallback;
 526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     default :
 529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      /* Return error status */
 530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       status =  HAL_ERROR;
 531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else if(HAL_RTC_STATE_RESET == hrtc->State)
 535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     switch (CallbackID)
 537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_MSPINIT_CB_ID :
 539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->MspInitCallback = pCallback;
 540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    case HAL_RTC_MSPDEINIT_CB_ID :
 543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->MspDeInitCallback = pCallback;
 544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
ARM GAS  /tmp/cci5ScRN.s 			page 11


 545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     default :
 547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      /* Return error status */
 548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       status =  HAL_ERROR;
 549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Return error status */
 555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     status =  HAL_ERROR;
 556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Release Lock */
 559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return status;
 562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Unregister an RTC Callback
 566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         RTC callabck is redirected to the weak predefined callback
 567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be unregistered
 569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      Wake-Up Timer Event Callback ID
 574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID Msp Init callback ID
 578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID Msp DeInit callback ID
 579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_UnRegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Cal
 582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process locked */
 586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(HAL_RTC_STATE_READY == hrtc->State)
 589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     switch (CallbackID)
 591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_ALARM_A_EVENT_CB_ID :
 593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback = HAL_RTC_AlarmAEventCallback;         /* Legacy weak AlarmAEventCa
 594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_ALARM_B_EVENT_CB_ID :
 597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback = HAL_RTCEx_AlarmBEventCallback;          /* Legacy weak AlarmBEven
 598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->TimeStampEventCallback = HAL_RTCEx_TimeStampEventCallback;    /* Legacy weak TimeStampE
ARM GAS  /tmp/cci5ScRN.s 			page 12


 602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->WakeUpTimerEventCallback = HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTim
 606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_TAMPER1_EVENT_CB_ID :
 609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->Tamper1EventCallback = HAL_RTCEx_Tamper1EventCallback;         /* Legacy weak Tamper1Ev
 610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_TAMPER2_EVENT_CB_ID :
 613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->Tamper2EventCallback = HAL_RTCEx_Tamper2EventCallback;         /* Legacy weak Tamper2Ev
 614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_TAMPER3_EVENT_CB_ID :
 617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->Tamper3EventCallback = HAL_RTCEx_Tamper3EventCallback;         /* Legacy weak Tamper3Ev
 618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_MSPINIT_CB_ID :
 621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->MspInitCallback = HAL_RTC_MspInit;
 622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_MSPDEINIT_CB_ID :
 625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     default :
 629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      /* Return error status */
 630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       status =  HAL_ERROR;
 631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else if(HAL_RTC_STATE_RESET == hrtc->State)
 635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     switch (CallbackID)
 637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_MSPINIT_CB_ID :
 639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->MspInitCallback = HAL_RTC_MspInit;
 640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     case HAL_RTC_MSPDEINIT_CB_ID :
 643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     default :
 647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****      /* Return error status */
 648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       status =  HAL_ERROR;
 649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       break;
 650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Return error status */
 655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     status =  HAL_ERROR;
 656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Release Lock */
ARM GAS  /tmp/cci5ScRN.s 			page 13


 659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return status;
 662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Initializes the RTC MSP.
 667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
 670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
 672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
  28              		.loc 1 672 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
 675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */
 679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
  34              		.loc 1 679 0
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE143:
  39              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
  40              		.align	1
  41              		.weak	HAL_RTC_MspDeInit
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv5-sp-d16
  47              	HAL_RTC_MspDeInit:
  48              	.LFB144:
 680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  DeInitializes the RTC MSP.
 683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
 686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
 688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
  49              		.loc 1 688 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              		@ link register save eliminated.
  54              	.LVL1:
 689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
ARM GAS  /tmp/cci5ScRN.s 			page 14


 691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */
 695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
  55              		.loc 1 695 0
  56 0000 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE144:
  60              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
  61              		.align	1
  62              		.global	HAL_RTC_DeactivateAlarm
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv5-sp-d16
  68              	HAL_RTC_DeactivateAlarm:
  69              	.LFB151:
 696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
 699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group2 RTC Time and Date functions
 702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
 704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim
 705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
 708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
 712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
 713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets RTC current time.
 717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg FORMAT_BIN: Binary data format
 723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg FORMAT_BCD: BCD data format
 724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Check the parameters */
 731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cci5ScRN.s 			page 15


 735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sTime->Hours));
 745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16));
 759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
 768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sTime->TimeFormat = 0x00;
 770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16));
 778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state */
 790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cci5ScRN.s 			page 16


 792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */
 793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
 796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the RTC_TR register */
 800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear the bits to be configured */
 803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the RTC_CR register */
 806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
 822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    hrtc->State = HAL_RTC_STATE_READY;
 832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    __HAL_UNLOCK(hrtc);
 834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    return HAL_OK;
 836:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 838:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 839:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 840:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets RTC current time.
 841:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 842:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure with Hours, Minutes and Seconds fields returned
 843:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                with input format (BIN or BCD), also SubSeconds field returning the
 844:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
 845:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                factor to be used for second fraction ratio computation.
 846:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 847:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 848:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
ARM GAS  /tmp/cci5ScRN.s 			page 17


 849:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 850:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 851:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 852:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 853:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 854:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
 855:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
 856:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
 857:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
 858:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 859:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 860:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 862:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 863:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 864:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
 865:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 866:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 867:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 869:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 870:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 872:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 873:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get the TR register */
 874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 875:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 876:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 881:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 882:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the input parameters format */
 883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 884:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 885:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 889:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 890:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 891:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 893:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 894:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
 895:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets RTC current date.
 896:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 897:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
 898:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 899:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
 900:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 901:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 902:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 903:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
 904:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
 905:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
ARM GAS  /tmp/cci5ScRN.s 			page 18


 906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 907:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 908:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 909:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Check the parameters */
 910:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 911:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 912:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  /* Process Locked */
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  __HAL_LOCK(hrtc);
 914:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 916:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 918:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 920:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 921:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 922:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 923:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 925:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 926:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 927:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 928:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
 929:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << 13));
 934:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 935:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 936:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 937:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 938:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 939:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 940:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13));
 945:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 946:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 947:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 949:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 950:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Set Initialization mode */
 951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 952:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 953:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 955:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 956:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC state*/
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 958:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 959:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */
 960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 961:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_ERROR;
ARM GAS  /tmp/cci5ScRN.s 			page 19


 963:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 964:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
 965:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 966:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the RTC_DR register */
 967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 968:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 969:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Exit Initialization mode */
 970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 971:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 972:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 974:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 976:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 977:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 979:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 981:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 982:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
 983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 984:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_ERROR;
 986:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 987:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 988:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 989:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 991:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
 993:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 994:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Process Unlocked */
 995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 996:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     return HAL_OK;
 998:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
1000:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1001:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1002:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets RTC current date.
1003:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1004:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1005:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
1006:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1007:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1008:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format
1009:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
1010:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
1011:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * in the higher-order calendar shadow registers to ensure consistency between the time and date v
1012:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * Reading RTC current time locks the values in calendar shadow registers until Current date is re
1013:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1014:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1015:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
1017:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
1018:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1019:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
ARM GAS  /tmp/cci5ScRN.s 			page 20


1020:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1021:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1022:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get the DR register */
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
1024:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1025:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
1026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
1029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
1030:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1031:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the input parameters format */
1032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1033:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1034:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
1035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
1036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
1038:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1039:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
1041:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1042:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1043:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1044:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1045:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1046:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group3 RTC Alarm functions
1047:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
1048:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
1049:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim
1050:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1051:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
1052:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1053:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1054:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
1055:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1056:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
1057:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
1058:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1059:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1060:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm.
1061:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1062:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1063:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1064:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1065:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1066:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BIN: Binary data format
1067:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BCD: BCD data format
1068:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1069:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1070:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
1071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
1072:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
1073:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
1074:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1075:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1076:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
ARM GAS  /tmp/cci5ScRN.s 			page 21


1077:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1078:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1079:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1080:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1081:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1082:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1083:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1085:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1087:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1089:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
1091:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1092:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1093:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1094:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1095:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1096:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
1098:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1099:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1100:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1101:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1102:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1104:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1105:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1106:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1107:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1108:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1109:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1110:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1111:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
1117:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1119:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1120:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1121:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
1123:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1124:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1125:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1126:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1127:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1128:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00;
1130:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1131:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1132:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1133:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
ARM GAS  /tmp/cci5ScRN.s 			page 22


1134:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1135:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1137:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1138:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1139:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1140:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1141:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1142:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1143:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1144:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
1150:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1152:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1153:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1154:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
1156:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1157:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1159:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1160:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm register */
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
1162:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1163:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1165:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1166:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
1168:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1169:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1171:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1172:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
1174:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
1176:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1177:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1179:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1181:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1182:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
1183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1184:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1186:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1187:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1188:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
1190:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
ARM GAS  /tmp/cci5ScRN.s 			page 23


1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
1192:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
1194:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1195:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1196:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1197:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
1199:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1200:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
1202:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1203:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1205:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1206:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
1208:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
1210:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1211:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1213:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1215:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1216:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
1217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1218:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1220:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1221:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1222:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
1224:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
1226:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
1228:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1229:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1230:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1232:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1233:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
1234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1235:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1236:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */
1237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1238:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1239:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
1240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
1241:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1242:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm with Interrupt
1244:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1246:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
ARM GAS  /tmp/cci5ScRN.s 			page 24


1248:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1249:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BIN: Binary data format
1250:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg FORMAT_BCD: BCD data format
1251:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1252:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
1253:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
1254:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1255:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1256:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
1257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
1258:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
1260:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1261:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1262:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1263:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1264:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1265:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1266:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1267:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1268:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1269:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1271:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1273:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1275:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
1277:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1278:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1279:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1280:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1281:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1282:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1284:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1285:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1287:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1288:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1290:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1291:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1293:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1294:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1295:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1296:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
1298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
1299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
1300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
1301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
1302:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1304:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
ARM GAS  /tmp/cci5ScRN.s 			page 25


1305:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
1308:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1310:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1312:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1313:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1315:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1317:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1319:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1320:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1323:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1324:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     else
1326:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
1331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
1333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
1334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1336:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1337:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
1339:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1340:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1342:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1343:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Configure the Alarm register */
1344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
1345:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1346:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1349:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear flag alarm A */
1350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1351:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1352:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1353:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     do
1354:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if (count-- == 0U)
1356:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1357:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1359:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cci5ScRN.s 			page 26


1362:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
1363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1366:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
1369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
1371:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
1373:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
1375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
1377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1378:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1379:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
1382:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Clear flag alarm B */
1384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
1385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1386:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1387:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     do
1388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if (count-- == 0U)
1390:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1395:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1396:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
1397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
1403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
1405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
1407:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
1409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
1411:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1413:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
1415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
1417:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
ARM GAS  /tmp/cci5ScRN.s 			page 27


1419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1422:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */
1424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1426:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
1427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
1428:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1429:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1430:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Deactivate the specified RTC Alarm
1431:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1432:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1434:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1435:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1436:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
1437:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1438:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1439:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1440:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
  70              		.loc 1 1440 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              	.LVL2:
  75 0000 38B5     		push	{r3, r4, r5, lr}
  76              	.LCFI0:
  77              		.cfi_def_cfa_offset 16
  78              		.cfi_offset 3, -16
  79              		.cfi_offset 4, -12
  80              		.cfi_offset 5, -8
  81              		.cfi_offset 14, -4
  82              	.LVL3:
1441:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
1442:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1443:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1444:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1445:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Locked */
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
  83              		.loc 1 1447 0
  84 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
  85 0004 012B     		cmp	r3, #1
  86 0006 55D0     		beq	.L11
  87 0008 0446     		mov	r4, r0
  88              		.loc 1 1447 0 is_stmt 0 discriminator 2
  89 000a 0123     		movs	r3, #1
  90 000c 0377     		strb	r3, [r0, #28]
1448:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
  91              		.loc 1 1449 0 is_stmt 1 discriminator 2
  92 000e 0223     		movs	r3, #2
  93 0010 4377     		strb	r3, [r0, #29]
1450:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1451:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
ARM GAS  /tmp/cci5ScRN.s 			page 28


1452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  94              		.loc 1 1452 0 discriminator 2
  95 0012 0368     		ldr	r3, [r0]
  96 0014 CA22     		movs	r2, #202
  97 0016 5A62     		str	r2, [r3, #36]
  98 0018 0368     		ldr	r3, [r0]
  99 001a 5322     		movs	r2, #83
 100 001c 5A62     		str	r2, [r3, #36]
1453:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 101              		.loc 1 1454 0 discriminator 2
 102 001e B1F5807F 		cmp	r1, #256
 103 0022 1FD0     		beq	.L13
1455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1456:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmA */
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1458:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1459:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
1461:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1462:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1464:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1465:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
1467:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
1469:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1470:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1472:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1474:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1475:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1477:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1479:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1480:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1481:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1482:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1483:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1484:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmB */
1485:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 104              		.loc 1 1485 0
 105 0024 0268     		ldr	r2, [r0]
 106 0026 9368     		ldr	r3, [r2, #8]
 107 0028 23F40073 		bic	r3, r3, #512
 108 002c 9360     		str	r3, [r2, #8]
1486:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1487:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1488:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 109              		.loc 1 1488 0
 110 002e 0268     		ldr	r2, [r0]
 111 0030 9368     		ldr	r3, [r2, #8]
 112 0032 23F40053 		bic	r3, r3, #8192
 113 0036 9360     		str	r3, [r2, #8]
ARM GAS  /tmp/cci5ScRN.s 			page 29


1489:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1490:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1491:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 114              		.loc 1 1491 0
 115 0038 FFF7FEFF 		bl	HAL_GetTick
 116              	.LVL4:
 117 003c 0546     		mov	r5, r0
 118              	.LVL5:
 119              	.L9:
1492:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1493:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1494:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 120              		.loc 1 1494 0
 121 003e 2368     		ldr	r3, [r4]
 122 0040 DB68     		ldr	r3, [r3, #12]
 123 0042 13F0020F 		tst	r3, #2
 124 0046 2DD1     		bne	.L8
1495:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1496:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 125              		.loc 1 1496 0
 126 0048 FFF7FEFF 		bl	HAL_GetTick
 127              	.LVL6:
 128 004c 401B     		subs	r0, r0, r5
 129 004e B0F57A7F 		cmp	r0, #1000
 130 0052 F4D9     		bls	.L9
1497:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1498:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1499:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 131              		.loc 1 1499 0
 132 0054 2368     		ldr	r3, [r4]
 133 0056 FF22     		movs	r2, #255
 134 0058 5A62     		str	r2, [r3, #36]
1500:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1501:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 135              		.loc 1 1501 0
 136 005a 0320     		movs	r0, #3
 137 005c 6077     		strb	r0, [r4, #29]
1502:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1503:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         /* Process Unlocked */
1504:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 138              		.loc 1 1504 0
 139 005e 0023     		movs	r3, #0
 140 0060 2377     		strb	r3, [r4, #28]
1505:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1506:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 141              		.loc 1 1506 0
 142 0062 26E0     		b	.L4
 143              	.LVL7:
 144              	.L13:
1457:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 145              		.loc 1 1457 0
 146 0064 0268     		ldr	r2, [r0]
 147 0066 9368     		ldr	r3, [r2, #8]
 148 0068 23F48073 		bic	r3, r3, #256
 149 006c 9360     		str	r3, [r2, #8]
1460:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 150              		.loc 1 1460 0
ARM GAS  /tmp/cci5ScRN.s 			page 30


 151 006e 0268     		ldr	r2, [r0]
 152 0070 9368     		ldr	r3, [r2, #8]
 153 0072 23F48053 		bic	r3, r3, #4096
 154 0076 9360     		str	r3, [r2, #8]
1463:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 155              		.loc 1 1463 0
 156 0078 FFF7FEFF 		bl	HAL_GetTick
 157              	.LVL8:
 158 007c 0546     		mov	r5, r0
 159              	.LVL9:
 160              	.L6:
1466:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 161              		.loc 1 1466 0
 162 007e 2368     		ldr	r3, [r4]
 163 0080 DB68     		ldr	r3, [r3, #12]
 164 0082 13F0010F 		tst	r3, #1
 165 0086 0DD1     		bne	.L8
1468:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 166              		.loc 1 1468 0
 167 0088 FFF7FEFF 		bl	HAL_GetTick
 168              	.LVL10:
 169 008c 401B     		subs	r0, r0, r5
 170 008e B0F57A7F 		cmp	r0, #1000
 171 0092 F4D9     		bls	.L6
1471:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 172              		.loc 1 1471 0
 173 0094 2368     		ldr	r3, [r4]
 174 0096 FF22     		movs	r2, #255
 175 0098 5A62     		str	r2, [r3, #36]
1473:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 176              		.loc 1 1473 0
 177 009a 0320     		movs	r0, #3
 178 009c 6077     		strb	r0, [r4, #29]
1476:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 179              		.loc 1 1476 0
 180 009e 0023     		movs	r3, #0
 181 00a0 2377     		strb	r3, [r4, #28]
1478:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 182              		.loc 1 1478 0
 183 00a2 06E0     		b	.L4
 184              	.L8:
1507:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1508:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1509:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1510:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1511:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 185              		.loc 1 1511 0
 186 00a4 2368     		ldr	r3, [r4]
 187 00a6 FF22     		movs	r2, #255
 188 00a8 5A62     		str	r2, [r3, #36]
1512:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1513:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 189              		.loc 1 1513 0
 190 00aa 0123     		movs	r3, #1
 191 00ac 6377     		strb	r3, [r4, #29]
1514:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1515:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Process Unlocked */
ARM GAS  /tmp/cci5ScRN.s 			page 31


1516:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 192              		.loc 1 1516 0
 193 00ae 0020     		movs	r0, #0
 194 00b0 2077     		strb	r0, [r4, #28]
 195              	.LVL11:
 196              	.L4:
1517:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1518:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
1519:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 197              		.loc 1 1519 0
 198 00b2 38BD     		pop	{r3, r4, r5, pc}
 199              	.LVL12:
 200              	.L11:
1447:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 201              		.loc 1 1447 0
 202 00b4 0220     		movs	r0, #2
 203              	.LVL13:
 204 00b6 FCE7     		b	.L4
 205              		.cfi_endproc
 206              	.LFE151:
 208              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 209              		.align	1
 210              		.weak	HAL_RTC_AlarmAEventCallback
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu fpv5-sp-d16
 216              	HAL_RTC_AlarmAEventCallback:
 217              	.LFB154:
1520:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1521:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1522:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Gets the RTC Alarm value and masks.
1523:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1524:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1525:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1526:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1527:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1528:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
1529:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB
1530:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1531:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1532:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1533:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1534:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1535:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1536:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
1538:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
1539:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1540:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the parameters */
1541:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1542:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1543:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
1545:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1546:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* AlarmA */
1547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
ARM GAS  /tmp/cci5ScRN.s 			page 32


1548:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
1550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
1551:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1552:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   else
1553:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
1555:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
1557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
1558:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1559:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1560:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16);
1562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8);
1563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
1564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
1566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
1567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
1569:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1571:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
1573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
1574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
1575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
1576:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1577:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1578:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
1579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
1580:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1581:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1582:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  This function handles Alarm interrupt request.
1583:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1584:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1585:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
1586:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1587:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
1588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
1589:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get the AlarmA interrupt source enable status */
1590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
1591:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1592:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get the pending status of the AlarmA Interrupt */
1593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
1594:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1595:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* AlarmA callback */
1596:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1597:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback(hrtc);
1598:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     #else
1599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
1600:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
1601:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1602:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* Clear the AlarmA interrupt pending bit */
1603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
1604:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
ARM GAS  /tmp/cci5ScRN.s 			page 33


1605:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1606:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1607:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get the AlarmB interrupt source enable status */
1608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
1609:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1610:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get the pending status of the AlarmB Interrupt */
1611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
1612:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1613:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* AlarmB callback */
1614:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1615:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback(hrtc);
1616:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     #else
1617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
1618:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
1619:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1620:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       /* Clear the AlarmB interrupt pending bit */
1621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
1622:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1623:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1624:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1625:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
1627:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1628:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
1629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
1631:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1632:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1633:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Alarm A callback.
1634:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1635:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1636:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval None
1637:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1638:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1639:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 218              		.loc 1 1639 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 222              		@ link register save eliminated.
 223              	.LVL14:
1640:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1641:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   UNUSED(hrtc);
1642:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1643:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1644:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1645:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****    */
1646:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 224              		.loc 1 1646 0
 225 0000 7047     		bx	lr
 226              		.cfi_endproc
 227              	.LFE154:
 229              		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 230              		.align	1
 231              		.global	HAL_RTC_AlarmIRQHandler
 232              		.syntax unified
 233              		.thumb
ARM GAS  /tmp/cci5ScRN.s 			page 34


 234              		.thumb_func
 235              		.fpu fpv5-sp-d16
 237              	HAL_RTC_AlarmIRQHandler:
 238              	.LFB153:
1588:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Get the AlarmA interrupt source enable status */
 239              		.loc 1 1588 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              	.LVL15:
 244 0000 10B5     		push	{r4, lr}
 245              	.LCFI1:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 4, -8
 248              		.cfi_offset 14, -4
 249 0002 0446     		mov	r4, r0
1590:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 250              		.loc 1 1590 0
 251 0004 0368     		ldr	r3, [r0]
 252 0006 9A68     		ldr	r2, [r3, #8]
 253 0008 12F4805F 		tst	r2, #4096
 254 000c 03D0     		beq	.L16
1593:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 255              		.loc 1 1593 0
 256 000e DB68     		ldr	r3, [r3, #12]
 257 0010 13F4807F 		tst	r3, #256
 258 0014 0FD1     		bne	.L19
 259              	.LVL16:
 260              	.L16:
1608:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 261              		.loc 1 1608 0
 262 0016 2368     		ldr	r3, [r4]
 263 0018 9A68     		ldr	r2, [r3, #8]
 264 001a 12F4005F 		tst	r2, #8192
 265 001e 03D0     		beq	.L17
1611:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 266              		.loc 1 1611 0
 267 0020 DB68     		ldr	r3, [r3, #12]
 268 0022 13F4007F 		tst	r3, #512
 269 0026 0FD1     		bne	.L20
 270              	.L17:
1626:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 271              		.loc 1 1626 0
 272 0028 0C4B     		ldr	r3, .L21
 273 002a 4FF40032 		mov	r2, #131072
 274 002e 5A61     		str	r2, [r3, #20]
1629:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 275              		.loc 1 1629 0
 276 0030 0123     		movs	r3, #1
 277 0032 6377     		strb	r3, [r4, #29]
1630:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 278              		.loc 1 1630 0
 279 0034 10BD     		pop	{r4, pc}
 280              	.LVL17:
 281              	.L19:
1599:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 282              		.loc 1 1599 0
ARM GAS  /tmp/cci5ScRN.s 			page 35


 283 0036 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
 284              	.LVL18:
1603:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 285              		.loc 1 1603 0
 286 003a 2268     		ldr	r2, [r4]
 287 003c D368     		ldr	r3, [r2, #12]
 288 003e DBB2     		uxtb	r3, r3
 289 0040 63F4C073 		orn	r3, r3, #384
 290 0044 D360     		str	r3, [r2, #12]
 291 0046 E6E7     		b	.L16
 292              	.L20:
1617:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 293              		.loc 1 1617 0
 294 0048 2046     		mov	r0, r4
 295 004a FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
 296              	.LVL19:
1621:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
 297              		.loc 1 1621 0
 298 004e 2268     		ldr	r2, [r4]
 299 0050 D368     		ldr	r3, [r2, #12]
 300 0052 DBB2     		uxtb	r3, r3
 301 0054 63F42073 		orn	r3, r3, #640
 302 0058 D360     		str	r3, [r2, #12]
 303 005a E5E7     		b	.L17
 304              	.L22:
 305              		.align	2
 306              	.L21:
 307 005c 003C0140 		.word	1073822720
 308              		.cfi_endproc
 309              	.LFE153:
 311              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 312              		.align	1
 313              		.global	HAL_RTC_PollForAlarmAEvent
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu fpv5-sp-d16
 319              	HAL_RTC_PollForAlarmAEvent:
 320              	.LFB155:
1647:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1648:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1649:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  This function handles AlarmA Polling request.
1650:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1651:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1652:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1653:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1654:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1655:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1656:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 321              		.loc 1 1656 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              	.LVL20:
 326 0000 70B5     		push	{r4, r5, r6, lr}
 327              	.LCFI2:
 328              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cci5ScRN.s 			page 36


 329              		.cfi_offset 4, -16
 330              		.cfi_offset 5, -12
 331              		.cfi_offset 6, -8
 332              		.cfi_offset 14, -4
 333 0002 0446     		mov	r4, r0
 334 0004 0D46     		mov	r5, r1
 335              	.LVL21:
1657:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
1658:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1659:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1660:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 336              		.loc 1 1660 0
 337 0006 FFF7FEFF 		bl	HAL_GetTick
 338              	.LVL22:
 339 000a 0646     		mov	r6, r0
 340              	.LVL23:
 341              	.L25:
1661:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1662:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == RESET)
 342              		.loc 1 1662 0
 343 000c 2368     		ldr	r3, [r4]
 344 000e DA68     		ldr	r2, [r3, #12]
 345 0010 12F4807F 		tst	r2, #256
 346 0014 0BD1     		bne	.L30
1663:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1664:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 347              		.loc 1 1664 0
 348 0016 B5F1FF3F 		cmp	r5, #-1
 349 001a F7D0     		beq	.L25
1665:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1666:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 350              		.loc 1 1666 0
 351 001c 25B1     		cbz	r5, .L26
 352              		.loc 1 1666 0 is_stmt 0 discriminator 1
 353 001e FFF7FEFF 		bl	HAL_GetTick
 354              	.LVL24:
 355 0022 801B     		subs	r0, r0, r6
 356 0024 A842     		cmp	r0, r5
 357 0026 F1D9     		bls	.L25
 358              	.L26:
1667:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1668:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 359              		.loc 1 1668 0 is_stmt 1
 360 0028 0320     		movs	r0, #3
 361 002a 6077     		strb	r0, [r4, #29]
1669:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 362              		.loc 1 1669 0
 363 002c 07E0     		b	.L27
 364              	.L30:
1670:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1671:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1672:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1673:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1674:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1675:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 365              		.loc 1 1675 0
 366 002e DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/cci5ScRN.s 			page 37


 367 0030 D2B2     		uxtb	r2, r2
 368 0032 62F4C072 		orn	r2, r2, #384
 369 0036 DA60     		str	r2, [r3, #12]
1676:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1677:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Change RTC state */
1678:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 370              		.loc 1 1678 0
 371 0038 0123     		movs	r3, #1
 372 003a 6377     		strb	r3, [r4, #29]
1679:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1680:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 373              		.loc 1 1680 0
 374 003c 0020     		movs	r0, #0
 375              	.L27:
1681:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 376              		.loc 1 1681 0
 377 003e 70BD     		pop	{r4, r5, r6, pc}
 378              		.cfi_endproc
 379              	.LFE155:
 381              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 382              		.align	1
 383              		.global	HAL_RTC_WaitForSynchro
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu fpv5-sp-d16
 389              	HAL_RTC_WaitForSynchro:
 390              	.LFB156:
1682:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1683:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1684:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1685:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1686:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1687:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group4 Peripheral Control functions
1688:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   Peripheral Control functions
1689:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
1690:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim
1691:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1692:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1693:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1694:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     [..]
1695:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     This subsection provides functions allowing to
1696:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1697:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1698:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
1699:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
1700:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1701:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1702:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1703:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are
1704:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1705:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the
1706:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1707:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar
1708:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         initialization, calendar update or after wake-up from low power modes
1709:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         the software must first clear the RSF flag.
1710:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading
ARM GAS  /tmp/cci5ScRN.s 			page 38


1711:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been
1712:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.
1713:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1714:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1715:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1716:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1717:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
1718:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 391              		.loc 1 1718 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              	.LVL25:
 396 0000 38B5     		push	{r3, r4, r5, lr}
 397              	.LCFI3:
 398              		.cfi_def_cfa_offset 16
 399              		.cfi_offset 3, -16
 400              		.cfi_offset 4, -12
 401              		.cfi_offset 5, -8
 402              		.cfi_offset 14, -4
 403 0002 0446     		mov	r4, r0
 404              	.LVL26:
1719:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
1720:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1721:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Clear RSF flag */
1722:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 405              		.loc 1 1722 0
 406 0004 0268     		ldr	r2, [r0]
 407 0006 D368     		ldr	r3, [r2, #12]
 408 0008 23F0A003 		bic	r3, r3, #160
 409 000c D360     		str	r3, [r2, #12]
1723:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1724:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1725:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 410              		.loc 1 1725 0
 411 000e FFF7FEFF 		bl	HAL_GetTick
 412              	.LVL27:
 413 0012 0546     		mov	r5, r0
 414              	.LVL28:
 415              	.L32:
1726:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1728:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 416              		.loc 1 1728 0
 417 0014 2368     		ldr	r3, [r4]
 418 0016 DB68     		ldr	r3, [r3, #12]
 419 0018 13F0200F 		tst	r3, #32
 420 001c 07D1     		bne	.L37
1729:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1730:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 421              		.loc 1 1730 0
 422 001e FFF7FEFF 		bl	HAL_GetTick
 423              	.LVL29:
 424 0022 401B     		subs	r0, r0, r5
 425 0024 B0F57A7F 		cmp	r0, #1000
 426 0028 F4D9     		bls	.L32
1731:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
ARM GAS  /tmp/cci5ScRN.s 			page 39


1732:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       return HAL_TIMEOUT;
 427              		.loc 1 1732 0
 428 002a 0320     		movs	r0, #3
 429 002c 00E0     		b	.L33
 430              	.L37:
1733:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1734:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1735:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 431              		.loc 1 1736 0
 432 002e 0020     		movs	r0, #0
 433              	.L33:
1737:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 434              		.loc 1 1737 0
 435 0030 38BD     		pop	{r3, r4, r5, pc}
 436              		.cfi_endproc
 437              	.LFE156:
 439              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 440              		.align	1
 441              		.global	HAL_RTC_GetState
 442              		.syntax unified
 443              		.thumb
 444              		.thumb_func
 445              		.fpu fpv5-sp-d16
 447              	HAL_RTC_GetState:
 448              	.LFB157:
1738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1739:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1741:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1743:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /** @defgroup RTC_Group5 Peripheral State functions
1744:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *  @brief   Peripheral State functions
1745:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  *
1746:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @verbatim
1747:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1748:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****  ===============================================================================
1750:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     [..]
1751:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     This subsection provides functions allowing to
1752:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       (+) Get RTC state
1753:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1754:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** @endverbatim
1755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @{
1756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Returns the RTC state.
1759:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1760:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1761:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL state
1762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1763:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
1764:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 449              		.loc 1 1764 0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 0
 452              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cci5ScRN.s 			page 40


 453              		@ link register save eliminated.
 454              	.LVL30:
1765:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return hrtc->State;
 455              		.loc 1 1765 0
 456 0000 407F     		ldrb	r0, [r0, #29]	@ zero_extendqisi2
 457              	.LVL31:
1766:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 458              		.loc 1 1766 0
 459 0002 7047     		bx	lr
 460              		.cfi_endproc
 461              	.LFE157:
 463              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 464              		.align	1
 465              		.global	RTC_EnterInitMode
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu fpv5-sp-d16
 471              	RTC_EnterInitMode:
 472              	.LFB158:
1767:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1768:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @}
1770:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1771:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1772:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1773:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Enters the RTC Initialization mode.
1774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   *                the configuration information for RTC.
1778:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval HAL status
1779:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1780:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
1781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 473              		.loc 1 1781 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              	.LVL32:
 478 0000 38B5     		push	{r3, r4, r5, lr}
 479              	.LCFI4:
 480              		.cfi_def_cfa_offset 16
 481              		.cfi_offset 3, -16
 482              		.cfi_offset 4, -12
 483              		.cfi_offset 5, -8
 484              		.cfi_offset 14, -4
 485              	.LVL33:
1782:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
1783:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1785:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 486              		.loc 1 1785 0
 487 0002 0368     		ldr	r3, [r0]
 488 0004 DA68     		ldr	r2, [r3, #12]
 489 0006 12F0400F 		tst	r2, #64
 490 000a 01D0     		beq	.L46
ARM GAS  /tmp/cci5ScRN.s 			page 41


1786:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set the Initialization mode */
1788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
1789:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Get tick */
1791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1792:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
1795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
1796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
1797:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1799:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
1800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     }
1801:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1802:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return HAL_OK;
 491              		.loc 1 1803 0
 492 000c 0020     		movs	r0, #0
 493              	.LVL34:
 494              	.L40:
1804:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 495              		.loc 1 1804 0
 496 000e 38BD     		pop	{r3, r4, r5, pc}
 497              	.LVL35:
 498              	.L46:
 499 0010 0446     		mov	r4, r0
1788:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 500              		.loc 1 1788 0
 501 0012 4FF0FF32 		mov	r2, #-1
 502 0016 DA60     		str	r2, [r3, #12]
1791:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 503              		.loc 1 1791 0
 504 0018 FFF7FEFF 		bl	HAL_GetTick
 505              	.LVL36:
 506 001c 0546     		mov	r5, r0
 507              	.LVL37:
 508              	.L41:
1794:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 509              		.loc 1 1794 0
 510 001e 2368     		ldr	r3, [r4]
 511 0020 DB68     		ldr	r3, [r3, #12]
 512 0022 13F0400F 		tst	r3, #64
 513 0026 07D1     		bne	.L47
1796:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 514              		.loc 1 1796 0
 515 0028 FFF7FEFF 		bl	HAL_GetTick
 516              	.LVL38:
 517 002c 401B     		subs	r0, r0, r5
 518 002e B0F57A7F 		cmp	r0, #1000
 519 0032 F4D9     		bls	.L41
1798:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 520              		.loc 1 1798 0
 521 0034 0320     		movs	r0, #3
 522 0036 EAE7     		b	.L40
 523              	.L47:
ARM GAS  /tmp/cci5ScRN.s 			page 42


1803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 524              		.loc 1 1803 0
 525 0038 0020     		movs	r0, #0
 526 003a E8E7     		b	.L40
 527              		.cfi_endproc
 528              	.LFE158:
 530              		.section	.text.HAL_RTC_Init,"ax",%progbits
 531              		.align	1
 532              		.global	HAL_RTC_Init
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu fpv5-sp-d16
 538              	HAL_RTC_Init:
 539              	.LFB141:
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 540              		.loc 1 243 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              	.LVL39:
 245:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 545              		.loc 1 245 0
 546 0000 0028     		cmp	r0, #0
 547 0002 4AD0     		beq	.L52
 243:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 548              		.loc 1 243 0
 549 0004 38B5     		push	{r3, r4, r5, lr}
 550              	.LCFI5:
 551              		.cfi_def_cfa_offset 16
 552              		.cfi_offset 3, -16
 553              		.cfi_offset 4, -12
 554              		.cfi_offset 5, -8
 555              		.cfi_offset 14, -4
 556 0006 0446     		mov	r4, r0
 286:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 557              		.loc 1 286 0
 558 0008 437F     		ldrb	r3, [r0, #29]	@ zero_extendqisi2
 559 000a 002B     		cmp	r3, #0
 560 000c 3AD0     		beq	.L57
 561              	.LVL40:
 562              	.L50:
 297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 563              		.loc 1 297 0
 564 000e 0223     		movs	r3, #2
 565 0010 6377     		strb	r3, [r4, #29]
 300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 566              		.loc 1 300 0
 567 0012 2368     		ldr	r3, [r4]
 568 0014 CA22     		movs	r2, #202
 569 0016 5A62     		str	r2, [r3, #36]
 570 0018 2368     		ldr	r3, [r4]
 571 001a 5322     		movs	r2, #83
 572 001c 5A62     		str	r2, [r3, #36]
 303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 573              		.loc 1 303 0
 574 001e 2046     		mov	r0, r4
ARM GAS  /tmp/cci5ScRN.s 			page 43


 575 0020 FFF7FEFF 		bl	RTC_EnterInitMode
 576              	.LVL41:
 577 0024 0246     		mov	r2, r0
 578 0026 0028     		cmp	r0, #0
 579 0028 30D1     		bne	.L58
 316:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Set RTC_CR register */
 580              		.loc 1 316 0
 581 002a 2168     		ldr	r1, [r4]
 582 002c 8868     		ldr	r0, [r1, #8]
 583 002e 1C4B     		ldr	r3, .L59
 584 0030 0340     		ands	r3, r3, r0
 585 0032 8B60     		str	r3, [r1, #8]
 318:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 586              		.loc 1 318 0
 587 0034 2068     		ldr	r0, [r4]
 588 0036 8168     		ldr	r1, [r0, #8]
 589 0038 6368     		ldr	r3, [r4, #4]
 590 003a 2569     		ldr	r5, [r4, #16]
 591 003c 2B43     		orrs	r3, r3, r5
 592 003e 6569     		ldr	r5, [r4, #20]
 593 0040 2B43     		orrs	r3, r3, r5
 594 0042 0B43     		orrs	r3, r3, r1
 595 0044 8360     		str	r3, [r0, #8]
 321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 596              		.loc 1 321 0
 597 0046 2368     		ldr	r3, [r4]
 598 0048 E168     		ldr	r1, [r4, #12]
 599 004a 1961     		str	r1, [r3, #16]
 322:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 600              		.loc 1 322 0
 601 004c 2168     		ldr	r1, [r4]
 602 004e 0B69     		ldr	r3, [r1, #16]
 603 0050 A068     		ldr	r0, [r4, #8]
 604 0052 43EA0043 		orr	r3, r3, r0, lsl #16
 605 0056 0B61     		str	r3, [r1, #16]
 325:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 606              		.loc 1 325 0
 607 0058 2168     		ldr	r1, [r4]
 608 005a CB68     		ldr	r3, [r1, #12]
 609 005c 23F08003 		bic	r3, r3, #128
 610 0060 CB60     		str	r3, [r1, #12]
 327:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 611              		.loc 1 327 0
 612 0062 2168     		ldr	r1, [r4]
 613 0064 CB6C     		ldr	r3, [r1, #76]
 614 0066 23F00803 		bic	r3, r3, #8
 615 006a CB64     		str	r3, [r1, #76]
 328:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 616              		.loc 1 328 0
 617 006c 2168     		ldr	r1, [r4]
 618 006e CB6C     		ldr	r3, [r1, #76]
 619 0070 A069     		ldr	r0, [r4, #24]
 620 0072 0343     		orrs	r3, r3, r0
 621 0074 CB64     		str	r3, [r1, #76]
 331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 622              		.loc 1 331 0
 623 0076 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cci5ScRN.s 			page 44


 624 0078 FF21     		movs	r1, #255
 625 007a 5962     		str	r1, [r3, #36]
 334:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 626              		.loc 1 334 0
 627 007c 0123     		movs	r3, #1
 628 007e 6377     		strb	r3, [r4, #29]
 629              	.L49:
 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 630              		.loc 1 338 0
 631 0080 1046     		mov	r0, r2
 632 0082 38BD     		pop	{r3, r4, r5, pc}
 633              	.LVL42:
 634              	.L57:
 289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 635              		.loc 1 289 0
 636 0084 0377     		strb	r3, [r0, #28]
 292:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 637              		.loc 1 292 0
 638 0086 FFF7FEFF 		bl	HAL_RTC_MspInit
 639              	.LVL43:
 640 008a C0E7     		b	.L50
 641              	.L58:
 306:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 642              		.loc 1 306 0
 643 008c 2368     		ldr	r3, [r4]
 644 008e FF22     		movs	r2, #255
 645 0090 5A62     		str	r2, [r3, #36]
 309:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 646              		.loc 1 309 0
 647 0092 0423     		movs	r3, #4
 648 0094 6377     		strb	r3, [r4, #29]
 311:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 649              		.loc 1 311 0
 650 0096 0122     		movs	r2, #1
 651 0098 F2E7     		b	.L49
 652              	.LVL44:
 653              	.L52:
 654              	.LCFI6:
 655              		.cfi_def_cfa_offset 0
 656              		.cfi_restore 3
 657              		.cfi_restore 4
 658              		.cfi_restore 5
 659              		.cfi_restore 14
 247:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 660              		.loc 1 247 0
 661 009a 0122     		movs	r2, #1
 338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 662              		.loc 1 338 0
 663 009c 1046     		mov	r0, r2
 664              	.LVL45:
 665 009e 7047     		bx	lr
 666              	.L60:
 667              		.align	2
 668              	.L59:
 669 00a0 BFFF8FFF 		.word	-7340097
 670              		.cfi_endproc
 671              	.LFE141:
ARM GAS  /tmp/cci5ScRN.s 			page 45


 673              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 674              		.align	1
 675              		.global	HAL_RTC_DeInit
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 679              		.fpu fpv5-sp-d16
 681              	HAL_RTC_DeInit:
 682              	.LFB142:
 348:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 683              		.loc 1 348 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL46:
 688 0000 70B5     		push	{r4, r5, r6, lr}
 689              	.LCFI7:
 690              		.cfi_def_cfa_offset 16
 691              		.cfi_offset 4, -16
 692              		.cfi_offset 5, -12
 693              		.cfi_offset 6, -8
 694              		.cfi_offset 14, -4
 695 0002 0446     		mov	r4, r0
 696              	.LVL47:
 355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 697              		.loc 1 355 0
 698 0004 0223     		movs	r3, #2
 699 0006 4377     		strb	r3, [r0, #29]
 358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 700              		.loc 1 358 0
 701 0008 0368     		ldr	r3, [r0]
 702 000a CA22     		movs	r2, #202
 703 000c 5A62     		str	r2, [r3, #36]
 704 000e 0368     		ldr	r3, [r0]
 705 0010 5322     		movs	r2, #83
 706 0012 5A62     		str	r2, [r3, #36]
 361:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 707              		.loc 1 361 0
 708 0014 FFF7FEFF 		bl	RTC_EnterInitMode
 709              	.LVL48:
 710 0018 38B1     		cbz	r0, .L62
 364:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 711              		.loc 1 364 0
 712 001a 2368     		ldr	r3, [r4]
 713 001c FF22     		movs	r2, #255
 714 001e 5A62     		str	r2, [r3, #36]
 367:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 715              		.loc 1 367 0
 716 0020 0423     		movs	r3, #4
 717 0022 6377     		strb	r3, [r4, #29]
 369:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 718              		.loc 1 369 0
 719 0024 0125     		movs	r5, #1
 720              	.LVL49:
 721              	.L63:
 455:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 722              		.loc 1 455 0
ARM GAS  /tmp/cci5ScRN.s 			page 46


 723 0026 2846     		mov	r0, r5
 724 0028 70BD     		pop	{r4, r5, r6, pc}
 725              	.LVL50:
 726              	.L62:
 727 002a 0546     		mov	r5, r0
 374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)0x00002101;
 728              		.loc 1 374 0
 729 002c 2368     		ldr	r3, [r4]
 730 002e 0022     		movs	r2, #0
 731 0030 1A60     		str	r2, [r3]
 375:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 732              		.loc 1 375 0
 733 0032 2368     		ldr	r3, [r4]
 734 0034 42F20112 		movw	r2, #8449
 735 0038 5A60     		str	r2, [r3, #4]
 377:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 736              		.loc 1 377 0
 737 003a 2268     		ldr	r2, [r4]
 738 003c 9368     		ldr	r3, [r2, #8]
 739 003e 03F00703 		and	r3, r3, #7
 740 0042 9360     		str	r3, [r2, #8]
 380:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 741              		.loc 1 380 0
 742 0044 FFF7FEFF 		bl	HAL_GetTick
 743              	.LVL51:
 744 0048 0646     		mov	r6, r0
 745              	.LVL52:
 746              	.L64:
 383:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 747              		.loc 1 383 0
 748 004a 2368     		ldr	r3, [r4]
 749 004c DA68     		ldr	r2, [r3, #12]
 750 004e 12F0040F 		tst	r2, #4
 751 0052 0BD1     		bne	.L68
 385:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 752              		.loc 1 385 0
 753 0054 FFF7FEFF 		bl	HAL_GetTick
 754              	.LVL53:
 755 0058 801B     		subs	r0, r0, r6
 756 005a B0F57A7F 		cmp	r0, #1000
 757 005e F4D9     		bls	.L64
 388:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 758              		.loc 1 388 0
 759 0060 2368     		ldr	r3, [r4]
 760 0062 FF22     		movs	r2, #255
 761 0064 5A62     		str	r2, [r3, #36]
 391:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 762              		.loc 1 391 0
 763 0066 0325     		movs	r5, #3
 764 0068 6577     		strb	r5, [r4, #29]
 393:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 765              		.loc 1 393 0
 766 006a DCE7     		b	.L63
 767              	.L68:
 398:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->WUTR = (uint32_t)0x0000FFFF;
 768              		.loc 1 398 0
 769 006c 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/cci5ScRN.s 			page 47


 770 006e 0022     		movs	r2, #0
 771 0070 9A60     		str	r2, [r3, #8]
 399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)0x007F00FF;
 772              		.loc 1 399 0
 773 0072 2368     		ldr	r3, [r4]
 774 0074 4FF6FF71 		movw	r1, #65535
 775 0078 5961     		str	r1, [r3, #20]
 400:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)0x00000000;
 776              		.loc 1 400 0
 777 007a 2368     		ldr	r3, [r4]
 778 007c 1649     		ldr	r1, .L70
 779 007e 1961     		str	r1, [r3, #16]
 401:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)0x00000000;
 780              		.loc 1 401 0
 781 0080 2368     		ldr	r3, [r4]
 782 0082 DA61     		str	r2, [r3, #28]
 402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->SHIFTR = (uint32_t)0x00000000;
 783              		.loc 1 402 0
 784 0084 2368     		ldr	r3, [r4]
 785 0086 1A62     		str	r2, [r3, #32]
 403:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->CALR = (uint32_t)0x00000000;
 786              		.loc 1 403 0
 787 0088 2368     		ldr	r3, [r4]
 788 008a DA62     		str	r2, [r3, #44]
 404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = (uint32_t)0x00000000;
 789              		.loc 1 404 0
 790 008c 2368     		ldr	r3, [r4]
 791 008e DA63     		str	r2, [r3, #60]
 405:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = (uint32_t)0x00000000;
 792              		.loc 1 405 0
 793 0090 2368     		ldr	r3, [r4]
 794 0092 5A64     		str	r2, [r3, #68]
 406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 795              		.loc 1 406 0
 796 0094 2368     		ldr	r3, [r4]
 797 0096 9A64     		str	r2, [r3, #72]
 409:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 798              		.loc 1 409 0
 799 0098 2368     		ldr	r3, [r4]
 800 009a DA60     		str	r2, [r3, #12]
 412:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 801              		.loc 1 412 0
 802 009c 2368     		ldr	r3, [r4]
 803 009e 1A64     		str	r2, [r3, #64]
 415:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 804              		.loc 1 415 0
 805 00a0 2368     		ldr	r3, [r4]
 806 00a2 DA64     		str	r2, [r3, #76]
 418:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 807              		.loc 1 418 0
 808 00a4 2368     		ldr	r3, [r4]
 809 00a6 9B68     		ldr	r3, [r3, #8]
 810 00a8 13F0200F 		tst	r3, #32
 811 00ac 03D1     		bne	.L66
 420:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 812              		.loc 1 420 0
 813 00ae 2046     		mov	r0, r4
ARM GAS  /tmp/cci5ScRN.s 			page 48


 814 00b0 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 815              	.LVL54:
 816 00b4 48B9     		cbnz	r0, .L69
 817              	.L66:
 433:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 818              		.loc 1 433 0
 819 00b6 2368     		ldr	r3, [r4]
 820 00b8 FF22     		movs	r2, #255
 821 00ba 5A62     		str	r2, [r3, #36]
 446:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 822              		.loc 1 446 0
 823 00bc 2046     		mov	r0, r4
 824 00be FFF7FEFF 		bl	HAL_RTC_MspDeInit
 825              	.LVL55:
 449:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 826              		.loc 1 449 0
 827 00c2 0023     		movs	r3, #0
 828 00c4 6377     		strb	r3, [r4, #29]
 452:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 829              		.loc 1 452 0
 830 00c6 2377     		strb	r3, [r4, #28]
 454:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 831              		.loc 1 454 0
 832 00c8 ADE7     		b	.L63
 833              	.L69:
 423:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 834              		.loc 1 423 0
 835 00ca 2368     		ldr	r3, [r4]
 836 00cc FF22     		movs	r2, #255
 837 00ce 5A62     		str	r2, [r3, #36]
 425:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 838              		.loc 1 425 0
 839 00d0 0423     		movs	r3, #4
 840 00d2 6377     		strb	r3, [r4, #29]
 427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 841              		.loc 1 427 0
 842 00d4 0125     		movs	r5, #1
 843 00d6 A6E7     		b	.L63
 844              	.L71:
 845              		.align	2
 846              	.L70:
 847 00d8 FF007F00 		.word	8323327
 848              		.cfi_endproc
 849              	.LFE142:
 851              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 852              		.align	1
 853              		.global	RTC_ByteToBcd2
 854              		.syntax unified
 855              		.thumb
 856              		.thumb_func
 857              		.fpu fpv5-sp-d16
 859              	RTC_ByteToBcd2:
 860              	.LFB159:
1805:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1807:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1808:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
ARM GAS  /tmp/cci5ScRN.s 			page 49


1809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Value Byte to be converted
1810:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval Converted byte
1811:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
1813:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 861              		.loc 1 1813 0
 862              		.cfi_startproc
 863              		@ args = 0, pretend = 0, frame = 0
 864              		@ frame_needed = 0, uses_anonymous_args = 0
 865              		@ link register save eliminated.
 866              	.LVL56:
1814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t bcdhigh = 0;
 867              		.loc 1 1814 0
 868 0000 0023     		movs	r3, #0
1815:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   while(Value >= 10)
 869              		.loc 1 1816 0
 870 0002 02E0     		b	.L73
 871              	.LVL57:
 872              	.L74:
1817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
1818:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     bcdhigh++;
 873              		.loc 1 1818 0
 874 0004 0133     		adds	r3, r3, #1
 875              	.LVL58:
1819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     Value -= 10;
 876              		.loc 1 1819 0
 877 0006 0A38     		subs	r0, r0, #10
 878              	.LVL59:
 879 0008 C0B2     		uxtb	r0, r0
 880              	.LVL60:
 881              	.L73:
1816:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 882              		.loc 1 1816 0
 883 000a 0928     		cmp	r0, #9
 884 000c FAD8     		bhi	.L74
1820:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
1821:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 885              		.loc 1 1822 0
 886 000e 1B01     		lsls	r3, r3, #4
 887              	.LVL61:
 888 0010 DBB2     		uxtb	r3, r3
1823:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 889              		.loc 1 1823 0
 890 0012 1843     		orrs	r0, r0, r3
 891              	.LVL62:
 892 0014 7047     		bx	lr
 893              		.cfi_endproc
 894              	.LFE159:
 896              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 897              		.align	1
 898              		.global	HAL_RTC_SetTime
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 902              		.fpu fpv5-sp-d16
ARM GAS  /tmp/cci5ScRN.s 			page 50


 904              	HAL_RTC_SetTime:
 905              	.LFB145:
 727:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 906              		.loc 1 727 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910              	.LVL63:
 911 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 912              	.LCFI8:
 913              		.cfi_def_cfa_offset 24
 914              		.cfi_offset 3, -24
 915              		.cfi_offset 4, -20
 916              		.cfi_offset 5, -16
 917              		.cfi_offset 6, -12
 918              		.cfi_offset 7, -8
 919              		.cfi_offset 14, -4
 920              	.LVL64:
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 921              		.loc 1 736 0
 922 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 923 0004 012B     		cmp	r3, #1
 924 0006 76D0     		beq	.L83
 925 0008 0D46     		mov	r5, r1
 926 000a 0446     		mov	r4, r0
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 927              		.loc 1 736 0 is_stmt 0 discriminator 2
 928 000c 0123     		movs	r3, #1
 929 000e 0377     		strb	r3, [r0, #28]
 738:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 930              		.loc 1 738 0 is_stmt 1 discriminator 2
 931 0010 0223     		movs	r3, #2
 932 0012 4377     		strb	r3, [r0, #29]
 740:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 933              		.loc 1 740 0 discriminator 2
 934 0014 002A     		cmp	r2, #0
 935 0016 44D1     		bne	.L77
 742:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 936              		.loc 1 742 0
 937 0018 0368     		ldr	r3, [r0]
 938 001a 9B68     		ldr	r3, [r3, #8]
 939 001c 13F0400F 		tst	r3, #64
 940 0020 01D1     		bne	.L78
 749:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 941              		.loc 1 749 0
 942 0022 0023     		movs	r3, #0
 943 0024 0B73     		strb	r3, [r1, #12]
 944              	.L78:
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 945              		.loc 1 755 0
 946 0026 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 947              	.LVL65:
 948 0028 FFF7FEFF 		bl	RTC_ByteToBcd2
 949              	.LVL66:
 950 002c 0604     		lsls	r6, r0, #16
 756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 951              		.loc 1 756 0
ARM GAS  /tmp/cci5ScRN.s 			page 51


 952 002e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 953 0030 FFF7FEFF 		bl	RTC_ByteToBcd2
 954              	.LVL67:
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 955              		.loc 1 755 0
 956 0034 46EA0026 		orr	r6, r6, r0, lsl #8
 757:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16));
 957              		.loc 1 757 0
 958 0038 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 959 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 960              	.LVL68:
 756:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 961              		.loc 1 756 0
 962 003e 0643     		orrs	r6, r6, r0
 758:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 963              		.loc 1 758 0
 964 0040 287B     		ldrb	r0, [r5, #12]	@ zero_extendqisi2
 755:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 965              		.loc 1 755 0
 966 0042 46EA0046 		orr	r6, r6, r0, lsl #16
 967              	.LVL69:
 968              	.L79:
 781:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 969              		.loc 1 781 0
 970 0046 2368     		ldr	r3, [r4]
 971 0048 CA22     		movs	r2, #202
 972 004a 5A62     		str	r2, [r3, #36]
 973 004c 2368     		ldr	r3, [r4]
 974 004e 5322     		movs	r2, #83
 975 0050 5A62     		str	r2, [r3, #36]
 784:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 976              		.loc 1 784 0
 977 0052 2046     		mov	r0, r4
 978 0054 FFF7FEFF 		bl	RTC_EnterInitMode
 979              	.LVL70:
 980 0058 0746     		mov	r7, r0
 981 005a 0028     		cmp	r0, #0
 982 005c 33D1     		bne	.L85
 800:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 983              		.loc 1 800 0
 984 005e 2268     		ldr	r2, [r4]
 985 0060 264B     		ldr	r3, .L87
 986 0062 3340     		ands	r3, r3, r6
 987 0064 1360     		str	r3, [r2]
 803:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 988              		.loc 1 803 0
 989 0066 2268     		ldr	r2, [r4]
 990 0068 9368     		ldr	r3, [r2, #8]
 991 006a 23F48023 		bic	r3, r3, #262144
 992 006e 9360     		str	r3, [r2, #8]
 806:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 993              		.loc 1 806 0
 994 0070 2168     		ldr	r1, [r4]
 995 0072 8B68     		ldr	r3, [r1, #8]
 996 0074 2A69     		ldr	r2, [r5, #16]
 997 0076 6869     		ldr	r0, [r5, #20]
 998 0078 0243     		orrs	r2, r2, r0
ARM GAS  /tmp/cci5ScRN.s 			page 52


 999 007a 1343     		orrs	r3, r3, r2
 1000 007c 8B60     		str	r3, [r1, #8]
 809:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1001              		.loc 1 809 0
 1002 007e 2268     		ldr	r2, [r4]
 1003 0080 D368     		ldr	r3, [r2, #12]
 1004 0082 23F08003 		bic	r3, r3, #128
 1005 0086 D360     		str	r3, [r2, #12]
 812:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1006              		.loc 1 812 0
 1007 0088 2368     		ldr	r3, [r4]
 1008 008a 9B68     		ldr	r3, [r3, #8]
 1009 008c 13F0200F 		tst	r3, #32
 1010 0090 23D0     		beq	.L86
 1011              	.L82:
 829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1012              		.loc 1 829 0
 1013 0092 2368     		ldr	r3, [r4]
 1014 0094 FF22     		movs	r2, #255
 1015 0096 5A62     		str	r2, [r3, #36]
 831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1016              		.loc 1 831 0
 1017 0098 0123     		movs	r3, #1
 1018 009a 6377     		strb	r3, [r4, #29]
 833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1019              		.loc 1 833 0
 1020 009c 0023     		movs	r3, #0
 1021 009e 2377     		strb	r3, [r4, #28]
 835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1022              		.loc 1 835 0
 1023 00a0 19E0     		b	.L76
 1024              	.LVL71:
 1025              	.L77:
 762:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1026              		.loc 1 762 0
 1027 00a2 0368     		ldr	r3, [r0]
 1028 00a4 9B68     		ldr	r3, [r3, #8]
 1029 00a6 13F0400F 		tst	r3, #64
 1030 00aa 01D1     		bne	.L80
 769:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 1031              		.loc 1 769 0
 1032 00ac 0023     		movs	r3, #0
 1033 00ae 0B73     		strb	r3, [r1, #12]
 1034              	.L80:
 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 1035              		.loc 1 774 0
 1036 00b0 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1037              	.LVL72:
 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 1038              		.loc 1 775 0
 1039 00b2 6E78     		ldrb	r6, [r5, #1]	@ zero_extendqisi2
 1040 00b4 3602     		lsls	r6, r6, #8
 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 1041              		.loc 1 774 0
 1042 00b6 46EA0046 		orr	r6, r6, r0, lsl #16
 776:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16));
 1043              		.loc 1 776 0
ARM GAS  /tmp/cci5ScRN.s 			page 53


 1044 00ba A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 775:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 1045              		.loc 1 775 0
 1046 00bc 0643     		orrs	r6, r6, r0
 777:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1047              		.loc 1 777 0
 1048 00be 287B     		ldrb	r0, [r5, #12]	@ zero_extendqisi2
 774:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8) | \
 1049              		.loc 1 774 0
 1050 00c0 46EA0046 		orr	r6, r6, r0, lsl #16
 1051              	.LVL73:
 1052 00c4 BFE7     		b	.L79
 1053              	.LVL74:
 1054              	.L85:
 787:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1055              		.loc 1 787 0
 1056 00c6 2368     		ldr	r3, [r4]
 1057 00c8 FF22     		movs	r2, #255
 1058 00ca 5A62     		str	r2, [r3, #36]
 790:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1059              		.loc 1 790 0
 1060 00cc 0423     		movs	r3, #4
 1061 00ce 6377     		strb	r3, [r4, #29]
 793:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1062              		.loc 1 793 0
 1063 00d0 0023     		movs	r3, #0
 1064 00d2 2377     		strb	r3, [r4, #28]
 795:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1065              		.loc 1 795 0
 1066 00d4 0127     		movs	r7, #1
 1067              	.LVL75:
 1068              	.L76:
 837:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1069              		.loc 1 837 0
 1070 00d6 3846     		mov	r0, r7
 1071 00d8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1072              	.LVL76:
 1073              	.L86:
 814:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 1074              		.loc 1 814 0
 1075 00da 2046     		mov	r0, r4
 1076 00dc FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1077              	.LVL77:
 1078 00e0 0028     		cmp	r0, #0
 1079 00e2 D6D0     		beq	.L82
 817:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1080              		.loc 1 817 0
 1081 00e4 2368     		ldr	r3, [r4]
 1082 00e6 FF22     		movs	r2, #255
 1083 00e8 5A62     		str	r2, [r3, #36]
 819:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1084              		.loc 1 819 0
 1085 00ea 0423     		movs	r3, #4
 1086 00ec 6377     		strb	r3, [r4, #29]
 822:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1087              		.loc 1 822 0
 1088 00ee 0023     		movs	r3, #0
ARM GAS  /tmp/cci5ScRN.s 			page 54


 1089 00f0 2377     		strb	r3, [r4, #28]
 824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 1090              		.loc 1 824 0
 1091 00f2 0127     		movs	r7, #1
 1092 00f4 EFE7     		b	.L76
 1093              	.LVL78:
 1094              	.L83:
 736:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1095              		.loc 1 736 0
 1096 00f6 0227     		movs	r7, #2
 1097 00f8 EDE7     		b	.L76
 1098              	.L88:
 1099 00fa 00BF     		.align	2
 1100              	.L87:
 1101 00fc 7F7F7F00 		.word	8355711
 1102              		.cfi_endproc
 1103              	.LFE145:
 1105              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 1106              		.align	1
 1107              		.global	HAL_RTC_SetDate
 1108              		.syntax unified
 1109              		.thumb
 1110              		.thumb_func
 1111              		.fpu fpv5-sp-d16
 1113              	HAL_RTC_SetDate:
 1114              	.LFB147:
 906:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 1115              		.loc 1 906 0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 0
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119              	.LVL79:
 1120 0000 70B5     		push	{r4, r5, r6, lr}
 1121              	.LCFI9:
 1122              		.cfi_def_cfa_offset 16
 1123              		.cfi_offset 4, -16
 1124              		.cfi_offset 5, -12
 1125              		.cfi_offset 6, -8
 1126              		.cfi_offset 14, -4
 1127              	.LVL80:
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1128              		.loc 1 913 0
 1129 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1130 0004 012B     		cmp	r3, #1
 1131 0006 64D0     		beq	.L96
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1132              		.loc 1 913 0 is_stmt 0 discriminator 2
 1133 0008 0123     		movs	r3, #1
 1134 000a 0377     		strb	r3, [r0, #28]
 915:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1135              		.loc 1 915 0 is_stmt 1 discriminator 2
 1136 000c 0223     		movs	r3, #2
 1137 000e 4377     		strb	r3, [r0, #29]
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 1138              		.loc 1 917 0 discriminator 2
 1139 0010 3AB9     		cbnz	r2, .L91
 917:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
ARM GAS  /tmp/cci5ScRN.s 			page 55


 1140              		.loc 1 917 0 is_stmt 0 discriminator 1
 1141 0012 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1142 0014 13F0100F 		tst	r3, #16
 1143 0018 03D0     		beq	.L91
 919:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1144              		.loc 1 919 0 is_stmt 1
 1145 001a 03F0EF03 		and	r3, r3, #239
 1146 001e 0A33     		adds	r3, r3, #10
 1147 0020 4B70     		strb	r3, [r1, #1]
 1148              	.L91:
 1149 0022 0E46     		mov	r6, r1
 1150 0024 0446     		mov	r4, r0
 924:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 1151              		.loc 1 924 0
 1152 0026 002A     		cmp	r2, #0
 1153 0028 30D1     		bne	.L92
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1154              		.loc 1 930 0
 1155 002a C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 1156              	.LVL81:
 1157 002c FFF7FEFF 		bl	RTC_ByteToBcd2
 1158              	.LVL82:
 1159 0030 0504     		lsls	r5, r0, #16
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 1160              		.loc 1 931 0
 1161 0032 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1162 0034 FFF7FEFF 		bl	RTC_ByteToBcd2
 1163              	.LVL83:
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1164              		.loc 1 930 0
 1165 0038 45EA0025 		orr	r5, r5, r0, lsl #8
 932:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << 13));
 1166              		.loc 1 932 0
 1167 003c B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 1168 003e FFF7FEFF 		bl	RTC_ByteToBcd2
 1169              	.LVL84:
 931:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 1170              		.loc 1 931 0
 1171 0042 0543     		orrs	r5, r5, r0
 933:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1172              		.loc 1 933 0
 1173 0044 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 930:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 1174              		.loc 1 930 0
 1175 0046 45EA4035 		orr	r5, r5, r0, lsl #13
 1176              	.LVL85:
 1177              	.L93:
 948:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1178              		.loc 1 948 0
 1179 004a 2368     		ldr	r3, [r4]
 1180 004c CA22     		movs	r2, #202
 1181 004e 5A62     		str	r2, [r3, #36]
 1182 0050 2368     		ldr	r3, [r4]
 1183 0052 5322     		movs	r2, #83
 1184 0054 5A62     		str	r2, [r3, #36]
 951:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 1185              		.loc 1 951 0
ARM GAS  /tmp/cci5ScRN.s 			page 56


 1186 0056 2046     		mov	r0, r4
 1187 0058 FFF7FEFF 		bl	RTC_EnterInitMode
 1188              	.LVL86:
 1189 005c 0646     		mov	r6, r0
 1190              	.LVL87:
 1191 005e 00BB     		cbnz	r0, .L98
 967:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1192              		.loc 1 967 0
 1193 0060 2268     		ldr	r2, [r4]
 1194 0062 1D4B     		ldr	r3, .L100
 1195 0064 2B40     		ands	r3, r3, r5
 1196 0066 5360     		str	r3, [r2, #4]
 970:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1197              		.loc 1 970 0
 1198 0068 2268     		ldr	r2, [r4]
 1199 006a D368     		ldr	r3, [r2, #12]
 1200 006c 23F08003 		bic	r3, r3, #128
 1201 0070 D360     		str	r3, [r2, #12]
 973:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1202              		.loc 1 973 0
 1203 0072 2368     		ldr	r3, [r4]
 1204 0074 9B68     		ldr	r3, [r3, #8]
 1205 0076 13F0200F 		tst	r3, #32
 1206 007a 1CD0     		beq	.L99
 1207              	.L95:
 990:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1208              		.loc 1 990 0
 1209 007c 2368     		ldr	r3, [r4]
 1210 007e FF22     		movs	r2, #255
 1211 0080 5A62     		str	r2, [r3, #36]
 992:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1212              		.loc 1 992 0
 1213 0082 0123     		movs	r3, #1
 1214 0084 6377     		strb	r3, [r4, #29]
 995:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1215              		.loc 1 995 0
 1216 0086 0023     		movs	r3, #0
 1217 0088 2377     		strb	r3, [r4, #28]
 997:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1218              		.loc 1 997 0
 1219 008a 12E0     		b	.L90
 1220              	.LVL88:
 1221              	.L92:
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1222              		.loc 1 941 0
 1223 008c C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 1224              	.LVL89:
 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 1225              		.loc 1 942 0
 1226 008e 4D78     		ldrb	r5, [r1, #1]	@ zero_extendqisi2
 1227 0090 2D02     		lsls	r5, r5, #8
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1228              		.loc 1 941 0
 1229 0092 45EA0045 		orr	r5, r5, r0, lsl #16
 943:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13));
 1230              		.loc 1 943 0
 1231 0096 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
ARM GAS  /tmp/cci5ScRN.s 			page 57


 942:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 1232              		.loc 1 942 0
 1233 0098 0543     		orrs	r5, r5, r0
 944:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1234              		.loc 1 944 0
 1235 009a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 941:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8) | \
 1236              		.loc 1 941 0
 1237 009c 45EA4035 		orr	r5, r5, r0, lsl #13
 1238              	.LVL90:
 1239 00a0 D3E7     		b	.L93
 1240              	.LVL91:
 1241              	.L98:
 954:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1242              		.loc 1 954 0
 1243 00a2 2368     		ldr	r3, [r4]
 1244 00a4 FF22     		movs	r2, #255
 1245 00a6 5A62     		str	r2, [r3, #36]
 957:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1246              		.loc 1 957 0
 1247 00a8 0423     		movs	r3, #4
 1248 00aa 6377     		strb	r3, [r4, #29]
 960:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1249              		.loc 1 960 0
 1250 00ac 0023     		movs	r3, #0
 1251 00ae 2377     		strb	r3, [r4, #28]
 962:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1252              		.loc 1 962 0
 1253 00b0 0126     		movs	r6, #1
 1254              	.LVL92:
 1255              	.L90:
 999:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1256              		.loc 1 999 0
 1257 00b2 3046     		mov	r0, r6
 1258 00b4 70BD     		pop	{r4, r5, r6, pc}
 1259              	.LVL93:
 1260              	.L99:
 975:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 1261              		.loc 1 975 0
 1262 00b6 2046     		mov	r0, r4
 1263 00b8 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1264              	.LVL94:
 1265 00bc 0028     		cmp	r0, #0
 1266 00be DDD0     		beq	.L95
 978:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1267              		.loc 1 978 0
 1268 00c0 2368     		ldr	r3, [r4]
 1269 00c2 FF22     		movs	r2, #255
 1270 00c4 5A62     		str	r2, [r3, #36]
 980:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1271              		.loc 1 980 0
 1272 00c6 0423     		movs	r3, #4
 1273 00c8 6377     		strb	r3, [r4, #29]
 983:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1274              		.loc 1 983 0
 1275 00ca 0023     		movs	r3, #0
 1276 00cc 2377     		strb	r3, [r4, #28]
ARM GAS  /tmp/cci5ScRN.s 			page 58


 985:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 1277              		.loc 1 985 0
 1278 00ce 0126     		movs	r6, #1
 1279 00d0 EFE7     		b	.L90
 1280              	.LVL95:
 1281              	.L96:
 913:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1282              		.loc 1 913 0
 1283 00d2 0226     		movs	r6, #2
 1284 00d4 EDE7     		b	.L90
 1285              	.L101:
 1286 00d6 00BF     		.align	2
 1287              	.L100:
 1288 00d8 3FFFFF00 		.word	16777023
 1289              		.cfi_endproc
 1290              	.LFE147:
 1292              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1293              		.align	1
 1294              		.global	HAL_RTC_SetAlarm
 1295              		.syntax unified
 1296              		.thumb
 1297              		.thumb_func
 1298              		.fpu fpv5-sp-d16
 1300              	HAL_RTC_SetAlarm:
 1301              	.LFB149:
1071:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tickstart = 0;
 1302              		.loc 1 1071 0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 0, uses_anonymous_args = 0
 1306              	.LVL96:
 1307 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1308              	.LCFI10:
 1309              		.cfi_def_cfa_offset 24
 1310              		.cfi_offset 3, -24
 1311              		.cfi_offset 4, -20
 1312              		.cfi_offset 5, -16
 1313              		.cfi_offset 6, -12
 1314              		.cfi_offset 7, -8
 1315              		.cfi_offset 14, -4
 1316              	.LVL97:
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1317              		.loc 1 1084 0
 1318 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1319 0004 012B     		cmp	r3, #1
 1320 0006 00F0A980 		beq	.L114
 1321 000a 0D46     		mov	r5, r1
 1322 000c 0446     		mov	r4, r0
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1323              		.loc 1 1084 0 is_stmt 0 discriminator 2
 1324 000e 0123     		movs	r3, #1
 1325 0010 0377     		strb	r3, [r0, #28]
1086:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1326              		.loc 1 1086 0 is_stmt 1 discriminator 2
 1327 0012 0223     		movs	r3, #2
 1328 0014 4377     		strb	r3, [r0, #29]
1088:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
ARM GAS  /tmp/cci5ScRN.s 			page 59


 1329              		.loc 1 1088 0 discriminator 2
 1330 0016 002A     		cmp	r2, #0
 1331 0018 4DD1     		bne	.L104
1090:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1332              		.loc 1 1090 0
 1333 001a 0368     		ldr	r3, [r0]
 1334 001c 9B68     		ldr	r3, [r3, #8]
 1335 001e 13F0400F 		tst	r3, #64
 1336 0022 01D1     		bne	.L105
1097:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1337              		.loc 1 1097 0
 1338 0024 0023     		movs	r3, #0
 1339 0026 0B73     		strb	r3, [r1, #12]
 1340              	.L105:
1103:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1341              		.loc 1 1103 0
 1342 0028 2E6A     		ldr	r6, [r5, #32]
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1343              		.loc 1 1112 0
 1344 002a 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1345              	.LVL98:
 1346 002c FFF7FEFF 		bl	RTC_ByteToBcd2
 1347              	.LVL99:
 1348 0030 0704     		lsls	r7, r0, #16
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1349              		.loc 1 1113 0
 1350 0032 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1351 0034 FFF7FEFF 		bl	RTC_ByteToBcd2
 1352              	.LVL100:
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1353              		.loc 1 1112 0
 1354 0038 47EA0027 		orr	r7, r7, r0, lsl #8
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1355              		.loc 1 1114 0
 1356 003c A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1357 003e FFF7FEFF 		bl	RTC_ByteToBcd2
 1358              	.LVL101:
1113:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1359              		.loc 1 1113 0
 1360 0042 0743     		orrs	r7, r7, r0
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1361              		.loc 1 1115 0
 1362 0044 287B     		ldrb	r0, [r5, #12]	@ zero_extendqisi2
1114:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1363              		.loc 1 1114 0
 1364 0046 47EA0047 		orr	r7, r7, r0, lsl #16
1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1365              		.loc 1 1116 0
 1366 004a 95F82400 		ldrb	r0, [r5, #36]	@ zero_extendqisi2
 1367 004e FFF7FEFF 		bl	RTC_ByteToBcd2
 1368              	.LVL102:
1115:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 1369              		.loc 1 1115 0
 1370 0052 47EA0060 		orr	r0, r7, r0, lsl #24
1116:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1371              		.loc 1 1116 0
 1372 0056 0643     		orrs	r6, r6, r0
ARM GAS  /tmp/cci5ScRN.s 			page 60


1118:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1373              		.loc 1 1118 0
 1374 0058 AB69     		ldr	r3, [r5, #24]
1112:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 1375              		.loc 1 1112 0
 1376 005a 1E43     		orrs	r6, r6, r3
 1377              	.LVL103:
 1378              	.L106:
1155:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1379              		.loc 1 1155 0
 1380 005c 6F68     		ldr	r7, [r5, #4]
 1381 005e EB69     		ldr	r3, [r5, #28]
 1382 0060 1F43     		orrs	r7, r7, r3
 1383              	.LVL104:
1158:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1384              		.loc 1 1158 0
 1385 0062 2368     		ldr	r3, [r4]
 1386 0064 CA22     		movs	r2, #202
 1387 0066 5A62     		str	r2, [r3, #36]
 1388 0068 2368     		ldr	r3, [r4]
 1389 006a 5322     		movs	r2, #83
 1390 006c 5A62     		str	r2, [r3, #36]
1161:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 1391              		.loc 1 1161 0
 1392 006e AB6A     		ldr	r3, [r5, #40]
 1393 0070 B3F5807F 		cmp	r3, #256
 1394 0074 39D0     		beq	.L116
1198:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1395              		.loc 1 1198 0
 1396 0076 2268     		ldr	r2, [r4]
 1397 0078 9368     		ldr	r3, [r2, #8]
 1398 007a 23F40073 		bic	r3, r3, #512
 1399 007e 9360     		str	r3, [r2, #8]
1201:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1400              		.loc 1 1201 0
 1401 0080 2268     		ldr	r2, [r4]
 1402 0082 9368     		ldr	r3, [r2, #8]
 1403 0084 23F40053 		bic	r3, r3, #8192
 1404 0088 9360     		str	r3, [r2, #8]
1204:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1405              		.loc 1 1204 0
 1406 008a FFF7FEFF 		bl	HAL_GetTick
 1407              	.LVL105:
 1408 008e 0546     		mov	r5, r0
 1409              	.LVL106:
 1410              	.L112:
1207:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1411              		.loc 1 1207 0
 1412 0090 2368     		ldr	r3, [r4]
 1413 0092 DA68     		ldr	r2, [r3, #12]
 1414 0094 12F0020F 		tst	r2, #2
 1415 0098 50D1     		bne	.L117
1209:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 1416              		.loc 1 1209 0
 1417 009a FFF7FEFF 		bl	HAL_GetTick
 1418              	.LVL107:
 1419 009e 401B     		subs	r0, r0, r5
ARM GAS  /tmp/cci5ScRN.s 			page 61


 1420 00a0 B0F57A7F 		cmp	r0, #1000
 1421 00a4 F4D9     		bls	.L112
1212:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1422              		.loc 1 1212 0
 1423 00a6 2368     		ldr	r3, [r4]
 1424 00a8 FF22     		movs	r2, #255
 1425 00aa 5A62     		str	r2, [r3, #36]
1214:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1426              		.loc 1 1214 0
 1427 00ac 0320     		movs	r0, #3
 1428 00ae 6077     		strb	r0, [r4, #29]
1217:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1429              		.loc 1 1217 0
 1430 00b0 0023     		movs	r3, #0
 1431 00b2 2377     		strb	r3, [r4, #28]
1219:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 1432              		.loc 1 1219 0
 1433 00b4 51E0     		b	.L103
 1434              	.LVL108:
 1435              	.L104:
1122:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1436              		.loc 1 1122 0
 1437 00b6 0368     		ldr	r3, [r0]
 1438 00b8 9B68     		ldr	r3, [r3, #8]
 1439 00ba 13F0400F 		tst	r3, #64
 1440 00be 01D1     		bne	.L107
1129:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1441              		.loc 1 1129 0
 1442 00c0 0023     		movs	r3, #0
 1443 00c2 0B73     		strb	r3, [r1, #12]
 1444              	.L107:
1136:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1445              		.loc 1 1136 0
 1446 00c4 2A6A     		ldr	r2, [r5, #32]
 1447              	.LVL109:
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1448              		.loc 1 1145 0
 1449 00c6 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 1450              	.LVL110:
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1451              		.loc 1 1146 0
 1452 00c8 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1453 00ca 1B02     		lsls	r3, r3, #8
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1454              		.loc 1 1145 0
 1455 00cc 43EA0143 		orr	r3, r3, r1, lsl #16
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1456              		.loc 1 1147 0
 1457 00d0 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
1146:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1458              		.loc 1 1146 0
 1459 00d2 0B43     		orrs	r3, r3, r1
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1460              		.loc 1 1148 0
 1461 00d4 297B     		ldrb	r1, [r5, #12]	@ zero_extendqisi2
1147:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 1462              		.loc 1 1147 0
ARM GAS  /tmp/cci5ScRN.s 			page 62


 1463 00d6 43EA0143 		orr	r3, r3, r1, lsl #16
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1464              		.loc 1 1149 0
 1465 00da 95F82410 		ldrb	r1, [r5, #36]	@ zero_extendqisi2
1148:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 1466              		.loc 1 1148 0
 1467 00de 43EA0163 		orr	r3, r3, r1, lsl #24
1149:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1468              		.loc 1 1149 0
 1469 00e2 1343     		orrs	r3, r3, r2
1151:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1470              		.loc 1 1151 0
 1471 00e4 AE69     		ldr	r6, [r5, #24]
1145:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 1472              		.loc 1 1145 0
 1473 00e6 1E43     		orrs	r6, r6, r3
 1474              	.LVL111:
 1475 00e8 B8E7     		b	.L106
 1476              	.LVL112:
 1477              	.L116:
1164:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1478              		.loc 1 1164 0
 1479 00ea 2268     		ldr	r2, [r4]
 1480 00ec 9368     		ldr	r3, [r2, #8]
 1481 00ee 23F48073 		bic	r3, r3, #256
 1482 00f2 9360     		str	r3, [r2, #8]
1167:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1483              		.loc 1 1167 0
 1484 00f4 2268     		ldr	r2, [r4]
 1485 00f6 9368     		ldr	r3, [r2, #8]
 1486 00f8 23F48053 		bic	r3, r3, #4096
 1487 00fc 9360     		str	r3, [r2, #8]
1170:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1488              		.loc 1 1170 0
 1489 00fe FFF7FEFF 		bl	HAL_GetTick
 1490              	.LVL113:
 1491 0102 0546     		mov	r5, r0
 1492              	.LVL114:
 1493              	.L109:
1173:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1494              		.loc 1 1173 0
 1495 0104 2368     		ldr	r3, [r4]
 1496 0106 DA68     		ldr	r2, [r3, #12]
 1497 0108 12F0010F 		tst	r2, #1
 1498 010c 0DD1     		bne	.L118
1175:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 1499              		.loc 1 1175 0
 1500 010e FFF7FEFF 		bl	HAL_GetTick
 1501              	.LVL115:
 1502 0112 401B     		subs	r0, r0, r5
 1503 0114 B0F57A7F 		cmp	r0, #1000
 1504 0118 F4D9     		bls	.L109
1178:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1505              		.loc 1 1178 0
 1506 011a 2368     		ldr	r3, [r4]
 1507 011c FF22     		movs	r2, #255
 1508 011e 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/cci5ScRN.s 			page 63


1180:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1509              		.loc 1 1180 0
 1510 0120 0320     		movs	r0, #3
 1511 0122 6077     		strb	r0, [r4, #29]
1183:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1512              		.loc 1 1183 0
 1513 0124 0023     		movs	r3, #0
 1514 0126 2377     		strb	r3, [r4, #28]
1185:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 1515              		.loc 1 1185 0
 1516 0128 17E0     		b	.L103
 1517              	.L118:
1189:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 1518              		.loc 1 1189 0
 1519 012a DE61     		str	r6, [r3, #28]
1191:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1520              		.loc 1 1191 0
 1521 012c 2368     		ldr	r3, [r4]
 1522 012e 5F64     		str	r7, [r3, #68]
1193:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1523              		.loc 1 1193 0
 1524 0130 2268     		ldr	r2, [r4]
 1525 0132 9368     		ldr	r3, [r2, #8]
 1526 0134 43F48073 		orr	r3, r3, #256
 1527 0138 9360     		str	r3, [r2, #8]
 1528 013a 07E0     		b	.L111
 1529              	.L117:
1223:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 1530              		.loc 1 1223 0
 1531 013c 1E62     		str	r6, [r3, #32]
1225:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1532              		.loc 1 1225 0
 1533 013e 2368     		ldr	r3, [r4]
 1534 0140 9F64     		str	r7, [r3, #72]
1227:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1535              		.loc 1 1227 0
 1536 0142 2268     		ldr	r2, [r4]
 1537 0144 9368     		ldr	r3, [r2, #8]
 1538 0146 43F40073 		orr	r3, r3, #512
 1539 014a 9360     		str	r3, [r2, #8]
 1540              	.L111:
1231:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1541              		.loc 1 1231 0
 1542 014c 2368     		ldr	r3, [r4]
 1543 014e FF22     		movs	r2, #255
 1544 0150 5A62     		str	r2, [r3, #36]
1234:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1545              		.loc 1 1234 0
 1546 0152 0123     		movs	r3, #1
 1547 0154 6377     		strb	r3, [r4, #29]
1237:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1548              		.loc 1 1237 0
 1549 0156 0020     		movs	r0, #0
 1550 0158 2077     		strb	r0, [r4, #28]
 1551              	.LVL116:
 1552              	.L103:
1240:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
ARM GAS  /tmp/cci5ScRN.s 			page 64


 1553              		.loc 1 1240 0
 1554 015a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1555              	.LVL117:
 1556              	.L114:
1084:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1557              		.loc 1 1084 0
 1558 015c 0220     		movs	r0, #2
 1559              	.LVL118:
 1560 015e FCE7     		b	.L103
 1561              		.cfi_endproc
 1562              	.LFE149:
 1564              		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1565              		.align	1
 1566              		.global	HAL_RTC_SetAlarm_IT
 1567              		.syntax unified
 1568              		.thumb
 1569              		.thumb_func
 1570              		.fpu fpv5-sp-d16
 1572              	HAL_RTC_SetAlarm_IT:
 1573              	.LFB150:
1257:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 1574              		.loc 1 1257 0
 1575              		.cfi_startproc
 1576              		@ args = 0, pretend = 0, frame = 8
 1577              		@ frame_needed = 0, uses_anonymous_args = 0
 1578              	.LVL119:
 1579 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1580              	.LCFI11:
 1581              		.cfi_def_cfa_offset 20
 1582              		.cfi_offset 4, -20
 1583              		.cfi_offset 5, -16
 1584              		.cfi_offset 6, -12
 1585              		.cfi_offset 7, -8
 1586              		.cfi_offset 14, -4
 1587 0002 83B0     		sub	sp, sp, #12
 1588              	.LCFI12:
 1589              		.cfi_def_cfa_offset 32
 1590              	.LVL120:
1259:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1591              		.loc 1 1259 0
 1592 0004 634B     		ldr	r3, .L136
 1593 0006 1B68     		ldr	r3, [r3]
 1594 0008 634C     		ldr	r4, .L136+4
 1595 000a A4FB0343 		umull	r4, r3, r4, r3
 1596 000e DB0A     		lsrs	r3, r3, #11
 1597 0010 4FF47A76 		mov	r6, #1000
 1598 0014 06FB03F3 		mul	r3, r6, r3
 1599 0018 0193     		str	r3, [sp, #4]
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1600              		.loc 1 1270 0
 1601 001a 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1602 001c 012B     		cmp	r3, #1
 1603 001e 00F0B680 		beq	.L131
 1604 0022 0D46     		mov	r5, r1
 1605 0024 0446     		mov	r4, r0
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1606              		.loc 1 1270 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/cci5ScRN.s 			page 65


 1607 0026 0123     		movs	r3, #1
 1608 0028 0377     		strb	r3, [r0, #28]
1272:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1609              		.loc 1 1272 0 is_stmt 1 discriminator 2
 1610 002a 0223     		movs	r3, #2
 1611 002c 4377     		strb	r3, [r0, #29]
1274:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 1612              		.loc 1 1274 0 discriminator 2
 1613 002e 002A     		cmp	r2, #0
 1614 0030 61D1     		bne	.L121
1276:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1615              		.loc 1 1276 0
 1616 0032 0368     		ldr	r3, [r0]
 1617 0034 9B68     		ldr	r3, [r3, #8]
 1618 0036 13F0400F 		tst	r3, #64
 1619 003a 01D1     		bne	.L122
1283:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1620              		.loc 1 1283 0
 1621 003c 0023     		movs	r3, #0
 1622 003e 0B73     		strb	r3, [r1, #12]
 1623              	.L122:
1289:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1624              		.loc 1 1289 0
 1625 0040 2F6A     		ldr	r7, [r5, #32]
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1626              		.loc 1 1297 0
 1627 0042 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1628              	.LVL121:
 1629 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 1630              	.LVL122:
 1631 0048 0604     		lsls	r6, r0, #16
1298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1632              		.loc 1 1298 0
 1633 004a 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1634 004c FFF7FEFF 		bl	RTC_ByteToBcd2
 1635              	.LVL123:
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1636              		.loc 1 1297 0
 1637 0050 46EA0026 		orr	r6, r6, r0, lsl #8
1299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1638              		.loc 1 1299 0
 1639 0054 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1640 0056 FFF7FEFF 		bl	RTC_ByteToBcd2
 1641              	.LVL124:
1298:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1642              		.loc 1 1298 0
 1643 005a 0643     		orrs	r6, r6, r0
1300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1644              		.loc 1 1300 0
 1645 005c 287B     		ldrb	r0, [r5, #12]	@ zero_extendqisi2
1299:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1646              		.loc 1 1299 0
 1647 005e 46EA0046 		orr	r6, r6, r0, lsl #16
1301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1648              		.loc 1 1301 0
 1649 0062 95F82400 		ldrb	r0, [r5, #36]	@ zero_extendqisi2
 1650 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
ARM GAS  /tmp/cci5ScRN.s 			page 66


 1651              	.LVL125:
1300:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1652              		.loc 1 1300 0
 1653 006a 46EA0060 		orr	r0, r6, r0, lsl #24
1301:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1654              		.loc 1 1301 0
 1655 006e 3843     		orrs	r0, r0, r7
1303:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1656              		.loc 1 1303 0
 1657 0070 AB69     		ldr	r3, [r5, #24]
1297:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1658              		.loc 1 1297 0
 1659 0072 1843     		orrs	r0, r0, r3
 1660              	.LVL126:
 1661              	.L123:
1338:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1662              		.loc 1 1338 0
 1663 0074 6968     		ldr	r1, [r5, #4]
 1664 0076 EB69     		ldr	r3, [r5, #28]
 1665 0078 1943     		orrs	r1, r1, r3
 1666              	.LVL127:
1341:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1667              		.loc 1 1341 0
 1668 007a 2368     		ldr	r3, [r4]
 1669 007c CA22     		movs	r2, #202
 1670 007e 5A62     		str	r2, [r3, #36]
 1671 0080 2368     		ldr	r3, [r4]
 1672 0082 5322     		movs	r2, #83
 1673 0084 5A62     		str	r2, [r3, #36]
1344:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 1674              		.loc 1 1344 0
 1675 0086 AB6A     		ldr	r3, [r5, #40]
 1676 0088 B3F5807F 		cmp	r3, #256
 1677 008c 4DD0     		beq	.L133
1381:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1678              		.loc 1 1381 0
 1679 008e 2268     		ldr	r2, [r4]
 1680 0090 9368     		ldr	r3, [r2, #8]
 1681 0092 23F40073 		bic	r3, r3, #512
 1682 0096 9360     		str	r3, [r2, #8]
1384:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1683              		.loc 1 1384 0
 1684 0098 2268     		ldr	r2, [r4]
 1685 009a D368     		ldr	r3, [r2, #12]
 1686 009c DBB2     		uxtb	r3, r3
 1687 009e 63F42073 		orn	r3, r3, #640
 1688 00a2 D360     		str	r3, [r2, #12]
 1689              	.L130:
1389:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 1690              		.loc 1 1389 0
 1691 00a4 019B     		ldr	r3, [sp, #4]
 1692 00a6 5A1E     		subs	r2, r3, #1
 1693 00a8 0192     		str	r2, [sp, #4]
 1694 00aa 002B     		cmp	r3, #0
 1695 00ac 67D0     		beq	.L134
1402:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1696              		.loc 1 1402 0
ARM GAS  /tmp/cci5ScRN.s 			page 67


 1697 00ae 2368     		ldr	r3, [r4]
 1698 00b0 DA68     		ldr	r2, [r3, #12]
 1699 00b2 12F0020F 		tst	r2, #2
 1700 00b6 F5D0     		beq	.L130
1404:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 1701              		.loc 1 1404 0
 1702 00b8 1862     		str	r0, [r3, #32]
1406:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1703              		.loc 1 1406 0
 1704 00ba 2368     		ldr	r3, [r4]
 1705 00bc 9964     		str	r1, [r3, #72]
1408:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1706              		.loc 1 1408 0
 1707 00be 2268     		ldr	r2, [r4]
 1708 00c0 9368     		ldr	r3, [r2, #8]
 1709 00c2 43F40073 		orr	r3, r3, #512
 1710 00c6 9360     		str	r3, [r2, #8]
1410:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1711              		.loc 1 1410 0
 1712 00c8 2268     		ldr	r2, [r4]
 1713 00ca 9368     		ldr	r3, [r2, #8]
 1714 00cc 43F40053 		orr	r3, r3, #8192
 1715 00d0 9360     		str	r3, [r2, #8]
 1716              	.L128:
1414:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1717              		.loc 1 1414 0
 1718 00d2 324B     		ldr	r3, .L136+8
 1719 00d4 1A68     		ldr	r2, [r3]
 1720 00d6 42F40032 		orr	r2, r2, #131072
 1721 00da 1A60     		str	r2, [r3]
1416:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1722              		.loc 1 1416 0
 1723 00dc 9A68     		ldr	r2, [r3, #8]
 1724 00de 42F40032 		orr	r2, r2, #131072
 1725 00e2 9A60     		str	r2, [r3, #8]
1419:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1726              		.loc 1 1419 0
 1727 00e4 2368     		ldr	r3, [r4]
 1728 00e6 FF22     		movs	r2, #255
 1729 00e8 5A62     		str	r2, [r3, #36]
1421:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1730              		.loc 1 1421 0
 1731 00ea 0123     		movs	r3, #1
 1732 00ec 6377     		strb	r3, [r4, #29]
1424:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1733              		.loc 1 1424 0
 1734 00ee 0020     		movs	r0, #0
 1735              	.LVL128:
 1736 00f0 2077     		strb	r0, [r4, #28]
 1737              	.LVL129:
 1738              	.L120:
1427:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1739              		.loc 1 1427 0
 1740 00f2 03B0     		add	sp, sp, #12
 1741              	.LCFI13:
 1742              		.cfi_remember_state
 1743              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/cci5ScRN.s 			page 68


 1744              		@ sp needed
 1745 00f4 F0BD     		pop	{r4, r5, r6, r7, pc}
 1746              	.LVL130:
 1747              	.L121:
 1748              	.LCFI14:
 1749              		.cfi_restore_state
1307:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1750              		.loc 1 1307 0
 1751 00f6 0368     		ldr	r3, [r0]
 1752 00f8 9B68     		ldr	r3, [r3, #8]
 1753 00fa 13F0400F 		tst	r3, #64
 1754 00fe 01D1     		bne	.L124
1314:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1755              		.loc 1 1314 0
 1756 0100 0023     		movs	r3, #0
 1757 0102 0B73     		strb	r3, [r1, #12]
 1758              	.L124:
1321:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     {
 1759              		.loc 1 1321 0
 1760 0104 2A6A     		ldr	r2, [r5, #32]
 1761              	.LVL131:
1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1762              		.loc 1 1329 0
 1763 0106 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 1764              	.LVL132:
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1765              		.loc 1 1330 0
 1766 0108 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1767 010a 1B02     		lsls	r3, r3, #8
1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1768              		.loc 1 1329 0
 1769 010c 43EA0143 		orr	r3, r3, r1, lsl #16
1331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1770              		.loc 1 1331 0
 1771 0110 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
1330:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1772              		.loc 1 1330 0
 1773 0112 0B43     		orrs	r3, r3, r1
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1774              		.loc 1 1332 0
 1775 0114 297B     		ldrb	r1, [r5, #12]	@ zero_extendqisi2
1331:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1776              		.loc 1 1331 0
 1777 0116 43EA0143 		orr	r3, r3, r1, lsl #16
1333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1778              		.loc 1 1333 0
 1779 011a 95F82410 		ldrb	r1, [r5, #36]	@ zero_extendqisi2
1332:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1780              		.loc 1 1332 0
 1781 011e 43EA0163 		orr	r3, r3, r1, lsl #24
1333:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1782              		.loc 1 1333 0
 1783 0122 1343     		orrs	r3, r3, r2
1335:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1784              		.loc 1 1335 0
 1785 0124 A869     		ldr	r0, [r5, #24]
 1786              	.LVL133:
ARM GAS  /tmp/cci5ScRN.s 			page 69


1329:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1787              		.loc 1 1329 0
 1788 0126 1843     		orrs	r0, r0, r3
 1789              	.LVL134:
 1790 0128 A4E7     		b	.L123
 1791              	.LVL135:
 1792              	.L133:
1347:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1793              		.loc 1 1347 0
 1794 012a 2268     		ldr	r2, [r4]
 1795 012c 9368     		ldr	r3, [r2, #8]
 1796 012e 23F48073 		bic	r3, r3, #256
 1797 0132 9360     		str	r3, [r2, #8]
1350:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1798              		.loc 1 1350 0
 1799 0134 2268     		ldr	r2, [r4]
 1800 0136 D368     		ldr	r3, [r2, #12]
 1801 0138 DBB2     		uxtb	r3, r3
 1802 013a 63F4C073 		orn	r3, r3, #384
 1803 013e D360     		str	r3, [r2, #12]
 1804              	.L127:
1355:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       {
 1805              		.loc 1 1355 0
 1806 0140 019B     		ldr	r3, [sp, #4]
 1807 0142 5A1E     		subs	r2, r3, #1
 1808 0144 0192     		str	r2, [sp, #4]
 1809 0146 93B1     		cbz	r3, .L135
1368:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1810              		.loc 1 1368 0
 1811 0148 2368     		ldr	r3, [r4]
 1812 014a DA68     		ldr	r2, [r3, #12]
 1813 014c 12F0010F 		tst	r2, #1
 1814 0150 F6D0     		beq	.L127
1370:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 1815              		.loc 1 1370 0
 1816 0152 D861     		str	r0, [r3, #28]
1372:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1817              		.loc 1 1372 0
 1818 0154 2368     		ldr	r3, [r4]
 1819 0156 5964     		str	r1, [r3, #68]
1374:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1820              		.loc 1 1374 0
 1821 0158 2268     		ldr	r2, [r4]
 1822 015a 9368     		ldr	r3, [r2, #8]
 1823 015c 43F48073 		orr	r3, r3, #256
 1824 0160 9360     		str	r3, [r2, #8]
1376:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1825              		.loc 1 1376 0
 1826 0162 2268     		ldr	r2, [r4]
 1827 0164 9368     		ldr	r3, [r2, #8]
 1828 0166 43F48053 		orr	r3, r3, #4096
 1829 016a 9360     		str	r3, [r2, #8]
 1830 016c B1E7     		b	.L128
 1831              	.L135:
1358:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1832              		.loc 1 1358 0
 1833 016e 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cci5ScRN.s 			page 70


 1834 0170 FF22     		movs	r2, #255
 1835 0172 5A62     		str	r2, [r3, #36]
1360:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1836              		.loc 1 1360 0
 1837 0174 0320     		movs	r0, #3
 1838              	.LVL136:
 1839 0176 6077     		strb	r0, [r4, #29]
1363:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1840              		.loc 1 1363 0
 1841 0178 0023     		movs	r3, #0
 1842 017a 2377     		strb	r3, [r4, #28]
1365:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 1843              		.loc 1 1365 0
 1844 017c B9E7     		b	.L120
 1845              	.LVL137:
 1846              	.L134:
1392:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1847              		.loc 1 1392 0
 1848 017e 2368     		ldr	r3, [r4]
 1849 0180 FF22     		movs	r2, #255
 1850 0182 5A62     		str	r2, [r3, #36]
1394:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1851              		.loc 1 1394 0
 1852 0184 0320     		movs	r0, #3
 1853              	.LVL138:
 1854 0186 6077     		strb	r0, [r4, #29]
1397:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1855              		.loc 1 1397 0
 1856 0188 0023     		movs	r3, #0
 1857 018a 2377     		strb	r3, [r4, #28]
1399:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****       }
 1858              		.loc 1 1399 0
 1859 018c B1E7     		b	.L120
 1860              	.LVL139:
 1861              	.L131:
1270:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1862              		.loc 1 1270 0
 1863 018e 0220     		movs	r0, #2
 1864              	.LVL140:
 1865 0190 AFE7     		b	.L120
 1866              	.L137:
 1867 0192 00BF     		.align	2
 1868              	.L136:
 1869 0194 00000000 		.word	SystemCoreClock
 1870 0198 D34D6210 		.word	274877907
 1871 019c 003C0140 		.word	1073822720
 1872              		.cfi_endproc
 1873              	.LFE150:
 1875              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 1876              		.align	1
 1877              		.global	RTC_Bcd2ToByte
 1878              		.syntax unified
 1879              		.thumb
 1880              		.thumb_func
 1881              		.fpu fpv5-sp-d16
 1883              	RTC_Bcd2ToByte:
 1884              	.LFB160:
ARM GAS  /tmp/cci5ScRN.s 			page 71


1824:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
1825:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** /**
1826:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @brief  Converts from 2 digit BCD to Binary.
1827:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @param  Value BCD value to be converted
1828:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   * @retval Converted word
1829:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   */
1830:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
1831:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** {
 1885              		.loc 1 1831 0
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 0
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
 1889              		@ link register save eliminated.
 1890              	.LVL141:
1832:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmp = 0;
1833:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 1891              		.loc 1 1833 0
 1892 0000 0309     		lsrs	r3, r0, #4
 1893 0002 03EB8303 		add	r3, r3, r3, lsl #2
 1894 0006 5A00     		lsls	r2, r3, #1
 1895              	.LVL142:
1834:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 1896              		.loc 1 1834 0
 1897 0008 00F00F00 		and	r0, r0, #15
 1898              	.LVL143:
 1899 000c 1044     		add	r0, r0, r2
1835:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** }
 1900              		.loc 1 1835 0
 1901 000e C0B2     		uxtb	r0, r0
 1902 0010 7047     		bx	lr
 1903              		.cfi_endproc
 1904              	.LFE160:
 1906              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 1907              		.align	1
 1908              		.global	HAL_RTC_GetTime
 1909              		.syntax unified
 1910              		.thumb
 1911              		.thumb_func
 1912              		.fpu fpv5-sp-d16
 1914              	HAL_RTC_GetTime:
 1915              	.LFB146:
 861:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0;
 1916              		.loc 1 861 0
 1917              		.cfi_startproc
 1918              		@ args = 0, pretend = 0, frame = 0
 1919              		@ frame_needed = 0, uses_anonymous_args = 0
 1920              	.LVL144:
 1921 0000 70B5     		push	{r4, r5, r6, lr}
 1922              	.LCFI15:
 1923              		.cfi_def_cfa_offset 16
 1924              		.cfi_offset 4, -16
 1925              		.cfi_offset 5, -12
 1926              		.cfi_offset 6, -8
 1927              		.cfi_offset 14, -4
 1928              	.LVL145:
 868:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1929              		.loc 1 868 0
ARM GAS  /tmp/cci5ScRN.s 			page 72


 1930 0002 0368     		ldr	r3, [r0]
 1931 0004 9B6A     		ldr	r3, [r3, #40]
 1932 0006 4B60     		str	r3, [r1, #4]
 871:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1933              		.loc 1 871 0
 1934 0008 0368     		ldr	r3, [r0]
 1935 000a 1B69     		ldr	r3, [r3, #16]
 1936 000c C3F30E03 		ubfx	r3, r3, #0, #15
 1937 0010 8B60     		str	r3, [r1, #8]
 874:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1938              		.loc 1 874 0
 1939 0012 0368     		ldr	r3, [r0]
 1940 0014 1868     		ldr	r0, [r3]
 1941              	.LVL146:
 1942 0016 0F4D     		ldr	r5, .L142
 1943 0018 0540     		ands	r5, r5, r0
 1944              	.LVL147:
 877:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1945              		.loc 1 877 0
 1946 001a 2C0C     		lsrs	r4, r5, #16
 1947 001c 04F03F00 		and	r0, r4, #63
 1948 0020 0870     		strb	r0, [r1]
 878:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1949              		.loc 1 878 0
 1950 0022 C5F30626 		ubfx	r6, r5, #8, #7
 1951 0026 4E70     		strb	r6, [r1, #1]
 879:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 1952              		.loc 1 879 0
 1953 0028 05F07F05 		and	r5, r5, #127
 1954              	.LVL148:
 1955 002c 8D70     		strb	r5, [r1, #2]
 880:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1956              		.loc 1 880 0
 1957 002e 04F04004 		and	r4, r4, #64
 1958 0032 0C73     		strb	r4, [r1, #12]
 883:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 1959              		.loc 1 883 0
 1960 0034 5AB9     		cbnz	r2, .L140
 1961 0036 0C46     		mov	r4, r1
 886:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 1962              		.loc 1 886 0
 1963 0038 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1964              	.LVL149:
 1965 003c 2070     		strb	r0, [r4]
 887:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 1966              		.loc 1 887 0
 1967 003e 3046     		mov	r0, r6
 1968 0040 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1969              	.LVL150:
 1970 0044 6070     		strb	r0, [r4, #1]
 888:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 1971              		.loc 1 888 0
 1972 0046 2846     		mov	r0, r5
 1973 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1974              	.LVL151:
 1975 004c A070     		strb	r0, [r4, #2]
 1976              	.LVL152:
ARM GAS  /tmp/cci5ScRN.s 			page 73


 1977              	.L140:
 892:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 1978              		.loc 1 892 0
 1979 004e 0020     		movs	r0, #0
 1980 0050 70BD     		pop	{r4, r5, r6, pc}
 1981              	.L143:
 1982 0052 00BF     		.align	2
 1983              	.L142:
 1984 0054 7F7F7F00 		.word	8355711
 1985              		.cfi_endproc
 1986              	.LFE146:
 1988              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1989              		.align	1
 1990              		.global	HAL_RTC_GetDate
 1991              		.syntax unified
 1992              		.thumb
 1993              		.thumb_func
 1994              		.fpu fpv5-sp-d16
 1996              	HAL_RTC_GetDate:
 1997              	.LFB148:
1016:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t datetmpreg = 0;
 1998              		.loc 1 1016 0
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 0
 2001              		@ frame_needed = 0, uses_anonymous_args = 0
 2002              	.LVL153:
 2003 0000 70B5     		push	{r4, r5, r6, lr}
 2004              	.LCFI16:
 2005              		.cfi_def_cfa_offset 16
 2006              		.cfi_offset 4, -16
 2007              		.cfi_offset 5, -12
 2008              		.cfi_offset 6, -8
 2009              		.cfi_offset 14, -4
 2010              	.LVL154:
1023:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 2011              		.loc 1 1023 0
 2012 0002 0368     		ldr	r3, [r0]
 2013 0004 5868     		ldr	r0, [r3, #4]
 2014              	.LVL155:
 2015 0006 0E4B     		ldr	r3, .L147
 2016 0008 0340     		ands	r3, r3, r0
 2017              	.LVL156:
1026:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2018              		.loc 1 1026 0
 2019 000a 180C     		lsrs	r0, r3, #16
 2020 000c C870     		strb	r0, [r1, #3]
1027:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 2021              		.loc 1 1027 0
 2022 000e C3F30426 		ubfx	r6, r3, #8, #5
 2023 0012 4E70     		strb	r6, [r1, #1]
1028:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 2024              		.loc 1 1028 0
 2025 0014 03F03F05 		and	r5, r3, #63
 2026 0018 8D70     		strb	r5, [r1, #2]
1029:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 2027              		.loc 1 1029 0
 2028 001a C3F34233 		ubfx	r3, r3, #13, #3
ARM GAS  /tmp/cci5ScRN.s 			page 74


 2029              	.LVL157:
 2030 001e 0B70     		strb	r3, [r1]
1032:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2031              		.loc 1 1032 0
 2032 0020 5AB9     		cbnz	r2, .L145
 2033 0022 0C46     		mov	r4, r1
1035:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 2034              		.loc 1 1035 0
 2035 0024 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2036              	.LVL158:
 2037 0028 E070     		strb	r0, [r4, #3]
1036:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 2038              		.loc 1 1036 0
 2039 002a 3046     		mov	r0, r6
 2040 002c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2041              	.LVL159:
 2042 0030 6070     		strb	r0, [r4, #1]
1037:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 2043              		.loc 1 1037 0
 2044 0032 2846     		mov	r0, r5
 2045 0034 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2046              	.LVL160:
 2047 0038 A070     		strb	r0, [r4, #2]
 2048              	.LVL161:
 2049              	.L145:
1040:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 2050              		.loc 1 1040 0
 2051 003a 0020     		movs	r0, #0
 2052 003c 70BD     		pop	{r4, r5, r6, pc}
 2053              	.L148:
 2054 003e 00BF     		.align	2
 2055              	.L147:
 2056 0040 3FFFFF00 		.word	16777023
 2057              		.cfi_endproc
 2058              	.LFE148:
 2060              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2061              		.align	1
 2062              		.global	HAL_RTC_GetAlarm
 2063              		.syntax unified
 2064              		.thumb
 2065              		.thumb_func
 2066              		.fpu fpv5-sp-d16
 2068              	HAL_RTC_GetAlarm:
 2069              	.LFB152:
1537:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   uint32_t tmpreg = 0, subsecondtmpreg = 0;
 2070              		.loc 1 1537 0
 2071              		.cfi_startproc
 2072              		@ args = 0, pretend = 0, frame = 0
 2073              		@ frame_needed = 0, uses_anonymous_args = 0
 2074              	.LVL162:
 2075 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2076              	.LCFI17:
 2077              		.cfi_def_cfa_offset 24
 2078              		.cfi_offset 3, -24
 2079              		.cfi_offset 4, -20
 2080              		.cfi_offset 5, -16
 2081              		.cfi_offset 6, -12
ARM GAS  /tmp/cci5ScRN.s 			page 75


 2082              		.cfi_offset 7, -8
 2083              		.cfi_offset 14, -4
 2084              	.LVL163:
1544:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2085              		.loc 1 1544 0
 2086 0002 B2F5807F 		cmp	r2, #256
 2087 0006 34D0     		beq	.L154
1554:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 2088              		.loc 1 1554 0
 2089 0008 4FF40072 		mov	r2, #512
 2090              	.LVL164:
 2091 000c 8A62     		str	r2, [r1, #40]
1556:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2092              		.loc 1 1556 0
 2093 000e 0068     		ldr	r0, [r0]
 2094              	.LVL165:
 2095 0010 026A     		ldr	r2, [r0, #32]
 2096              	.LVL166:
1557:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 2097              		.loc 1 1557 0
 2098 0012 876C     		ldr	r7, [r0, #72]
 2099 0014 C7F30E07 		ubfx	r7, r7, #0, #15
 2100              	.LVL167:
 2101              	.L151:
1561:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8);
 2102              		.loc 1 1561 0
 2103 0018 C2F30744 		ubfx	r4, r2, #16, #8
 2104 001c 04F03F00 		and	r0, r4, #63
 2105 0020 0870     		strb	r0, [r1]
1562:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 2106              		.loc 1 1562 0
 2107 0022 C2F30626 		ubfx	r6, r2, #8, #7
 2108 0026 4E70     		strb	r6, [r1, #1]
1563:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 2109              		.loc 1 1563 0
 2110 0028 02F07F05 		and	r5, r2, #127
 2111 002c 8D70     		strb	r5, [r1, #2]
1564:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2112              		.loc 1 1564 0
 2113 002e 04F04004 		and	r4, r4, #64
 2114 0032 0C73     		strb	r4, [r1, #12]
1565:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 2115              		.loc 1 1565 0
 2116 0034 4F60     		str	r7, [r1, #4]
1566:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2117              		.loc 1 1566 0
 2118 0036 C2F30567 		ubfx	r7, r2, #24, #6
 2119              	.LVL168:
 2120 003a 81F82470 		strb	r7, [r1, #36]
1567:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 2121              		.loc 1 1567 0
 2122 003e 02F08044 		and	r4, r2, #1073741824
 2123 0042 0C62     		str	r4, [r1, #32]
1568:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 2124              		.loc 1 1568 0
 2125 0044 02F08032 		and	r2, r2, #-2139062144
 2126              	.LVL169:
ARM GAS  /tmp/cci5ScRN.s 			page 76


 2127 0048 8A61     		str	r2, [r1, #24]
1570:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   {
 2128              		.loc 1 1570 0
 2129 004a 83B9     		cbnz	r3, .L152
 2130 004c 0C46     		mov	r4, r1
1572:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2131              		.loc 1 1572 0
 2132 004e FFF7FEFF 		bl	RTC_Bcd2ToByte
 2133              	.LVL170:
 2134 0052 2070     		strb	r0, [r4]
1573:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2135              		.loc 1 1573 0
 2136 0054 3046     		mov	r0, r6
 2137 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2138              	.LVL171:
 2139 005a 6070     		strb	r0, [r4, #1]
1574:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2140              		.loc 1 1574 0
 2141 005c 2846     		mov	r0, r5
 2142 005e FFF7FEFF 		bl	RTC_Bcd2ToByte
 2143              	.LVL172:
 2144 0062 A070     		strb	r0, [r4, #2]
1575:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 2145              		.loc 1 1575 0
 2146 0064 3846     		mov	r0, r7
 2147 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2148              	.LVL173:
 2149 006a 84F82400 		strb	r0, [r4, #36]
 2150              	.LVL174:
 2151              	.L152:
1579:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 2152              		.loc 1 1579 0
 2153 006e 0020     		movs	r0, #0
 2154 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2155              	.LVL175:
 2156              	.L154:
1547:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c **** 
 2157              		.loc 1 1547 0
 2158 0072 8A62     		str	r2, [r1, #40]
1549:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 2159              		.loc 1 1549 0
 2160 0074 0068     		ldr	r0, [r0]
 2161              	.LVL176:
 2162 0076 C269     		ldr	r2, [r0, #28]
 2163              	.LVL177:
1550:Drivers/STM32F7xx_HAL_Driver/Src/stm32f7xx_hal_rtc.c ****   }
 2164              		.loc 1 1550 0
 2165 0078 476C     		ldr	r7, [r0, #68]
 2166 007a C7F30E07 		ubfx	r7, r7, #0, #15
 2167              	.LVL178:
 2168 007e CBE7     		b	.L151
 2169              		.cfi_endproc
 2170              	.LFE152:
 2172              		.text
 2173              	.Letext0:
 2174              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2175              		.file 3 "/usr/include/newlib/sys/_stdint.h"
ARM GAS  /tmp/cci5ScRN.s 			page 77


 2176              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 2177              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 2178              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 2179              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 2180              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2181              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc.h"
 2182              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 2183              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rtc_ex.h"
ARM GAS  /tmp/cci5ScRN.s 			page 78


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f7xx_hal_rtc.c
     /tmp/cci5ScRN.s:18     .text.HAL_RTC_MspInit:0000000000000000 $t
     /tmp/cci5ScRN.s:25     .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
     /tmp/cci5ScRN.s:40     .text.HAL_RTC_MspDeInit:0000000000000000 $t
     /tmp/cci5ScRN.s:47     .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
     /tmp/cci5ScRN.s:61     .text.HAL_RTC_DeactivateAlarm:0000000000000000 $t
     /tmp/cci5ScRN.s:68     .text.HAL_RTC_DeactivateAlarm:0000000000000000 HAL_RTC_DeactivateAlarm
     /tmp/cci5ScRN.s:209    .text.HAL_RTC_AlarmAEventCallback:0000000000000000 $t
     /tmp/cci5ScRN.s:216    .text.HAL_RTC_AlarmAEventCallback:0000000000000000 HAL_RTC_AlarmAEventCallback
     /tmp/cci5ScRN.s:230    .text.HAL_RTC_AlarmIRQHandler:0000000000000000 $t
     /tmp/cci5ScRN.s:237    .text.HAL_RTC_AlarmIRQHandler:0000000000000000 HAL_RTC_AlarmIRQHandler
     /tmp/cci5ScRN.s:307    .text.HAL_RTC_AlarmIRQHandler:000000000000005c $d
     /tmp/cci5ScRN.s:312    .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 $t
     /tmp/cci5ScRN.s:319    .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 HAL_RTC_PollForAlarmAEvent
     /tmp/cci5ScRN.s:382    .text.HAL_RTC_WaitForSynchro:0000000000000000 $t
     /tmp/cci5ScRN.s:389    .text.HAL_RTC_WaitForSynchro:0000000000000000 HAL_RTC_WaitForSynchro
     /tmp/cci5ScRN.s:440    .text.HAL_RTC_GetState:0000000000000000 $t
     /tmp/cci5ScRN.s:447    .text.HAL_RTC_GetState:0000000000000000 HAL_RTC_GetState
     /tmp/cci5ScRN.s:464    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/cci5ScRN.s:471    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/cci5ScRN.s:531    .text.HAL_RTC_Init:0000000000000000 $t
     /tmp/cci5ScRN.s:538    .text.HAL_RTC_Init:0000000000000000 HAL_RTC_Init
     /tmp/cci5ScRN.s:669    .text.HAL_RTC_Init:00000000000000a0 $d
     /tmp/cci5ScRN.s:674    .text.HAL_RTC_DeInit:0000000000000000 $t
     /tmp/cci5ScRN.s:681    .text.HAL_RTC_DeInit:0000000000000000 HAL_RTC_DeInit
     /tmp/cci5ScRN.s:847    .text.HAL_RTC_DeInit:00000000000000d8 $d
     /tmp/cci5ScRN.s:852    .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/cci5ScRN.s:859    .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/cci5ScRN.s:897    .text.HAL_RTC_SetTime:0000000000000000 $t
     /tmp/cci5ScRN.s:904    .text.HAL_RTC_SetTime:0000000000000000 HAL_RTC_SetTime
     /tmp/cci5ScRN.s:1101   .text.HAL_RTC_SetTime:00000000000000fc $d
     /tmp/cci5ScRN.s:1106   .text.HAL_RTC_SetDate:0000000000000000 $t
     /tmp/cci5ScRN.s:1113   .text.HAL_RTC_SetDate:0000000000000000 HAL_RTC_SetDate
     /tmp/cci5ScRN.s:1288   .text.HAL_RTC_SetDate:00000000000000d8 $d
     /tmp/cci5ScRN.s:1293   .text.HAL_RTC_SetAlarm:0000000000000000 $t
     /tmp/cci5ScRN.s:1300   .text.HAL_RTC_SetAlarm:0000000000000000 HAL_RTC_SetAlarm
     /tmp/cci5ScRN.s:1565   .text.HAL_RTC_SetAlarm_IT:0000000000000000 $t
     /tmp/cci5ScRN.s:1572   .text.HAL_RTC_SetAlarm_IT:0000000000000000 HAL_RTC_SetAlarm_IT
     /tmp/cci5ScRN.s:1869   .text.HAL_RTC_SetAlarm_IT:0000000000000194 $d
     /tmp/cci5ScRN.s:1876   .text.RTC_Bcd2ToByte:0000000000000000 $t
     /tmp/cci5ScRN.s:1883   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/cci5ScRN.s:1907   .text.HAL_RTC_GetTime:0000000000000000 $t
     /tmp/cci5ScRN.s:1914   .text.HAL_RTC_GetTime:0000000000000000 HAL_RTC_GetTime
     /tmp/cci5ScRN.s:1984   .text.HAL_RTC_GetTime:0000000000000054 $d
     /tmp/cci5ScRN.s:1989   .text.HAL_RTC_GetDate:0000000000000000 $t
     /tmp/cci5ScRN.s:1996   .text.HAL_RTC_GetDate:0000000000000000 HAL_RTC_GetDate
     /tmp/cci5ScRN.s:2056   .text.HAL_RTC_GetDate:0000000000000040 $d
     /tmp/cci5ScRN.s:2061   .text.HAL_RTC_GetAlarm:0000000000000000 $t
     /tmp/cci5ScRN.s:2068   .text.HAL_RTC_GetAlarm:0000000000000000 HAL_RTC_GetAlarm

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RTCEx_AlarmBEventCallback
SystemCoreClock
